=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.29.2

=head1 DESCRIPTION

This document describes differences between the cperl 5.29.2 and the cperl
5.29.1 release.

If you are upgrading from an earlier release such as v5.29.0c, first read
L<perl5291cdelta>, which describes differences between v5.29.0c and v5.29.1c.

=head1 Core Enhancements

=head2 Unicode 12.0 is supported

For details, see L<https://www.unicode.org/versions/Unicode12.0.0/>.

The Word_Break property, as in past Perl releases, remains tailored to
behave more in line with expectations of Perl users.  This means that
sequential runs of horizontal white space characters are not broken
apart, but kept as a single run.  Unicode 11 changed from past versions
to be more in line with Perl, but it left several white space characters
as causing breaks: TAB, NO BREAK SPACE, and FIGURE SPACE (U+2007).  We
have decided to continue to use the previous Perl tailoring with regards
to these.

As of July 2018, another aspect of Unicode 11.0 is causing problems,
and that is the changing the Georgian script to have both lower and
uppercase letters.  It turns out that many devices do not have fonts
installed that can display the new uppercase letters, and people using
Georgian are finding their text more or less illegible.  It is being
suggested that implementations delay their adoption of this portion of
11.0. But since the next stable release of Perl is almost a year away,
this aspect of 11.0 is being left in, with the option to back it out
if things haven't improved by that time, or if we get too many
complaints about the development release being unusable for Georgian
users.

Because of a change in Unicode release cycles, Perl jumps from Unicode
10.0 in Perl 5.28 to Unicode 12.0 in Perl 5.30.

There are few new scripts: Elymaic, Nandinagari,
Nyiakeng_Puachue_Hmong (Hmnp), Wancho, all of them not available
for identifiers.

=head2 Handle qr!\p{nv=6/8}!

Allow a rational number specified in looking up the Numeric
Value Unicode property to not be in lowest possible terms.

The Numeric Value property allows one to find all code points that have
a certain numeric value.  An example would be to match against any
character in any of the world's scripts which is effectively equivalent
to the digit zero.

We accept either integers (like C<\p{nv=9}>) or rationals (like C<\p{nv=1/2}>).
But we also accept floating point representations in case a conversion to numeric
has happened, (like C<\p{nv=0.5}>).
The necessary precision is now automatically pre-calculated and the lookup
normalized.

=head2 The upper limit C<"n"> specifiable in a regular expression
quantifier of the form C<"{m,n}"> has been doubled to 65534

The upper limit C<"n"> specifiable in a regular expression
quantifier of the form C<"{m,n}"> has also been doubled to 65534.

The meaning of an unbounded upper quantifier C<"{m,}"> remains unchanged.
It matches 2**31 - 1 times on most platforms, and more on ones where a C
language short variable is more than 4 bytes long.

=head2 C<-Drv> now means something on C<-DDEBUGGING> builds

Now, adding the verbose flag (C<-Dv>) to the C<-Dr> flag turns on all
possible regular expression debugging, as with C<use re 'debug';>. See L<re>.

=head2 Eliminated optree recursion

Eliminated recursion from internal C<finalize_op()> and C<optimize_op()>,
avoiding segfaults with extremely nested ops.
E.g. with

    perl -e 'my $line = "\$cond ? \$a : \n";
             my $code = ($line x 100000) . "\$b;\n";
             eval $code;'

Contrary to what is said in the relevant perldelta,
your code is now slower.
Before it crashed with a segfault, now it does much more.
The regular case is also slower due to stack handling on the heap,
similar to the regexp changes in 5.10.
L<[perl #108276]|https://rt.perl.org/Ticket/Display.html?id=108276>.

=head2 Turkic UTF-8 locales are now seamlessly supported

Turkic languages have different casing rules than other languages for
the characters C<"i"> and C<"I">.  The uppercase of C<"i"> is LATIN
CAPITAL LETTER I WITH DOT ABOVE (U+0130); and the lowercase of C<"I"> is LATIN
SMALL LETTER DOTLESS I (U+0131).  Unicode furnishes alternate casing
rules for use with Turkic languages.  Previously, Perl ignored these,
but now, it uses them when it detects that it is operating under a
Turkic UTF-8 locale.

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head2 Disallowed Limited Use Scripts

The list of valid scripts for identifiers was purged from all
B<Limited Use> scripts from
L<http://www.unicode.org/reports/tr31/#Table_Limited_Use_Scripts>.
They fail now.

Unicode 10.0 started disallowing all Aspirational Use Scripts, but
we didn't handle them at all.
I<Table 4. Candidate Characters for Exclusion from Identifiers> scripts
are still allowed, and still need to be explicitly enabled as a C<use utf8>
argument.

=head1 Incompatible Changes

=head2 Assigning non-zero to C<$[> is fatal

Setting L<< C<$[>|perlvar/$[ >> to a non-zero value has been deprecated since
Perl 5.12 and now throws a fatal error.
See L<<< perldeprecation/Assigning non-zero to C<< $[ >> is fatal >>>.

=head2 Previously deprecated sysread()/syswrite() on :utf8 handles now fatal

Calling sysread(), syswrite(), send() or recv() on a C<:utf8> handle,
whether applied explicitly or implicitly, is now fatal.  This was
deprecated in perl 5.24.

There were two problems with calling these functions on C<:utf8>
handles:

=over

=item *

All four functions only paid attention to the C<:utf8> flag.  Other
layers were completely ignored, so a handle with
C<:encoding(UTF-16LE)> layer would be treated as UTF-8.  Other layers,
such as compression are completely ignored with or without the
C<:utf8> flag.

=item *

sysread() and recv() would read from the handle, skipping any
validation by the layers, and do no validation of their own.  This
could lead to invalidly encoded perl scalars.

=back

L<[perl #125760]|https://rt.perl.org/Public/Bug/Display.html?id=125760>

=head2 my() in false conditional prohibited

Declarations such as C<my $x if 0> are no longer permitted.
This feature was deprecated in 5.10 (and replaced by two better constructs,
one of it backwards compatible) and is now a fatal error.
L<[perl #133543]|https://rt.perl.org/Public/Bug/Display.html?id=133543>

Note: cperl does not agree that this feature is a bug, but this ship
sailed already over a decade ago.

=head2 Fatalize $* and $#

These special variables, long deprecated, now throw an error when used.
See L<perldiag/"$* is no longer supported as of Perl 5.30"> and
L<perldiag/"$# is no longer supported as of Perl 5.30">.
L<[perl #133583]|https://rt.perl.org/Public/Bug/Display.html?id=133583>

=head2 Fatalize unqualified use of dump()

The C<dump()> function, long discouraged, may no longer be used unless it is
fully qualified, I<i.e.>, C<CORE::dump()>.

L<[perl #133584]|https://rt.perl.org/Public/Bug/Display.html?id=133584>

=head2 Remove File::Glob::glob()

The C<File::Glob::glob()> function, long deprecated, has been removed and now
throws an exception which advises use of C<File::Glob::bsd_glob()> instead.

L<[perl #133586]|https://rt.perl.org/Public/Bug/Display.html?id=133586>

=head1 Deprecations

=head2 Remove support for C<qr/\p{_Case_Ignorable}>

This property is no longer used in the core, nor in cpan, and is marked
as for core use only, not necessarily stable.  I have kept it around
because it was work to remove it, but now the revamping of the property
lookup scheme was causing failures with it, when compiling on early
Unicode releases.  That could be fixed with extra work, but simply
removing it also fixes the problem and avoids future maintenance
costs.

=head2 Remove support for C<qr/\p{_Comb_Above}>

This property is no longer used in the core, nor in cpan, and is marked
as for core use only, not necessarily stable.  I have kept it around
because it was work to remove it, but now the revamping of the property
lookup scheme was causing failures with a similar property, and the
previous commit removed that one.

=head2 Remove support for C<qr/\p{_CanonDCIJ}>

The property is not used in cpan, and is being removed as part of the cleanup
instigated because another of the 3 would
require extra code to handle if we were to keep it around.

=head1 Performance Enhancements

=over 4

=item *

Optimization of C<IV> to C<UV> conversions.
L<[perl #133677]|https://rt.perl.org/Ticket/Display.html?id=133677>.

=item *

Speed up of the integer stringification algorithm by processing
two digits at a time instead of one.
L<[perl #133691]|https://rt.perl.org/Ticket/Display.html?id=133691>.

=item *

Minor improvements based on LGTM analysis and recommendation.
(L<https://lgtm.com/projects/g/Perl/perl5/alerts/?mode=tree>).
L<[perl #133686]|https://rt.perl.org/Ticket/Display.html?id=133686>.
L<[perl #133699]|https://rt.perl.org/Ticket/Display.html?id=133699>.

=item *

Improved Unicode numeric property lookups, for C<\p{nv=float}>,
in size and speed by using more pre-compiled perfect hashes instead
of slow pure-perl invlist walks at run-time, esp. for all numeric
properties (70 more).
Also avoids more swash creations.

=item *

Translating from UTF-8 into the code point it represents now is done via a
deterministic finite automaton, speeding it up.  As a typical example,
C<ord("\x7fff")> now requires 12% fewer instructions than before.  The
performance of checking that a sequence of bytes is valid UTF-8 is similarly
improved, again by using a dfa.

=item *

Code optimizations in F<regcomp.c>, F<regcomp.h>, F<regexec.c>.

The second regcomp pass was removed.

=item *

The handling of user-defined C<\p{}> properties (see
L<perlunicode/User-Defined Character Properties>) has been rewritten
to be in C (instead of Perl).  This removed all uses of swashes from
regular expression compilation and execution.

This speeds things up, but in the process several inconsistencies and
bug fixes are made.

=over

=item 1

A few error messages have minor wording changes.  This is essentially
because the new way is integrated into the regex error handling
mechanism that marks the position in the input at which the error
occurred.  That was not possible previously.  The messages now also
contain additional back-trace-like information in case the error occurs
deep in nested calls.

=item 2

A user-defined property is implemented as a perl subroutine with certain
highly constrained naming conventions.  It was documented previously
that the sub would be in the current package if the package was
unspecified.  This turned out not to be true in all cases, but now it
is.

=item 3

All recursive calls are treated as infinite recursion.  Previously they
would cause the interpreter to panic.  Now, they cause the regex pattern
to fail to compile.

=item 4

Similarly, any other error likely would lead to a panic; now to just the
pattern failing to compile.

=item 5

The old mechanism did not detect illegal ranges in the definition of the
property.  Now, the range max must not be smaller than the range min.
Otherwise, the pattern fails to compile.

=item 6

The intention was to have each sub called only once during the lifetime
of the program, so that a property's definition is immutable.  This was
relaxed so that it could be called once for all /i compilations, and
potentially a second time for non-/i (the sub is passed a parameter
indicating which).  However, in practice there were instances when this
was broken, and multiple calls were possible.  Those have been fixed.
Now (besides the /i,non-/i cases) the only way a sub can be called
multiple times is if some component of it has not been defined yet.  For
example, suppose we have sub IsA() whose definition is known at compile
time, and it in turn calls isB() whose definition is not yet known.
isA() will be called each time a pattern it appears in is compiled.  If
isA() also calls isC() and that definition is known, isC() will be
called just once.

=item 7

There were some races and very long hangs should one thread be compiling
the same property as another simultaneously.  These have now been fixed.

=back

=back

=head1 Modules and Pragmata

The list of new and updated modules is modified automatically as part of
preparing a Perl release, so the only reason to manually add entries here is if
you're summarising the important changes in the module update. (Also, if the
manually-added details don't match the automatically-generated ones, the
release manager will have to investigate the situation carefully.)

=head2 Updated Modules and Pragmata

=over 4

=item L<B> 1.76_10

Fixed for -DPERL_GLOBAL_STRUCT

=item L<B::C> 1.57_01

New major release, with dVAR support and
experimental cross support and -m (module) support.
Add $dynamic_copwarn needed for v5.29.7+ (not cperl).

=item L<B::Deparse> 1.49_05c

Removed arybase support.

=item L<bytes> 1.07

Typo in pod

=item L<Config> 6.23

Add the FREEBSD_KERNEL_VERSION key for FreeBSD.

=item L<Config::Extensions> 0.03

Whitespace only

=item L<Data::Dumper> 2.173

no changes

=item L<deprecate> 0.04_01

expanded the documentation

=item L<Devel::Peek> 1.28_03

adjust Devel::Peek pod to cperl FLAGS

=item L<Devel::NYTProf> 6.06_02

simplify pp_subcall_profiler op_type check.

=item L<Encode>  3.01

Add C<Encode::ONLY_PRAGMA_WARNINGS> by default to C<:encoding> layer
variable C<$PerlIO::encoding::fallback>.

ONLY_PRAGMA_WARNINGS reports only those warnings which are
currently enabled by pragma warnings. When ONLY_PRAGMA_WARNINGS
is not set then Encode would report all warnings.
ONLY_PRAGMA_WARNINGS would have no effect when flag
ENCODE_WARN_ON_ERR is not set.

=item L<Errno> 1.30_01

Make F<Errno_pm.PL> compatible with F<< /usr/include/<ARCH>/errno.h >>

=item L<ExtUtils::ParseXS>

(perl #133654) don't include OUTLIST parameters in the prototype:
The generated prototype (with PROTOTYPES: ENABLE) would include
OUTLIST parameters, but these aren't arguments to the perl function.

=item L<feature> 1.54_01

C<array_base> was removed.

=item L<File::Copy> 2.34

Add note to close or flush filehandles before calling copy or move.

=item L<File::Find> 1.36

C<$File::Find::dont_use_nlink> now defaults to 1 on all platforms.
Fixes L<[perl #133673]|https://rt.perl.org/Public/Bug/Display.html?id=133673>,
L<[perl #128894]|https://rt.perl.org/Public/Bug/Display.html?id=128894>,
and L<[perl #126144]|https://rt.perl.org/Public/Bug/Display.html?id=126144>.

=item L<File::Glob> 1.32

Fatalized File::Glob::glob(), which was deprecated since 5.8. However,
no deprecation message was issued; only perl5.008delta.pod and a
comment in the file mention its deprecation. The warnings was added
with v5.25.10.

=item L<GDBM_File> 1.18

Add SECURITY AND PORTABILITY warning paragraph to pod.

=item L<NDBM_File> 1.15

Add SECURITY AND PORTABILITY warning paragraph to pod.

=item L<ODBM_File> 1.16

Add SECURITY AND PORTABILITY warning paragraph to pod.

=item L<SDBM_File> 1.15

Add SECURITY AND PORTABILITY warning paragraph to pod.

=item L<lib> 0.65

Hint about $dir/$version is checked by lib.pm and deleted from @INC

=item L<IO> 1.40_02

Skip EINVAL on FreeBSD tests when binding a tcp listener on localhost.

=item L<IO::Socket::IP> 0.39_03

Allow ETIMEDOUT on FreeBSD INET6 socket with V6Only true.
L<[cpan #128986]|https://rt.cpan.org/Ticket/Display.html?id=128986>

=item L<IO::Zlib> 1.10_01

Fixed parallel testing
L<[cpan #105700]|https://rt.cpan.org/Ticket/Display.html?id=1105700>

probe for more external gzips, make t/external.t strict safe.

=item L<Net::Ping> 2.72

Features

Allow data_size > 1024, up to 65535, i.e. fragmented packets.
It is recommended to stay below 1472 though for the typical 1500 MTU.
Many simple devices do not allow fragmented ICMP packets (> 1472).
L<[cpan #17409]|https://rt.cpan.org/Ticket/Display.html?id=17409>

Bugfixes

Fix the max_datasize documentation

Test fixes

The 2 sudo tests on PERL_CORE with a shared perl lib.
Skip failing freebsd localhost resolver tests.

=item C<PathTools> 4.77c

Don't translate F<...> to F<..\..> on Win32.
(an old C<command.com> limitation)
L<[perl #123724]|https://rt.perl.org/Public/Bug/Display.html?id=123724>

=item L<PerlIO::encoding> 0.27_01

Warnings enabled by setting the C<WARN_ON_ERR> flag in
C<$PerlIO::encoding::fallback> are now only produced if warnings are
enabled with C<use warnings "utf8";> or setting C<$^W>.
L<[perl #131683]|https://rt.perl.org/Public/Bug/Display.html?id=131683>

=item L<PerlIO::scalar> 0.30

Allow Off_t smaller than size_t. (Win64 with USE_LARGE_FILES=undef)
L<[perl #133422]|https://rt.perl.org/Public/Bug/Display.html?id=133422>

=item F<perldb.pl> 1.54_03c

Typos in pod.

=item L<POSIX> 1.87_03

Use quadmath versions of log10, ldexp and signbit.
L<[perl #133510]|https://rt.perl.org/Public/Bug/Display.html?id=133510>

F<stdio.h> on Cygwin doesn't expose C<cuserid> with C<_GNU_SOURCE>

=item L<re> 0.37_01

Document C<-Drv>

=item L<Safe> 2.40_03c

Fix a test for CORE::dump

=item L<sigtrap> 1.09

Adapt for layers on STDERR, which failed if PERL_UNICODE was set and the
current locale was a UTF-8 locale.

=item L<Socket> 2.027_05

re-order and comment deprecated IDN constants.

=item L<Storable> 3.14_04

Fix and clarify handling of recurs_sv.
L<[perl #133326]|https://rt.perl.org/Public/Bug/Display.html?id=133326>

Remove exploit code from the pod, which triggered
virus scanners. Note that the perl5 release did that wrong.
L<[perl #133706]|https://rt.perl.org/Public/Bug/Display.html?id=133706>

Keep Storable::Limit, in opposition to L<[perl #133708]|https://rt.perl.org/Public/Bug/Display.html?id=133708>.
Not my idea, but removing it is even worse. The ticket goal is fine,
but the implementation not.

=item L<Time::HiRes> 1.9760_02

make utime() available only if we have both fd and name setting
L<[perl #133030]|https://rt.perl.org/Public/Bug/Display.html?id=133030>

Adjust Makefile.PL for windows: the DEFINE() in Makefile.PL
can't be be in sub init() because that sub isn't called on windows

t/itimer.t: avoid race condition. don't truncate nanosec utime

fallback/const-c.inc: Avoid compiler warning showing up on darwin.

=item L<Unicode::UCD> 0.71_03

Preserve old-style casing for C<%SCRIPTS>, i.e.
C<Egyptian_hieroglyphs> for C<Egyptian_Hieroglyphs>.

=item L<vars> 1.05_01c

F<vars.pm> no longer disables non-vars strict when checking if strict
vars is enabled.
L<[perl #130674]|https://rt.perl.org/Public/Bug/Display.html?id=130674>

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

L<arybase> was removed.

Setting C<$[> to a non-zero value has been deprecated since Perl 5.12 and
throws a fatal error as of Perl 5.30.
See L<perldeprecation/Assigning non-zero to C<< $[ >> is fatal>

=item *

L<B::Debug> is no longer distributed with the core distribution.
This was announced with v5.28.0. It remains available on CPAN.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, send email
to L<perlbug@perl.org|mailto:perlbug@perl.org>.

Additionally, the following selected changes have been made:

=head3 L<perlvar>

=over 4

=item *

More specific documentation of paragraph mode.
L<[perl #133722]|https://rt.perl.org/Ticket/Display.html?id=133722>.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Invalid script %s in identifier %s for U+%X, Limited Use scripts are forbidden|perldiag/"Invalid script %s in identifier %s for U+%X, Limited Use scripts are forbidden">
See L</"Disallowed Limited Use Scripts">.

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

cperl fatalized the error on non-grapheme string delimiters (ie. illegal utf8)
in v5.25.3c already, e.g with C<qr ̂foobar̂>.
perl5 did it with v5.29.0 but used 3 error lines instead of just one.

"Use of unassigned code point or non-standalone grapheme for a delimiter"
uses now 3 lines:
"Use of unassigned code point or non-standalone grapheme for a delimiter is not allowed at -, near"
"Use of unassigned code point or non-standalone grapheme for a delimiter is not allowed at -, near"
"Execution of - aborted due to compilation errors."

=item *

cperl fatalized Limited_Use scripts in identifiers with v5.29.2c, they
were valid before and acted like %utf8::EXCLUDED_SCRIPTS, i.e. they
needed to be declared. Now they throw the
L<Invalid script %s in identifier %s for U+%X, Limited Use scripts are forbidden|perldiag/"Invalid script %s in identifier %s for U+%X, Limited Use scripts are forbidden"> error.
See L</"Disallowed Limited Use Scripts">.

=back

=head1 Configuration and Compilation

=over 4

=item *

Avoid bumping F<config.sh>/F<config.h> mtimes when adding valid libffi
targets in F<configpm>.  This caused massive miniperl rebuilds, but
is only needed for perl-dependent targets much later.

=back

=head1 Testing

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

=over 4

=item *

All modules can now be tested in parallel.
From the remaining exceptions F<ext/Pod-Html/t> was fixed a while ago,
and F<cpan/IO-Zlib/t> with this release.

We also removed the remaining exception for files starting with 0.
We assumed before that the reason a test file's name begins with a 0 is to
order its execution among the tests in its directory.  Hence, a
directory containing such files should be tested in serial order.
But in reality there's no such F<t/00-setup.t> test and if so, it would still
be run as very first test. CPAN testing via EUMM and Test::Harness does
not obey this rule neither.
The only module to be fixed was F<ext/FileCache/t>.
cperl-only.

=item *

F<t/TEST> does not need any temp_needs_dot exceptions anymore.
All core modules are now . in @INC clean.
The only module to be fixed was F<cpan/libnet/t>.
cperl-only.

=item *

Thoroughly test paragraph mode, using a new test file,
F<t/io/paragraph_mode.t>.
L<[perl #133722]|https://rt.perl.org/Ticket/Display.html?id=133722>.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Mac OS X

Perl's build and testing process on Mac OS X for C<-Duseshrplib>
builds is now compatible with Mac OS X System Integrity Protection
(B<SIP>).

SIP prevents binaries in F</bin> (and a few other places) being passed
the C<DYLD_LIBRARY_PATH> environment variable.  For our purposes this
prevents C<DYLD_LIBRARY_PATH> from being passed to the shell, which
prevents that variable being passed to the testing or build process,
so running C<perl> couldn't find F<libcperl.dylib>.

To workaround that, the initial build of the F<perl> executable
expects to find F<libcperl.dylib> in the build directory, and the
library path is then adjusted during installation to point to the
installed library.

L<[perl #126706]|https://rt.perl.org/Public/Bug/Display.html?id=126706>

=item Win32

=over 4

=item *

C<sleep()> with warnings enabled for a C<USE_IMP_SYS> build no longer
warns about the sleep timeout being too large.
L<[perl #133376]|https://rt.perl.org/Public/Bug/Display.html?id=133376>

=back

=item Linux

=over 4

=item *

The hints now detect newer compilers and set optimize=-O3 by default,
needed for better -flto and inlining support, instead of -O2.

=back

=item FreeBSD

=over 4

=item *

Added F</usr/local/include> to C<incpth>, which helps probing libffi during F<configpm>.
If was only in ccflags via C<-I>.

=item *

Fixed wrong clang C<llvm-ar$llvmsuffix> and C<arflags>. BSD ar is fine to use C<-D>.

=item *

Improved clang -flto support, set default optimize to -O3.
-flto still needs the extra gold linker from a clang/llvm ports package
for static archives.

=back

=item AIX

=over 4

=item *

Fix 'for reverse @array' bug on AIX.
L<[perl #133558]|https://rt.perl.org/Public/Bug/Display.html?id=133558>

=back

=back

=head1 Internal Changes

=over 4

=item *

The first sizing pass has been eliminated from the regular expression
compiler.  An extra pass may instead be needed in some cases to count
the number of parenthetical capture groups.

=item *

Added C<my_atof3()> to support parsing strings which are not necessarily
NUL-terminated to an NV.
C<grok_atoUV> supports that too now.

=item *

It is now forbidden to malloc more than C<PTRDIFF_T_MAX> bytes.  Much
code (including C optimizers) assumes that all data structures will not
be larger than this, so this catches such attempts before overflow
happens.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Regular expression matching no longer leaves stale UTF-8 length magic
when updating C<$^R>. This could result in C<length($^R)> returning
an incorrect value.

=item *

Fixed a failure to match properly.

An EXACTFish regnode has a finite length it can hold for the string
being matched.  If that length is exceeded, a second node is used for
the next segment of the string, for as many regnodes as are needed.
Care has to be taken where to break the string, in order to deal
multi-character folds in Unicode correctly. If we want to break a
string at a place which could potentially be in the middle of a
multi-character fold, we back off one (or more) characters, leaving
a shorter EXACTFish regnode. This backing off mechanism contained
an off-by-one error. L<[perl #133756]|https://rt.perl.org/Ticket/Display.html?id=133756>.

=item *

A bare C<eof> call with no previous file handle now returns true.
L<[perl #133721]|https://rt.perl.org/Ticket/Display.html?id=133721>

=item *

Failing to compile a format now aborts compilation.  Like other errors
in sub-parses this could leave the parser in a strange state, possibly
crashing perl if compilation continued.
L<[perl #132158]|https://rt.perl.org/Ticket/Display.html?id=132158>

=item *

If an in-place edit is still in progress during global destruction and
the process exit code (as stored in C<$?>) is zero, perl will now
treat the in-place edit as successful, replacing the input file with
any output produced.

This allows code like:

  perl -i -ne 'print "Foo"; last'

to replace the input file, while code like:

  perl -i -ne 'print "Foo"; die'

will not.  Partly resolves
L<[perl #133659]|https://rt.perl.org/Ticket/Display.html?id=133659>.

=item *

A regression in 5.28 caused the following code to fail

 close(STDIN); open(CHILD, "|wc -l")'

because the child's stdin would be closed on exec. This has now been fixed.

=item *

Fixed an issue where compiling a regexp containing both compile-time
and run-time code blocks could lead to trying to compile something
which is invalid syntax.

=item *

Fixed build failures with C<< -DNO_LOCALE_NUMERIC >> and
C<< -DNO_LOCALE_COLLATE >>.
L<[perl #133696]|https://rt.perl.org/Ticket/Display.html?id=133696>.

=item *

Prevent the tests in F<< ext/B/t/strict.t >> from being skipped.
L<[perl #133713]|https://rt.perl.org/Ticket/Display.html?id=133713>.

=item *

C<< /di >> nodes ending or beginning in I<s> are now C<< EXACTF >>. We do not
want two C<< EXACTFU >> to be joined together during optimization,
and to form a C<< ss >>, C<< sS >>, C<< Ss >> or C<< SS >> sequence;
they are the only multi-character sequences which may match differently
under C<< /ui >> and C<< /di >>.

=item *

L<SDBM_File> is now more robust with corrupt database files.  The
improvements do not make SDBM files suitable as an interchange format.
L<[perl #132147]|https://rt.perl.org/Public/Bug/Display.html?id=132147>

=item *

C<binmode($fh);> or C<binmode($fh, ':raw');> now properly removes the
C<:utf8> flag from the default C<:crlf> I/O layer on Win32.
L<[perl #133604]|https://rt.perl.org/Public/Bug/Display.html?id=133604>

=item *

C<pack "u", "invalid uuencoding"> now properly NUL terminates the
zero-length SV produced.
L<[perl #132655]|https://rt.perl.org/Public/Bug/Display.html?id=132655>

=item *

The new in-place editing code no longer leaks directory handles.
L<[perl #133314]|https://rt.perl.org/Public/Bug/Display.html?id=133314>

=item *

If an in-place edit is still in progress during global destruction and
the process exit code (as stored in C<$?>) is zero, perl will now
treat the in-place edit as successful, replacing the input file with
any output produced.

This allows code like:

  perl -i -ne 'print "Foo"; last'

to replace the input file, while code like:

  perl -i -ne 'print "Foo"; die'

will not.  Partly resolves
L<[perl #133659]|https://rt.perl.org/Ticket/Display.html?id=133659>.

=item *

Warnings produced from constant folding operations on overloaded
values no longer produce spurious "Use of uninitialized value"
warnings.
L<[perl #132683]|https://rt.perl.org/Public/Bug/Display.html?id=132683>

=item *

Fix for multiconcat "mutator not seen in (lex = ...) .= ..."
L<[perl #133441]|https://rt.perl.org/Public/Bug/Display.html?id=133441>

=item *

Detect more L<perldiag/"This use of C<my()> in a false conditional"> cases,
esp. scalar assignments like C<my $x = 0 if 0;>
L<[perl #133543]|https://rt.perl.org/Public/Bug/Display.html?id=133543>

=item *

Regexp script runs were failing to permit ASCII digits in some cases.
L<[perl #133547]|https://rt.perl.org/Public/Bug/Display.html?id=133547>

=item *

Improve the debugging output for calloc() calls with C<-Dm>.
L<[perl #133439]|https://rt.perl.org/Public/Bug/Display.html?id=133439>

=item *

On Unix-like systems supporting a platform-specific technique for
determining L<< C<$^X>|perlvar/$^X >>, Perl failed to fall back to the
generic technique when the platform-specific one fails (for example, a Linux
system with F</proc> not mounted).  This was a regression in Perl 5.28.0.
L<[perl #133573]|https://rt.perl.org/Public/Bug/Display.html?id=133573>

=item *

The experimental reference aliasing feature was misinterpreting array and
hash slice assignment as being localised, e.g.

    \(@a[3,5,7]) = \(....);

was being interpreted as:

    local \(@a[3,5,7]) = \(....);

L<[perl #133538]|https://rt.perl.org/Public/Bug/Display.html?id=133538>

=back

=head1 Known Problems

=over 4

=item *

Latest msys2 gcc compiler fails on two tests: F<op/sort.t> and
F<op/signatures.t>.

=back

=head1 Acknowledgements

cperl 5.29.2 represents approximately 3 months of development since cperl
5.29.1c and contains approximately 350,000 lines of changes across 500 files
from 42 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 320,000 lines of changes to 270 .pm, .t, .c and .h files.

The following people are known to have contributed the improvements that
became cperl 5.29.2:

Karl Williamson, Reini Urban, Tony Cook, James E Keenan, David Mitchell,
Sisyphus, Steve Hay, H.Merijn Brand, Dagfinn Ilmari Mannsåker, Tomasz
Konojacki, Daniel Dragan, Andy Dougherty, Eugen Konkov, Craig A. Berry,
Aaron Crane, Nicolas Rochelemagne, Abigail, Niko Tyni, Slaven Rezic, Chris
'BinGOs' Williams, Sawyer X, Phil Pearl (Lobbes), Leon Timmermans, Alexandr
Savca, Matthias Bethke, David Cantrell, Shlomi Fish, Dan Dedrick, Unicode
Consortium, Yves Orton, Tina Müller, James Clarke, Petr Písař, Graham
Knop, François Perrad, Hauke D, E. Choroba, Karen Etheridge, Hugo van der
Sanden, John SJ Anderson, Pali, Jim Cromie.

The list above is almost certainly incomplete as it is automatically
generated from version control history including the perl and cperl repos.
In particular, it does not include the names of the (very much appreciated)
contributors who reported issues to the Perl bug tracker and the cperl
github issues.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

Generated with:

    cperl Porting/acknowledgements.pl cperl-5.29.1..HEAD -c

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
