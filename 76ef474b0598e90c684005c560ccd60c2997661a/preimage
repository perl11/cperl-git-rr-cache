<<<<<<<
#!/bin/bash
# cperl rebase all branches above master.
# before git push cp -f (update all dependent branches)
# now also with cp-rbi functionality with -i
# ./cp-rb 1 (does 1 skip)
if [ x$1 = x-f ]; then force=1; shift; fi
if [ x$1 = x--hard ]; then hard=1; shift; fi
if [ x$1 = x-i ]; then interactive=--interactive; shift; fi
case $1 in
    [0-9]*) rbs=$1; shift;;
esac

#set -e

function rb {
    b=$1
    m=$2
    echo git rebase $m --onto $b
    if [ -n $force ]; then git checkout -f $b; fi
    git checkout $b && git rebase $interactive $m
    if [ x$? != x0 ]; then
        # if the rb exit happens in an old to be merged commit, do a --skip (g rbs),
        # optionally execute ARG1 skips ($rbs)
        # if it happens in the new branch, resolve it manually
        if [ x$rbs != x ]; then
            echo git rebase --skip $rbs x
            for i in `seq 1 $rbs`; do
                git rebase --skip
            done
        fi
    fi
    if [ -e .git/rebase-apply/patch ]; then
       exit
    fi
    git checkout branch-point
}

function rbb {
    rb $1 branch-point
}

# merge-upstream - master - branch-point
# we work above branch-point and move stable tress to master

# not yet merged features or bugfixes, branched of from branch-point or merge-upstream
git checkout branch-point
rb branch-point master
for b in `git branch --no-color | egrep '(bugfix|compiler|feature)/'`; do
    if [ -n $hard ]; then git reset --hard; fi
    rb $b branch-point
done

# memory branches:
rb featurex/CM-367-cperl-warnings-xs-carp feature/CM-367-cperl-carp-builtin

# speed and feature list: our previous pretty stable branch linear hierarchy
rb featurex/gh16-multi feature/gh7-signatures

# (for later deeper subtrees)
#declare -a feat
#feat=(feature/gh7-signatures
#      featurex/gh16-multi
#     )
#N=${#feat[@]}
#for i in `seq 0 $(($N - 2))`; do
#    n=$(($i + 1))
#    rb ${feat[$n]} ${feat[$i]}
#done

# defunct:
#rb old/gh7-signatures3-gh25-nl  feature/gh7-signatures
#rb old/gh7-signatures3-gh25-nl1 feature/gh7-signatures

git checkout branch-point
git branch | egrep 'branch-point|master|bugfix/|feature'
=======
#!/bin/bash
# cperl rebase all branches above master.
# before git push cp -f (update all dependent branches)
# now also with cp-rbi functionality with -i
# ./cp-rb 1 (does 1 skip)
if [ x$1 = x-f ]; then force=1; shift; fi
if [ x$1 = x--hard ]; then hard=1; shift; fi
if [ x$1 = x-i ]; then interactive=--interactive; shift; fi
case $1 in
    [0-9]*) rbs=$1; shift;;
esac

#set -e

function rb {
    b=$1
    m=$2
    echo git rebase $m --onto $b
    if [ -n $force ]; then git checkout -f $b; fi
    git checkout $b && git rebase $interactive $m
    if [ x$? != x0 ]; then
        # if the rb exit happens in an old to be merged commit, do a --skip (g rbs),
        # optionally execute ARG1 skips ($rbs)
        # if it happens in the new branch, resolve it manually
        if [ x$rbs != x ]; then
            echo git rebase --skip $rbs x
            for i in `seq 1 $rbs`; do
                git rebase --skip
            done
        fi
    fi
    if [ -e .git/rebase-apply/patch ]; then
       exit
    fi
    git checkout branch-point
}

function rbb {
    rb $1 branch-point
}

# merge-upstream - master - branch-point
# we work above branch-point and move stable tress to master

# not yet merged features or bugfixes, branched of from branch-point or merge-upstream
git checkout branch-point
rb branch-point master
for b in `git branch --no-color | egrep '(bugfix|compiler|feature)/'`; do
    if [ -n $hard ]; then git reset --hard; fi
    rb $b branch-point
done

for b in `git branch --no-color | grep 'smoke/'`; do
    if [ -n $hard ]; then git reset --hard; fi
    rb $b master
done

# memory branches:
rb featurex/CM-367-cperl-warnings-xs-carp feature/CM-367-cperl-carp-builtin

# speed and feature list: our previous pretty stable branch linear hierarchy
rb featurex/gh16-multi feature/gh7-signatures

# (for later deeper subtrees)
#declare -a feat
#feat=(feature/gh7-signatures
#      featurex/gh16-multi
#     )
#N=${#feat[@]}
#for i in `seq 0 $(($N - 2))`; do
#    n=$(($i + 1))
#    rb ${feat[$n]} ${feat[$i]}
#done

# defunct:
#rb old/gh7-signatures3-gh25-nl  feature/gh7-signatures
#rb old/gh7-signatures3-gh25-nl1 feature/gh7-signatures

git checkout branch-point
git branch | egrep 'branch-point|master|bugfix/|feature|smoke/'
>>>>>>>
