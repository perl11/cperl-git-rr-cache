<<<<<<<
#!/bin/bash
# cperl rebase --interactive all our branches
# sometimes cp-rb leaves a wrong first commit, fix it manually

set -e

function rb {
    b=$1
    m=$2
    echo git rebase $m --onto $b
    git checkout $b && git rebase --interactive $m
    if [ x$? != x0 ]; then
    	echo "rebase exit code:" $?
    	exit
    fi
}

function rbb {
    rb $1 branch-point
}

# merge-upstream - master - branch-point
# we work above branch-point and move stable tress to master

# not yet merged features or bugfixes, branched of from branch-point
git checkout branch-point
rb branch-point master

for b in `git branch | egrep '(bugfix|compiler|feature)/'`; do
    if [ -n $hard ]; then git reset --hard; fi
    rb $b branch-point
done

# memory branches:
rb feature/CM-367-cperl-warnings-xs-carp feature/CM-367-cperl-carp-builtin

# speed and feature list: our previous pretty stable branch linear hierarchy
rb featurex/gh16-multi feature/gh7-signatures

# (for later deeper subtrees)
#declare -a feat
#feat=(feature/gh7-signatures
#      featurex/gh16-multi
#     )
#N=${#feat[@]}
#for i in `seq 0 $(($N - 2))`; do
#    n=$(($i + 1))
#    rb ${feat[$n]} ${feat[$i]}
#done

# defunct:
#rb old/gh7-signatures3-gh25-nl  feature/gh7-signatures
#rb old/gh7-signatures3-gh25-nl1 feature/gh7-signatures

git checkout branch-point
git branch | egrep 'branch-point|master|bugfix/|feature'
=======
#!/bin/bash
# rbi all our branches
# sometimes cp-rb leaves a wrong first commit, fix it manually

set -e

function rb {
    b=$1
    m=$2
    echo git rebase $m --onto $b
    git checkout $b && git rebase --interactive $m
    if [ x$? != x0 ]; then
    	echo "rebase exit code:" $?
    	exit
    fi
}

# merge-upstream - master - branch-point
# we work above branch-point and move stable tress to master

# not yet merged features or bugfixes, branched of from branch-point or merge-upstream
git checkout branch-point
rb branch-point master
for b in `git branch | grep bugfix/ `; do
    if [ -n $hard ]; then git reset --hard; fi
    rb $b branch-point
done

# compiler branches:
#rb compiler/gh?-static-av      branch-point
#rb compiler/gh?-static-hv      branch-point
#rb compiler/gh?-static-gv      branch-point

# speed branches:
rb feature/CM-626-cperl-use-dots      branch-point
rb feature/CM-712-cperl-types-proto   branch-point
rb feature/gh7-signatures-old         branch-point
rb feature/gh57-hash-restricted       branch-point
rb feature/gh24-new-hash-table        branch-point
rb feature/gh23-inline-subs           branch-point
rb feature/gh14-native-types          branch-point
rb feature/gh6-no-miniperl            branch-point

# memory branches:
rb feature/CM-367-cperl-carp-builtin     branch-point
rb feature/CM-367-cperl-warnings-xs-carp feature/CM-367-cperl-carp-builtin
rb feature/gh9-warnings-xs               branch-point
# rb feature/gh?-unicode-xs              branch-point

# speed and feature list: our previous pretty stable branch linear hierarchy
# (for later deeper subtrees)
declare -a feat
feat=(branch-point
      feature/gh7-signatures
      feature/gh16-multi
     )
N=${#feat[@]}
for i in `seq 0 $(($N - 2))`; do
    n=$(($i + 1))
    rb ${feat[$n]} ${feat[$i]}
done

# defunct:
#rb feature/gh7-signatures3-gh25-nl feature/gh7-signatures
#rb feature/gh7-signatures3-gh25-nl1 feature/gh7-signatures

git checkout branch-point
git branch | egrep 'branch-point|master|bugfix/|feature/'
>>>>>>>
