=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.29.0

=head1 DESCRIPTION

This document describes differences between the cperl 5.29.0 and the cperl
5.28.0 release.

If you are upgrading from an earlier release such as v5.26.3c, first read
L<perl5280cdelta>, which describes differences between v5.26.3c and v5.28.0c.

=head1 Core Enhancements

=head2 Check bless name under use strict names

The second argument to bless, the new classname, is now checked to be a
valid package name identifier when B<strict 'names'> is in effect, and the
name is now normalized.
L<[cperl #376]|https://github.com/perl11/cperl/issues/376>

This is a bugfix, but a major compatibility change.

=head2 New warning shadow package

When a subroutine with the same name of a package exists, all package
methods are rerouted through this subroutine, effectively
eliminating all access to the package via methods.  This is almost
always an error, unless you want to override access to the package
or want a data-only package, without any methods.
cperl added the shadow warnings
L<perldiag/"Subroutine &%s::%s masks existing package %s::%s">
and L<perldiag/"Subroutine &%s masks new package %s">.
Use C<no warnings 'shadow';> to silence these new warnings.

=head2 extern sub - libffi

A new L<ffi> was added to core, with a syntax resembling perl6
NativeCall.  Perl6 traits are cperl L<attributes>, but attribute
values may be deferred to run-time. Packagers need to add B<libffi> to
their library dependencies. Windows packages are provided,
see F<appveyor.yml>.

Not yet implemented are the C<:encoded()> attribute for string
arguments and return values, the various encoded string types Uni,
wchar, c-struct helpers, native arrays and native classes
(i.e. structs), callback helpers and support for variadic (varargs)
functions.

=head2 Added experimental Internals::gc()

With the ability to free empty SV arenas. It's currently unstable, and
might be replaced by proper arena memory handling later.  See
L<Internals/gc> and L<perlapi/sv_gc_arenas>.

=head1 Incompatible Changes

=head2 Protected hash iterators

Iterating over a hash may now by default not change any key. Allow the
previous destructive behavior of changing a hash while iterating over
it with C<use hashiter;>
See L<[cperl #117]|https://github.com/perl11/cperl/issues/117>, cperl-only.

=head1 Deprecations

=head2 Undeprecate "Unescaped left brace in regex" warnings and errors

In cperl only the following special unicode groups within regexes are reserved:

   Name:     \N{
   Property: \p{ \P{
   Break:    \b{ \B{
   Code:     \x{ \o{
   Group:    \g{

All other C</{}/> sequences are allowed in cperl and not deprecated
anymore. There's no need to quote the literal C<\{> and C<\}>, only if
it's ambiguous and can be mixed up with those reserved unicode groups.

B<automake> and more widespread utils does not need to be plagued by
spurious "Unescaped left brace in regex" warnings, when they dont need
to be quoted.  We undeprecated those new warnings and errors, there's
nothing more to reserve (yet).
L<[cperl #362]|https://github.com/perl11/cperl/issues/362>

=head1 Performance Enhancements

=over 4

=item Improve newSVpvn_share

Don't downgrade twice, the is_utf8 flags can be taken from the
returned hek, which does the downgrading to bytes already.

=back

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

=over 4

=item L<ffi> 0.01c

ffi helpers and ffi types.

=item L<hashiter>

Allow hash iterators changing keys for back-compat.
See L</Protected hash iterators>.

=back

=head2 Updated Modules and Pragmata

=over 4

=item L<Archive::Tar> 2.32

Fix absolute path handling on VMS

=item L<attributes> 1.15c

Add ffi support, :native(), :encoded(), :nativeconv(), :symbol().

=item L<B> 1.71_09

Add ffi support: CvXFFI, CvFFLIB. CVf_EXTERN flag

=item L<bignum> 0.51c

Better way to catch warnings (CPAN RT #126900).

=item L<CPAN> 2.21_01

Update to 2.21 upstream with our cperl fixes. Some of our fixes were accepted upstream.

Fixed critical rmtree bug with a symlink crossing mountpoints
previous directory ~/.cpan/build changed before entering tmp-32186,
expected dev=47 ino=244719549, actual dev=47 ino=33303, aborting at
CPAN/Distribution.pm line 591

Add many upstream tests and distroprefs. Still need to install them, and
add the cperl distroprefs.

=item L<Cwd> 4.75c

Fixed long pathnames test for getcwd() on older systems, like debian-7.11 i386,
which still returns ENAMETOOLONG on large enough buffers.

Fix the HAS_GET_CURRENT_DIR_NAME check, and the is_ENAMETOOLONG macro.
Note that C<get_current_dir_name()> is now in effect, which returns
the current PWD, i.e. fastcwd, and not the C<realpath()> (i.e the
abs_path) of it. This e.g. broke some DBD::File tests, when behind symlinks.

For getcwd with C<get_current_dir_name()> - i.e. fastcwd - add abs_path.
See also L<http://perl11.org/blog/fastcwd.html>

=item L<Data::Dumper> 2.172

Restore deparsing support in the XS dumper, on Perl 5.18 and earlier.

Fix bug when dumping globs with quoting (which now happens for
all Unicode glob names)

Behavior change: C<$dumper->Useqq(undef)> is now treated as setting the
"useqq" option, not getting it (and similarly for other options)
L<[perl #113090]|https://rt.perl.org/Public/Bug/Display.html?id=113090>

Quote glob names better; notably, Unicode globs are
now handled correctly.
L<[perl #119831]|https://rt.perl.org/Public/Bug/Display.html?id=119831>

=item L<Devel::PPPort> 3.43_04

Fix test with Visual Studio (space in paths) by quoting $0.
Note: This fix is not in the public CPAN release.

=item L<DynaLoader> 2.09c

Extend C<dl_find_symbol> on dl_win32 to mimic the POSIX behaviour with
an empty libhandle argument: Search the symbol in all loaded shared
libraries. This is a convenience platform-compat feature for the L<ffi>.

=item L<ExtUtils::Manifest> 1.71

Only pod formatting

=item L<Errno> 1.29_01

Protect from including some avx512 intrinsics directly on mingw.

=item L<File::Path> 3.16_02c

Fix symlink abort crossing mountpoint with CPAN::Distribution
previous directory ~/.cpan/build changed before entering tmp-32186,
expected dev=47 ino=244719549, actual dev=47 ino=33303, aborting at
CPAN/Distribution.pm line 591

Fix method of generating names for dummy users and groups during testing
(i.e. under docker)
L<[cpan #121967]|https://rt.cpan.org/Ticket/Display.html?id=121967>.

=item L<Math::BigInt> 1.999814

Add C<to_base()> and C<from_base()> to L<Math::BigInt> and corresponding library
methods C<_to_base()> and C<_from_base()> to L<Math::BigInt::Lib>. This was inspired
by L<CPAN RT #122681|https://rt.cpan.org/Ticket/Display.html?id=122681>.

In the documentation for each of the C<to_(bin|hex|oct|bytes)> methods, add a
reference to the corresponding C<from_(bin|hex|oct|bytes)> method.

=item L<Math::BigInt::FastCalc> 0.5008

No code nor test changes.

=item L<Opcode> 1.40_03c

Restrict the new op 'enterffi'.

=item L<perlfaq> 5.20180915

=item L<Storable> 3.12_02

Enable >2GB AvFILL check on store_hook (64bit)
Too many references returned by STORABLE_freeze.
It wrapped around previously. Fixes Coverity CID #187854.
Move __Storable__.pm into Storable_pm.PL
L<[cperl #374]|https://github.com/perl11/cperl/issues/374>

=item L<Symbol> 1.08_02

Calls DynaLoader::dl_unload_file on XS modules for gc() support.

=item L<version> 0.9924_02

more test fixes for 5.6

=item L<warnings> 1.43

Add C<ffi>

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, send email
to L<perlbug@perl.org|mailto:perlbug@perl.org>.

=head3 L<perlfaq> 5.20180915

prepend "./" to local require calls.
Mojolicious ands Dancer2 are not called young anymore.

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<ffi_prep_cif error %d: %s at %s, line %d|perldiag/"ffi_prep_cif error %d: %s at %s, line %d">

=item *

L<An extern sub may not have a prototype|perldiag/"An extern sub may not have a prototype">

=item *

L<ffi not available|perldiag/"ffi not available">

=item *

L<Illegal declaration of extern subroutine %s. Need signature|perldiag/"Illegal declaration of extern subroutine %s. Need signature">

=item *

L<Illegal :encoded(%s) argument|perldiag/"Illegal :encoded(%s) argument">

=item *

L<Illegal :nativeconv(%s) argument|perldiag/"Illegal :nativeconv(%s) argument">

=item *

L<Invalid :%s(%s) attribute argument type|perldiag/"Invalid :%s(%s) attribute argument type">

=item *

L<Missing type for extern sub argument %s|perldiag/"Missing type for extern sub argument %s">

=item *

L<:nativeconv is only valid for :native or extern sub|perldiag/":nativeconv is only valid for :native or extern sub">

=item *

L<Null extern sub symbol|perldiag/"Null extern sub symbol">

=item *

L<:%s() attribute argument missing|perldiag/":%s() attribute argument missing">

=item *

L<:%s is only valid for :native or extern sub|perldiag/":%s is only valid for :native or extern sub">

=item *

L<Unknown ffi return type :%s, assume :void|perldiag/"Unknown ffi return type :%s, assume :void">

=item *

L<Attempt to change hash while iterating over it|perldiag/"Attempt to change hash while iterating over it">

=back

=head3 New Warnings

=over 4

=item *

L<Subroutine &%s::%s masks existing package %s::%s|perldiag/"Subroutine &%s::%s masks existing package %s::%s">

=item *

L<Subroutine &%s masks new package %s|perldiag/"Subroutine &%s masks new package %s"> and
L<Subroutine &%s masks new class %s|perldiag/"Subroutine &%s masks new class %s">

=item *

L<ffi: Possible %s overflow %d|perldiag/"ffi: Possible %s overflow %d">

=item *

L<no ffi without DynaLoader|perldiag/"no ffi without DynaLoader">

=item *

L<:symbol is already resolved|perldiag/":symbol is already resolved">

=item *

L<Use of '%s' in \p{} or \P{} is deprecated because: %s|perldiag/"Use of '%s' in \p{} or \P{} is deprecated because: %s">

=back

=head2 Changes to Existing Diagnostics

=over 4

=item No autovivification of hash slice anymore

Added note that this warning is only enabled with the
lexical C<syntax> warnings category, not C<-w> anymore.

=item Unescaped left brace in regex is deprecated here (and will be fatal in Perl 5.32), passed through in regex; marked by S<<-- HERE> in m/%s/

Added note that cperl allows more. In cperl only the combinations with C<\NpPbBxog{}>
are illegal.

=back

=head1 Configuration and Compilation

=over 4

=item useffi

Added if F<ffi.h> is being found. If so the C<incpth>, C<ccflags> and
C<libs> is extended to include libffi.

=item ffi_targets

With C<useffi> this space-seperated string is filled with the valid and
supported C<:nativeconv()> ABI's, in uppercase. Matching HAVE_FFI_*
defines in F<config.h>. See L<attributes/nativeconv(STRING)>.

=item usesafehashiter

Disable destructive hash key modifications during iteration by default.
C<use hashiter;> to allow it.
L<[cperl #117]|https://github.com/perl11/cperl/issues/117>

=item doubleinfbytes,doublenanbytes,longdblinfbytes,longdblnanbytes

Fixed the error cases when the double or long double probes returned undef.

=item F<Porting/do-make-cperl-release>

Replace C<sha1sum> with C<sha256sum>, add C<gpg -a -b $pkg>.

=back

=head1 Testing

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

=over 4

=item *

F<op/hash-rt85026.t> finds now almost ever a collision, and skips the test
with usesafehashiter enabled (the default). Such not easily detectable
destructive hash iters are now forbidden, thanks to B<usesafehashiter>.

=item *

F<op/chdir.t> when pwd is a symlink.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Oracle Linux

=over 4

=item *

DTrace support has been added by also looking for F</sbin/dtrace>.
Install it with C<sudo yum install -y dtrace-utils dtrace-utils-devel>.

=back

=item Windows

=over 4

=item *

Add DynaLoader fallbacks to C<dl_find_symbol> to mimic the POSIX behaviour with
an empty libhandle argument: Search the symbol in all loaded/most shared
libraries. This is a convenience platform-compat feature for the L<ffi>.

=item *

The new Windows 10 DTrace support has not been tested yet.

=back

=item mingw

=over 4

=item *

Fixed Errno from processing some protected intrinsics directly, which fail with
#error "Never use <avx512vpopcntdqintrin.h>, <avx512ifmaintrin.h> directly; include <immintrin.h> instead."
#error "Never use <fmaintrin.h> directly; include <immintrin.h> instead."
#error "Never use <xsavesintrin.h> directly; include <x86intrin.h> instead."

=back

=back

=head1 Selected Bug Fixes

=over 4

=item *

Fix C<valid_ident()> for 128-255 chars not to use isIDFIRST_A nor
isIDCONT_A, _A does not match them.  Fixes F<t/uni/method.t> for chars
like oslash

=item *

Fix C<newSVpvn_share> to store the HEK_WASUTF8 flag if downgraded.
Improve C<newSVpvn_share> to downgrade only once, not twice.

A shared string and a GV with chars in the range 128-255 are downgraded to
bytes without the UTF8 flag. Store at least the HEK_WASUTF8 flag then.

=item *

Check bless name under use strict 'names'.

The second argument to bless, the new classname, is now checked to be a
valid package name identifier when B<strict 'names'> is in effect, and the
name is now normalized.
L<[cperl #376]|https://github.com/perl11/cperl/issues/376>

=item *

Fix cperl 5.28.0c regression disallowing calling subnames with a quote
in a package qualifier position.
L<[cperl #371]|https://github.com/perl11/cperl/issues/371>

This is now valid again:

  sub don't { 0 } print don't;

With v5.28.0c only the declaration C<sub don't { 0 }> was valid, it
accepted the subroutine C<don't>, but the call C<print don't;> was
invalid, it was looking for a second single-quote string delimiter.
Note that in cperl C<'> is no perl4-style package seperator.

=back

=head1 Known Problems

=over 4

=item *

Detect shared-only import libraries like F<libNAME.dll.a>, which have no static
counterpart F<libNAME.a>, which happens e.g. for C<libffi> on B<cygwin> or msys.

=back

=head1 Acknowledgements

cperl 5.29.0 represents approximately 5 weeks of development since cperl
5.28.0c and contains approximately 63,000 lines of changes across 1,100
files from 2 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 14,000 lines of changes to 200 .pm, .t, .c and .h files.

The following people are known to have contributed the improvements that
became cperl 5.29.0:

Reini Urban, Andreas König.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

Generated with:

    cperl Porting/acknowledgements.pl cperl-5.28.0..HEAD -c

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
