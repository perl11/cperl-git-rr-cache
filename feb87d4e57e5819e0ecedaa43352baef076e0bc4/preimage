=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.27.3

=head1 DESCRIPTION

This document describes differences between the cperl 5.27.2 and the cperl
5.27.3 release.

If you are upgrading from an earlier release such as v5.27.1c, first read
L<perl5272cdelta>, which describes differences between v5.27.1c and v5.27.2c.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here.  Summarize user-visible core language
enhancements.  Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head2 Disallow illegal glob with embedded NUL

E.g. C<< <$fh\000> >> throws now the safe syscalls warning, and errors
with C<Glob not terminated>, and does not pass the illegal glob path
to the internal or external glob.

This problem was added with v5.27.5 by replacing strchr with memchr,
allowing such illegal strings.
See L<[cperl #342]|https://github.com/perl11/cperl/issues/342>

=head1 Incompatible Changes

=head2 Illegal NUL, syntax error

Embedded NUL bytes read from files, not used in filters, are not
whitespace anymore, they are syntax errors.

See L<[cperl #345]|https://github.com/perl11/cperl/issues/345> vs
L<[perl #105920]|https://rt.perl.org/Public/Bug/Display.html?id=105920>.

Parsing NUL bytes is now consistent from files with eval string.
C<\0> delimited C<q> quote is still valid though.

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here.
There may well be none in a stable release.

[ List each enhancement as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

The list of new and updated modules is modified automatically as part of
preparing a Perl release, so the only reason to manually add entries here is if
you're summarising the important changes in the module update. (Also, if the
manually-added details don't match the automatically-generated ones, the
release manager will have to investigate the situation carefully.)

[ Within each section, list entries as an =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item L<Devel::PPPort> 3.36_04

mkppport called PPPort_pm.PL without
passing through MAKEFLAGS. Add --quiet support there

=item L<I18N::LangTags>  0.42_01

Linkify docs.

=item L<Unicode::Collate> 1.25_01

Skip redefinition warnings on cperl since 5.27.2

=back

=head2 Removed Modules and Pragmata

=over 4

=item L<Locale::Codes> 3.55

Deprecated with v5.27.2c

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, send email
to L<perlbug@perl.org|mailto:perlbug@perl.org>.

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

Additionally, the following selected changes have been made:

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX Describe change here

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as an =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarizing, although the bugs
that they represent may be covered elsewhere.

XXX If there were no significant test changes, say this:

Tests were added and changed to reflect the other additions and changes
in this release.

XXX If instead there were significant changes, say this:

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

[ List each test improvement as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as an =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.  Other
significant internal changes for future core maintainers should be noted as
well.

[ List each change as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarized here.  Bug fixes in
files in F<ext/> and F<lib/> are best summarized in L</Modules and Pragmata>.

[ List each fix as an =item entry ]

=over 4

=item *

Fixed error message for illegal charnames, and avoid passing NUL into
the charnames lookup, which is a potential security threat.  E.g. on
"\N{TILDE\000}" report "Missing right brace on \\N\{\}" as before
with 5.27.2 and on "\N{TILDE\001}" report "Unknown charname 'TILDE\1'" and
not "Unknown charname 'TILDE'".  perl5.27.5 started reporting those
errors with "Unknown charname 'TILDE'" hiding all characters behind
the embedded NUL or any non-printable character.
L<[cperl #342]|https://github.com/perl11/cperl/issues/342>

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

<<<<<<<
L<Too many fields|perldiag/"Too many fields">

cperl 5.27.2 added a new limitation of max. 65536 fields per class.

=item *

C<panic: cannot yet adjust field indices when composing role %s::%s into %s %s [cperl #311]">

When copying a method from a role to a class, and the field index from
the role method would be different to a field index in the resulting
class, the method is not yet fixed up to the new indices. A
temp. solution would be to change the ordering of the roles, or to use
the C<< $self->field >> method syntax in the role method.  This should
be fixed before 5.28. Currently we can only alias composed role
methods and we don't change the ordering of the fields.
See L<[cperl #311]|https://github.com/perl11/cperl/issues/311>

=item *

L<Invalid field index %d of class %s|perldiag/"Invalid field index %d of %s %s">

The class doesn't have that many fields. cperl only

=back

=head3 New Warnings

=over 4

=item *

L<Reference is not weak|perldiag/"Reference is not weak"> in W misc.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

A false-positive warning that was issued when using a
numerically-quantified sub-pattern in a recursive regex has been
silenced. L<[perl #131868]|https://rt.perl.org/Public/Bug/Display.html?id=131868>

=item *

The diagnostic C<Initialization of state variables in list context
currently forbidden> has changed to C<Initialization of state variables
in list currently forbidden>, because list-context initialization of
single aggregate state variables is now permitted.

=item *

C<Failed to close in-place edit file %s: %s> was renamed to 
L<Failed to close in-place work file %s: %s|perldiag/"Failed to close in-place work file %s: %s">.

=item *

C<delete argument is index/value array slice, use array slice> and
C<delete argument is key/value hash slice, use hash slice> is gone,
deleting key/value slices is now supported.

=item *

Detect shared-only import libraries like F<libNAME.dll.a>, which have no static
counterpart F<libNAME.a>, which happens e.g. for C<libffi> on B<cygwin> or msys.

=back

=head1 Configuration and Compilation

=over 4

=item C89 requirement

Perl has been documented as requiring a C89 compiler to build since October
1998.  A variety of simplifications have now been made to Perl's internals to
rely on the features specified by the C89 standard. We believe that this
internal change hasn't altered the set of platforms that Perl builds on, but
please report a bug if Perl now has new problems building on your platform.

=item -Werror=pointer-arith

With GCC, C<-Werror=pointer-arith> is now enabled by default,
disallowing arithmetic on void and function pointers.

=item d_builtin_arith_overflow

Fixed C<d_builtin_arith_overflow> detection and usage for 32bit
systems with C<use64bitint>. They do use the C<ll> suffix, same as with
WIN64.  Now we can use this optimization.
cperl-only.

=item New probes

Note that cperl ignores the new C<HAS_BUILTIN_{ADD,MUL,SUB}_OVERFLOW>
config keys as we use the better C<HAS_BUILTIN_ARITH_OVERFLOW> for
years already.

=over 2

=item HAS_THREAD_SAFE_NL_LANGINFO_L

d_thread_safe_nl_langinfo_l

=item HAS_LOCALECONV_L

d_localeconv_l

=item HAS_MBRLEN

d_mbrlen

=item HAS_MBRTOWC

d_mbrtowc

=item HAS_MEMRCHR

d_memrchr

=item HAS_NANOSLEEP

d_nanosleep

=item HAS_STRNLEN

d_strnlen

=item HAS_STRTOLD_L

d_strtold_l

=item I_WCHAR

i_wchar

=back

=item Removed probes and keys

=over 2

=item ansi2knr

=item d_bcmp

=item d_bcopy

=item d_bzero

=item d_index

=item d_charvspr

=item d_dbl_dig

=item d_safebcpy

=item d_safemcpy

=item d_sanemcmp

=item d_sprintf_returns_strlen

=item d_strctcpy

=item d_strerrm

=item i_memory

=item i_values

=item i_varargs

=item i_varhdr

=item strings

=item d_memset

Beware: HAS_MEMSET is undefined since v5.28, but always considered to be
defined. Because of C89.
cperl kept the HAS_MEMSET preprocessor definition for backcompat with
extensions which do use it. It is used in all ppport.h files to use memzero().

=item d_memchr

Ditto: Keep HAS_MEMCHR

=item d_memcmp

Ditto: Keep HAS_MEMCMP

=item d_memcpy

Ditto: Keep HAS_MEMCPY

=item d_memmove

Ditto: Keep HAS_MEMMOVE

=item d_strchr

Ditto: Keep HAS_STRCHR

=item d_strerror

Ditto: Keep HAS_STRERROR

=item d_vprintf

Ditto: Keep HAS_VPRINTF

=item d_volatile

Ditto: Keep HASVOLATILE

=item i_assert

Ditto: Keep I_ASSERT in perl.h

=item i_float

Ditto: Keep I_FLOAT in perl.h

=item i_limits

Ditto: Keep I_LIMITS in perl.h

=item i_math

Ditto: Keep I_MATH in perl.h

=item i_stdarg

Ditto: Keep I_STDARG in perl.h

=item i_stdlib

Ditto: Keep I_STDLIB in perl.h

=item i_string

Ditto: Keep I_STRING in perl.h

=item prototype

Ditto: Keep CAN_PROTOTYPE in perl.h

=item vaproto

Ditto: Keep CAN_VAPROTO, _V

=back

=item git_version.sh

New generated shell config with the same content as F<git_version.h>,
for F<myconfig>.

=item myconfig

Added git_branch and git_describe.

=item make_patchnum: touch the targets

avoiding needless miniperl recompilation on
F<Config_git.pl>, F<git_version.{sh,h}>.

=back

=head1 Testing

=over 4

=item *

Added F<t/op/oelem.t> for classes with more than 256 fields, realloc
fields for bigger padsize 2, and computed field names.
cperl-only.

=item *

Changed one case in F<t/op/symbolcache.t> for
L<static method optimizations|/"Optimize static methods to subs">.
When you redefine a method, you need to clear the old method GV, to be able
to call the new redefined one, as the static method optimization binds to
the GV.

=item *

Many fixes for C<make minitest>, for cperl/XSConfig.

=back

=head1 Platform Support

=head2 Discontinued Platforms

=over 4

=item PowerUX / Power MAX OS

Compiler hints and other support for these apparently long-defunct platforms has been removed.

=back

=head2 Platform-Specific Notes

=over 4

=item Darwin

Perl now correctly uses reentrant functions, like C<asctime_r>, on
versions of Darwin that have support for them.

locale specific error messages are now thread-safe.
cperl-only, L<[cperl #341]|https://github.com/perl11/cperl/issues/341>

=item CentOS

Compilation on CentOS 5 is now fixed.

=item UMIPS

CAN_PROTOTYPE is now always defined, which might cause problems with
the system cc compiler.
C<ccom: Error: ./mg.h, line 12: redeclaration of formal parameter, sv>

=item ULTRIX 4

CAN_PROTOTYPE is now always defined, which might cause problems with
the gcc-4.2 compiler.

=item Windows

Visual C++ compiler version detection has been improved to work on non-English
language systems.

=back

=head1 Internal Changes

=over 4

=item *

Added L<perlapi/hv_undef_flags> to the public API.

=item *

Refactored the L<fields> API from global data into methods.
Added a L<perlapi/HvFIELDS> field to HvAUX as linear buffer
of "name\0pad...\0" fields, no class C<%FIELDS> and C<@FIELDS> anymore.
See L<[cperl #322]|https://github.com/perl11/cperl/issues/322>

=item *

L<perlintern/validate_proto> got an additional cperl-only bool
argument C<maybe_sig>.

=item *

A new function, L<Perl_langinfo()|perlapi/Perl_langinfo> has been
added.  It is an (almost) drop-in replacement for the system
C<nl_langinfo(3)>, but works on platforms that lack that; as well as
being more thread-safe, and hiding some gotchas with locale handling
from the caller.  Code that uses this, needn't use L<localeconv(3)>
(and be affected by the gotchas) to find the decimal point, thousands
separator, or currency symbol.  See L<perlapi/Perl_langinfo>.

=item *

A new API function L<sv_rvunweaken()|perlapi/sv_rvunweaken> has
been added to complement L<sv_rvweaken()|perlapi/sv_rvweaken>.
The implementation was taken from L<Scalar::Util/unweaken>.

=item *

A new flag, C<SORTf_UNSTABLE>, has been added. This will allow a
future commit to make mergesort unstable when the user specifies ‘no
sort stable’, since it has been decided that mergesort should remain
stable by default.

=item *

A new optimisation phase has been added to the compiler,
C<optimize_optree()>, which does a top-down scan of a complete optree
just before the peephole optimiser is run. This phase is not currently
hookable.
This phase was previously in cperl named C<prefinalize_op> and
C<postprocess_optree>.

=item *

An C<OP_MULTICONCAT> op has been added. At C<optimize_optree()> time, a
chain of C<OP_CONCAT> and C<OP_CONST> ops, together optionally with an
C<OP_STRINGIFY> and/or C<OP_SASSIGN>, are combined into a single
C<OP_MULTICONCAT> op. The op is of type C<UNOP_AUX>, and the aux array
contains the argument count, plus a pointer to a constant string and a set
of segment lengths. For example with

    my $x = "foo=$foo, bar=$bar\n";

the constant string would be C<"foo=, bar=\n"> and the segment lengths
would be (4,6,1). If the string contains characters such as C<\x80>, whose
representation changes under utf8, two sets of strings plus lengths are
precomputed and stored.

=item *

Direct access to L<PL_keyword_plugin|perlapi/PL_keyword_plugin> is not
safe in the presence of multithreading. A new
L<wrap_keyword_plugin|perlapi/wrap_keyword_plugin> function has been
added to allow XS modules to safely define custom keywords even when
loaded from a thread, analogous to L<PL_check|perlapi/PL_check> /
L<wrap_op_checker|perlapi/wrap_op_checker>.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Fixed thread-safety with locale-specific error messages on darwin.
C<uselocal()> on darwin is not thread-safe, so we disable the local
restauration to C<uselocal(LC_GLOBAL_LOCALE)> in child threads.
cperl-only, L<[cperl #341]|https://github.com/perl11/cperl/issues/341>

=item *

Fetching the name of a glob that was previously UTF-8 but wasn't any
longer would return that name flagged as UTF-8.
L<[perl #131263]|https://rt.perl.org/Ticket/Display.html?id=131263>

=item *

Fixed a duplicate symbol failure with C<-flto -mieee-fp> builds.
F<pp.c> defined C<_LIB_VERSION> which C<-lieee> already defines.
L<[perl #131786]|https://rt.perl.org/Ticket/Display.html?id=131786>

=item *

The tokenizer no longer consumes the exponent part of a floating
point number if it's incomplete.
L<[perl #131725]|https://rt.perl.org/Ticket/Display.html?id=131725>

=item *

On non-threaded builds, for C<m/$null/> where C<$null> is an empty
string is no longer treated as if the C</o> flag was present when the
previous matching match operator included the C</o> flag.  The
rewriting used to implement this behavior could confuse the
interpreter.  This matches the behaviour of threaded builds.
L<[perl #124368]|https://rt.perl.org/Ticket/Display.html?id=124368>

=item *

The tokenizer now correctly adjusts a parse pointer when skipping
whitespace in a C< ${identifier} > construct.
L<[perl #131949]|https://rt.perl.org/Public/Bug/Display.html?id=131949>

=item *

Accesses to C<${^LAST_FH}> no longer assert after using any of a
variety of I/O operations on a non-glob.
L<[perl #128263]|https://rt.perl.org/Public/Bug/Display.html?id=128263>

=item *

The C<Copy()>, C<Move()>, C<Zero()> macros and their variants now
assert if the pointers supplied are C<NULL>.  ISO C considers
supplying NULL pointers to the functions these macros are built upon
as undefined behaviour even when their count parameters are zero.
Based on these assertions and the original bug report three macro
calls were made conditional.
L<[perl #131746]|https://rt.perl.org/Public/Bug/Display.html?id=131746>
L<[perl #131892]|https://rt.perl.org/Public/Bug/Display.html?id=131892>

=item *

The in-place sort optimisation now correctly strengthens weak
references using the new L<sv_rvunweaken()|perlapi/sv_rvunweaken>
API function.

=item *

Package names are now always included in C<:prototype> warnings
L<[perl #131833]|https://rt.perl.org/Public/Bug/Display.html?id=131833>

=item *

Creating a thread with no parameters no longer tries to C<Copy()> a
null pointer. This fixes an assertion failure and allows threaded
builds to work again.

=item *

The C<je_old_stack_hwm> field, previously only found in the C<jmpenv>
structure on debugging builds, has been added to non-debug builds as
well. This fixes an issue with some CPAN modules caused by the size of
this structure varying between debugging and non-debugging builds.
L<[perl #131942]|https://rt.perl.org/Public/Bug/Display.html?id=131942>

=item *

The arguments to the C<ninstr()> macro are now correctly parenthesized.

=item *

A NULL pointer dereference in the C<S_regmatch()> function has been
fixed.
L<[perl #132017]|https://rt.perl.org/Public/Bug/Display.html?id=132017>

=item *

Calling L<exec PROGRAM LIST|perlfunc/exec PROGRAM LIST> with an empty C<LIST>
has been fixed.  This should call C<execvp()> with an empty C<argv> array
(containing only the terminating C<NULL> pointer), but was instead just
returning false (and not setting L<$!|perlvar/$!>).
L<[perl #131730]|https://rt.perl.org/Public/Bug/Display.html?id=131730>

=item *

The C<gv_fetchmeth_sv> C function stopped working properly in Perl 5.22 when
fetching a constant with a UTF-8 name if that constant subroutine was stored in
the stash as a simple scalar reference, rather than a full typeglob.  This has
been fixed.

=item *

Single-letter debugger commands followed by an argument which starts with
punctuation  (e.g. C<p$^V> and C<x@ARGV>) now work again.  They had been
wrongly requiring a space between the command and the argument.
L<[perl #120174]|https://rt.perl.org/Public/Bug/Display.html?id=120174>

=item *

L<splice|perlfunc/splice ARRAY,OFFSET,LENGTH,LIST> now throws an exception
("Modification of a read-only value attempted") when modifying a read-only
array.  Until now it had been silently modifying the array.  The new behaviour
is consistent with the behaviour of L<push|perlfunc/push ARRAY,LIST> and
L<unshift|perlfunc/unshift ARRAY,LIST>.
L<[perl #131000]|https://rt.perl.org/Public/Bug/Display.html?id=131000>

=item *

C<stat()>, C<lstat()>, and file test operators now fail if given a
filename containing a nul character, in the same way that C<open()>
already fails.

=item *

C<stat()>, C<lstat()>, and file test operators now reliably set C<$!> when
failing due to being applied to a closed or otherwise invalid file handle.

=item *

File test operators for Unix permission bits that don't exist on a
particular platform, such as C<-k> (sticky bit) on Windows, now check that
the file being tested exists before returning the blanket false result,
and yield the appropriate errors if the argument doesn't refer to a file.

=item *

The in-place reverse optimisation now correctly strengthens weak
references using the L<sv_rvunweaken()|perlapi/sv_rvunweaken>
API function.

=item *

Fixed a read before buffer when parsing a range starting with C<\N{}>
at the beginning of the character set for the transliteration
operator.
L<[perl #132245]|https://rt.perl.org/Public/Bug/Display.html?id=132245>

=item *

Fixed a leaked SV when parsing an empty C<\N{}> at compile-time.
L<[perl #132245]|https://rt.perl.org/Public/Bug/Display.html?id=132245>

=item *

Calling C<do $path> on a directory or block device now yields a meaningful
error code in C<$!>.
L<[perl #125774]|https://rt.perl.org/Public/Bug/Display.html?id=125774>

=item *

Regexp substitution using an overloaded replacement value that provides
a tainted stringification now correctly taints the resulting string.
L<[perl #115266]|https://rt.perl.org/Public/Bug/Display.html?id=115266>

=item *

Lexical sub declarations in C<do> blocks such as C<do { my sub lex; 123 }>
could corrupt the stack, erasing items already on the stack in the
enclosing statement.  This has been fixed.
L<[perl #132442]|https://rt.perl.org/Public/Bug/Display.html?id=132442>

=back

=head1 Known Problems

=over 4

=item *

Classes are still experimental, and have some limitations:

Cannot be created in an eval block or subroutine. The pad lookup is still global
and not per optional CvPADLIST.

Method composition with overlapping field indices does not work
yet. This requires the not yet finished inliner.
C<panic: cannot yet adjust field indices when composing role %s::%s into %s %s [cperl #311]>

Array and hash fields cannot be parsed yet.

=back
=======
XXX If any significant core contributor has died, we've added a short obituary
here.
>>>>>>>

=head1 Acknowledgements

XXX Generate this with:

    cperl Porting/acknowledgements.pl cperl-5.27.2..HEAD -c

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
