/* ex: set ro ft=c: -*- mode: c; buffer-read-only: t -*-
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/mk_invlists.pl from Unicode::UCD.
 * Any changes made here will be lost!
 */

/* See the generating file for comments */


#if defined(PERL_IN_UTF8_C)

static const UV Latin1_invlist[] = {
	2,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100
};

static const UV AboveLatin1_invlist[] = {
	2,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100
};

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV Case_Folding_invlist[] = { /* for ASCII/Latin1 */
	1373,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xB5,
	0xB6,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0xE0,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x179,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x182,
	0x183,
	0x184,
	0x185,
	0x186,
	0x187,
	0x188,
	0x189,
	0x18B,
	0x18C,
	0x18E,
	0x18F,
	0x190,
	0x191,
	0x192,
	0x193,
	0x194,
	0x195,
	0x196,
	0x197,
	0x198,
	0x199,
	0x19C,
	0x19D,
	0x19E,
	0x19F,
	0x1A0,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A7,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1AF,
	0x1B0,
	0x1B1,
	0x1B3,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B8,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F7,
	0x1F8,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23B,
	0x23C,
	0x23D,
	0x23E,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x244,
	0x245,
	0x246,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x345,
	0x346,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3B0,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FA,
	0x3FB,
	0x3FD,
	0x400,
	0x410,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C1,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x587,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E97,
	0x1E98,
	0x1E99,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F80,
	0x1F81,
	0x1F82,
	0x1F83,
	0x1F84,
	0x1F85,
	0x1F86,
	0x1F87,
	0x1F88,
	0x1F89,
	0x1F8A,
	0x1F8B,
	0x1F8C,
	0x1F8D,
	0x1F8E,
	0x1F8F,
	0x1F90,
	0x1F91,
	0x1F92,
	0x1F93,
	0x1F94,
	0x1F95,
	0x1F96,
	0x1F97,
	0x1F98,
	0x1F99,
	0x1F9A,
	0x1F9B,
	0x1F9C,
	0x1F9D,
	0x1F9E,
	0x1F9F,
	0x1FA0,
	0x1FA1,
	0x1FA2,
	0x1FA3,
	0x1FA4,
	0x1FA5,
	0x1FA6,
	0x1FA7,
	0x1FA8,
	0x1FA9,
	0x1FAA,
	0x1FAB,
	0x1FAC,
	0x1FAD,
	0x1FAE,
	0x1FAF,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FB5,
	0x1FB6,
	0x1FB7,
	0x1FB8,
	0x1FBA,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC3,
	0x1FC4,
	0x1FC5,
	0x1FC6,
	0x1FC7,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FD6,
	0x1FD7,
	0x1FD8,
	0x1FDA,
	0x1FDC,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FE7,
	0x1FE8,
	0x1FEA,
	0x1FEC,
	0x1FED,
	0x1FF2,
	0x1FF3,
	0x1FF4,
	0x1FF5,
	0x1FF6,
	0x1FF7,
	0x1FF8,
	0x1FFA,
	0x1FFC,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212B,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C63,
	0x2C64,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C6E,
	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB01,
	0xFB02,
	0xFB03,
	0xFB04,
	0xFB05,
	0xFB07,
	0xFB13,
	0xFB14,
	0xFB15,
	0xFB16,
	0xFB17,
	0xFB18,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	CF_0 = 0,
	CF_use_AUX_TABLE_1 = -1,
	CF_use_AUX_TABLE_2 = -2,
	CF_use_AUX_TABLE_3 = -3,
	CF_use_AUX_TABLE_4 = -4,
	CF_use_AUX_TABLE_5 = -5,
	CF_use_AUX_TABLE_6 = -6,
	CF_use_AUX_TABLE_7 = -7,
	CF_use_AUX_TABLE_8 = -8,
	CF_use_AUX_TABLE_9 = -9,
	CF_use_AUX_TABLE_10 = -10,
	CF_use_AUX_TABLE_11 = -11,
	CF_use_AUX_TABLE_12 = -12,
	CF_use_AUX_TABLE_13 = -13,
	CF_use_AUX_TABLE_14 = -14,
	CF_use_AUX_TABLE_15 = -15,
	CF_use_AUX_TABLE_16 = -16,
	CF_use_AUX_TABLE_17 = -17,
	CF_use_AUX_TABLE_18 = -18,
	CF_use_AUX_TABLE_19 = -19,
	CF_use_AUX_TABLE_20 = -20,
	CF_use_AUX_TABLE_21 = -21,
	CF_use_AUX_TABLE_22 = -22,
	CF_use_AUX_TABLE_23 = -23,
	CF_use_AUX_TABLE_24 = -24,
	CF_use_AUX_TABLE_25 = -25,
	CF_use_AUX_TABLE_26 = -26,
	CF_use_AUX_TABLE_27 = -27,
	CF_use_AUX_TABLE_28 = -28,
	CF_use_AUX_TABLE_29 = -29,
	CF_use_AUX_TABLE_30 = -30,
	CF_use_AUX_TABLE_31 = -31,
	CF_use_AUX_TABLE_32 = -32,
	CF_use_AUX_TABLE_33 = -33,
	CF_use_AUX_TABLE_34 = -34,
	CF_use_AUX_TABLE_35 = -35,
	CF_use_AUX_TABLE_36 = -36,
	CF_use_AUX_TABLE_37 = -37,
	CF_use_AUX_TABLE_38 = -38,
	CF_use_AUX_TABLE_39 = -39,
	CF_use_AUX_TABLE_40 = -40,
	CF_use_AUX_TABLE_41 = -41,
	CF_use_AUX_TABLE_42 = -42,
	CF_use_AUX_TABLE_43 = -43,
	CF_use_AUX_TABLE_44 = -44,
	CF_use_AUX_TABLE_45 = -45,
	CF_use_AUX_TABLE_46 = -46,
	CF_use_AUX_TABLE_47 = -47,
	CF_use_AUX_TABLE_48 = -48,
	CF_use_AUX_TABLE_49 = -49,
	CF_use_AUX_TABLE_50 = -50,
	CF_use_AUX_TABLE_51 = -51,
	CF_use_AUX_TABLE_52 = -52,
	CF_use_AUX_TABLE_53 = -53,
	CF_use_AUX_TABLE_54 = -54,
	CF_use_AUX_TABLE_55 = -55,
	CF_use_AUX_TABLE_56 = -56,
	CF_use_AUX_TABLE_57 = -57,
	CF_use_AUX_TABLE_58 = -58,
	CF_use_AUX_TABLE_59 = -59,
	CF_use_AUX_TABLE_60 = -60,
	CF_use_AUX_TABLE_61 = -61,
	CF_use_AUX_TABLE_62 = -62,
	CF_use_AUX_TABLE_63 = -63,
	CF_use_AUX_TABLE_64 = -64,
	CF_use_AUX_TABLE_65 = -65,
	CF_use_AUX_TABLE_66 = -66,
	CF_use_AUX_TABLE_67 = -67,
	CF_use_AUX_TABLE_68 = -68,
	CF_use_AUX_TABLE_69 = -69,
	CF_use_AUX_TABLE_70 = -70,
	CF_use_AUX_TABLE_71 = -71,
	CF_use_AUX_TABLE_72 = -72,
	CF_use_AUX_TABLE_73 = -73
} CF_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

#define HAS_CF_AUX_TABLES

static const unsigned int CF_AUX_TABLE_1[] = {
	0x73,
	0x73
};

static const unsigned int CF_AUX_TABLE_2[] = {
	0x69,
	0x307
};

static const unsigned int CF_AUX_TABLE_3[] = {
	0x2BC,
	0x6E
};

static const unsigned int CF_AUX_TABLE_4[] = {
	0x6A,
	0x30C
};

static const unsigned int CF_AUX_TABLE_5[] = {
	0x3B9,
	0x308,
	0x301
};

static const unsigned int CF_AUX_TABLE_6[] = {
	0x3C5,
	0x308,
	0x301
};

static const unsigned int CF_AUX_TABLE_7[] = {
	0x565,
	0x582
};

static const unsigned int CF_AUX_TABLE_8[] = {
	0x68,
	0x331
};

static const unsigned int CF_AUX_TABLE_9[] = {
	0x74,
	0x308
};

static const unsigned int CF_AUX_TABLE_10[] = {
	0x77,
	0x30A
};

static const unsigned int CF_AUX_TABLE_11[] = {
	0x79,
	0x30A
};

static const unsigned int CF_AUX_TABLE_12[] = {
	0x61,
	0x2BE
};

static const unsigned int CF_AUX_TABLE_13[] = {
	0x3C5,
	0x313
};

static const unsigned int CF_AUX_TABLE_14[] = {
	0x3C5,
	0x313,
	0x300
};

static const unsigned int CF_AUX_TABLE_15[] = {
	0x3C5,
	0x313,
	0x301
};

static const unsigned int CF_AUX_TABLE_16[] = {
	0x3C5,
	0x313,
	0x342
};

static const unsigned int CF_AUX_TABLE_17[] = {
	0x1F00,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_18[] = {
	0x1F01,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_19[] = {
	0x1F02,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_20[] = {
	0x1F03,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_21[] = {
	0x1F04,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_22[] = {
	0x1F05,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_23[] = {
	0x1F06,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_24[] = {
	0x1F07,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_25[] = {
	0x1F20,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_26[] = {
	0x1F21,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_27[] = {
	0x1F22,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_28[] = {
	0x1F23,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_29[] = {
	0x1F24,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_30[] = {
	0x1F25,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_31[] = {
	0x1F26,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_32[] = {
	0x1F27,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_33[] = {
	0x1F60,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_34[] = {
	0x1F61,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_35[] = {
	0x1F62,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_36[] = {
	0x1F63,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_37[] = {
	0x1F64,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_38[] = {
	0x1F65,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_39[] = {
	0x1F66,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_40[] = {
	0x1F67,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_41[] = {
	0x1F70,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_42[] = {
	0x3B1,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_43[] = {
	0x3AC,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_44[] = {
	0x3B1,
	0x342
};

static const unsigned int CF_AUX_TABLE_45[] = {
	0x3B1,
	0x342,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_46[] = {
	0x1F74,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_47[] = {
	0x3B7,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_48[] = {
	0x3AE,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_49[] = {
	0x3B7,
	0x342
};

static const unsigned int CF_AUX_TABLE_50[] = {
	0x3B7,
	0x342,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_51[] = {
	0x3B9,
	0x308,
	0x300
};

static const unsigned int CF_AUX_TABLE_52[] = {
	0x3B9,
	0x342
};

static const unsigned int CF_AUX_TABLE_53[] = {
	0x3B9,
	0x308,
	0x342
};

static const unsigned int CF_AUX_TABLE_54[] = {
	0x3C5,
	0x308,
	0x300
};

static const unsigned int CF_AUX_TABLE_55[] = {
	0x3C1,
	0x313
};

static const unsigned int CF_AUX_TABLE_56[] = {
	0x3C5,
	0x342
};

static const unsigned int CF_AUX_TABLE_57[] = {
	0x3C5,
	0x308,
	0x342
};

static const unsigned int CF_AUX_TABLE_58[] = {
	0x1F7C,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_59[] = {
	0x3C9,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_60[] = {
	0x3CE,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_61[] = {
	0x3C9,
	0x342
};

static const unsigned int CF_AUX_TABLE_62[] = {
	0x3C9,
	0x342,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_63[] = {
	0x66,
	0x66
};

static const unsigned int CF_AUX_TABLE_64[] = {
	0x66,
	0x69
};

static const unsigned int CF_AUX_TABLE_65[] = {
	0x66,
	0x6C
};

static const unsigned int CF_AUX_TABLE_66[] = {
	0x66,
	0x66,
	0x69
};

static const unsigned int CF_AUX_TABLE_67[] = {
	0x66,
	0x66,
	0x6C
};

static const unsigned int CF_AUX_TABLE_68[] = {
	0x73,
	0x74
};

static const unsigned int CF_AUX_TABLE_69[] = {
	0x574,
	0x576
};

static const unsigned int CF_AUX_TABLE_70[] = {
	0x574,
	0x565
};

static const unsigned int CF_AUX_TABLE_71[] = {
	0x574,
	0x56B
};

static const unsigned int CF_AUX_TABLE_72[] = {
	0x57E,
	0x576
};

static const unsigned int CF_AUX_TABLE_73[] = {
	0x574,
	0x56D
};

static const unsigned int * const CF_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	CF_AUX_TABLE_1,
	CF_AUX_TABLE_2,
	CF_AUX_TABLE_3,
	CF_AUX_TABLE_4,
	CF_AUX_TABLE_5,
	CF_AUX_TABLE_6,
	CF_AUX_TABLE_7,
	CF_AUX_TABLE_8,
	CF_AUX_TABLE_9,
	CF_AUX_TABLE_10,
	CF_AUX_TABLE_11,
	CF_AUX_TABLE_12,
	CF_AUX_TABLE_13,
	CF_AUX_TABLE_14,
	CF_AUX_TABLE_15,
	CF_AUX_TABLE_16,
	CF_AUX_TABLE_17,
	CF_AUX_TABLE_18,
	CF_AUX_TABLE_19,
	CF_AUX_TABLE_20,
	CF_AUX_TABLE_21,
	CF_AUX_TABLE_22,
	CF_AUX_TABLE_23,
	CF_AUX_TABLE_24,
	CF_AUX_TABLE_25,
	CF_AUX_TABLE_26,
	CF_AUX_TABLE_27,
	CF_AUX_TABLE_28,
	CF_AUX_TABLE_29,
	CF_AUX_TABLE_30,
	CF_AUX_TABLE_31,
	CF_AUX_TABLE_32,
	CF_AUX_TABLE_33,
	CF_AUX_TABLE_34,
	CF_AUX_TABLE_35,
	CF_AUX_TABLE_36,
	CF_AUX_TABLE_37,
	CF_AUX_TABLE_38,
	CF_AUX_TABLE_39,
	CF_AUX_TABLE_40,
	CF_AUX_TABLE_41,
	CF_AUX_TABLE_42,
	CF_AUX_TABLE_43,
	CF_AUX_TABLE_44,
	CF_AUX_TABLE_45,
	CF_AUX_TABLE_46,
	CF_AUX_TABLE_47,
	CF_AUX_TABLE_48,
	CF_AUX_TABLE_49,
	CF_AUX_TABLE_50,
	CF_AUX_TABLE_51,
	CF_AUX_TABLE_52,
	CF_AUX_TABLE_53,
	CF_AUX_TABLE_54,
	CF_AUX_TABLE_55,
	CF_AUX_TABLE_56,
	CF_AUX_TABLE_57,
	CF_AUX_TABLE_58,
	CF_AUX_TABLE_59,
	CF_AUX_TABLE_60,
	CF_AUX_TABLE_61,
	CF_AUX_TABLE_62,
	CF_AUX_TABLE_63,
	CF_AUX_TABLE_64,
	CF_AUX_TABLE_65,
	CF_AUX_TABLE_66,
	CF_AUX_TABLE_67,
	CF_AUX_TABLE_68,
	CF_AUX_TABLE_69,
	CF_AUX_TABLE_70,
	CF_AUX_TABLE_71,
	CF_AUX_TABLE_72,
	CF_AUX_TABLE_73
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 CF_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* CF_AUX_TABLE_1 */,
	2	/* CF_AUX_TABLE_2 */,
	2	/* CF_AUX_TABLE_3 */,
	2	/* CF_AUX_TABLE_4 */,
	3	/* CF_AUX_TABLE_5 */,
	3	/* CF_AUX_TABLE_6 */,
	2	/* CF_AUX_TABLE_7 */,
	2	/* CF_AUX_TABLE_8 */,
	2	/* CF_AUX_TABLE_9 */,
	2	/* CF_AUX_TABLE_10 */,
	2	/* CF_AUX_TABLE_11 */,
	2	/* CF_AUX_TABLE_12 */,
	2	/* CF_AUX_TABLE_13 */,
	3	/* CF_AUX_TABLE_14 */,
	3	/* CF_AUX_TABLE_15 */,
	3	/* CF_AUX_TABLE_16 */,
	2	/* CF_AUX_TABLE_17 */,
	2	/* CF_AUX_TABLE_18 */,
	2	/* CF_AUX_TABLE_19 */,
	2	/* CF_AUX_TABLE_20 */,
	2	/* CF_AUX_TABLE_21 */,
	2	/* CF_AUX_TABLE_22 */,
	2	/* CF_AUX_TABLE_23 */,
	2	/* CF_AUX_TABLE_24 */,
	2	/* CF_AUX_TABLE_25 */,
	2	/* CF_AUX_TABLE_26 */,
	2	/* CF_AUX_TABLE_27 */,
	2	/* CF_AUX_TABLE_28 */,
	2	/* CF_AUX_TABLE_29 */,
	2	/* CF_AUX_TABLE_30 */,
	2	/* CF_AUX_TABLE_31 */,
	2	/* CF_AUX_TABLE_32 */,
	2	/* CF_AUX_TABLE_33 */,
	2	/* CF_AUX_TABLE_34 */,
	2	/* CF_AUX_TABLE_35 */,
	2	/* CF_AUX_TABLE_36 */,
	2	/* CF_AUX_TABLE_37 */,
	2	/* CF_AUX_TABLE_38 */,
	2	/* CF_AUX_TABLE_39 */,
	2	/* CF_AUX_TABLE_40 */,
	2	/* CF_AUX_TABLE_41 */,
	2	/* CF_AUX_TABLE_42 */,
	2	/* CF_AUX_TABLE_43 */,
	2	/* CF_AUX_TABLE_44 */,
	3	/* CF_AUX_TABLE_45 */,
	2	/* CF_AUX_TABLE_46 */,
	2	/* CF_AUX_TABLE_47 */,
	2	/* CF_AUX_TABLE_48 */,
	2	/* CF_AUX_TABLE_49 */,
	3	/* CF_AUX_TABLE_50 */,
	3	/* CF_AUX_TABLE_51 */,
	2	/* CF_AUX_TABLE_52 */,
	3	/* CF_AUX_TABLE_53 */,
	3	/* CF_AUX_TABLE_54 */,
	2	/* CF_AUX_TABLE_55 */,
	2	/* CF_AUX_TABLE_56 */,
	3	/* CF_AUX_TABLE_57 */,
	2	/* CF_AUX_TABLE_58 */,
	2	/* CF_AUX_TABLE_59 */,
	2	/* CF_AUX_TABLE_60 */,
	2	/* CF_AUX_TABLE_61 */,
	3	/* CF_AUX_TABLE_62 */,
	2	/* CF_AUX_TABLE_63 */,
	2	/* CF_AUX_TABLE_64 */,
	2	/* CF_AUX_TABLE_65 */,
	3	/* CF_AUX_TABLE_66 */,
	3	/* CF_AUX_TABLE_67 */,
	2	/* CF_AUX_TABLE_68 */,
	2	/* CF_AUX_TABLE_69 */,
	2	/* CF_AUX_TABLE_70 */,
	2	/* CF_AUX_TABLE_71 */,
	2	/* CF_AUX_TABLE_72 */,
	2	/* CF_AUX_TABLE_73 */
};

static const int Case_Folding_invmap[] = { /* for ASCII/Latin1 */
	0,
	0x61,
	0,
	0x3BC,
	0,
	0xE0,
	0,
	0xF8,
	CF_use_AUX_TABLE_1,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	CF_use_AUX_TABLE_2,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	CF_use_AUX_TABLE_3,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xFF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0x73,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	CF_use_AUX_TABLE_4,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x3B9,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	CF_use_AUX_TABLE_5,
	0x3B1,
	0,
	0x3C3,
	0,
	CF_use_AUX_TABLE_6,
	0,
	0x3C3,
	0,
	0x3D7,
	0x3B2,
	0x3B8,
	0,
	0x3C6,
	0x3C0,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3BA,
	0x3C1,
	0,
	0x3B8,
	0x3B5,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
	0,
	0x52F,
	0,
	0x561,
	0,
	CF_use_AUX_TABLE_7,
	0,
	0x2D00,
	0,
	0x2D27,
	0,
	0x2D2D,
	0,
	0x13F0,
	0,
	0x432,
	0x434,
	0x43E,
	0x441,
	0x442,
	0x44A,
	0x463,
	0xA64B,
	0,
	0x1E01,
	0,
	0x1E03,
	0,
	0x1E05,
	0,
	0x1E07,
	0,
	0x1E09,
	0,
	0x1E0B,
	0,
	0x1E0D,
	0,
	0x1E0F,
	0,
	0x1E11,
	0,
	0x1E13,
	0,
	0x1E15,
	0,
	0x1E17,
	0,
	0x1E19,
	0,
	0x1E1B,
	0,
	0x1E1D,
	0,
	0x1E1F,
	0,
	0x1E21,
	0,
	0x1E23,
	0,
	0x1E25,
	0,
	0x1E27,
	0,
	0x1E29,
	0,
	0x1E2B,
	0,
	0x1E2D,
	0,
	0x1E2F,
	0,
	0x1E31,
	0,
	0x1E33,
	0,
	0x1E35,
	0,
	0x1E37,
	0,
	0x1E39,
	0,
	0x1E3B,
	0,
	0x1E3D,
	0,
	0x1E3F,
	0,
	0x1E41,
	0,
	0x1E43,
	0,
	0x1E45,
	0,
	0x1E47,
	0,
	0x1E49,
	0,
	0x1E4B,
	0,
	0x1E4D,
	0,
	0x1E4F,
	0,
	0x1E51,
	0,
	0x1E53,
	0,
	0x1E55,
	0,
	0x1E57,
	0,
	0x1E59,
	0,
	0x1E5B,
	0,
	0x1E5D,
	0,
	0x1E5F,
	0,
	0x1E61,
	0,
	0x1E63,
	0,
	0x1E65,
	0,
	0x1E67,
	0,
	0x1E69,
	0,
	0x1E6B,
	0,
	0x1E6D,
	0,
	0x1E6F,
	0,
	0x1E71,
	0,
	0x1E73,
	0,
	0x1E75,
	0,
	0x1E77,
	0,
	0x1E79,
	0,
	0x1E7B,
	0,
	0x1E7D,
	0,
	0x1E7F,
	0,
	0x1E81,
	0,
	0x1E83,
	0,
	0x1E85,
	0,
	0x1E87,
	0,
	0x1E89,
	0,
	0x1E8B,
	0,
	0x1E8D,
	0,
	0x1E8F,
	0,
	0x1E91,
	0,
	0x1E93,
	0,
	0x1E95,
	0,
	CF_use_AUX_TABLE_8,
	CF_use_AUX_TABLE_9,
	CF_use_AUX_TABLE_10,
	CF_use_AUX_TABLE_11,
	CF_use_AUX_TABLE_12,
	0x1E61,
	0,
	CF_use_AUX_TABLE_1,
	0,
	0x1EA1,
	0,
	0x1EA3,
	0,
	0x1EA5,
	0,
	0x1EA7,
	0,
	0x1EA9,
	0,
	0x1EAB,
	0,
	0x1EAD,
	0,
	0x1EAF,
	0,
	0x1EB1,
	0,
	0x1EB3,
	0,
	0x1EB5,
	0,
	0x1EB7,
	0,
	0x1EB9,
	0,
	0x1EBB,
	0,
	0x1EBD,
	0,
	0x1EBF,
	0,
	0x1EC1,
	0,
	0x1EC3,
	0,
	0x1EC5,
	0,
	0x1EC7,
	0,
	0x1EC9,
	0,
	0x1ECB,
	0,
	0x1ECD,
	0,
	0x1ECF,
	0,
	0x1ED1,
	0,
	0x1ED3,
	0,
	0x1ED5,
	0,
	0x1ED7,
	0,
	0x1ED9,
	0,
	0x1EDB,
	0,
	0x1EDD,
	0,
	0x1EDF,
	0,
	0x1EE1,
	0,
	0x1EE3,
	0,
	0x1EE5,
	0,
	0x1EE7,
	0,
	0x1EE9,
	0,
	0x1EEB,
	0,
	0x1EED,
	0,
	0x1EEF,
	0,
	0x1EF1,
	0,
	0x1EF3,
	0,
	0x1EF5,
	0,
	0x1EF7,
	0,
	0x1EF9,
	0,
	0x1EFB,
	0,
	0x1EFD,
	0,
	0x1EFF,
	0,
	0x1F00,
	0,
	0x1F10,
	0,
	0x1F20,
	0,
	0x1F30,
	0,
	0x1F40,
	0,
	CF_use_AUX_TABLE_13,
	0,
	CF_use_AUX_TABLE_14,
	0,
	CF_use_AUX_TABLE_15,
	0,
	CF_use_AUX_TABLE_16,
	0,
	0x1F51,
	0,
	0x1F53,
	0,
	0x1F55,
	0,
	0x1F57,
	0,
	0x1F60,
	0,
	CF_use_AUX_TABLE_17,
	CF_use_AUX_TABLE_18,
	CF_use_AUX_TABLE_19,
	CF_use_AUX_TABLE_20,
	CF_use_AUX_TABLE_21,
	CF_use_AUX_TABLE_22,
	CF_use_AUX_TABLE_23,
	CF_use_AUX_TABLE_24,
	CF_use_AUX_TABLE_17,
	CF_use_AUX_TABLE_18,
	CF_use_AUX_TABLE_19,
	CF_use_AUX_TABLE_20,
	CF_use_AUX_TABLE_21,
	CF_use_AUX_TABLE_22,
	CF_use_AUX_TABLE_23,
	CF_use_AUX_TABLE_24,
	CF_use_AUX_TABLE_25,
	CF_use_AUX_TABLE_26,
	CF_use_AUX_TABLE_27,
	CF_use_AUX_TABLE_28,
	CF_use_AUX_TABLE_29,
	CF_use_AUX_TABLE_30,
	CF_use_AUX_TABLE_31,
	CF_use_AUX_TABLE_32,
	CF_use_AUX_TABLE_25,
	CF_use_AUX_TABLE_26,
	CF_use_AUX_TABLE_27,
	CF_use_AUX_TABLE_28,
	CF_use_AUX_TABLE_29,
	CF_use_AUX_TABLE_30,
	CF_use_AUX_TABLE_31,
	CF_use_AUX_TABLE_32,
	CF_use_AUX_TABLE_33,
	CF_use_AUX_TABLE_34,
	CF_use_AUX_TABLE_35,
	CF_use_AUX_TABLE_36,
	CF_use_AUX_TABLE_37,
	CF_use_AUX_TABLE_38,
	CF_use_AUX_TABLE_39,
	CF_use_AUX_TABLE_40,
	CF_use_AUX_TABLE_33,
	CF_use_AUX_TABLE_34,
	CF_use_AUX_TABLE_35,
	CF_use_AUX_TABLE_36,
	CF_use_AUX_TABLE_37,
	CF_use_AUX_TABLE_38,
	CF_use_AUX_TABLE_39,
	CF_use_AUX_TABLE_40,
	0,
	CF_use_AUX_TABLE_41,
	CF_use_AUX_TABLE_42,
	CF_use_AUX_TABLE_43,
	0,
	CF_use_AUX_TABLE_44,
	CF_use_AUX_TABLE_45,
	0x1FB0,
	0x1F70,
	CF_use_AUX_TABLE_42,
	0,
	0x3B9,
	0,
	CF_use_AUX_TABLE_46,
	CF_use_AUX_TABLE_47,
	CF_use_AUX_TABLE_48,
	0,
	CF_use_AUX_TABLE_49,
	CF_use_AUX_TABLE_50,
	0x1F72,
	CF_use_AUX_TABLE_47,
	0,
	CF_use_AUX_TABLE_51,
	CF_use_AUX_TABLE_5,
	0,
	CF_use_AUX_TABLE_52,
	CF_use_AUX_TABLE_53,
	0x1FD0,
	0x1F76,
	0,
	CF_use_AUX_TABLE_54,
	CF_use_AUX_TABLE_6,
	CF_use_AUX_TABLE_55,
	0,
	CF_use_AUX_TABLE_56,
	CF_use_AUX_TABLE_57,
	0x1FE0,
	0x1F7A,
	0x1FE5,
	0,
	CF_use_AUX_TABLE_58,
	CF_use_AUX_TABLE_59,
	CF_use_AUX_TABLE_60,
	0,
	CF_use_AUX_TABLE_61,
	CF_use_AUX_TABLE_62,
	0x1F78,
	0x1F7C,
	CF_use_AUX_TABLE_59,
	0,
	0x3C9,
	0,
	0x6B,
	0xE5,
	0,
	0x214E,
	0,
	0x2170,
	0,
	0x2184,
	0,
	0x24D0,
	0,
	0x2C30,
	0,
	0x2C61,
	0,
	0x26B,
	0x1D7D,
	0x27D,
	0,
	0x2C68,
	0,
	0x2C6A,
	0,
	0x2C6C,
	0,
	0x251,
	0x271,
	0x250,
	0x252,
	0,
	0x2C73,
	0,
	0x2C76,
	0,
	0x23F,
	0x2C81,
	0,
	0x2C83,
	0,
	0x2C85,
	0,
	0x2C87,
	0,
	0x2C89,
	0,
	0x2C8B,
	0,
	0x2C8D,
	0,
	0x2C8F,
	0,
	0x2C91,
	0,
	0x2C93,
	0,
	0x2C95,
	0,
	0x2C97,
	0,
	0x2C99,
	0,
	0x2C9B,
	0,
	0x2C9D,
	0,
	0x2C9F,
	0,
	0x2CA1,
	0,
	0x2CA3,
	0,
	0x2CA5,
	0,
	0x2CA7,
	0,
	0x2CA9,
	0,
	0x2CAB,
	0,
	0x2CAD,
	0,
	0x2CAF,
	0,
	0x2CB1,
	0,
	0x2CB3,
	0,
	0x2CB5,
	0,
	0x2CB7,
	0,
	0x2CB9,
	0,
	0x2CBB,
	0,
	0x2CBD,
	0,
	0x2CBF,
	0,
	0x2CC1,
	0,
	0x2CC3,
	0,
	0x2CC5,
	0,
	0x2CC7,
	0,
	0x2CC9,
	0,
	0x2CCB,
	0,
	0x2CCD,
	0,
	0x2CCF,
	0,
	0x2CD1,
	0,
	0x2CD3,
	0,
	0x2CD5,
	0,
	0x2CD7,
	0,
	0x2CD9,
	0,
	0x2CDB,
	0,
	0x2CDD,
	0,
	0x2CDF,
	0,
	0x2CE1,
	0,
	0x2CE3,
	0,
	0x2CEC,
	0,
	0x2CEE,
	0,
	0x2CF3,
	0,
	0xA641,
	0,
	0xA643,
	0,
	0xA645,
	0,
	0xA647,
	0,
	0xA649,
	0,
	0xA64B,
	0,
	0xA64D,
	0,
	0xA64F,
	0,
	0xA651,
	0,
	0xA653,
	0,
	0xA655,
	0,
	0xA657,
	0,
	0xA659,
	0,
	0xA65B,
	0,
	0xA65D,
	0,
	0xA65F,
	0,
	0xA661,
	0,
	0xA663,
	0,
	0xA665,
	0,
	0xA667,
	0,
	0xA669,
	0,
	0xA66B,
	0,
	0xA66D,
	0,
	0xA681,
	0,
	0xA683,
	0,
	0xA685,
	0,
	0xA687,
	0,
	0xA689,
	0,
	0xA68B,
	0,
	0xA68D,
	0,
	0xA68F,
	0,
	0xA691,
	0,
	0xA693,
	0,
	0xA695,
	0,
	0xA697,
	0,
	0xA699,
	0,
	0xA69B,
	0,
	0xA723,
	0,
	0xA725,
	0,
	0xA727,
	0,
	0xA729,
	0,
	0xA72B,
	0,
	0xA72D,
	0,
	0xA72F,
	0,
	0xA733,
	0,
	0xA735,
	0,
	0xA737,
	0,
	0xA739,
	0,
	0xA73B,
	0,
	0xA73D,
	0,
	0xA73F,
	0,
	0xA741,
	0,
	0xA743,
	0,
	0xA745,
	0,
	0xA747,
	0,
	0xA749,
	0,
	0xA74B,
	0,
	0xA74D,
	0,
	0xA74F,
	0,
	0xA751,
	0,
	0xA753,
	0,
	0xA755,
	0,
	0xA757,
	0,
	0xA759,
	0,
	0xA75B,
	0,
	0xA75D,
	0,
	0xA75F,
	0,
	0xA761,
	0,
	0xA763,
	0,
	0xA765,
	0,
	0xA767,
	0,
	0xA769,
	0,
	0xA76B,
	0,
	0xA76D,
	0,
	0xA76F,
	0,
	0xA77A,
	0,
	0xA77C,
	0,
	0x1D79,
	0xA77F,
	0,
	0xA781,
	0,
	0xA783,
	0,
	0xA785,
	0,
	0xA787,
	0,
	0xA78C,
	0,
	0x265,
	0,
	0xA791,
	0,
	0xA793,
	0,
	0xA797,
	0,
	0xA799,
	0,
	0xA79B,
	0,
	0xA79D,
	0,
	0xA79F,
	0,
	0xA7A1,
	0,
	0xA7A3,
	0,
	0xA7A5,
	0,
	0xA7A7,
	0,
	0xA7A9,
	0,
	0x266,
	0x25C,
	0x261,
	0x26C,
	0x26A,
	0,
	0x29E,
	0x287,
	0x29D,
	0xAB53,
	0xA7B5,
	0,
	0xA7B7,
	0,
	0x13A0,
	0,
	CF_use_AUX_TABLE_63,
	CF_use_AUX_TABLE_64,
	CF_use_AUX_TABLE_65,
	CF_use_AUX_TABLE_66,
	CF_use_AUX_TABLE_67,
	CF_use_AUX_TABLE_68,
	0,
	CF_use_AUX_TABLE_69,
	CF_use_AUX_TABLE_70,
	CF_use_AUX_TABLE_71,
	CF_use_AUX_TABLE_72,
	CF_use_AUX_TABLE_73,
	0,
	0xFF41,
	0,
	0x10428,
	0,
	0x104D8,
	0,
	0x10CC0,
	0,
	0x118C0,
	0,
	0x1E922,
	0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Case_Folding_invlist[] = { /* for EBCDIC 1047 */
	1392,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59,
	0x5A,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x179,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x182,
	0x183,
	0x184,
	0x185,
	0x186,
	0x187,
	0x188,
	0x189,
	0x18B,
	0x18C,
	0x18E,
	0x18F,
	0x190,
	0x191,
	0x192,
	0x193,
	0x194,
	0x195,
	0x196,
	0x197,
	0x198,
	0x199,
	0x19C,
	0x19D,
	0x19E,
	0x19F,
	0x1A0,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A7,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1AF,
	0x1B0,
	0x1B1,
	0x1B3,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B8,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F7,
	0x1F8,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23B,
	0x23C,
	0x23D,
	0x23E,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x244,
	0x245,
	0x246,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x345,
	0x346,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3B0,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FA,
	0x3FB,
	0x3FD,
	0x400,
	0x410,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C1,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x587,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E97,
	0x1E98,
	0x1E99,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F80,
	0x1F81,
	0x1F82,
	0x1F83,
	0x1F84,
	0x1F85,
	0x1F86,
	0x1F87,
	0x1F88,
	0x1F89,
	0x1F8A,
	0x1F8B,
	0x1F8C,
	0x1F8D,
	0x1F8E,
	0x1F8F,
	0x1F90,
	0x1F91,
	0x1F92,
	0x1F93,
	0x1F94,
	0x1F95,
	0x1F96,
	0x1F97,
	0x1F98,
	0x1F99,
	0x1F9A,
	0x1F9B,
	0x1F9C,
	0x1F9D,
	0x1F9E,
	0x1F9F,
	0x1FA0,
	0x1FA1,
	0x1FA2,
	0x1FA3,
	0x1FA4,
	0x1FA5,
	0x1FA6,
	0x1FA7,
	0x1FA8,
	0x1FA9,
	0x1FAA,
	0x1FAB,
	0x1FAC,
	0x1FAD,
	0x1FAE,
	0x1FAF,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FB5,
	0x1FB6,
	0x1FB7,
	0x1FB8,
	0x1FBA,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC3,
	0x1FC4,
	0x1FC5,
	0x1FC6,
	0x1FC7,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FD6,
	0x1FD7,
	0x1FD8,
	0x1FDA,
	0x1FDC,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FE7,
	0x1FE8,
	0x1FEA,
	0x1FEC,
	0x1FED,
	0x1FF2,
	0x1FF3,
	0x1FF4,
	0x1FF5,
	0x1FF6,
	0x1FF7,
	0x1FF8,
	0x1FFA,
	0x1FFC,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212B,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C63,
	0x2C64,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C6E,
	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB01,
	0xFB02,
	0xFB03,
	0xFB04,
	0xFB05,
	0xFB07,
	0xFB13,
	0xFB14,
	0xFB15,
	0xFB16,
	0xFB17,
	0xFB18,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	CF_0 = 0,
	CF_use_AUX_TABLE_1 = -1,
	CF_use_AUX_TABLE_2 = -2,
	CF_use_AUX_TABLE_3 = -3,
	CF_use_AUX_TABLE_4 = -4,
	CF_use_AUX_TABLE_5 = -5,
	CF_use_AUX_TABLE_6 = -6,
	CF_use_AUX_TABLE_7 = -7,
	CF_use_AUX_TABLE_8 = -8,
	CF_use_AUX_TABLE_9 = -9,
	CF_use_AUX_TABLE_10 = -10,
	CF_use_AUX_TABLE_11 = -11,
	CF_use_AUX_TABLE_12 = -12,
	CF_use_AUX_TABLE_13 = -13,
	CF_use_AUX_TABLE_14 = -14,
	CF_use_AUX_TABLE_15 = -15,
	CF_use_AUX_TABLE_16 = -16,
	CF_use_AUX_TABLE_17 = -17,
	CF_use_AUX_TABLE_18 = -18,
	CF_use_AUX_TABLE_19 = -19,
	CF_use_AUX_TABLE_20 = -20,
	CF_use_AUX_TABLE_21 = -21,
	CF_use_AUX_TABLE_22 = -22,
	CF_use_AUX_TABLE_23 = -23,
	CF_use_AUX_TABLE_24 = -24,
	CF_use_AUX_TABLE_25 = -25,
	CF_use_AUX_TABLE_26 = -26,
	CF_use_AUX_TABLE_27 = -27,
	CF_use_AUX_TABLE_28 = -28,
	CF_use_AUX_TABLE_29 = -29,
	CF_use_AUX_TABLE_30 = -30,
	CF_use_AUX_TABLE_31 = -31,
	CF_use_AUX_TABLE_32 = -32,
	CF_use_AUX_TABLE_33 = -33,
	CF_use_AUX_TABLE_34 = -34,
	CF_use_AUX_TABLE_35 = -35,
	CF_use_AUX_TABLE_36 = -36,
	CF_use_AUX_TABLE_37 = -37,
	CF_use_AUX_TABLE_38 = -38,
	CF_use_AUX_TABLE_39 = -39,
	CF_use_AUX_TABLE_40 = -40,
	CF_use_AUX_TABLE_41 = -41,
	CF_use_AUX_TABLE_42 = -42,
	CF_use_AUX_TABLE_43 = -43,
	CF_use_AUX_TABLE_44 = -44,
	CF_use_AUX_TABLE_45 = -45,
	CF_use_AUX_TABLE_46 = -46,
	CF_use_AUX_TABLE_47 = -47,
	CF_use_AUX_TABLE_48 = -48,
	CF_use_AUX_TABLE_49 = -49,
	CF_use_AUX_TABLE_50 = -50,
	CF_use_AUX_TABLE_51 = -51,
	CF_use_AUX_TABLE_52 = -52,
	CF_use_AUX_TABLE_53 = -53,
	CF_use_AUX_TABLE_54 = -54,
	CF_use_AUX_TABLE_55 = -55,
	CF_use_AUX_TABLE_56 = -56,
	CF_use_AUX_TABLE_57 = -57,
	CF_use_AUX_TABLE_58 = -58,
	CF_use_AUX_TABLE_59 = -59,
	CF_use_AUX_TABLE_60 = -60,
	CF_use_AUX_TABLE_61 = -61,
	CF_use_AUX_TABLE_62 = -62,
	CF_use_AUX_TABLE_63 = -63,
	CF_use_AUX_TABLE_64 = -64,
	CF_use_AUX_TABLE_65 = -65,
	CF_use_AUX_TABLE_66 = -66,
	CF_use_AUX_TABLE_67 = -67,
	CF_use_AUX_TABLE_68 = -68,
	CF_use_AUX_TABLE_69 = -69,
	CF_use_AUX_TABLE_70 = -70,
	CF_use_AUX_TABLE_71 = -71,
	CF_use_AUX_TABLE_72 = -72,
	CF_use_AUX_TABLE_73 = -73
} CF_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_CF_AUX_TABLES

static const unsigned int CF_AUX_TABLE_1[] = {
	0xA2,
	0xA2
};

static const unsigned int CF_AUX_TABLE_2[] = {
	0x89,
	0x307
};

static const unsigned int CF_AUX_TABLE_3[] = {
	0x2BC,
	0x95
};

static const unsigned int CF_AUX_TABLE_4[] = {
	0x91,
	0x30C
};

static const unsigned int CF_AUX_TABLE_5[] = {
	0x3B9,
	0x308,
	0x301
};

static const unsigned int CF_AUX_TABLE_6[] = {
	0x3C5,
	0x308,
	0x301
};

static const unsigned int CF_AUX_TABLE_7[] = {
	0x565,
	0x582
};

static const unsigned int CF_AUX_TABLE_8[] = {
	0x88,
	0x331
};

static const unsigned int CF_AUX_TABLE_9[] = {
	0xA3,
	0x308
};

static const unsigned int CF_AUX_TABLE_10[] = {
	0xA6,
	0x30A
};

static const unsigned int CF_AUX_TABLE_11[] = {
	0xA8,
	0x30A
};

static const unsigned int CF_AUX_TABLE_12[] = {
	0x81,
	0x2BE
};

static const unsigned int CF_AUX_TABLE_13[] = {
	0x3C5,
	0x313
};

static const unsigned int CF_AUX_TABLE_14[] = {
	0x3C5,
	0x313,
	0x300
};

static const unsigned int CF_AUX_TABLE_15[] = {
	0x3C5,
	0x313,
	0x301
};

static const unsigned int CF_AUX_TABLE_16[] = {
	0x3C5,
	0x313,
	0x342
};

static const unsigned int CF_AUX_TABLE_17[] = {
	0x1F00,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_18[] = {
	0x1F01,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_19[] = {
	0x1F02,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_20[] = {
	0x1F03,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_21[] = {
	0x1F04,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_22[] = {
	0x1F05,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_23[] = {
	0x1F06,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_24[] = {
	0x1F07,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_25[] = {
	0x1F20,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_26[] = {
	0x1F21,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_27[] = {
	0x1F22,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_28[] = {
	0x1F23,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_29[] = {
	0x1F24,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_30[] = {
	0x1F25,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_31[] = {
	0x1F26,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_32[] = {
	0x1F27,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_33[] = {
	0x1F60,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_34[] = {
	0x1F61,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_35[] = {
	0x1F62,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_36[] = {
	0x1F63,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_37[] = {
	0x1F64,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_38[] = {
	0x1F65,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_39[] = {
	0x1F66,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_40[] = {
	0x1F67,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_41[] = {
	0x1F70,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_42[] = {
	0x3B1,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_43[] = {
	0x3AC,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_44[] = {
	0x3B1,
	0x342
};

static const unsigned int CF_AUX_TABLE_45[] = {
	0x3B1,
	0x342,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_46[] = {
	0x1F74,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_47[] = {
	0x3B7,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_48[] = {
	0x3AE,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_49[] = {
	0x3B7,
	0x342
};

static const unsigned int CF_AUX_TABLE_50[] = {
	0x3B7,
	0x342,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_51[] = {
	0x3B9,
	0x308,
	0x300
};

static const unsigned int CF_AUX_TABLE_52[] = {
	0x3B9,
	0x342
};

static const unsigned int CF_AUX_TABLE_53[] = {
	0x3B9,
	0x308,
	0x342
};

static const unsigned int CF_AUX_TABLE_54[] = {
	0x3C5,
	0x308,
	0x300
};

static const unsigned int CF_AUX_TABLE_55[] = {
	0x3C1,
	0x313
};

static const unsigned int CF_AUX_TABLE_56[] = {
	0x3C5,
	0x342
};

static const unsigned int CF_AUX_TABLE_57[] = {
	0x3C5,
	0x308,
	0x342
};

static const unsigned int CF_AUX_TABLE_58[] = {
	0x1F7C,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_59[] = {
	0x3C9,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_60[] = {
	0x3CE,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_61[] = {
	0x3C9,
	0x342
};

static const unsigned int CF_AUX_TABLE_62[] = {
	0x3C9,
	0x342,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_63[] = {
	0x86,
	0x86
};

static const unsigned int CF_AUX_TABLE_64[] = {
	0x86,
	0x89
};

static const unsigned int CF_AUX_TABLE_65[] = {
	0x86,
	0x93
};

static const unsigned int CF_AUX_TABLE_66[] = {
	0x86,
	0x86,
	0x89
};

static const unsigned int CF_AUX_TABLE_67[] = {
	0x86,
	0x86,
	0x93
};

static const unsigned int CF_AUX_TABLE_68[] = {
	0xA2,
	0xA3
};

static const unsigned int CF_AUX_TABLE_69[] = {
	0x574,
	0x576
};

static const unsigned int CF_AUX_TABLE_70[] = {
	0x574,
	0x565
};

static const unsigned int CF_AUX_TABLE_71[] = {
	0x574,
	0x56B
};

static const unsigned int CF_AUX_TABLE_72[] = {
	0x57E,
	0x576
};

static const unsigned int CF_AUX_TABLE_73[] = {
	0x574,
	0x56D
};

static const unsigned int * const CF_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	CF_AUX_TABLE_1,
	CF_AUX_TABLE_2,
	CF_AUX_TABLE_3,
	CF_AUX_TABLE_4,
	CF_AUX_TABLE_5,
	CF_AUX_TABLE_6,
	CF_AUX_TABLE_7,
	CF_AUX_TABLE_8,
	CF_AUX_TABLE_9,
	CF_AUX_TABLE_10,
	CF_AUX_TABLE_11,
	CF_AUX_TABLE_12,
	CF_AUX_TABLE_13,
	CF_AUX_TABLE_14,
	CF_AUX_TABLE_15,
	CF_AUX_TABLE_16,
	CF_AUX_TABLE_17,
	CF_AUX_TABLE_18,
	CF_AUX_TABLE_19,
	CF_AUX_TABLE_20,
	CF_AUX_TABLE_21,
	CF_AUX_TABLE_22,
	CF_AUX_TABLE_23,
	CF_AUX_TABLE_24,
	CF_AUX_TABLE_25,
	CF_AUX_TABLE_26,
	CF_AUX_TABLE_27,
	CF_AUX_TABLE_28,
	CF_AUX_TABLE_29,
	CF_AUX_TABLE_30,
	CF_AUX_TABLE_31,
	CF_AUX_TABLE_32,
	CF_AUX_TABLE_33,
	CF_AUX_TABLE_34,
	CF_AUX_TABLE_35,
	CF_AUX_TABLE_36,
	CF_AUX_TABLE_37,
	CF_AUX_TABLE_38,
	CF_AUX_TABLE_39,
	CF_AUX_TABLE_40,
	CF_AUX_TABLE_41,
	CF_AUX_TABLE_42,
	CF_AUX_TABLE_43,
	CF_AUX_TABLE_44,
	CF_AUX_TABLE_45,
	CF_AUX_TABLE_46,
	CF_AUX_TABLE_47,
	CF_AUX_TABLE_48,
	CF_AUX_TABLE_49,
	CF_AUX_TABLE_50,
	CF_AUX_TABLE_51,
	CF_AUX_TABLE_52,
	CF_AUX_TABLE_53,
	CF_AUX_TABLE_54,
	CF_AUX_TABLE_55,
	CF_AUX_TABLE_56,
	CF_AUX_TABLE_57,
	CF_AUX_TABLE_58,
	CF_AUX_TABLE_59,
	CF_AUX_TABLE_60,
	CF_AUX_TABLE_61,
	CF_AUX_TABLE_62,
	CF_AUX_TABLE_63,
	CF_AUX_TABLE_64,
	CF_AUX_TABLE_65,
	CF_AUX_TABLE_66,
	CF_AUX_TABLE_67,
	CF_AUX_TABLE_68,
	CF_AUX_TABLE_69,
	CF_AUX_TABLE_70,
	CF_AUX_TABLE_71,
	CF_AUX_TABLE_72,
	CF_AUX_TABLE_73
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 CF_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* CF_AUX_TABLE_1 */,
	2	/* CF_AUX_TABLE_2 */,
	2	/* CF_AUX_TABLE_3 */,
	2	/* CF_AUX_TABLE_4 */,
	3	/* CF_AUX_TABLE_5 */,
	3	/* CF_AUX_TABLE_6 */,
	2	/* CF_AUX_TABLE_7 */,
	2	/* CF_AUX_TABLE_8 */,
	2	/* CF_AUX_TABLE_9 */,
	2	/* CF_AUX_TABLE_10 */,
	2	/* CF_AUX_TABLE_11 */,
	2	/* CF_AUX_TABLE_12 */,
	2	/* CF_AUX_TABLE_13 */,
	3	/* CF_AUX_TABLE_14 */,
	3	/* CF_AUX_TABLE_15 */,
	3	/* CF_AUX_TABLE_16 */,
	2	/* CF_AUX_TABLE_17 */,
	2	/* CF_AUX_TABLE_18 */,
	2	/* CF_AUX_TABLE_19 */,
	2	/* CF_AUX_TABLE_20 */,
	2	/* CF_AUX_TABLE_21 */,
	2	/* CF_AUX_TABLE_22 */,
	2	/* CF_AUX_TABLE_23 */,
	2	/* CF_AUX_TABLE_24 */,
	2	/* CF_AUX_TABLE_25 */,
	2	/* CF_AUX_TABLE_26 */,
	2	/* CF_AUX_TABLE_27 */,
	2	/* CF_AUX_TABLE_28 */,
	2	/* CF_AUX_TABLE_29 */,
	2	/* CF_AUX_TABLE_30 */,
	2	/* CF_AUX_TABLE_31 */,
	2	/* CF_AUX_TABLE_32 */,
	2	/* CF_AUX_TABLE_33 */,
	2	/* CF_AUX_TABLE_34 */,
	2	/* CF_AUX_TABLE_35 */,
	2	/* CF_AUX_TABLE_36 */,
	2	/* CF_AUX_TABLE_37 */,
	2	/* CF_AUX_TABLE_38 */,
	2	/* CF_AUX_TABLE_39 */,
	2	/* CF_AUX_TABLE_40 */,
	2	/* CF_AUX_TABLE_41 */,
	2	/* CF_AUX_TABLE_42 */,
	2	/* CF_AUX_TABLE_43 */,
	2	/* CF_AUX_TABLE_44 */,
	3	/* CF_AUX_TABLE_45 */,
	2	/* CF_AUX_TABLE_46 */,
	2	/* CF_AUX_TABLE_47 */,
	2	/* CF_AUX_TABLE_48 */,
	2	/* CF_AUX_TABLE_49 */,
	3	/* CF_AUX_TABLE_50 */,
	3	/* CF_AUX_TABLE_51 */,
	2	/* CF_AUX_TABLE_52 */,
	3	/* CF_AUX_TABLE_53 */,
	3	/* CF_AUX_TABLE_54 */,
	2	/* CF_AUX_TABLE_55 */,
	2	/* CF_AUX_TABLE_56 */,
	3	/* CF_AUX_TABLE_57 */,
	2	/* CF_AUX_TABLE_58 */,
	2	/* CF_AUX_TABLE_59 */,
	2	/* CF_AUX_TABLE_60 */,
	2	/* CF_AUX_TABLE_61 */,
	3	/* CF_AUX_TABLE_62 */,
	2	/* CF_AUX_TABLE_63 */,
	2	/* CF_AUX_TABLE_64 */,
	2	/* CF_AUX_TABLE_65 */,
	3	/* CF_AUX_TABLE_66 */,
	3	/* CF_AUX_TABLE_67 */,
	2	/* CF_AUX_TABLE_68 */,
	2	/* CF_AUX_TABLE_69 */,
	2	/* CF_AUX_TABLE_70 */,
	2	/* CF_AUX_TABLE_71 */,
	2	/* CF_AUX_TABLE_72 */,
	2	/* CF_AUX_TABLE_73 */
};

static const int Case_Folding_invmap[] = { /* for EBCDIC 1047 */
	0,
	CF_use_AUX_TABLE_1,
	0,
	0x42,
	0,
	0x51,
	0,
	0x70,
	0,
	0x9C,
	0,
	0x3BC,
	0,
	0x8C,
	0,
	0x8E,
	0,
	0x8D,
	0,
	0x81,
	0,
	0x91,
	0,
	0xA2,
	0,
	0xCB,
	0,
	0xDB,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	CF_use_AUX_TABLE_2,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	CF_use_AUX_TABLE_3,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xDF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0xA2,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	CF_use_AUX_TABLE_4,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x3B9,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	CF_use_AUX_TABLE_5,
	0x3B1,
	0,
	0x3C3,
	0,
	CF_use_AUX_TABLE_6,
	0,
	0x3C3,
	0,
	0x3D7,
	0x3B2,
	0x3B8,
	0,
	0x3C6,
	0x3C0,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3BA,
	0x3C1,
	0,
	0x3B8,
	0x3B5,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
	0,
	0x52F,
	0,
	0x561,
	0,
	CF_use_AUX_TABLE_7,
	0,
	0x2D00,
	0,
	0x2D27,
	0,
	0x2D2D,
	0,
	0x13F0,
	0,
	0x432,
	0x434,
	0x43E,
	0x441,
	0x442,
	0x44A,
	0x463,
	0xA64B,
	0,
	0x1E01,
	0,
	0x1E03,
	0,
	0x1E05,
	0,
	0x1E07,
	0,
	0x1E09,
	0,
	0x1E0B,
	0,
	0x1E0D,
	0,
	0x1E0F,
	0,
	0x1E11,
	0,
	0x1E13,
	0,
	0x1E15,
	0,
	0x1E17,
	0,
	0x1E19,
	0,
	0x1E1B,
	0,
	0x1E1D,
	0,
	0x1E1F,
	0,
	0x1E21,
	0,
	0x1E23,
	0,
	0x1E25,
	0,
	0x1E27,
	0,
	0x1E29,
	0,
	0x1E2B,
	0,
	0x1E2D,
	0,
	0x1E2F,
	0,
	0x1E31,
	0,
	0x1E33,
	0,
	0x1E35,
	0,
	0x1E37,
	0,
	0x1E39,
	0,
	0x1E3B,
	0,
	0x1E3D,
	0,
	0x1E3F,
	0,
	0x1E41,
	0,
	0x1E43,
	0,
	0x1E45,
	0,
	0x1E47,
	0,
	0x1E49,
	0,
	0x1E4B,
	0,
	0x1E4D,
	0,
	0x1E4F,
	0,
	0x1E51,
	0,
	0x1E53,
	0,
	0x1E55,
	0,
	0x1E57,
	0,
	0x1E59,
	0,
	0x1E5B,
	0,
	0x1E5D,
	0,
	0x1E5F,
	0,
	0x1E61,
	0,
	0x1E63,
	0,
	0x1E65,
	0,
	0x1E67,
	0,
	0x1E69,
	0,
	0x1E6B,
	0,
	0x1E6D,
	0,
	0x1E6F,
	0,
	0x1E71,
	0,
	0x1E73,
	0,
	0x1E75,
	0,
	0x1E77,
	0,
	0x1E79,
	0,
	0x1E7B,
	0,
	0x1E7D,
	0,
	0x1E7F,
	0,
	0x1E81,
	0,
	0x1E83,
	0,
	0x1E85,
	0,
	0x1E87,
	0,
	0x1E89,
	0,
	0x1E8B,
	0,
	0x1E8D,
	0,
	0x1E8F,
	0,
	0x1E91,
	0,
	0x1E93,
	0,
	0x1E95,
	0,
	CF_use_AUX_TABLE_8,
	CF_use_AUX_TABLE_9,
	CF_use_AUX_TABLE_10,
	CF_use_AUX_TABLE_11,
	CF_use_AUX_TABLE_12,
	0x1E61,
	0,
	CF_use_AUX_TABLE_1,
	0,
	0x1EA1,
	0,
	0x1EA3,
	0,
	0x1EA5,
	0,
	0x1EA7,
	0,
	0x1EA9,
	0,
	0x1EAB,
	0,
	0x1EAD,
	0,
	0x1EAF,
	0,
	0x1EB1,
	0,
	0x1EB3,
	0,
	0x1EB5,
	0,
	0x1EB7,
	0,
	0x1EB9,
	0,
	0x1EBB,
	0,
	0x1EBD,
	0,
	0x1EBF,
	0,
	0x1EC1,
	0,
	0x1EC3,
	0,
	0x1EC5,
	0,
	0x1EC7,
	0,
	0x1EC9,
	0,
	0x1ECB,
	0,
	0x1ECD,
	0,
	0x1ECF,
	0,
	0x1ED1,
	0,
	0x1ED3,
	0,
	0x1ED5,
	0,
	0x1ED7,
	0,
	0x1ED9,
	0,
	0x1EDB,
	0,
	0x1EDD,
	0,
	0x1EDF,
	0,
	0x1EE1,
	0,
	0x1EE3,
	0,
	0x1EE5,
	0,
	0x1EE7,
	0,
	0x1EE9,
	0,
	0x1EEB,
	0,
	0x1EED,
	0,
	0x1EEF,
	0,
	0x1EF1,
	0,
	0x1EF3,
	0,
	0x1EF5,
	0,
	0x1EF7,
	0,
	0x1EF9,
	0,
	0x1EFB,
	0,
	0x1EFD,
	0,
	0x1EFF,
	0,
	0x1F00,
	0,
	0x1F10,
	0,
	0x1F20,
	0,
	0x1F30,
	0,
	0x1F40,
	0,
	CF_use_AUX_TABLE_13,
	0,
	CF_use_AUX_TABLE_14,
	0,
	CF_use_AUX_TABLE_15,
	0,
	CF_use_AUX_TABLE_16,
	0,
	0x1F51,
	0,
	0x1F53,
	0,
	0x1F55,
	0,
	0x1F57,
	0,
	0x1F60,
	0,
	CF_use_AUX_TABLE_17,
	CF_use_AUX_TABLE_18,
	CF_use_AUX_TABLE_19,
	CF_use_AUX_TABLE_20,
	CF_use_AUX_TABLE_21,
	CF_use_AUX_TABLE_22,
	CF_use_AUX_TABLE_23,
	CF_use_AUX_TABLE_24,
	CF_use_AUX_TABLE_17,
	CF_use_AUX_TABLE_18,
	CF_use_AUX_TABLE_19,
	CF_use_AUX_TABLE_20,
	CF_use_AUX_TABLE_21,
	CF_use_AUX_TABLE_22,
	CF_use_AUX_TABLE_23,
	CF_use_AUX_TABLE_24,
	CF_use_AUX_TABLE_25,
	CF_use_AUX_TABLE_26,
	CF_use_AUX_TABLE_27,
	CF_use_AUX_TABLE_28,
	CF_use_AUX_TABLE_29,
	CF_use_AUX_TABLE_30,
	CF_use_AUX_TABLE_31,
	CF_use_AUX_TABLE_32,
	CF_use_AUX_TABLE_25,
	CF_use_AUX_TABLE_26,
	CF_use_AUX_TABLE_27,
	CF_use_AUX_TABLE_28,
	CF_use_AUX_TABLE_29,
	CF_use_AUX_TABLE_30,
	CF_use_AUX_TABLE_31,
	CF_use_AUX_TABLE_32,
	CF_use_AUX_TABLE_33,
	CF_use_AUX_TABLE_34,
	CF_use_AUX_TABLE_35,
	CF_use_AUX_TABLE_36,
	CF_use_AUX_TABLE_37,
	CF_use_AUX_TABLE_38,
	CF_use_AUX_TABLE_39,
	CF_use_AUX_TABLE_40,
	CF_use_AUX_TABLE_33,
	CF_use_AUX_TABLE_34,
	CF_use_AUX_TABLE_35,
	CF_use_AUX_TABLE_36,
	CF_use_AUX_TABLE_37,
	CF_use_AUX_TABLE_38,
	CF_use_AUX_TABLE_39,
	CF_use_AUX_TABLE_40,
	0,
	CF_use_AUX_TABLE_41,
	CF_use_AUX_TABLE_42,
	CF_use_AUX_TABLE_43,
	0,
	CF_use_AUX_TABLE_44,
	CF_use_AUX_TABLE_45,
	0x1FB0,
	0x1F70,
	CF_use_AUX_TABLE_42,
	0,
	0x3B9,
	0,
	CF_use_AUX_TABLE_46,
	CF_use_AUX_TABLE_47,
	CF_use_AUX_TABLE_48,
	0,
	CF_use_AUX_TABLE_49,
	CF_use_AUX_TABLE_50,
	0x1F72,
	CF_use_AUX_TABLE_47,
	0,
	CF_use_AUX_TABLE_51,
	CF_use_AUX_TABLE_5,
	0,
	CF_use_AUX_TABLE_52,
	CF_use_AUX_TABLE_53,
	0x1FD0,
	0x1F76,
	0,
	CF_use_AUX_TABLE_54,
	CF_use_AUX_TABLE_6,
	CF_use_AUX_TABLE_55,
	0,
	CF_use_AUX_TABLE_56,
	CF_use_AUX_TABLE_57,
	0x1FE0,
	0x1F7A,
	0x1FE5,
	0,
	CF_use_AUX_TABLE_58,
	CF_use_AUX_TABLE_59,
	CF_use_AUX_TABLE_60,
	0,
	CF_use_AUX_TABLE_61,
	CF_use_AUX_TABLE_62,
	0x1F78,
	0x1F7C,
	CF_use_AUX_TABLE_59,
	0,
	0x3C9,
	0,
	0x92,
	0x47,
	0,
	0x214E,
	0,
	0x2170,
	0,
	0x2184,
	0,
	0x24D0,
	0,
	0x2C30,
	0,
	0x2C61,
	0,
	0x26B,
	0x1D7D,
	0x27D,
	0,
	0x2C68,
	0,
	0x2C6A,
	0,
	0x2C6C,
	0,
	0x251,
	0x271,
	0x250,
	0x252,
	0,
	0x2C73,
	0,
	0x2C76,
	0,
	0x23F,
	0x2C81,
	0,
	0x2C83,
	0,
	0x2C85,
	0,
	0x2C87,
	0,
	0x2C89,
	0,
	0x2C8B,
	0,
	0x2C8D,
	0,
	0x2C8F,
	0,
	0x2C91,
	0,
	0x2C93,
	0,
	0x2C95,
	0,
	0x2C97,
	0,
	0x2C99,
	0,
	0x2C9B,
	0,
	0x2C9D,
	0,
	0x2C9F,
	0,
	0x2CA1,
	0,
	0x2CA3,
	0,
	0x2CA5,
	0,
	0x2CA7,
	0,
	0x2CA9,
	0,
	0x2CAB,
	0,
	0x2CAD,
	0,
	0x2CAF,
	0,
	0x2CB1,
	0,
	0x2CB3,
	0,
	0x2CB5,
	0,
	0x2CB7,
	0,
	0x2CB9,
	0,
	0x2CBB,
	0,
	0x2CBD,
	0,
	0x2CBF,
	0,
	0x2CC1,
	0,
	0x2CC3,
	0,
	0x2CC5,
	0,
	0x2CC7,
	0,
	0x2CC9,
	0,
	0x2CCB,
	0,
	0x2CCD,
	0,
	0x2CCF,
	0,
	0x2CD1,
	0,
	0x2CD3,
	0,
	0x2CD5,
	0,
	0x2CD7,
	0,
	0x2CD9,
	0,
	0x2CDB,
	0,
	0x2CDD,
	0,
	0x2CDF,
	0,
	0x2CE1,
	0,
	0x2CE3,
	0,
	0x2CEC,
	0,
	0x2CEE,
	0,
	0x2CF3,
	0,
	0xA641,
	0,
	0xA643,
	0,
	0xA645,
	0,
	0xA647,
	0,
	0xA649,
	0,
	0xA64B,
	0,
	0xA64D,
	0,
	0xA64F,
	0,
	0xA651,
	0,
	0xA653,
	0,
	0xA655,
	0,
	0xA657,
	0,
	0xA659,
	0,
	0xA65B,
	0,
	0xA65D,
	0,
	0xA65F,
	0,
	0xA661,
	0,
	0xA663,
	0,
	0xA665,
	0,
	0xA667,
	0,
	0xA669,
	0,
	0xA66B,
	0,
	0xA66D,
	0,
	0xA681,
	0,
	0xA683,
	0,
	0xA685,
	0,
	0xA687,
	0,
	0xA689,
	0,
	0xA68B,
	0,
	0xA68D,
	0,
	0xA68F,
	0,
	0xA691,
	0,
	0xA693,
	0,
	0xA695,
	0,
	0xA697,
	0,
	0xA699,
	0,
	0xA69B,
	0,
	0xA723,
	0,
	0xA725,
	0,
	0xA727,
	0,
	0xA729,
	0,
	0xA72B,
	0,
	0xA72D,
	0,
	0xA72F,
	0,
	0xA733,
	0,
	0xA735,
	0,
	0xA737,
	0,
	0xA739,
	0,
	0xA73B,
	0,
	0xA73D,
	0,
	0xA73F,
	0,
	0xA741,
	0,
	0xA743,
	0,
	0xA745,
	0,
	0xA747,
	0,
	0xA749,
	0,
	0xA74B,
	0,
	0xA74D,
	0,
	0xA74F,
	0,
	0xA751,
	0,
	0xA753,
	0,
	0xA755,
	0,
	0xA757,
	0,
	0xA759,
	0,
	0xA75B,
	0,
	0xA75D,
	0,
	0xA75F,
	0,
	0xA761,
	0,
	0xA763,
	0,
	0xA765,
	0,
	0xA767,
	0,
	0xA769,
	0,
	0xA76B,
	0,
	0xA76D,
	0,
	0xA76F,
	0,
	0xA77A,
	0,
	0xA77C,
	0,
	0x1D79,
	0xA77F,
	0,
	0xA781,
	0,
	0xA783,
	0,
	0xA785,
	0,
	0xA787,
	0,
	0xA78C,
	0,
	0x265,
	0,
	0xA791,
	0,
	0xA793,
	0,
	0xA797,
	0,
	0xA799,
	0,
	0xA79B,
	0,
	0xA79D,
	0,
	0xA79F,
	0,
	0xA7A1,
	0,
	0xA7A3,
	0,
	0xA7A5,
	0,
	0xA7A7,
	0,
	0xA7A9,
	0,
	0x266,
	0x25C,
	0x261,
	0x26C,
	0x26A,
	0,
	0x29E,
	0x287,
	0x29D,
	0xAB53,
	0xA7B5,
	0,
	0xA7B7,
	0,
	0x13A0,
	0,
	CF_use_AUX_TABLE_63,
	CF_use_AUX_TABLE_64,
	CF_use_AUX_TABLE_65,
	CF_use_AUX_TABLE_66,
	CF_use_AUX_TABLE_67,
	CF_use_AUX_TABLE_68,
	0,
	CF_use_AUX_TABLE_69,
	CF_use_AUX_TABLE_70,
	CF_use_AUX_TABLE_71,
	CF_use_AUX_TABLE_72,
	CF_use_AUX_TABLE_73,
	0,
	0xFF41,
	0,
	0x10428,
	0,
	0x104D8,
	0,
	0x10CC0,
	0,
	0x118C0,
	0,
	0x1E922,
	0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Case_Folding_invlist[] = { /* for EBCDIC 037 */
	1388,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59,
	0x5A,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x179,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x182,
	0x183,
	0x184,
	0x185,
	0x186,
	0x187,
	0x188,
	0x189,
	0x18B,
	0x18C,
	0x18E,
	0x18F,
	0x190,
	0x191,
	0x192,
	0x193,
	0x194,
	0x195,
	0x196,
	0x197,
	0x198,
	0x199,
	0x19C,
	0x19D,
	0x19E,
	0x19F,
	0x1A0,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A7,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1AF,
	0x1B0,
	0x1B1,
	0x1B3,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B8,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F7,
	0x1F8,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23B,
	0x23C,
	0x23D,
	0x23E,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x244,
	0x245,
	0x246,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x345,
	0x346,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3B0,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FA,
	0x3FB,
	0x3FD,
	0x400,
	0x410,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C1,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x587,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E97,
	0x1E98,
	0x1E99,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F80,
	0x1F81,
	0x1F82,
	0x1F83,
	0x1F84,
	0x1F85,
	0x1F86,
	0x1F87,
	0x1F88,
	0x1F89,
	0x1F8A,
	0x1F8B,
	0x1F8C,
	0x1F8D,
	0x1F8E,
	0x1F8F,
	0x1F90,
	0x1F91,
	0x1F92,
	0x1F93,
	0x1F94,
	0x1F95,
	0x1F96,
	0x1F97,
	0x1F98,
	0x1F99,
	0x1F9A,
	0x1F9B,
	0x1F9C,
	0x1F9D,
	0x1F9E,
	0x1F9F,
	0x1FA0,
	0x1FA1,
	0x1FA2,
	0x1FA3,
	0x1FA4,
	0x1FA5,
	0x1FA6,
	0x1FA7,
	0x1FA8,
	0x1FA9,
	0x1FAA,
	0x1FAB,
	0x1FAC,
	0x1FAD,
	0x1FAE,
	0x1FAF,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FB5,
	0x1FB6,
	0x1FB7,
	0x1FB8,
	0x1FBA,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC3,
	0x1FC4,
	0x1FC5,
	0x1FC6,
	0x1FC7,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FD6,
	0x1FD7,
	0x1FD8,
	0x1FDA,
	0x1FDC,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FE7,
	0x1FE8,
	0x1FEA,
	0x1FEC,
	0x1FED,
	0x1FF2,
	0x1FF3,
	0x1FF4,
	0x1FF5,
	0x1FF6,
	0x1FF7,
	0x1FF8,
	0x1FFA,
	0x1FFC,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212B,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C63,
	0x2C64,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C6E,
	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB01,
	0xFB02,
	0xFB03,
	0xFB04,
	0xFB05,
	0xFB07,
	0xFB13,
	0xFB14,
	0xFB15,
	0xFB16,
	0xFB17,
	0xFB18,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	CF_0 = 0,
	CF_use_AUX_TABLE_1 = -1,
	CF_use_AUX_TABLE_2 = -2,
	CF_use_AUX_TABLE_3 = -3,
	CF_use_AUX_TABLE_4 = -4,
	CF_use_AUX_TABLE_5 = -5,
	CF_use_AUX_TABLE_6 = -6,
	CF_use_AUX_TABLE_7 = -7,
	CF_use_AUX_TABLE_8 = -8,
	CF_use_AUX_TABLE_9 = -9,
	CF_use_AUX_TABLE_10 = -10,
	CF_use_AUX_TABLE_11 = -11,
	CF_use_AUX_TABLE_12 = -12,
	CF_use_AUX_TABLE_13 = -13,
	CF_use_AUX_TABLE_14 = -14,
	CF_use_AUX_TABLE_15 = -15,
	CF_use_AUX_TABLE_16 = -16,
	CF_use_AUX_TABLE_17 = -17,
	CF_use_AUX_TABLE_18 = -18,
	CF_use_AUX_TABLE_19 = -19,
	CF_use_AUX_TABLE_20 = -20,
	CF_use_AUX_TABLE_21 = -21,
	CF_use_AUX_TABLE_22 = -22,
	CF_use_AUX_TABLE_23 = -23,
	CF_use_AUX_TABLE_24 = -24,
	CF_use_AUX_TABLE_25 = -25,
	CF_use_AUX_TABLE_26 = -26,
	CF_use_AUX_TABLE_27 = -27,
	CF_use_AUX_TABLE_28 = -28,
	CF_use_AUX_TABLE_29 = -29,
	CF_use_AUX_TABLE_30 = -30,
	CF_use_AUX_TABLE_31 = -31,
	CF_use_AUX_TABLE_32 = -32,
	CF_use_AUX_TABLE_33 = -33,
	CF_use_AUX_TABLE_34 = -34,
	CF_use_AUX_TABLE_35 = -35,
	CF_use_AUX_TABLE_36 = -36,
	CF_use_AUX_TABLE_37 = -37,
	CF_use_AUX_TABLE_38 = -38,
	CF_use_AUX_TABLE_39 = -39,
	CF_use_AUX_TABLE_40 = -40,
	CF_use_AUX_TABLE_41 = -41,
	CF_use_AUX_TABLE_42 = -42,
	CF_use_AUX_TABLE_43 = -43,
	CF_use_AUX_TABLE_44 = -44,
	CF_use_AUX_TABLE_45 = -45,
	CF_use_AUX_TABLE_46 = -46,
	CF_use_AUX_TABLE_47 = -47,
	CF_use_AUX_TABLE_48 = -48,
	CF_use_AUX_TABLE_49 = -49,
	CF_use_AUX_TABLE_50 = -50,
	CF_use_AUX_TABLE_51 = -51,
	CF_use_AUX_TABLE_52 = -52,
	CF_use_AUX_TABLE_53 = -53,
	CF_use_AUX_TABLE_54 = -54,
	CF_use_AUX_TABLE_55 = -55,
	CF_use_AUX_TABLE_56 = -56,
	CF_use_AUX_TABLE_57 = -57,
	CF_use_AUX_TABLE_58 = -58,
	CF_use_AUX_TABLE_59 = -59,
	CF_use_AUX_TABLE_60 = -60,
	CF_use_AUX_TABLE_61 = -61,
	CF_use_AUX_TABLE_62 = -62,
	CF_use_AUX_TABLE_63 = -63,
	CF_use_AUX_TABLE_64 = -64,
	CF_use_AUX_TABLE_65 = -65,
	CF_use_AUX_TABLE_66 = -66,
	CF_use_AUX_TABLE_67 = -67,
	CF_use_AUX_TABLE_68 = -68,
	CF_use_AUX_TABLE_69 = -69,
	CF_use_AUX_TABLE_70 = -70,
	CF_use_AUX_TABLE_71 = -71,
	CF_use_AUX_TABLE_72 = -72,
	CF_use_AUX_TABLE_73 = -73
} CF_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_CF_AUX_TABLES

static const unsigned int CF_AUX_TABLE_1[] = {
	0xA2,
	0xA2
};

static const unsigned int CF_AUX_TABLE_2[] = {
	0x89,
	0x307
};

static const unsigned int CF_AUX_TABLE_3[] = {
	0x2BC,
	0x95
};

static const unsigned int CF_AUX_TABLE_4[] = {
	0x91,
	0x30C
};

static const unsigned int CF_AUX_TABLE_5[] = {
	0x3B9,
	0x308,
	0x301
};

static const unsigned int CF_AUX_TABLE_6[] = {
	0x3C5,
	0x308,
	0x301
};

static const unsigned int CF_AUX_TABLE_7[] = {
	0x565,
	0x582
};

static const unsigned int CF_AUX_TABLE_8[] = {
	0x88,
	0x331
};

static const unsigned int CF_AUX_TABLE_9[] = {
	0xA3,
	0x308
};

static const unsigned int CF_AUX_TABLE_10[] = {
	0xA6,
	0x30A
};

static const unsigned int CF_AUX_TABLE_11[] = {
	0xA8,
	0x30A
};

static const unsigned int CF_AUX_TABLE_12[] = {
	0x81,
	0x2BE
};

static const unsigned int CF_AUX_TABLE_13[] = {
	0x3C5,
	0x313
};

static const unsigned int CF_AUX_TABLE_14[] = {
	0x3C5,
	0x313,
	0x300
};

static const unsigned int CF_AUX_TABLE_15[] = {
	0x3C5,
	0x313,
	0x301
};

static const unsigned int CF_AUX_TABLE_16[] = {
	0x3C5,
	0x313,
	0x342
};

static const unsigned int CF_AUX_TABLE_17[] = {
	0x1F00,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_18[] = {
	0x1F01,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_19[] = {
	0x1F02,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_20[] = {
	0x1F03,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_21[] = {
	0x1F04,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_22[] = {
	0x1F05,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_23[] = {
	0x1F06,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_24[] = {
	0x1F07,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_25[] = {
	0x1F20,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_26[] = {
	0x1F21,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_27[] = {
	0x1F22,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_28[] = {
	0x1F23,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_29[] = {
	0x1F24,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_30[] = {
	0x1F25,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_31[] = {
	0x1F26,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_32[] = {
	0x1F27,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_33[] = {
	0x1F60,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_34[] = {
	0x1F61,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_35[] = {
	0x1F62,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_36[] = {
	0x1F63,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_37[] = {
	0x1F64,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_38[] = {
	0x1F65,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_39[] = {
	0x1F66,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_40[] = {
	0x1F67,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_41[] = {
	0x1F70,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_42[] = {
	0x3B1,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_43[] = {
	0x3AC,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_44[] = {
	0x3B1,
	0x342
};

static const unsigned int CF_AUX_TABLE_45[] = {
	0x3B1,
	0x342,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_46[] = {
	0x1F74,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_47[] = {
	0x3B7,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_48[] = {
	0x3AE,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_49[] = {
	0x3B7,
	0x342
};

static const unsigned int CF_AUX_TABLE_50[] = {
	0x3B7,
	0x342,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_51[] = {
	0x3B9,
	0x308,
	0x300
};

static const unsigned int CF_AUX_TABLE_52[] = {
	0x3B9,
	0x342
};

static const unsigned int CF_AUX_TABLE_53[] = {
	0x3B9,
	0x308,
	0x342
};

static const unsigned int CF_AUX_TABLE_54[] = {
	0x3C5,
	0x308,
	0x300
};

static const unsigned int CF_AUX_TABLE_55[] = {
	0x3C1,
	0x313
};

static const unsigned int CF_AUX_TABLE_56[] = {
	0x3C5,
	0x342
};

static const unsigned int CF_AUX_TABLE_57[] = {
	0x3C5,
	0x308,
	0x342
};

static const unsigned int CF_AUX_TABLE_58[] = {
	0x1F7C,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_59[] = {
	0x3C9,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_60[] = {
	0x3CE,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_61[] = {
	0x3C9,
	0x342
};

static const unsigned int CF_AUX_TABLE_62[] = {
	0x3C9,
	0x342,
	0x3B9
};

static const unsigned int CF_AUX_TABLE_63[] = {
	0x86,
	0x86
};

static const unsigned int CF_AUX_TABLE_64[] = {
	0x86,
	0x89
};

static const unsigned int CF_AUX_TABLE_65[] = {
	0x86,
	0x93
};

static const unsigned int CF_AUX_TABLE_66[] = {
	0x86,
	0x86,
	0x89
};

static const unsigned int CF_AUX_TABLE_67[] = {
	0x86,
	0x86,
	0x93
};

static const unsigned int CF_AUX_TABLE_68[] = {
	0xA2,
	0xA3
};

static const unsigned int CF_AUX_TABLE_69[] = {
	0x574,
	0x576
};

static const unsigned int CF_AUX_TABLE_70[] = {
	0x574,
	0x565
};

static const unsigned int CF_AUX_TABLE_71[] = {
	0x574,
	0x56B
};

static const unsigned int CF_AUX_TABLE_72[] = {
	0x57E,
	0x576
};

static const unsigned int CF_AUX_TABLE_73[] = {
	0x574,
	0x56D
};

static const unsigned int * const CF_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	CF_AUX_TABLE_1,
	CF_AUX_TABLE_2,
	CF_AUX_TABLE_3,
	CF_AUX_TABLE_4,
	CF_AUX_TABLE_5,
	CF_AUX_TABLE_6,
	CF_AUX_TABLE_7,
	CF_AUX_TABLE_8,
	CF_AUX_TABLE_9,
	CF_AUX_TABLE_10,
	CF_AUX_TABLE_11,
	CF_AUX_TABLE_12,
	CF_AUX_TABLE_13,
	CF_AUX_TABLE_14,
	CF_AUX_TABLE_15,
	CF_AUX_TABLE_16,
	CF_AUX_TABLE_17,
	CF_AUX_TABLE_18,
	CF_AUX_TABLE_19,
	CF_AUX_TABLE_20,
	CF_AUX_TABLE_21,
	CF_AUX_TABLE_22,
	CF_AUX_TABLE_23,
	CF_AUX_TABLE_24,
	CF_AUX_TABLE_25,
	CF_AUX_TABLE_26,
	CF_AUX_TABLE_27,
	CF_AUX_TABLE_28,
	CF_AUX_TABLE_29,
	CF_AUX_TABLE_30,
	CF_AUX_TABLE_31,
	CF_AUX_TABLE_32,
	CF_AUX_TABLE_33,
	CF_AUX_TABLE_34,
	CF_AUX_TABLE_35,
	CF_AUX_TABLE_36,
	CF_AUX_TABLE_37,
	CF_AUX_TABLE_38,
	CF_AUX_TABLE_39,
	CF_AUX_TABLE_40,
	CF_AUX_TABLE_41,
	CF_AUX_TABLE_42,
	CF_AUX_TABLE_43,
	CF_AUX_TABLE_44,
	CF_AUX_TABLE_45,
	CF_AUX_TABLE_46,
	CF_AUX_TABLE_47,
	CF_AUX_TABLE_48,
	CF_AUX_TABLE_49,
	CF_AUX_TABLE_50,
	CF_AUX_TABLE_51,
	CF_AUX_TABLE_52,
	CF_AUX_TABLE_53,
	CF_AUX_TABLE_54,
	CF_AUX_TABLE_55,
	CF_AUX_TABLE_56,
	CF_AUX_TABLE_57,
	CF_AUX_TABLE_58,
	CF_AUX_TABLE_59,
	CF_AUX_TABLE_60,
	CF_AUX_TABLE_61,
	CF_AUX_TABLE_62,
	CF_AUX_TABLE_63,
	CF_AUX_TABLE_64,
	CF_AUX_TABLE_65,
	CF_AUX_TABLE_66,
	CF_AUX_TABLE_67,
	CF_AUX_TABLE_68,
	CF_AUX_TABLE_69,
	CF_AUX_TABLE_70,
	CF_AUX_TABLE_71,
	CF_AUX_TABLE_72,
	CF_AUX_TABLE_73
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 CF_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* CF_AUX_TABLE_1 */,
	2	/* CF_AUX_TABLE_2 */,
	2	/* CF_AUX_TABLE_3 */,
	2	/* CF_AUX_TABLE_4 */,
	3	/* CF_AUX_TABLE_5 */,
	3	/* CF_AUX_TABLE_6 */,
	2	/* CF_AUX_TABLE_7 */,
	2	/* CF_AUX_TABLE_8 */,
	2	/* CF_AUX_TABLE_9 */,
	2	/* CF_AUX_TABLE_10 */,
	2	/* CF_AUX_TABLE_11 */,
	2	/* CF_AUX_TABLE_12 */,
	2	/* CF_AUX_TABLE_13 */,
	3	/* CF_AUX_TABLE_14 */,
	3	/* CF_AUX_TABLE_15 */,
	3	/* CF_AUX_TABLE_16 */,
	2	/* CF_AUX_TABLE_17 */,
	2	/* CF_AUX_TABLE_18 */,
	2	/* CF_AUX_TABLE_19 */,
	2	/* CF_AUX_TABLE_20 */,
	2	/* CF_AUX_TABLE_21 */,
	2	/* CF_AUX_TABLE_22 */,
	2	/* CF_AUX_TABLE_23 */,
	2	/* CF_AUX_TABLE_24 */,
	2	/* CF_AUX_TABLE_25 */,
	2	/* CF_AUX_TABLE_26 */,
	2	/* CF_AUX_TABLE_27 */,
	2	/* CF_AUX_TABLE_28 */,
	2	/* CF_AUX_TABLE_29 */,
	2	/* CF_AUX_TABLE_30 */,
	2	/* CF_AUX_TABLE_31 */,
	2	/* CF_AUX_TABLE_32 */,
	2	/* CF_AUX_TABLE_33 */,
	2	/* CF_AUX_TABLE_34 */,
	2	/* CF_AUX_TABLE_35 */,
	2	/* CF_AUX_TABLE_36 */,
	2	/* CF_AUX_TABLE_37 */,
	2	/* CF_AUX_TABLE_38 */,
	2	/* CF_AUX_TABLE_39 */,
	2	/* CF_AUX_TABLE_40 */,
	2	/* CF_AUX_TABLE_41 */,
	2	/* CF_AUX_TABLE_42 */,
	2	/* CF_AUX_TABLE_43 */,
	2	/* CF_AUX_TABLE_44 */,
	3	/* CF_AUX_TABLE_45 */,
	2	/* CF_AUX_TABLE_46 */,
	2	/* CF_AUX_TABLE_47 */,
	2	/* CF_AUX_TABLE_48 */,
	2	/* CF_AUX_TABLE_49 */,
	3	/* CF_AUX_TABLE_50 */,
	3	/* CF_AUX_TABLE_51 */,
	2	/* CF_AUX_TABLE_52 */,
	3	/* CF_AUX_TABLE_53 */,
	3	/* CF_AUX_TABLE_54 */,
	2	/* CF_AUX_TABLE_55 */,
	2	/* CF_AUX_TABLE_56 */,
	3	/* CF_AUX_TABLE_57 */,
	2	/* CF_AUX_TABLE_58 */,
	2	/* CF_AUX_TABLE_59 */,
	2	/* CF_AUX_TABLE_60 */,
	2	/* CF_AUX_TABLE_61 */,
	3	/* CF_AUX_TABLE_62 */,
	2	/* CF_AUX_TABLE_63 */,
	2	/* CF_AUX_TABLE_64 */,
	2	/* CF_AUX_TABLE_65 */,
	3	/* CF_AUX_TABLE_66 */,
	3	/* CF_AUX_TABLE_67 */,
	2	/* CF_AUX_TABLE_68 */,
	2	/* CF_AUX_TABLE_69 */,
	2	/* CF_AUX_TABLE_70 */,
	2	/* CF_AUX_TABLE_71 */,
	2	/* CF_AUX_TABLE_72 */,
	2	/* CF_AUX_TABLE_73 */
};

static const int Case_Folding_invmap[] = { /* for EBCDIC 037 */
	0,
	CF_use_AUX_TABLE_1,
	0,
	0x42,
	0,
	0x51,
	0,
	0x70,
	0,
	0x9C,
	0,
	0x3BC,
	0,
	0x8C,
	0,
	0x81,
	0,
	0x91,
	0,
	0xA2,
	0,
	0xCB,
	0,
	0xDB,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	CF_use_AUX_TABLE_2,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	CF_use_AUX_TABLE_3,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xDF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0xA2,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	CF_use_AUX_TABLE_4,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x3B9,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	CF_use_AUX_TABLE_5,
	0x3B1,
	0,
	0x3C3,
	0,
	CF_use_AUX_TABLE_6,
	0,
	0x3C3,
	0,
	0x3D7,
	0x3B2,
	0x3B8,
	0,
	0x3C6,
	0x3C0,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3BA,
	0x3C1,
	0,
	0x3B8,
	0x3B5,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
	0,
	0x52F,
	0,
	0x561,
	0,
	CF_use_AUX_TABLE_7,
	0,
	0x2D00,
	0,
	0x2D27,
	0,
	0x2D2D,
	0,
	0x13F0,
	0,
	0x432,
	0x434,
	0x43E,
	0x441,
	0x442,
	0x44A,
	0x463,
	0xA64B,
	0,
	0x1E01,
	0,
	0x1E03,
	0,
	0x1E05,
	0,
	0x1E07,
	0,
	0x1E09,
	0,
	0x1E0B,
	0,
	0x1E0D,
	0,
	0x1E0F,
	0,
	0x1E11,
	0,
	0x1E13,
	0,
	0x1E15,
	0,
	0x1E17,
	0,
	0x1E19,
	0,
	0x1E1B,
	0,
	0x1E1D,
	0,
	0x1E1F,
	0,
	0x1E21,
	0,
	0x1E23,
	0,
	0x1E25,
	0,
	0x1E27,
	0,
	0x1E29,
	0,
	0x1E2B,
	0,
	0x1E2D,
	0,
	0x1E2F,
	0,
	0x1E31,
	0,
	0x1E33,
	0,
	0x1E35,
	0,
	0x1E37,
	0,
	0x1E39,
	0,
	0x1E3B,
	0,
	0x1E3D,
	0,
	0x1E3F,
	0,
	0x1E41,
	0,
	0x1E43,
	0,
	0x1E45,
	0,
	0x1E47,
	0,
	0x1E49,
	0,
	0x1E4B,
	0,
	0x1E4D,
	0,
	0x1E4F,
	0,
	0x1E51,
	0,
	0x1E53,
	0,
	0x1E55,
	0,
	0x1E57,
	0,
	0x1E59,
	0,
	0x1E5B,
	0,
	0x1E5D,
	0,
	0x1E5F,
	0,
	0x1E61,
	0,
	0x1E63,
	0,
	0x1E65,
	0,
	0x1E67,
	0,
	0x1E69,
	0,
	0x1E6B,
	0,
	0x1E6D,
	0,
	0x1E6F,
	0,
	0x1E71,
	0,
	0x1E73,
	0,
	0x1E75,
	0,
	0x1E77,
	0,
	0x1E79,
	0,
	0x1E7B,
	0,
	0x1E7D,
	0,
	0x1E7F,
	0,
	0x1E81,
	0,
	0x1E83,
	0,
	0x1E85,
	0,
	0x1E87,
	0,
	0x1E89,
	0,
	0x1E8B,
	0,
	0x1E8D,
	0,
	0x1E8F,
	0,
	0x1E91,
	0,
	0x1E93,
	0,
	0x1E95,
	0,
	CF_use_AUX_TABLE_8,
	CF_use_AUX_TABLE_9,
	CF_use_AUX_TABLE_10,
	CF_use_AUX_TABLE_11,
	CF_use_AUX_TABLE_12,
	0x1E61,
	0,
	CF_use_AUX_TABLE_1,
	0,
	0x1EA1,
	0,
	0x1EA3,
	0,
	0x1EA5,
	0,
	0x1EA7,
	0,
	0x1EA9,
	0,
	0x1EAB,
	0,
	0x1EAD,
	0,
	0x1EAF,
	0,
	0x1EB1,
	0,
	0x1EB3,
	0,
	0x1EB5,
	0,
	0x1EB7,
	0,
	0x1EB9,
	0,
	0x1EBB,
	0,
	0x1EBD,
	0,
	0x1EBF,
	0,
	0x1EC1,
	0,
	0x1EC3,
	0,
	0x1EC5,
	0,
	0x1EC7,
	0,
	0x1EC9,
	0,
	0x1ECB,
	0,
	0x1ECD,
	0,
	0x1ECF,
	0,
	0x1ED1,
	0,
	0x1ED3,
	0,
	0x1ED5,
	0,
	0x1ED7,
	0,
	0x1ED9,
	0,
	0x1EDB,
	0,
	0x1EDD,
	0,
	0x1EDF,
	0,
	0x1EE1,
	0,
	0x1EE3,
	0,
	0x1EE5,
	0,
	0x1EE7,
	0,
	0x1EE9,
	0,
	0x1EEB,
	0,
	0x1EED,
	0,
	0x1EEF,
	0,
	0x1EF1,
	0,
	0x1EF3,
	0,
	0x1EF5,
	0,
	0x1EF7,
	0,
	0x1EF9,
	0,
	0x1EFB,
	0,
	0x1EFD,
	0,
	0x1EFF,
	0,
	0x1F00,
	0,
	0x1F10,
	0,
	0x1F20,
	0,
	0x1F30,
	0,
	0x1F40,
	0,
	CF_use_AUX_TABLE_13,
	0,
	CF_use_AUX_TABLE_14,
	0,
	CF_use_AUX_TABLE_15,
	0,
	CF_use_AUX_TABLE_16,
	0,
	0x1F51,
	0,
	0x1F53,
	0,
	0x1F55,
	0,
	0x1F57,
	0,
	0x1F60,
	0,
	CF_use_AUX_TABLE_17,
	CF_use_AUX_TABLE_18,
	CF_use_AUX_TABLE_19,
	CF_use_AUX_TABLE_20,
	CF_use_AUX_TABLE_21,
	CF_use_AUX_TABLE_22,
	CF_use_AUX_TABLE_23,
	CF_use_AUX_TABLE_24,
	CF_use_AUX_TABLE_17,
	CF_use_AUX_TABLE_18,
	CF_use_AUX_TABLE_19,
	CF_use_AUX_TABLE_20,
	CF_use_AUX_TABLE_21,
	CF_use_AUX_TABLE_22,
	CF_use_AUX_TABLE_23,
	CF_use_AUX_TABLE_24,
	CF_use_AUX_TABLE_25,
	CF_use_AUX_TABLE_26,
	CF_use_AUX_TABLE_27,
	CF_use_AUX_TABLE_28,
	CF_use_AUX_TABLE_29,
	CF_use_AUX_TABLE_30,
	CF_use_AUX_TABLE_31,
	CF_use_AUX_TABLE_32,
	CF_use_AUX_TABLE_25,
	CF_use_AUX_TABLE_26,
	CF_use_AUX_TABLE_27,
	CF_use_AUX_TABLE_28,
	CF_use_AUX_TABLE_29,
	CF_use_AUX_TABLE_30,
	CF_use_AUX_TABLE_31,
	CF_use_AUX_TABLE_32,
	CF_use_AUX_TABLE_33,
	CF_use_AUX_TABLE_34,
	CF_use_AUX_TABLE_35,
	CF_use_AUX_TABLE_36,
	CF_use_AUX_TABLE_37,
	CF_use_AUX_TABLE_38,
	CF_use_AUX_TABLE_39,
	CF_use_AUX_TABLE_40,
	CF_use_AUX_TABLE_33,
	CF_use_AUX_TABLE_34,
	CF_use_AUX_TABLE_35,
	CF_use_AUX_TABLE_36,
	CF_use_AUX_TABLE_37,
	CF_use_AUX_TABLE_38,
	CF_use_AUX_TABLE_39,
	CF_use_AUX_TABLE_40,
	0,
	CF_use_AUX_TABLE_41,
	CF_use_AUX_TABLE_42,
	CF_use_AUX_TABLE_43,
	0,
	CF_use_AUX_TABLE_44,
	CF_use_AUX_TABLE_45,
	0x1FB0,
	0x1F70,
	CF_use_AUX_TABLE_42,
	0,
	0x3B9,
	0,
	CF_use_AUX_TABLE_46,
	CF_use_AUX_TABLE_47,
	CF_use_AUX_TABLE_48,
	0,
	CF_use_AUX_TABLE_49,
	CF_use_AUX_TABLE_50,
	0x1F72,
	CF_use_AUX_TABLE_47,
	0,
	CF_use_AUX_TABLE_51,
	CF_use_AUX_TABLE_5,
	0,
	CF_use_AUX_TABLE_52,
	CF_use_AUX_TABLE_53,
	0x1FD0,
	0x1F76,
	0,
	CF_use_AUX_TABLE_54,
	CF_use_AUX_TABLE_6,
	CF_use_AUX_TABLE_55,
	0,
	CF_use_AUX_TABLE_56,
	CF_use_AUX_TABLE_57,
	0x1FE0,
	0x1F7A,
	0x1FE5,
	0,
	CF_use_AUX_TABLE_58,
	CF_use_AUX_TABLE_59,
	CF_use_AUX_TABLE_60,
	0,
	CF_use_AUX_TABLE_61,
	CF_use_AUX_TABLE_62,
	0x1F78,
	0x1F7C,
	CF_use_AUX_TABLE_59,
	0,
	0x3C9,
	0,
	0x92,
	0x47,
	0,
	0x214E,
	0,
	0x2170,
	0,
	0x2184,
	0,
	0x24D0,
	0,
	0x2C30,
	0,
	0x2C61,
	0,
	0x26B,
	0x1D7D,
	0x27D,
	0,
	0x2C68,
	0,
	0x2C6A,
	0,
	0x2C6C,
	0,
	0x251,
	0x271,
	0x250,
	0x252,
	0,
	0x2C73,
	0,
	0x2C76,
	0,
	0x23F,
	0x2C81,
	0,
	0x2C83,
	0,
	0x2C85,
	0,
	0x2C87,
	0,
	0x2C89,
	0,
	0x2C8B,
	0,
	0x2C8D,
	0,
	0x2C8F,
	0,
	0x2C91,
	0,
	0x2C93,
	0,
	0x2C95,
	0,
	0x2C97,
	0,
	0x2C99,
	0,
	0x2C9B,
	0,
	0x2C9D,
	0,
	0x2C9F,
	0,
	0x2CA1,
	0,
	0x2CA3,
	0,
	0x2CA5,
	0,
	0x2CA7,
	0,
	0x2CA9,
	0,
	0x2CAB,
	0,
	0x2CAD,
	0,
	0x2CAF,
	0,
	0x2CB1,
	0,
	0x2CB3,
	0,
	0x2CB5,
	0,
	0x2CB7,
	0,
	0x2CB9,
	0,
	0x2CBB,
	0,
	0x2CBD,
	0,
	0x2CBF,
	0,
	0x2CC1,
	0,
	0x2CC3,
	0,
	0x2CC5,
	0,
	0x2CC7,
	0,
	0x2CC9,
	0,
	0x2CCB,
	0,
	0x2CCD,
	0,
	0x2CCF,
	0,
	0x2CD1,
	0,
	0x2CD3,
	0,
	0x2CD5,
	0,
	0x2CD7,
	0,
	0x2CD9,
	0,
	0x2CDB,
	0,
	0x2CDD,
	0,
	0x2CDF,
	0,
	0x2CE1,
	0,
	0x2CE3,
	0,
	0x2CEC,
	0,
	0x2CEE,
	0,
	0x2CF3,
	0,
	0xA641,
	0,
	0xA643,
	0,
	0xA645,
	0,
	0xA647,
	0,
	0xA649,
	0,
	0xA64B,
	0,
	0xA64D,
	0,
	0xA64F,
	0,
	0xA651,
	0,
	0xA653,
	0,
	0xA655,
	0,
	0xA657,
	0,
	0xA659,
	0,
	0xA65B,
	0,
	0xA65D,
	0,
	0xA65F,
	0,
	0xA661,
	0,
	0xA663,
	0,
	0xA665,
	0,
	0xA667,
	0,
	0xA669,
	0,
	0xA66B,
	0,
	0xA66D,
	0,
	0xA681,
	0,
	0xA683,
	0,
	0xA685,
	0,
	0xA687,
	0,
	0xA689,
	0,
	0xA68B,
	0,
	0xA68D,
	0,
	0xA68F,
	0,
	0xA691,
	0,
	0xA693,
	0,
	0xA695,
	0,
	0xA697,
	0,
	0xA699,
	0,
	0xA69B,
	0,
	0xA723,
	0,
	0xA725,
	0,
	0xA727,
	0,
	0xA729,
	0,
	0xA72B,
	0,
	0xA72D,
	0,
	0xA72F,
	0,
	0xA733,
	0,
	0xA735,
	0,
	0xA737,
	0,
	0xA739,
	0,
	0xA73B,
	0,
	0xA73D,
	0,
	0xA73F,
	0,
	0xA741,
	0,
	0xA743,
	0,
	0xA745,
	0,
	0xA747,
	0,
	0xA749,
	0,
	0xA74B,
	0,
	0xA74D,
	0,
	0xA74F,
	0,
	0xA751,
	0,
	0xA753,
	0,
	0xA755,
	0,
	0xA757,
	0,
	0xA759,
	0,
	0xA75B,
	0,
	0xA75D,
	0,
	0xA75F,
	0,
	0xA761,
	0,
	0xA763,
	0,
	0xA765,
	0,
	0xA767,
	0,
	0xA769,
	0,
	0xA76B,
	0,
	0xA76D,
	0,
	0xA76F,
	0,
	0xA77A,
	0,
	0xA77C,
	0,
	0x1D79,
	0xA77F,
	0,
	0xA781,
	0,
	0xA783,
	0,
	0xA785,
	0,
	0xA787,
	0,
	0xA78C,
	0,
	0x265,
	0,
	0xA791,
	0,
	0xA793,
	0,
	0xA797,
	0,
	0xA799,
	0,
	0xA79B,
	0,
	0xA79D,
	0,
	0xA79F,
	0,
	0xA7A1,
	0,
	0xA7A3,
	0,
	0xA7A5,
	0,
	0xA7A7,
	0,
	0xA7A9,
	0,
	0x266,
	0x25C,
	0x261,
	0x26C,
	0x26A,
	0,
	0x29E,
	0x287,
	0x29D,
	0xAB53,
	0xA7B5,
	0,
	0xA7B7,
	0,
	0x13A0,
	0,
	CF_use_AUX_TABLE_63,
	CF_use_AUX_TABLE_64,
	CF_use_AUX_TABLE_65,
	CF_use_AUX_TABLE_66,
	CF_use_AUX_TABLE_67,
	CF_use_AUX_TABLE_68,
	0,
	CF_use_AUX_TABLE_69,
	CF_use_AUX_TABLE_70,
	CF_use_AUX_TABLE_71,
	CF_use_AUX_TABLE_72,
	CF_use_AUX_TABLE_73,
	0,
	0xFF41,
	0,
	0x10428,
	0,
	0x104D8,
	0,
	0x10CC0,
	0,
	0x118C0,
	0,
	0x1E922,
	0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV Lowercase_Mapping_invlist[] = { /* for ASCII/Latin1 */
	1237,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x179,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x182,
	0x183,
	0x184,
	0x185,
	0x186,
	0x187,
	0x188,
	0x189,
	0x18B,
	0x18C,
	0x18E,
	0x18F,
	0x190,
	0x191,
	0x192,
	0x193,
	0x194,
	0x195,
	0x196,
	0x197,
	0x198,
	0x199,
	0x19C,
	0x19D,
	0x19E,
	0x19F,
	0x1A0,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A7,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1AF,
	0x1B0,
	0x1B1,
	0x1B3,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B8,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F7,
	0x1F8,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23B,
	0x23C,
	0x23D,
	0x23E,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x244,
	0x245,
	0x246,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FA,
	0x3FB,
	0x3FD,
	0x400,
	0x410,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C1,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBA,
	0x1FBC,
	0x1FBD,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD8,
	0x1FDA,
	0x1FDC,
	0x1FE8,
	0x1FEA,
	0x1FEC,
	0x1FED,
	0x1FF8,
	0x1FFA,
	0x1FFC,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212B,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C63,
	0x2C64,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C6E,
	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	LC_0 = 0,
	LC_use_AUX_TABLE_1 = -1
} LC_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

#define HAS_LC_AUX_TABLES

static const unsigned int LC_AUX_TABLE_1[] = {
	0x69,
	0x307
};

static const unsigned int * const LC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	LC_AUX_TABLE_1
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 LC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* LC_AUX_TABLE_1 */
};

static const int Lowercase_Mapping_invmap[] = { /* for ASCII/Latin1 */
	0,
	0x61,
	0,
	0xE0,
	0,
	0xF8,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	LC_use_AUX_TABLE_1,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xFF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	0,
	0x3B1,
	0,
	0x3C3,
	0,
	0x3D7,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3B8,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
	0,
	0x52F,
	0,
	0x561,
	0,
	0x2D00,
	0,
	0x2D27,
	0,
	0x2D2D,
	0,
	0xAB70,
	0x13F8,
	0,
	0x1E01,
	0,
	0x1E03,
	0,
	0x1E05,
	0,
	0x1E07,
	0,
	0x1E09,
	0,
	0x1E0B,
	0,
	0x1E0D,
	0,
	0x1E0F,
	0,
	0x1E11,
	0,
	0x1E13,
	0,
	0x1E15,
	0,
	0x1E17,
	0,
	0x1E19,
	0,
	0x1E1B,
	0,
	0x1E1D,
	0,
	0x1E1F,
	0,
	0x1E21,
	0,
	0x1E23,
	0,
	0x1E25,
	0,
	0x1E27,
	0,
	0x1E29,
	0,
	0x1E2B,
	0,
	0x1E2D,
	0,
	0x1E2F,
	0,
	0x1E31,
	0,
	0x1E33,
	0,
	0x1E35,
	0,
	0x1E37,
	0,
	0x1E39,
	0,
	0x1E3B,
	0,
	0x1E3D,
	0,
	0x1E3F,
	0,
	0x1E41,
	0,
	0x1E43,
	0,
	0x1E45,
	0,
	0x1E47,
	0,
	0x1E49,
	0,
	0x1E4B,
	0,
	0x1E4D,
	0,
	0x1E4F,
	0,
	0x1E51,
	0,
	0x1E53,
	0,
	0x1E55,
	0,
	0x1E57,
	0,
	0x1E59,
	0,
	0x1E5B,
	0,
	0x1E5D,
	0,
	0x1E5F,
	0,
	0x1E61,
	0,
	0x1E63,
	0,
	0x1E65,
	0,
	0x1E67,
	0,
	0x1E69,
	0,
	0x1E6B,
	0,
	0x1E6D,
	0,
	0x1E6F,
	0,
	0x1E71,
	0,
	0x1E73,
	0,
	0x1E75,
	0,
	0x1E77,
	0,
	0x1E79,
	0,
	0x1E7B,
	0,
	0x1E7D,
	0,
	0x1E7F,
	0,
	0x1E81,
	0,
	0x1E83,
	0,
	0x1E85,
	0,
	0x1E87,
	0,
	0x1E89,
	0,
	0x1E8B,
	0,
	0x1E8D,
	0,
	0x1E8F,
	0,
	0x1E91,
	0,
	0x1E93,
	0,
	0x1E95,
	0,
	0xDF,
	0,
	0x1EA1,
	0,
	0x1EA3,
	0,
	0x1EA5,
	0,
	0x1EA7,
	0,
	0x1EA9,
	0,
	0x1EAB,
	0,
	0x1EAD,
	0,
	0x1EAF,
	0,
	0x1EB1,
	0,
	0x1EB3,
	0,
	0x1EB5,
	0,
	0x1EB7,
	0,
	0x1EB9,
	0,
	0x1EBB,
	0,
	0x1EBD,
	0,
	0x1EBF,
	0,
	0x1EC1,
	0,
	0x1EC3,
	0,
	0x1EC5,
	0,
	0x1EC7,
	0,
	0x1EC9,
	0,
	0x1ECB,
	0,
	0x1ECD,
	0,
	0x1ECF,
	0,
	0x1ED1,
	0,
	0x1ED3,
	0,
	0x1ED5,
	0,
	0x1ED7,
	0,
	0x1ED9,
	0,
	0x1EDB,
	0,
	0x1EDD,
	0,
	0x1EDF,
	0,
	0x1EE1,
	0,
	0x1EE3,
	0,
	0x1EE5,
	0,
	0x1EE7,
	0,
	0x1EE9,
	0,
	0x1EEB,
	0,
	0x1EED,
	0,
	0x1EEF,
	0,
	0x1EF1,
	0,
	0x1EF3,
	0,
	0x1EF5,
	0,
	0x1EF7,
	0,
	0x1EF9,
	0,
	0x1EFB,
	0,
	0x1EFD,
	0,
	0x1EFF,
	0,
	0x1F00,
	0,
	0x1F10,
	0,
	0x1F20,
	0,
	0x1F30,
	0,
	0x1F40,
	0,
	0x1F51,
	0,
	0x1F53,
	0,
	0x1F55,
	0,
	0x1F57,
	0,
	0x1F60,
	0,
	0x1F80,
	0,
	0x1F90,
	0,
	0x1FA0,
	0,
	0x1FB0,
	0x1F70,
	0x1FB3,
	0,
	0x1F72,
	0x1FC3,
	0,
	0x1FD0,
	0x1F76,
	0,
	0x1FE0,
	0x1F7A,
	0x1FE5,
	0,
	0x1F78,
	0x1F7C,
	0x1FF3,
	0,
	0x3C9,
	0,
	0x6B,
	0xE5,
	0,
	0x214E,
	0,
	0x2170,
	0,
	0x2184,
	0,
	0x24D0,
	0,
	0x2C30,
	0,
	0x2C61,
	0,
	0x26B,
	0x1D7D,
	0x27D,
	0,
	0x2C68,
	0,
	0x2C6A,
	0,
	0x2C6C,
	0,
	0x251,
	0x271,
	0x250,
	0x252,
	0,
	0x2C73,
	0,
	0x2C76,
	0,
	0x23F,
	0x2C81,
	0,
	0x2C83,
	0,
	0x2C85,
	0,
	0x2C87,
	0,
	0x2C89,
	0,
	0x2C8B,
	0,
	0x2C8D,
	0,
	0x2C8F,
	0,
	0x2C91,
	0,
	0x2C93,
	0,
	0x2C95,
	0,
	0x2C97,
	0,
	0x2C99,
	0,
	0x2C9B,
	0,
	0x2C9D,
	0,
	0x2C9F,
	0,
	0x2CA1,
	0,
	0x2CA3,
	0,
	0x2CA5,
	0,
	0x2CA7,
	0,
	0x2CA9,
	0,
	0x2CAB,
	0,
	0x2CAD,
	0,
	0x2CAF,
	0,
	0x2CB1,
	0,
	0x2CB3,
	0,
	0x2CB5,
	0,
	0x2CB7,
	0,
	0x2CB9,
	0,
	0x2CBB,
	0,
	0x2CBD,
	0,
	0x2CBF,
	0,
	0x2CC1,
	0,
	0x2CC3,
	0,
	0x2CC5,
	0,
	0x2CC7,
	0,
	0x2CC9,
	0,
	0x2CCB,
	0,
	0x2CCD,
	0,
	0x2CCF,
	0,
	0x2CD1,
	0,
	0x2CD3,
	0,
	0x2CD5,
	0,
	0x2CD7,
	0,
	0x2CD9,
	0,
	0x2CDB,
	0,
	0x2CDD,
	0,
	0x2CDF,
	0,
	0x2CE1,
	0,
	0x2CE3,
	0,
	0x2CEC,
	0,
	0x2CEE,
	0,
	0x2CF3,
	0,
	0xA641,
	0,
	0xA643,
	0,
	0xA645,
	0,
	0xA647,
	0,
	0xA649,
	0,
	0xA64B,
	0,
	0xA64D,
	0,
	0xA64F,
	0,
	0xA651,
	0,
	0xA653,
	0,
	0xA655,
	0,
	0xA657,
	0,
	0xA659,
	0,
	0xA65B,
	0,
	0xA65D,
	0,
	0xA65F,
	0,
	0xA661,
	0,
	0xA663,
	0,
	0xA665,
	0,
	0xA667,
	0,
	0xA669,
	0,
	0xA66B,
	0,
	0xA66D,
	0,
	0xA681,
	0,
	0xA683,
	0,
	0xA685,
	0,
	0xA687,
	0,
	0xA689,
	0,
	0xA68B,
	0,
	0xA68D,
	0,
	0xA68F,
	0,
	0xA691,
	0,
	0xA693,
	0,
	0xA695,
	0,
	0xA697,
	0,
	0xA699,
	0,
	0xA69B,
	0,
	0xA723,
	0,
	0xA725,
	0,
	0xA727,
	0,
	0xA729,
	0,
	0xA72B,
	0,
	0xA72D,
	0,
	0xA72F,
	0,
	0xA733,
	0,
	0xA735,
	0,
	0xA737,
	0,
	0xA739,
	0,
	0xA73B,
	0,
	0xA73D,
	0,
	0xA73F,
	0,
	0xA741,
	0,
	0xA743,
	0,
	0xA745,
	0,
	0xA747,
	0,
	0xA749,
	0,
	0xA74B,
	0,
	0xA74D,
	0,
	0xA74F,
	0,
	0xA751,
	0,
	0xA753,
	0,
	0xA755,
	0,
	0xA757,
	0,
	0xA759,
	0,
	0xA75B,
	0,
	0xA75D,
	0,
	0xA75F,
	0,
	0xA761,
	0,
	0xA763,
	0,
	0xA765,
	0,
	0xA767,
	0,
	0xA769,
	0,
	0xA76B,
	0,
	0xA76D,
	0,
	0xA76F,
	0,
	0xA77A,
	0,
	0xA77C,
	0,
	0x1D79,
	0xA77F,
	0,
	0xA781,
	0,
	0xA783,
	0,
	0xA785,
	0,
	0xA787,
	0,
	0xA78C,
	0,
	0x265,
	0,
	0xA791,
	0,
	0xA793,
	0,
	0xA797,
	0,
	0xA799,
	0,
	0xA79B,
	0,
	0xA79D,
	0,
	0xA79F,
	0,
	0xA7A1,
	0,
	0xA7A3,
	0,
	0xA7A5,
	0,
	0xA7A7,
	0,
	0xA7A9,
	0,
	0x266,
	0x25C,
	0x261,
	0x26C,
	0x26A,
	0,
	0x29E,
	0x287,
	0x29D,
	0xAB53,
	0xA7B5,
	0,
	0xA7B7,
	0,
	0xFF41,
	0,
	0x10428,
	0,
	0x104D8,
	0,
	0x10CC0,
	0,
	0x118C0,
	0,
	0x1E922,
	0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Lowercase_Mapping_invlist[] = { /* for EBCDIC 1047 */
	1255,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x179,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x182,
	0x183,
	0x184,
	0x185,
	0x186,
	0x187,
	0x188,
	0x189,
	0x18B,
	0x18C,
	0x18E,
	0x18F,
	0x190,
	0x191,
	0x192,
	0x193,
	0x194,
	0x195,
	0x196,
	0x197,
	0x198,
	0x199,
	0x19C,
	0x19D,
	0x19E,
	0x19F,
	0x1A0,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A7,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1AF,
	0x1B0,
	0x1B1,
	0x1B3,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B8,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F7,
	0x1F8,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23B,
	0x23C,
	0x23D,
	0x23E,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x244,
	0x245,
	0x246,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FA,
	0x3FB,
	0x3FD,
	0x400,
	0x410,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C1,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBA,
	0x1FBC,
	0x1FBD,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD8,
	0x1FDA,
	0x1FDC,
	0x1FE8,
	0x1FEA,
	0x1FEC,
	0x1FED,
	0x1FF8,
	0x1FFA,
	0x1FFC,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212B,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C63,
	0x2C64,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C6E,
	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	LC_0 = 0,
	LC_use_AUX_TABLE_1 = -1
} LC_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_LC_AUX_TABLES

static const unsigned int LC_AUX_TABLE_1[] = {
	0x89,
	0x307
};

static const unsigned int * const LC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	LC_AUX_TABLE_1
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 LC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* LC_AUX_TABLE_1 */
};

static const int Lowercase_Mapping_invmap[] = { /* for EBCDIC 1047 */
	0,
	0x42,
	0,
	0x51,
	0,
	0x70,
	0,
	0x9C,
	0,
	0x8C,
	0,
	0x8E,
	0,
	0x8D,
	0,
	0x81,
	0,
	0x91,
	0,
	0xA2,
	0,
	0xCB,
	0,
	0xDB,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	LC_use_AUX_TABLE_1,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xDF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	0,
	0x3B1,
	0,
	0x3C3,
	0,
	0x3D7,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3B8,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
	0,
	0x52F,
	0,
	0x561,
	0,
	0x2D00,
	0,
	0x2D27,
	0,
	0x2D2D,
	0,
	0xAB70,
	0x13F8,
	0,
	0x1E01,
	0,
	0x1E03,
	0,
	0x1E05,
	0,
	0x1E07,
	0,
	0x1E09,
	0,
	0x1E0B,
	0,
	0x1E0D,
	0,
	0x1E0F,
	0,
	0x1E11,
	0,
	0x1E13,
	0,
	0x1E15,
	0,
	0x1E17,
	0,
	0x1E19,
	0,
	0x1E1B,
	0,
	0x1E1D,
	0,
	0x1E1F,
	0,
	0x1E21,
	0,
	0x1E23,
	0,
	0x1E25,
	0,
	0x1E27,
	0,
	0x1E29,
	0,
	0x1E2B,
	0,
	0x1E2D,
	0,
	0x1E2F,
	0,
	0x1E31,
	0,
	0x1E33,
	0,
	0x1E35,
	0,
	0x1E37,
	0,
	0x1E39,
	0,
	0x1E3B,
	0,
	0x1E3D,
	0,
	0x1E3F,
	0,
	0x1E41,
	0,
	0x1E43,
	0,
	0x1E45,
	0,
	0x1E47,
	0,
	0x1E49,
	0,
	0x1E4B,
	0,
	0x1E4D,
	0,
	0x1E4F,
	0,
	0x1E51,
	0,
	0x1E53,
	0,
	0x1E55,
	0,
	0x1E57,
	0,
	0x1E59,
	0,
	0x1E5B,
	0,
	0x1E5D,
	0,
	0x1E5F,
	0,
	0x1E61,
	0,
	0x1E63,
	0,
	0x1E65,
	0,
	0x1E67,
	0,
	0x1E69,
	0,
	0x1E6B,
	0,
	0x1E6D,
	0,
	0x1E6F,
	0,
	0x1E71,
	0,
	0x1E73,
	0,
	0x1E75,
	0,
	0x1E77,
	0,
	0x1E79,
	0,
	0x1E7B,
	0,
	0x1E7D,
	0,
	0x1E7F,
	0,
	0x1E81,
	0,
	0x1E83,
	0,
	0x1E85,
	0,
	0x1E87,
	0,
	0x1E89,
	0,
	0x1E8B,
	0,
	0x1E8D,
	0,
	0x1E8F,
	0,
	0x1E91,
	0,
	0x1E93,
	0,
	0x1E95,
	0,
	0x59,
	0,
	0x1EA1,
	0,
	0x1EA3,
	0,
	0x1EA5,
	0,
	0x1EA7,
	0,
	0x1EA9,
	0,
	0x1EAB,
	0,
	0x1EAD,
	0,
	0x1EAF,
	0,
	0x1EB1,
	0,
	0x1EB3,
	0,
	0x1EB5,
	0,
	0x1EB7,
	0,
	0x1EB9,
	0,
	0x1EBB,
	0,
	0x1EBD,
	0,
	0x1EBF,
	0,
	0x1EC1,
	0,
	0x1EC3,
	0,
	0x1EC5,
	0,
	0x1EC7,
	0,
	0x1EC9,
	0,
	0x1ECB,
	0,
	0x1ECD,
	0,
	0x1ECF,
	0,
	0x1ED1,
	0,
	0x1ED3,
	0,
	0x1ED5,
	0,
	0x1ED7,
	0,
	0x1ED9,
	0,
	0x1EDB,
	0,
	0x1EDD,
	0,
	0x1EDF,
	0,
	0x1EE1,
	0,
	0x1EE3,
	0,
	0x1EE5,
	0,
	0x1EE7,
	0,
	0x1EE9,
	0,
	0x1EEB,
	0,
	0x1EED,
	0,
	0x1EEF,
	0,
	0x1EF1,
	0,
	0x1EF3,
	0,
	0x1EF5,
	0,
	0x1EF7,
	0,
	0x1EF9,
	0,
	0x1EFB,
	0,
	0x1EFD,
	0,
	0x1EFF,
	0,
	0x1F00,
	0,
	0x1F10,
	0,
	0x1F20,
	0,
	0x1F30,
	0,
	0x1F40,
	0,
	0x1F51,
	0,
	0x1F53,
	0,
	0x1F55,
	0,
	0x1F57,
	0,
	0x1F60,
	0,
	0x1F80,
	0,
	0x1F90,
	0,
	0x1FA0,
	0,
	0x1FB0,
	0x1F70,
	0x1FB3,
	0,
	0x1F72,
	0x1FC3,
	0,
	0x1FD0,
	0x1F76,
	0,
	0x1FE0,
	0x1F7A,
	0x1FE5,
	0,
	0x1F78,
	0x1F7C,
	0x1FF3,
	0,
	0x3C9,
	0,
	0x92,
	0x47,
	0,
	0x214E,
	0,
	0x2170,
	0,
	0x2184,
	0,
	0x24D0,
	0,
	0x2C30,
	0,
	0x2C61,
	0,
	0x26B,
	0x1D7D,
	0x27D,
	0,
	0x2C68,
	0,
	0x2C6A,
	0,
	0x2C6C,
	0,
	0x251,
	0x271,
	0x250,
	0x252,
	0,
	0x2C73,
	0,
	0x2C76,
	0,
	0x23F,
	0x2C81,
	0,
	0x2C83,
	0,
	0x2C85,
	0,
	0x2C87,
	0,
	0x2C89,
	0,
	0x2C8B,
	0,
	0x2C8D,
	0,
	0x2C8F,
	0,
	0x2C91,
	0,
	0x2C93,
	0,
	0x2C95,
	0,
	0x2C97,
	0,
	0x2C99,
	0,
	0x2C9B,
	0,
	0x2C9D,
	0,
	0x2C9F,
	0,
	0x2CA1,
	0,
	0x2CA3,
	0,
	0x2CA5,
	0,
	0x2CA7,
	0,
	0x2CA9,
	0,
	0x2CAB,
	0,
	0x2CAD,
	0,
	0x2CAF,
	0,
	0x2CB1,
	0,
	0x2CB3,
	0,
	0x2CB5,
	0,
	0x2CB7,
	0,
	0x2CB9,
	0,
	0x2CBB,
	0,
	0x2CBD,
	0,
	0x2CBF,
	0,
	0x2CC1,
	0,
	0x2CC3,
	0,
	0x2CC5,
	0,
	0x2CC7,
	0,
	0x2CC9,
	0,
	0x2CCB,
	0,
	0x2CCD,
	0,
	0x2CCF,
	0,
	0x2CD1,
	0,
	0x2CD3,
	0,
	0x2CD5,
	0,
	0x2CD7,
	0,
	0x2CD9,
	0,
	0x2CDB,
	0,
	0x2CDD,
	0,
	0x2CDF,
	0,
	0x2CE1,
	0,
	0x2CE3,
	0,
	0x2CEC,
	0,
	0x2CEE,
	0,
	0x2CF3,
	0,
	0xA641,
	0,
	0xA643,
	0,
	0xA645,
	0,
	0xA647,
	0,
	0xA649,
	0,
	0xA64B,
	0,
	0xA64D,
	0,
	0xA64F,
	0,
	0xA651,
	0,
	0xA653,
	0,
	0xA655,
	0,
	0xA657,
	0,
	0xA659,
	0,
	0xA65B,
	0,
	0xA65D,
	0,
	0xA65F,
	0,
	0xA661,
	0,
	0xA663,
	0,
	0xA665,
	0,
	0xA667,
	0,
	0xA669,
	0,
	0xA66B,
	0,
	0xA66D,
	0,
	0xA681,
	0,
	0xA683,
	0,
	0xA685,
	0,
	0xA687,
	0,
	0xA689,
	0,
	0xA68B,
	0,
	0xA68D,
	0,
	0xA68F,
	0,
	0xA691,
	0,
	0xA693,
	0,
	0xA695,
	0,
	0xA697,
	0,
	0xA699,
	0,
	0xA69B,
	0,
	0xA723,
	0,
	0xA725,
	0,
	0xA727,
	0,
	0xA729,
	0,
	0xA72B,
	0,
	0xA72D,
	0,
	0xA72F,
	0,
	0xA733,
	0,
	0xA735,
	0,
	0xA737,
	0,
	0xA739,
	0,
	0xA73B,
	0,
	0xA73D,
	0,
	0xA73F,
	0,
	0xA741,
	0,
	0xA743,
	0,
	0xA745,
	0,
	0xA747,
	0,
	0xA749,
	0,
	0xA74B,
	0,
	0xA74D,
	0,
	0xA74F,
	0,
	0xA751,
	0,
	0xA753,
	0,
	0xA755,
	0,
	0xA757,
	0,
	0xA759,
	0,
	0xA75B,
	0,
	0xA75D,
	0,
	0xA75F,
	0,
	0xA761,
	0,
	0xA763,
	0,
	0xA765,
	0,
	0xA767,
	0,
	0xA769,
	0,
	0xA76B,
	0,
	0xA76D,
	0,
	0xA76F,
	0,
	0xA77A,
	0,
	0xA77C,
	0,
	0x1D79,
	0xA77F,
	0,
	0xA781,
	0,
	0xA783,
	0,
	0xA785,
	0,
	0xA787,
	0,
	0xA78C,
	0,
	0x265,
	0,
	0xA791,
	0,
	0xA793,
	0,
	0xA797,
	0,
	0xA799,
	0,
	0xA79B,
	0,
	0xA79D,
	0,
	0xA79F,
	0,
	0xA7A1,
	0,
	0xA7A3,
	0,
	0xA7A5,
	0,
	0xA7A7,
	0,
	0xA7A9,
	0,
	0x266,
	0x25C,
	0x261,
	0x26C,
	0x26A,
	0,
	0x29E,
	0x287,
	0x29D,
	0xAB53,
	0xA7B5,
	0,
	0xA7B7,
	0,
	0xFF41,
	0,
	0x10428,
	0,
	0x104D8,
	0,
	0x10CC0,
	0,
	0x118C0,
	0,
	0x1E922,
	0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Lowercase_Mapping_invlist[] = { /* for EBCDIC 037 */
	1251,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x179,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x182,
	0x183,
	0x184,
	0x185,
	0x186,
	0x187,
	0x188,
	0x189,
	0x18B,
	0x18C,
	0x18E,
	0x18F,
	0x190,
	0x191,
	0x192,
	0x193,
	0x194,
	0x195,
	0x196,
	0x197,
	0x198,
	0x199,
	0x19C,
	0x19D,
	0x19E,
	0x19F,
	0x1A0,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A7,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1AF,
	0x1B0,
	0x1B1,
	0x1B3,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B8,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F7,
	0x1F8,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23B,
	0x23C,
	0x23D,
	0x23E,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x244,
	0x245,
	0x246,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FA,
	0x3FB,
	0x3FD,
	0x400,
	0x410,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C1,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBA,
	0x1FBC,
	0x1FBD,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD8,
	0x1FDA,
	0x1FDC,
	0x1FE8,
	0x1FEA,
	0x1FEC,
	0x1FED,
	0x1FF8,
	0x1FFA,
	0x1FFC,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212B,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C63,
	0x2C64,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C6E,
	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	LC_0 = 0,
	LC_use_AUX_TABLE_1 = -1
} LC_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_LC_AUX_TABLES

static const unsigned int LC_AUX_TABLE_1[] = {
	0x89,
	0x307
};

static const unsigned int * const LC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	LC_AUX_TABLE_1
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 LC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* LC_AUX_TABLE_1 */
};

static const int Lowercase_Mapping_invmap[] = { /* for EBCDIC 037 */
	0,
	0x42,
	0,
	0x51,
	0,
	0x70,
	0,
	0x9C,
	0,
	0x8C,
	0,
	0x81,
	0,
	0x91,
	0,
	0xA2,
	0,
	0xCB,
	0,
	0xDB,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	LC_use_AUX_TABLE_1,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xDF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	0,
	0x3B1,
	0,
	0x3C3,
	0,
	0x3D7,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3B8,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
	0,
	0x52F,
	0,
	0x561,
	0,
	0x2D00,
	0,
	0x2D27,
	0,
	0x2D2D,
	0,
	0xAB70,
	0x13F8,
	0,
	0x1E01,
	0,
	0x1E03,
	0,
	0x1E05,
	0,
	0x1E07,
	0,
	0x1E09,
	0,
	0x1E0B,
	0,
	0x1E0D,
	0,
	0x1E0F,
	0,
	0x1E11,
	0,
	0x1E13,
	0,
	0x1E15,
	0,
	0x1E17,
	0,
	0x1E19,
	0,
	0x1E1B,
	0,
	0x1E1D,
	0,
	0x1E1F,
	0,
	0x1E21,
	0,
	0x1E23,
	0,
	0x1E25,
	0,
	0x1E27,
	0,
	0x1E29,
	0,
	0x1E2B,
	0,
	0x1E2D,
	0,
	0x1E2F,
	0,
	0x1E31,
	0,
	0x1E33,
	0,
	0x1E35,
	0,
	0x1E37,
	0,
	0x1E39,
	0,
	0x1E3B,
	0,
	0x1E3D,
	0,
	0x1E3F,
	0,
	0x1E41,
	0,
	0x1E43,
	0,
	0x1E45,
	0,
	0x1E47,
	0,
	0x1E49,
	0,
	0x1E4B,
	0,
	0x1E4D,
	0,
	0x1E4F,
	0,
	0x1E51,
	0,
	0x1E53,
	0,
	0x1E55,
	0,
	0x1E57,
	0,
	0x1E59,
	0,
	0x1E5B,
	0,
	0x1E5D,
	0,
	0x1E5F,
	0,
	0x1E61,
	0,
	0x1E63,
	0,
	0x1E65,
	0,
	0x1E67,
	0,
	0x1E69,
	0,
	0x1E6B,
	0,
	0x1E6D,
	0,
	0x1E6F,
	0,
	0x1E71,
	0,
	0x1E73,
	0,
	0x1E75,
	0,
	0x1E77,
	0,
	0x1E79,
	0,
	0x1E7B,
	0,
	0x1E7D,
	0,
	0x1E7F,
	0,
	0x1E81,
	0,
	0x1E83,
	0,
	0x1E85,
	0,
	0x1E87,
	0,
	0x1E89,
	0,
	0x1E8B,
	0,
	0x1E8D,
	0,
	0x1E8F,
	0,
	0x1E91,
	0,
	0x1E93,
	0,
	0x1E95,
	0,
	0x59,
	0,
	0x1EA1,
	0,
	0x1EA3,
	0,
	0x1EA5,
	0,
	0x1EA7,
	0,
	0x1EA9,
	0,
	0x1EAB,
	0,
	0x1EAD,
	0,
	0x1EAF,
	0,
	0x1EB1,
	0,
	0x1EB3,
	0,
	0x1EB5,
	0,
	0x1EB7,
	0,
	0x1EB9,
	0,
	0x1EBB,
	0,
	0x1EBD,
	0,
	0x1EBF,
	0,
	0x1EC1,
	0,
	0x1EC3,
	0,
	0x1EC5,
	0,
	0x1EC7,
	0,
	0x1EC9,
	0,
	0x1ECB,
	0,
	0x1ECD,
	0,
	0x1ECF,
	0,
	0x1ED1,
	0,
	0x1ED3,
	0,
	0x1ED5,
	0,
	0x1ED7,
	0,
	0x1ED9,
	0,
	0x1EDB,
	0,
	0x1EDD,
	0,
	0x1EDF,
	0,
	0x1EE1,
	0,
	0x1EE3,
	0,
	0x1EE5,
	0,
	0x1EE7,
	0,
	0x1EE9,
	0,
	0x1EEB,
	0,
	0x1EED,
	0,
	0x1EEF,
	0,
	0x1EF1,
	0,
	0x1EF3,
	0,
	0x1EF5,
	0,
	0x1EF7,
	0,
	0x1EF9,
	0,
	0x1EFB,
	0,
	0x1EFD,
	0,
	0x1EFF,
	0,
	0x1F00,
	0,
	0x1F10,
	0,
	0x1F20,
	0,
	0x1F30,
	0,
	0x1F40,
	0,
	0x1F51,
	0,
	0x1F53,
	0,
	0x1F55,
	0,
	0x1F57,
	0,
	0x1F60,
	0,
	0x1F80,
	0,
	0x1F90,
	0,
	0x1FA0,
	0,
	0x1FB0,
	0x1F70,
	0x1FB3,
	0,
	0x1F72,
	0x1FC3,
	0,
	0x1FD0,
	0x1F76,
	0,
	0x1FE0,
	0x1F7A,
	0x1FE5,
	0,
	0x1F78,
	0x1F7C,
	0x1FF3,
	0,
	0x3C9,
	0,
	0x92,
	0x47,
	0,
	0x214E,
	0,
	0x2170,
	0,
	0x2184,
	0,
	0x24D0,
	0,
	0x2C30,
	0,
	0x2C61,
	0,
	0x26B,
	0x1D7D,
	0x27D,
	0,
	0x2C68,
	0,
	0x2C6A,
	0,
	0x2C6C,
	0,
	0x251,
	0x271,
	0x250,
	0x252,
	0,
	0x2C73,
	0,
	0x2C76,
	0,
	0x23F,
	0x2C81,
	0,
	0x2C83,
	0,
	0x2C85,
	0,
	0x2C87,
	0,
	0x2C89,
	0,
	0x2C8B,
	0,
	0x2C8D,
	0,
	0x2C8F,
	0,
	0x2C91,
	0,
	0x2C93,
	0,
	0x2C95,
	0,
	0x2C97,
	0,
	0x2C99,
	0,
	0x2C9B,
	0,
	0x2C9D,
	0,
	0x2C9F,
	0,
	0x2CA1,
	0,
	0x2CA3,
	0,
	0x2CA5,
	0,
	0x2CA7,
	0,
	0x2CA9,
	0,
	0x2CAB,
	0,
	0x2CAD,
	0,
	0x2CAF,
	0,
	0x2CB1,
	0,
	0x2CB3,
	0,
	0x2CB5,
	0,
	0x2CB7,
	0,
	0x2CB9,
	0,
	0x2CBB,
	0,
	0x2CBD,
	0,
	0x2CBF,
	0,
	0x2CC1,
	0,
	0x2CC3,
	0,
	0x2CC5,
	0,
	0x2CC7,
	0,
	0x2CC9,
	0,
	0x2CCB,
	0,
	0x2CCD,
	0,
	0x2CCF,
	0,
	0x2CD1,
	0,
	0x2CD3,
	0,
	0x2CD5,
	0,
	0x2CD7,
	0,
	0x2CD9,
	0,
	0x2CDB,
	0,
	0x2CDD,
	0,
	0x2CDF,
	0,
	0x2CE1,
	0,
	0x2CE3,
	0,
	0x2CEC,
	0,
	0x2CEE,
	0,
	0x2CF3,
	0,
	0xA641,
	0,
	0xA643,
	0,
	0xA645,
	0,
	0xA647,
	0,
	0xA649,
	0,
	0xA64B,
	0,
	0xA64D,
	0,
	0xA64F,
	0,
	0xA651,
	0,
	0xA653,
	0,
	0xA655,
	0,
	0xA657,
	0,
	0xA659,
	0,
	0xA65B,
	0,
	0xA65D,
	0,
	0xA65F,
	0,
	0xA661,
	0,
	0xA663,
	0,
	0xA665,
	0,
	0xA667,
	0,
	0xA669,
	0,
	0xA66B,
	0,
	0xA66D,
	0,
	0xA681,
	0,
	0xA683,
	0,
	0xA685,
	0,
	0xA687,
	0,
	0xA689,
	0,
	0xA68B,
	0,
	0xA68D,
	0,
	0xA68F,
	0,
	0xA691,
	0,
	0xA693,
	0,
	0xA695,
	0,
	0xA697,
	0,
	0xA699,
	0,
	0xA69B,
	0,
	0xA723,
	0,
	0xA725,
	0,
	0xA727,
	0,
	0xA729,
	0,
	0xA72B,
	0,
	0xA72D,
	0,
	0xA72F,
	0,
	0xA733,
	0,
	0xA735,
	0,
	0xA737,
	0,
	0xA739,
	0,
	0xA73B,
	0,
	0xA73D,
	0,
	0xA73F,
	0,
	0xA741,
	0,
	0xA743,
	0,
	0xA745,
	0,
	0xA747,
	0,
	0xA749,
	0,
	0xA74B,
	0,
	0xA74D,
	0,
	0xA74F,
	0,
	0xA751,
	0,
	0xA753,
	0,
	0xA755,
	0,
	0xA757,
	0,
	0xA759,
	0,
	0xA75B,
	0,
	0xA75D,
	0,
	0xA75F,
	0,
	0xA761,
	0,
	0xA763,
	0,
	0xA765,
	0,
	0xA767,
	0,
	0xA769,
	0,
	0xA76B,
	0,
	0xA76D,
	0,
	0xA76F,
	0,
	0xA77A,
	0,
	0xA77C,
	0,
	0x1D79,
	0xA77F,
	0,
	0xA781,
	0,
	0xA783,
	0,
	0xA785,
	0,
	0xA787,
	0,
	0xA78C,
	0,
	0x265,
	0,
	0xA791,
	0,
	0xA793,
	0,
	0xA797,
	0,
	0xA799,
	0,
	0xA79B,
	0,
	0xA79D,
	0,
	0xA79F,
	0,
	0xA7A1,
	0,
	0xA7A3,
	0,
	0xA7A5,
	0,
	0xA7A7,
	0,
	0xA7A9,
	0,
	0x266,
	0x25C,
	0x261,
	0x26C,
	0x26A,
	0,
	0x29E,
	0x287,
	0x29D,
	0xAB53,
	0xA7B5,
	0,
	0xA7B7,
	0,
	0xFF41,
	0,
	0x10428,
	0,
	0x104D8,
	0,
	0x10CC0,
	0,
	0x118C0,
	0,
	0x1E922,
	0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV NonL1_Perl_Non_Final_Folds_invlist[] = { /* for ASCII/Latin1 */
	45,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2BC,
	0x2BD,
	0x308,
	0x309,
	0x313,
	0x314,
	0x342,
	0x343,
	0x3AC,
	0x3AD,
	0x3AE,
	0x3AF,
	0x3B1,
	0x3B2,
	0x3B7,
	0x3B8,
	0x3B9,
	0x3BA,
	0x3C1,
	0x3C2,
	0x3C5,
	0x3C6,
	0x3C9,
	0x3CA,
	0x3CE,
	0x3CF,
	0x565,
	0x566,
	0x574,
	0x575,
	0x57E,
	0x57F,
	0x1F00,
	0x1F08,
	0x1F20,
	0x1F28,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F71,
	0x1F74,
	0x1F75,
	0x1F7C,
	0x1F7D
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV NonL1_Perl_Non_Final_Folds_invlist[] = { /* for EBCDIC 1047 */
	45,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2BC,
	0x2BD,
	0x308,
	0x309,
	0x313,
	0x314,
	0x342,
	0x343,
	0x3AC,
	0x3AD,
	0x3AE,
	0x3AF,
	0x3B1,
	0x3B2,
	0x3B7,
	0x3B8,
	0x3B9,
	0x3BA,
	0x3C1,
	0x3C2,
	0x3C5,
	0x3C6,
	0x3C9,
	0x3CA,
	0x3CE,
	0x3CF,
	0x565,
	0x566,
	0x574,
	0x575,
	0x57E,
	0x57F,
	0x1F00,
	0x1F08,
	0x1F20,
	0x1F28,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F71,
	0x1F74,
	0x1F75,
	0x1F7C,
	0x1F7D
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV NonL1_Perl_Non_Final_Folds_invlist[] = { /* for EBCDIC 037 */
	45,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2BC,
	0x2BD,
	0x308,
	0x309,
	0x313,
	0x314,
	0x342,
	0x343,
	0x3AC,
	0x3AD,
	0x3AE,
	0x3AF,
	0x3B1,
	0x3B2,
	0x3B7,
	0x3B8,
	0x3B9,
	0x3BA,
	0x3C1,
	0x3C2,
	0x3C5,
	0x3C6,
	0x3C9,
	0x3CA,
	0x3CE,
	0x3CF,
	0x565,
	0x566,
	0x574,
	0x575,
	0x57E,
	0x57F,
	0x1F00,
	0x1F08,
	0x1F20,
	0x1F28,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F71,
	0x1F74,
	0x1F75,
	0x1F7C,
	0x1F7D
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV _Perl_GCB_invlist[] = { /* for ASCII/Latin1 */
	1690,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x7F,
	0xA0,
	0xAD,
	0xAE,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x904,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC01,
	0xC04,
	0xC3E,
	0xC41,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC6,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD3F,
	0xD41,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDDF,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1056,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B05,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x20D0,
	0x20F1,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA983,
	0xA984,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA4E,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0xABEE,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFF9E,
	0xFFA0,
	0xFFF0,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x111C2,
	0x111C4,
	0x111CA,
	0x111CD,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B6,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A86,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C2F,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D16E,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0000,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xE1000
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 65 /* ASCII/Latin1 */

typedef enum {
	GCB_Other = 0,
	GCB_CR = 1,
	GCB_Control = 2,
	GCB_E_Base = 3,
	GCB_E_Base_GAZ = 4,
	GCB_E_Modifier = 5,
	GCB_Extend = 6,
	GCB_Glue_After_Zwj = 7,
	GCB_L = 8,
	GCB_LF = 9,
	GCB_LV = 10,
	GCB_LVT = 11,
	GCB_Prepend = 12,
	GCB_Regional_Indicator = 13,
	GCB_SpacingMark = 14,
	GCB_T = 15,
	GCB_V = 16,
	GCB_ZWJ = 17,
	GCB_EDGE = 18
} GCB_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const GCB_enum _Perl_GCB_invmap[] = { /* for ASCII/Latin1 */
	GCB_Control,
	GCB_LF,
	GCB_Control,
	GCB_CR,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Prepend,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_L,
	GCB_V,
	GCB_T,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_ZWJ,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_L,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_Other,
	GCB_V,
	GCB_Other,
	GCB_T,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Prepend,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Prepend,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Control,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Regional_Indicator,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Modifier,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base_GAZ,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Other
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_GCB_invlist[] = { /* for EBCDIC 1047 */
	1690,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x15,
	0x16,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x904,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC01,
	0xC04,
	0xC3E,
	0xC41,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC6,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD3F,
	0xD41,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDDF,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1056,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B05,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x20D0,
	0x20F1,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA983,
	0xA984,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA4E,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0xABEE,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFF9E,
	0xFFA0,
	0xFFF0,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x111C2,
	0x111C4,
	0x111CA,
	0x111CD,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B6,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A86,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C2F,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D16E,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0000,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xE1000
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

typedef enum {
	GCB_Other = 0,
	GCB_CR = 1,
	GCB_Control = 2,
	GCB_E_Base = 3,
	GCB_E_Base_GAZ = 4,
	GCB_E_Modifier = 5,
	GCB_Extend = 6,
	GCB_Glue_After_Zwj = 7,
	GCB_L = 8,
	GCB_LF = 9,
	GCB_LV = 10,
	GCB_LVT = 11,
	GCB_Prepend = 12,
	GCB_Regional_Indicator = 13,
	GCB_SpacingMark = 14,
	GCB_T = 15,
	GCB_V = 16,
	GCB_ZWJ = 17,
	GCB_EDGE = 18
} GCB_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const GCB_enum _Perl_GCB_invmap[] = { /* for EBCDIC 1047 */
	GCB_Control,
	GCB_CR,
	GCB_Control,
	GCB_LF,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Prepend,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_L,
	GCB_V,
	GCB_T,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_ZWJ,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_L,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_Other,
	GCB_V,
	GCB_Other,
	GCB_T,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Prepend,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Prepend,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Control,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Regional_Indicator,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Modifier,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base_GAZ,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Other
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_GCB_invlist[] = { /* for EBCDIC 037 */
	1690,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x25,
	0x26,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x904,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC01,
	0xC04,
	0xC3E,
	0xC41,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC6,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD3F,
	0xD41,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDDF,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1056,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B05,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x20D0,
	0x20F1,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA983,
	0xA984,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA4E,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0xABEE,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFF9E,
	0xFFA0,
	0xFFF0,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x111C2,
	0x111C4,
	0x111CA,
	0x111CD,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B6,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A86,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C2F,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D16E,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0000,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xE1000
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

typedef enum {
	GCB_Other = 0,
	GCB_CR = 1,
	GCB_Control = 2,
	GCB_E_Base = 3,
	GCB_E_Base_GAZ = 4,
	GCB_E_Modifier = 5,
	GCB_Extend = 6,
	GCB_Glue_After_Zwj = 7,
	GCB_L = 8,
	GCB_LF = 9,
	GCB_LV = 10,
	GCB_LVT = 11,
	GCB_Prepend = 12,
	GCB_Regional_Indicator = 13,
	GCB_SpacingMark = 14,
	GCB_T = 15,
	GCB_V = 16,
	GCB_ZWJ = 17,
	GCB_EDGE = 18
} GCB_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const GCB_enum _Perl_GCB_invmap[] = { /* for EBCDIC 037 */
	GCB_Control,
	GCB_CR,
	GCB_Control,
	GCB_LF,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Prepend,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_L,
	GCB_V,
	GCB_T,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_ZWJ,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_L,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_LV,
	GCB_LVT,
	GCB_Other,
	GCB_V,
	GCB_Other,
	GCB_T,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Prepend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Prepend,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Prepend,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Prepend,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Control,
	GCB_Other,
	GCB_Extend,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Other,
	GCB_SpacingMark,
	GCB_Extend,
	GCB_Control,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Extend,
	GCB_Other,
	GCB_Regional_Indicator,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Modifier,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base_GAZ,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_Glue_After_Zwj,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_E_Base,
	GCB_Other,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Extend,
	GCB_Control,
	GCB_Other
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV _Perl_IVCF_invlist[] = { /* for ASCII/Latin1 */
	1289,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x6B,
	0x6C,
	0x73,
	0x74,
	0x7B,
	0xDF,
	0xE0,
	0xE5,
	0xE6,
	0xF7,
	0xF8,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19A,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x250,
	0x251,
	0x252,
	0x253,
	0x254,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25C,
	0x25D,
	0x260,
	0x261,
	0x262,
	0x263,
	0x264,
	0x265,
	0x266,
	0x267,
	0x268,
	0x269,
	0x26A,
	0x26B,
	0x26C,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x272,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x288,
	0x289,
	0x28A,
	0x28C,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29E,
	0x29F,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3AD,
	0x3B0,
	0x3B1,
	0x3B2,
	0x3B3,
	0x3B5,
	0x3B6,
	0x3B8,
	0x3B9,
	0x3BA,
	0x3BB,
	0x3BC,
	0x3BD,
	0x3C0,
	0x3C1,
	0x3C2,
	0x3C3,
	0x3C4,
	0x3C6,
	0x3C7,
	0x3C9,
	0x3CA,
	0x3CC,
	0x3CD,
	0x3CF,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F2,
	0x3F3,
	0x3F4,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x432,
	0x433,
	0x434,
	0x435,
	0x43E,
	0x43F,
	0x441,
	0x442,
	0x443,
	0x44A,
	0x44B,
	0x450,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4CF,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x587,
	0x13A0,
	0x13F0,
	0x13F6,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E9E,
	0x1E9F,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F00,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F72,
	0x1F76,
	0x1F78,
	0x1F7A,
	0x1F7C,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FBC,
	0x1FBD,
	0x1FC3,
	0x1FC4,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FE0,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FF3,
	0x1FF4,
	0x1FFC,
	0x1FFD,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C66,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xFB05,
	0xFB06,
	0xFB07,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	IVCF_0 = 0,
	IVCF_use_AUX_TABLE_1 = -1,
	IVCF_use_AUX_TABLE_2 = -2,
	IVCF_use_AUX_TABLE_3 = -3,
	IVCF_use_AUX_TABLE_4 = -4,
	IVCF_use_AUX_TABLE_5 = -5,
	IVCF_use_AUX_TABLE_6 = -6,
	IVCF_use_AUX_TABLE_7 = -7,
	IVCF_use_AUX_TABLE_8 = -8,
	IVCF_use_AUX_TABLE_9 = -9,
	IVCF_use_AUX_TABLE_10 = -10,
	IVCF_use_AUX_TABLE_11 = -11,
	IVCF_use_AUX_TABLE_12 = -12,
	IVCF_use_AUX_TABLE_13 = -13,
	IVCF_use_AUX_TABLE_14 = -14,
	IVCF_use_AUX_TABLE_15 = -15,
	IVCF_use_AUX_TABLE_16 = -16,
	IVCF_use_AUX_TABLE_17 = -17,
	IVCF_use_AUX_TABLE_18 = -18,
	IVCF_use_AUX_TABLE_19 = -19,
	IVCF_use_AUX_TABLE_20 = -20,
	IVCF_use_AUX_TABLE_21 = -21,
	IVCF_use_AUX_TABLE_22 = -22,
	IVCF_use_AUX_TABLE_23 = -23,
	IVCF_use_AUX_TABLE_24 = -24,
	IVCF_use_AUX_TABLE_25 = -25,
	IVCF_use_AUX_TABLE_26 = -26,
	IVCF_use_AUX_TABLE_27 = -27
} IVCF_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

#define HAS_IVCF_AUX_TABLES

static const unsigned int IVCF_AUX_TABLE_1[] = {
	0x4B,
	0x212A
};

static const unsigned int IVCF_AUX_TABLE_2[] = {
	0x53,
	0x17F
};

static const unsigned int IVCF_AUX_TABLE_3[] = {
	0xC5,
	0x212B
};

static const unsigned int IVCF_AUX_TABLE_4[] = {
	0x1C4,
	0x1C5
};

static const unsigned int IVCF_AUX_TABLE_5[] = {
	0x1C7,
	0x1C8
};

static const unsigned int IVCF_AUX_TABLE_6[] = {
	0x1CA,
	0x1CB
};

static const unsigned int IVCF_AUX_TABLE_7[] = {
	0x1F1,
	0x1F2
};

static const unsigned int IVCF_AUX_TABLE_8[] = {
	0x392,
	0x3D0
};

static const unsigned int IVCF_AUX_TABLE_9[] = {
	0x395,
	0x3F5
};

static const unsigned int IVCF_AUX_TABLE_10[] = {
	0x398,
	0x3D1,
	0x3F4
};

static const unsigned int IVCF_AUX_TABLE_11[] = {
	0x345,
	0x399,
	0x1FBE
};

static const unsigned int IVCF_AUX_TABLE_12[] = {
	0x39A,
	0x3F0
};

static const unsigned int IVCF_AUX_TABLE_13[] = {
	0xB5,
	0x39C
};

static const unsigned int IVCF_AUX_TABLE_14[] = {
	0x3A0,
	0x3D6
};

static const unsigned int IVCF_AUX_TABLE_15[] = {
	0x3A1,
	0x3F1
};

static const unsigned int IVCF_AUX_TABLE_16[] = {
	0x3A3,
	0x3C2
};

static const unsigned int IVCF_AUX_TABLE_17[] = {
	0x3A6,
	0x3D5
};

static const unsigned int IVCF_AUX_TABLE_18[] = {
	0x3A9,
	0x2126
};

static const unsigned int IVCF_AUX_TABLE_19[] = {
	0x412,
	0x1C80
};

static const unsigned int IVCF_AUX_TABLE_20[] = {
	0x414,
	0x1C81
};

static const unsigned int IVCF_AUX_TABLE_21[] = {
	0x41E,
	0x1C82
};

static const unsigned int IVCF_AUX_TABLE_22[] = {
	0x421,
	0x1C83
};

static const unsigned int IVCF_AUX_TABLE_23[] = {
	0x422,
	0x1C84,
	0x1C85
};

static const unsigned int IVCF_AUX_TABLE_24[] = {
	0x42A,
	0x1C86
};

static const unsigned int IVCF_AUX_TABLE_25[] = {
	0x462,
	0x1C87
};

static const unsigned int IVCF_AUX_TABLE_26[] = {
	0x1E60,
	0x1E9B
};

static const unsigned int IVCF_AUX_TABLE_27[] = {
	0x1C88,
	0xA64A
};

static const unsigned int * const IVCF_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	IVCF_AUX_TABLE_1,
	IVCF_AUX_TABLE_2,
	IVCF_AUX_TABLE_3,
	IVCF_AUX_TABLE_4,
	IVCF_AUX_TABLE_5,
	IVCF_AUX_TABLE_6,
	IVCF_AUX_TABLE_7,
	IVCF_AUX_TABLE_8,
	IVCF_AUX_TABLE_9,
	IVCF_AUX_TABLE_10,
	IVCF_AUX_TABLE_11,
	IVCF_AUX_TABLE_12,
	IVCF_AUX_TABLE_13,
	IVCF_AUX_TABLE_14,
	IVCF_AUX_TABLE_15,
	IVCF_AUX_TABLE_16,
	IVCF_AUX_TABLE_17,
	IVCF_AUX_TABLE_18,
	IVCF_AUX_TABLE_19,
	IVCF_AUX_TABLE_20,
	IVCF_AUX_TABLE_21,
	IVCF_AUX_TABLE_22,
	IVCF_AUX_TABLE_23,
	IVCF_AUX_TABLE_24,
	IVCF_AUX_TABLE_25,
	IVCF_AUX_TABLE_26,
	IVCF_AUX_TABLE_27
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 IVCF_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* IVCF_AUX_TABLE_1 */,
	2	/* IVCF_AUX_TABLE_2 */,
	2	/* IVCF_AUX_TABLE_3 */,
	2	/* IVCF_AUX_TABLE_4 */,
	2	/* IVCF_AUX_TABLE_5 */,
	2	/* IVCF_AUX_TABLE_6 */,
	2	/* IVCF_AUX_TABLE_7 */,
	2	/* IVCF_AUX_TABLE_8 */,
	2	/* IVCF_AUX_TABLE_9 */,
	3	/* IVCF_AUX_TABLE_10 */,
	3	/* IVCF_AUX_TABLE_11 */,
	2	/* IVCF_AUX_TABLE_12 */,
	2	/* IVCF_AUX_TABLE_13 */,
	2	/* IVCF_AUX_TABLE_14 */,
	2	/* IVCF_AUX_TABLE_15 */,
	2	/* IVCF_AUX_TABLE_16 */,
	2	/* IVCF_AUX_TABLE_17 */,
	2	/* IVCF_AUX_TABLE_18 */,
	2	/* IVCF_AUX_TABLE_19 */,
	2	/* IVCF_AUX_TABLE_20 */,
	2	/* IVCF_AUX_TABLE_21 */,
	2	/* IVCF_AUX_TABLE_22 */,
	3	/* IVCF_AUX_TABLE_23 */,
	2	/* IVCF_AUX_TABLE_24 */,
	2	/* IVCF_AUX_TABLE_25 */,
	2	/* IVCF_AUX_TABLE_26 */,
	2	/* IVCF_AUX_TABLE_27 */
};

static const int _Perl_IVCF_invmap[] = { /* for ASCII/Latin1 */
	0,
	0x41,
	IVCF_use_AUX_TABLE_1,
	0x4C,
	IVCF_use_AUX_TABLE_2,
	0x54,
	0,
	0x1E9E,
	0xC0,
	IVCF_use_AUX_TABLE_3,
	0xC6,
	0,
	0xD8,
	0x178,
	0,
	0x100,
	0,
	0x102,
	0,
	0x104,
	0,
	0x106,
	0,
	0x108,
	0,
	0x10A,
	0,
	0x10C,
	0,
	0x10E,
	0,
	0x110,
	0,
	0x112,
	0,
	0x114,
	0,
	0x116,
	0,
	0x118,
	0,
	0x11A,
	0,
	0x11C,
	0,
	0x11E,
	0,
	0x120,
	0,
	0x122,
	0,
	0x124,
	0,
	0x126,
	0,
	0x128,
	0,
	0x12A,
	0,
	0x12C,
	0,
	0x12E,
	0,
	0x132,
	0,
	0x134,
	0,
	0x136,
	0,
	0x139,
	0,
	0x13B,
	0,
	0x13D,
	0,
	0x13F,
	0,
	0x141,
	0,
	0x143,
	0,
	0x145,
	0,
	0x147,
	0,
	0x14A,
	0,
	0x14C,
	0,
	0x14E,
	0,
	0x150,
	0,
	0x152,
	0,
	0x154,
	0,
	0x156,
	0,
	0x158,
	0,
	0x15A,
	0,
	0x15C,
	0,
	0x15E,
	0,
	0x160,
	0,
	0x162,
	0,
	0x164,
	0,
	0x166,
	0,
	0x168,
	0,
	0x16A,
	0,
	0x16C,
	0,
	0x16E,
	0,
	0x170,
	0,
	0x172,
	0,
	0x174,
	0,
	0x176,
	0,
	0x179,
	0,
	0x17B,
	0,
	0x17D,
	0,
	0x243,
	0,
	0x182,
	0,
	0x184,
	0,
	0x187,
	0,
	0x18B,
	0,
	0x191,
	0,
	0x1F6,
	0,
	0x198,
	0x23D,
	0,
	0x220,
	0,
	0x1A0,
	0,
	0x1A2,
	0,
	0x1A4,
	0,
	0x1A7,
	0,
	0x1AC,
	0,
	0x1AF,
	0,
	0x1B3,
	0,
	0x1B5,
	0,
	0x1B8,
	0,
	0x1BC,
	0,
	0x1F7,
	0,
	IVCF_use_AUX_TABLE_4,
	0,
	IVCF_use_AUX_TABLE_5,
	0,
	IVCF_use_AUX_TABLE_6,
	0,
	0x1CD,
	0,
	0x1CF,
	0,
	0x1D1,
	0,
	0x1D3,
	0,
	0x1D5,
	0,
	0x1D7,
	0,
	0x1D9,
	0,
	0x1DB,
	0x18E,
	0,
	0x1DE,
	0,
	0x1E0,
	0,
	0x1E2,
	0,
	0x1E4,
	0,
	0x1E6,
	0,
	0x1E8,
	0,
	0x1EA,
	0,
	0x1EC,
	0,
	0x1EE,
	0,
	IVCF_use_AUX_TABLE_7,
	0,
	0x1F4,
	0,
	0x1F8,
	0,
	0x1FA,
	0,
	0x1FC,
	0,
	0x1FE,
	0,
	0x200,
	0,
	0x202,
	0,
	0x204,
	0,
	0x206,
	0,
	0x208,
	0,
	0x20A,
	0,
	0x20C,
	0,
	0x20E,
	0,
	0x210,
	0,
	0x212,
	0,
	0x214,
	0,
	0x216,
	0,
	0x218,
	0,
	0x21A,
	0,
	0x21C,
	0,
	0x21E,
	0,
	0x222,
	0,
	0x224,
	0,
	0x226,
	0,
	0x228,
	0,
	0x22A,
	0,
	0x22C,
	0,
	0x22E,
	0,
	0x230,
	0,
	0x232,
	0,
	0x23B,
	0,
	0x2C7E,
	0,
	0x241,
	0,
	0x246,
	0,
	0x248,
	0,
	0x24A,
	0,
	0x24C,
	0,
	0x24E,
	0x2C6F,
	0x2C6D,
	0x2C70,
	0x181,
	0x186,
	0,
	0x189,
	0,
	0x18F,
	0,
	0x190,
	0xA7AB,
	0,
	0x193,
	0xA7AC,
	0,
	0x194,
	0,
	0xA78D,
	0xA7AA,
	0,
	0x197,
	0x196,
	0xA7AE,
	0x2C62,
	0xA7AD,
	0,
	0x19C,
	0,
	0x2C6E,
	0x19D,
	0,
	0x19F,
	0,
	0x2C64,
	0,
	0x1A6,
	0,
	0x1A9,
	0,
	0xA7B1,
	0x1AE,
	0x244,
	0x1B1,
	0x245,
	0,
	0x1B7,
	0,
	0xA7B2,
	0xA7B0,
	0,
	0x370,
	0,
	0x372,
	0,
	0x376,
	0,
	0x3FD,
	0,
	0x1FD3,
	0,
	0x386,
	0x388,
	0x1FE3,
	0x391,
	IVCF_use_AUX_TABLE_8,
	0x393,
	IVCF_use_AUX_TABLE_9,
	0x396,
	IVCF_use_AUX_TABLE_10,
	IVCF_use_AUX_TABLE_11,
	IVCF_use_AUX_TABLE_12,
	0x39B,
	IVCF_use_AUX_TABLE_13,
	0x39D,
	IVCF_use_AUX_TABLE_14,
	IVCF_use_AUX_TABLE_15,
	0,
	IVCF_use_AUX_TABLE_16,
	0x3A4,
	IVCF_use_AUX_TABLE_17,
	0x3A7,
	IVCF_use_AUX_TABLE_18,
	0x3AA,
	0x38C,
	0x38E,
	0,
	0x3CF,
	0,
	0x3D8,
	0,
	0x3DA,
	0,
	0x3DC,
	0,
	0x3DE,
	0,
	0x3E0,
	0,
	0x3E2,
	0,
	0x3E4,
	0,
	0x3E6,
	0,
	0x3E8,
	0,
	0x3EA,
	0,
	0x3EC,
	0,
	0x3EE,
	0,
	0x3F9,
	0x37F,
	0,
	0x3F7,
	0,
	0x3FA,
	0,
	0x410,
	IVCF_use_AUX_TABLE_19,
	0x413,
	IVCF_use_AUX_TABLE_20,
	0x415,
	IVCF_use_AUX_TABLE_21,
	0x41F,
	IVCF_use_AUX_TABLE_22,
	IVCF_use_AUX_TABLE_23,
	0x423,
	IVCF_use_AUX_TABLE_24,
	0x42B,
	0x400,
	0,
	0x460,
	0,
	IVCF_use_AUX_TABLE_25,
	0,
	0x464,
	0,
	0x466,
	0,
	0x468,
	0,
	0x46A,
	0,
	0x46C,
	0,
	0x46E,
	0,
	0x470,
	0,
	0x472,
	0,
	0x474,
	0,
	0x476,
	0,
	0x478,
	0,
	0x47A,
	0,
	0x47C,
	0,
	0x47E,
	0,
	0x480,
	0,
	0x48A,
	0,
	0x48C,
	0,
	0x48E,
	0,
	0x490,
	0,
	0x492,
	0,
	0x494,
	0,
	0x496,
	0,
	0x498,
	0,
	0x49A,
	0,
	0x49C,
	0,
	0x49E,
	0,
	0x4A0,
	0,
	0x4A2,
	0,
	0x4A4,
	0,
	0x4A6,
	0,
	0x4A8,
	0,
	0x4AA,
	0,
	0x4AC,
	0,
	0x4AE,
	0,
	0x4B0,
	0,
	0x4B2,
	0,
	0x4B4,
	0,
	0x4B6,
	0,
	0x4B8,
	0,
	0x4BA,
	0,
	0x4BC,
	0,
	0x4BE,
	0,
	0x4C1,
	0,
	0x4C3,
	0,
	0x4C5,
	0,
	0x4C7,
	0,
	0x4C9,
	0,
	0x4CB,
	0,
	0x4CD,
	0x4C0,
	0,
	0x4D0,
	0,
	0x4D2,
	0,
	0x4D4,
	0,
	0x4D6,
	0,
	0x4D8,
	0,
	0x4DA,
	0,
	0x4DC,
	0,
	0x4DE,
	0,
	0x4E0,
	0,
	0x4E2,
	0,
	0x4E4,
	0,
	0x4E6,
	0,
	0x4E8,
	0,
	0x4EA,
	0,
	0x4EC,
	0,
	0x4EE,
	0,
	0x4F0,
	0,
	0x4F2,
	0,
	0x4F4,
	0,
	0x4F6,
	0,
	0x4F8,
	0,
	0x4FA,
	0,
	0x4FC,
	0,
	0x4FE,
	0,
	0x500,
	0,
	0x502,
	0,
	0x504,
	0,
	0x506,
	0,
	0x508,
	0,
	0x50A,
	0,
	0x50C,
	0,
	0x50E,
	0,
	0x510,
	0,
	0x512,
	0,
	0x514,
	0,
	0x516,
	0,
	0x518,
	0,
	0x51A,
	0,
	0x51C,
	0,
	0x51E,
	0,
	0x520,
	0,
	0x522,
	0,
	0x524,
	0,
	0x526,
	0,
	0x528,
	0,
	0x52A,
	0,
	0x52C,
	0,
	0x52E,
	0,
	0x531,
	0,
	0xAB70,
	0x13F8,
	0,
	0xA77D,
	0,
	0x2C63,
	0,
	0x1E00,
	0,
	0x1E02,
	0,
	0x1E04,
	0,
	0x1E06,
	0,
	0x1E08,
	0,
	0x1E0A,
	0,
	0x1E0C,
	0,
	0x1E0E,
	0,
	0x1E10,
	0,
	0x1E12,
	0,
	0x1E14,
	0,
	0x1E16,
	0,
	0x1E18,
	0,
	0x1E1A,
	0,
	0x1E1C,
	0,
	0x1E1E,
	0,
	0x1E20,
	0,
	0x1E22,
	0,
	0x1E24,
	0,
	0x1E26,
	0,
	0x1E28,
	0,
	0x1E2A,
	0,
	0x1E2C,
	0,
	0x1E2E,
	0,
	0x1E30,
	0,
	0x1E32,
	0,
	0x1E34,
	0,
	0x1E36,
	0,
	0x1E38,
	0,
	0x1E3A,
	0,
	0x1E3C,
	0,
	0x1E3E,
	0,
	0x1E40,
	0,
	0x1E42,
	0,
	0x1E44,
	0,
	0x1E46,
	0,
	0x1E48,
	0,
	0x1E4A,
	0,
	0x1E4C,
	0,
	0x1E4E,
	0,
	0x1E50,
	0,
	0x1E52,
	0,
	0x1E54,
	0,
	0x1E56,
	0,
	0x1E58,
	0,
	0x1E5A,
	0,
	0x1E5C,
	0,
	0x1E5E,
	0,
	IVCF_use_AUX_TABLE_26,
	0,
	0x1E62,
	0,
	0x1E64,
	0,
	0x1E66,
	0,
	0x1E68,
	0,
	0x1E6A,
	0,
	0x1E6C,
	0,
	0x1E6E,
	0,
	0x1E70,
	0,
	0x1E72,
	0,
	0x1E74,
	0,
	0x1E76,
	0,
	0x1E78,
	0,
	0x1E7A,
	0,
	0x1E7C,
	0,
	0x1E7E,
	0,
	0x1E80,
	0,
	0x1E82,
	0,
	0x1E84,
	0,
	0x1E86,
	0,
	0x1E88,
	0,
	0x1E8A,
	0,
	0x1E8C,
	0,
	0x1E8E,
	0,
	0x1E90,
	0,
	0x1E92,
	0,
	0x1E94,
	0,
	0xDF,
	0,
	0x1EA0,
	0,
	0x1EA2,
	0,
	0x1EA4,
	0,
	0x1EA6,
	0,
	0x1EA8,
	0,
	0x1EAA,
	0,
	0x1EAC,
	0,
	0x1EAE,
	0,
	0x1EB0,
	0,
	0x1EB2,
	0,
	0x1EB4,
	0,
	0x1EB6,
	0,
	0x1EB8,
	0,
	0x1EBA,
	0,
	0x1EBC,
	0,
	0x1EBE,
	0,
	0x1EC0,
	0,
	0x1EC2,
	0,
	0x1EC4,
	0,
	0x1EC6,
	0,
	0x1EC8,
	0,
	0x1ECA,
	0,
	0x1ECC,
	0,
	0x1ECE,
	0,
	0x1ED0,
	0,
	0x1ED2,
	0,
	0x1ED4,
	0,
	0x1ED6,
	0,
	0x1ED8,
	0,
	0x1EDA,
	0,
	0x1EDC,
	0,
	0x1EDE,
	0,
	0x1EE0,
	0,
	0x1EE2,
	0,
	0x1EE4,
	0,
	0x1EE6,
	0,
	0x1EE8,
	0,
	0x1EEA,
	0,
	0x1EEC,
	0,
	0x1EEE,
	0,
	0x1EF0,
	0,
	0x1EF2,
	0,
	0x1EF4,
	0,
	0x1EF6,
	0,
	0x1EF8,
	0,
	0x1EFA,
	0,
	0x1EFC,
	0,
	0x1EFE,
	0x1F08,
	0,
	0x1F18,
	0,
	0x1F28,
	0,
	0x1F38,
	0,
	0x1F48,
	0,
	0x1F59,
	0,
	0x1F5B,
	0,
	0x1F5D,
	0,
	0x1F5F,
	0,
	0x1F68,
	0,
	0x1FBA,
	0x1FC8,
	0x1FDA,
	0x1FF8,
	0x1FEA,
	0x1FFA,
	0,
	0x1F88,
	0x1F80,
	0x1F98,
	0x1F90,
	0x1FA8,
	0x1FA0,
	0x1FB8,
	0,
	0x1FBC,
	0,
	0x1FB3,
	0,
	0x1FCC,
	0,
	0x1FC3,
	0,
	0x1FD8,
	0,
	0x390,
	0,
	0x1FE8,
	0,
	0x3B0,
	0,
	0x1FEC,
	0,
	0x1FFC,
	0,
	0x1FF3,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	IVCF_use_AUX_TABLE_27,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B3,
	0,
	0xFB06,
	0xFB05,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x1E900
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_IVCF_invlist[] = { /* for EBCDIC 1047 */
	1303,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x47,
	0x48,
	0x4A,
	0x51,
	0x59,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8D,
	0x8F,
	0x91,
	0x92,
	0x93,
	0x9A,
	0x9C,
	0x9D,
	0xA2,
	0xA3,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xDF,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19A,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x250,
	0x251,
	0x252,
	0x253,
	0x254,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25C,
	0x25D,
	0x260,
	0x261,
	0x262,
	0x263,
	0x264,
	0x265,
	0x266,
	0x267,
	0x268,
	0x269,
	0x26A,
	0x26B,
	0x26C,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x272,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x288,
	0x289,
	0x28A,
	0x28C,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29E,
	0x29F,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3AD,
	0x3B0,
	0x3B1,
	0x3B2,
	0x3B3,
	0x3B5,
	0x3B6,
	0x3B8,
	0x3B9,
	0x3BA,
	0x3BB,
	0x3BC,
	0x3BD,
	0x3C0,
	0x3C1,
	0x3C2,
	0x3C3,
	0x3C4,
	0x3C6,
	0x3C7,
	0x3C9,
	0x3CA,
	0x3CC,
	0x3CD,
	0x3CF,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F2,
	0x3F3,
	0x3F4,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x432,
	0x433,
	0x434,
	0x435,
	0x43E,
	0x43F,
	0x441,
	0x442,
	0x443,
	0x44A,
	0x44B,
	0x450,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4CF,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x587,
	0x13A0,
	0x13F0,
	0x13F6,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E9E,
	0x1E9F,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F00,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F72,
	0x1F76,
	0x1F78,
	0x1F7A,
	0x1F7C,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FBC,
	0x1FBD,
	0x1FC3,
	0x1FC4,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FE0,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FF3,
	0x1FF4,
	0x1FFC,
	0x1FFD,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C66,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xFB05,
	0xFB06,
	0xFB07,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	IVCF_0 = 0,
	IVCF_use_AUX_TABLE_1 = -1,
	IVCF_use_AUX_TABLE_2 = -2,
	IVCF_use_AUX_TABLE_3 = -3,
	IVCF_use_AUX_TABLE_4 = -4,
	IVCF_use_AUX_TABLE_5 = -5,
	IVCF_use_AUX_TABLE_6 = -6,
	IVCF_use_AUX_TABLE_7 = -7,
	IVCF_use_AUX_TABLE_8 = -8,
	IVCF_use_AUX_TABLE_9 = -9,
	IVCF_use_AUX_TABLE_10 = -10,
	IVCF_use_AUX_TABLE_11 = -11,
	IVCF_use_AUX_TABLE_12 = -12,
	IVCF_use_AUX_TABLE_13 = -13,
	IVCF_use_AUX_TABLE_14 = -14,
	IVCF_use_AUX_TABLE_15 = -15,
	IVCF_use_AUX_TABLE_16 = -16,
	IVCF_use_AUX_TABLE_17 = -17,
	IVCF_use_AUX_TABLE_18 = -18,
	IVCF_use_AUX_TABLE_19 = -19,
	IVCF_use_AUX_TABLE_20 = -20,
	IVCF_use_AUX_TABLE_21 = -21,
	IVCF_use_AUX_TABLE_22 = -22,
	IVCF_use_AUX_TABLE_23 = -23,
	IVCF_use_AUX_TABLE_24 = -24,
	IVCF_use_AUX_TABLE_25 = -25,
	IVCF_use_AUX_TABLE_26 = -26,
	IVCF_use_AUX_TABLE_27 = -27
} IVCF_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_IVCF_AUX_TABLES

static const unsigned int IVCF_AUX_TABLE_1[] = {
	0x67,
	0x212B
};

static const unsigned int IVCF_AUX_TABLE_2[] = {
	0xD2,
	0x212A
};

static const unsigned int IVCF_AUX_TABLE_3[] = {
	0xE2,
	0x17F
};

static const unsigned int IVCF_AUX_TABLE_4[] = {
	0x1C4,
	0x1C5
};

static const unsigned int IVCF_AUX_TABLE_5[] = {
	0x1C7,
	0x1C8
};

static const unsigned int IVCF_AUX_TABLE_6[] = {
	0x1CA,
	0x1CB
};

static const unsigned int IVCF_AUX_TABLE_7[] = {
	0x1F1,
	0x1F2
};

static const unsigned int IVCF_AUX_TABLE_8[] = {
	0x392,
	0x3D0
};

static const unsigned int IVCF_AUX_TABLE_9[] = {
	0x395,
	0x3F5
};

static const unsigned int IVCF_AUX_TABLE_10[] = {
	0x398,
	0x3D1,
	0x3F4
};

static const unsigned int IVCF_AUX_TABLE_11[] = {
	0x345,
	0x399,
	0x1FBE
};

static const unsigned int IVCF_AUX_TABLE_12[] = {
	0x39A,
	0x3F0
};

static const unsigned int IVCF_AUX_TABLE_13[] = {
	0xB5,
	0x39C
};

static const unsigned int IVCF_AUX_TABLE_14[] = {
	0x3A0,
	0x3D6
};

static const unsigned int IVCF_AUX_TABLE_15[] = {
	0x3A1,
	0x3F1
};

static const unsigned int IVCF_AUX_TABLE_16[] = {
	0x3A3,
	0x3C2
};

static const unsigned int IVCF_AUX_TABLE_17[] = {
	0x3A6,
	0x3D5
};

static const unsigned int IVCF_AUX_TABLE_18[] = {
	0x3A9,
	0x2126
};

static const unsigned int IVCF_AUX_TABLE_19[] = {
	0x412,
	0x1C80
};

static const unsigned int IVCF_AUX_TABLE_20[] = {
	0x414,
	0x1C81
};

static const unsigned int IVCF_AUX_TABLE_21[] = {
	0x41E,
	0x1C82
};

static const unsigned int IVCF_AUX_TABLE_22[] = {
	0x421,
	0x1C83
};

static const unsigned int IVCF_AUX_TABLE_23[] = {
	0x422,
	0x1C84,
	0x1C85
};

static const unsigned int IVCF_AUX_TABLE_24[] = {
	0x42A,
	0x1C86
};

static const unsigned int IVCF_AUX_TABLE_25[] = {
	0x462,
	0x1C87
};

static const unsigned int IVCF_AUX_TABLE_26[] = {
	0x1E60,
	0x1E9B
};

static const unsigned int IVCF_AUX_TABLE_27[] = {
	0x1C88,
	0xA64A
};

static const unsigned int * const IVCF_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	IVCF_AUX_TABLE_1,
	IVCF_AUX_TABLE_2,
	IVCF_AUX_TABLE_3,
	IVCF_AUX_TABLE_4,
	IVCF_AUX_TABLE_5,
	IVCF_AUX_TABLE_6,
	IVCF_AUX_TABLE_7,
	IVCF_AUX_TABLE_8,
	IVCF_AUX_TABLE_9,
	IVCF_AUX_TABLE_10,
	IVCF_AUX_TABLE_11,
	IVCF_AUX_TABLE_12,
	IVCF_AUX_TABLE_13,
	IVCF_AUX_TABLE_14,
	IVCF_AUX_TABLE_15,
	IVCF_AUX_TABLE_16,
	IVCF_AUX_TABLE_17,
	IVCF_AUX_TABLE_18,
	IVCF_AUX_TABLE_19,
	IVCF_AUX_TABLE_20,
	IVCF_AUX_TABLE_21,
	IVCF_AUX_TABLE_22,
	IVCF_AUX_TABLE_23,
	IVCF_AUX_TABLE_24,
	IVCF_AUX_TABLE_25,
	IVCF_AUX_TABLE_26,
	IVCF_AUX_TABLE_27
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 IVCF_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* IVCF_AUX_TABLE_1 */,
	2	/* IVCF_AUX_TABLE_2 */,
	2	/* IVCF_AUX_TABLE_3 */,
	2	/* IVCF_AUX_TABLE_4 */,
	2	/* IVCF_AUX_TABLE_5 */,
	2	/* IVCF_AUX_TABLE_6 */,
	2	/* IVCF_AUX_TABLE_7 */,
	2	/* IVCF_AUX_TABLE_8 */,
	2	/* IVCF_AUX_TABLE_9 */,
	3	/* IVCF_AUX_TABLE_10 */,
	3	/* IVCF_AUX_TABLE_11 */,
	2	/* IVCF_AUX_TABLE_12 */,
	2	/* IVCF_AUX_TABLE_13 */,
	2	/* IVCF_AUX_TABLE_14 */,
	2	/* IVCF_AUX_TABLE_15 */,
	2	/* IVCF_AUX_TABLE_16 */,
	2	/* IVCF_AUX_TABLE_17 */,
	2	/* IVCF_AUX_TABLE_18 */,
	2	/* IVCF_AUX_TABLE_19 */,
	2	/* IVCF_AUX_TABLE_20 */,
	2	/* IVCF_AUX_TABLE_21 */,
	2	/* IVCF_AUX_TABLE_22 */,
	3	/* IVCF_AUX_TABLE_23 */,
	2	/* IVCF_AUX_TABLE_24 */,
	2	/* IVCF_AUX_TABLE_25 */,
	2	/* IVCF_AUX_TABLE_26 */,
	2	/* IVCF_AUX_TABLE_27 */
};

static const int _Perl_IVCF_invmap[] = { /* for EBCDIC 1047 */
	0,
	0xC0,
	IVCF_use_AUX_TABLE_1,
	0xC6,
	0,
	0xC6,
	0x1E9E,
	0,
	0xD8,
	0,
	0x41,
	0,
	0xC6,
	0xD8,
	0,
	0x41,
	IVCF_use_AUX_TABLE_2,
	0x4C,
	0,
	0xC6,
	0,
	IVCF_use_AUX_TABLE_3,
	0x54,
	0,
	0xC6,
	0,
	0xD8,
	0x178,
	0,
	0x100,
	0,
	0x102,
	0,
	0x104,
	0,
	0x106,
	0,
	0x108,
	0,
	0x10A,
	0,
	0x10C,
	0,
	0x10E,
	0,
	0x110,
	0,
	0x112,
	0,
	0x114,
	0,
	0x116,
	0,
	0x118,
	0,
	0x11A,
	0,
	0x11C,
	0,
	0x11E,
	0,
	0x120,
	0,
	0x122,
	0,
	0x124,
	0,
	0x126,
	0,
	0x128,
	0,
	0x12A,
	0,
	0x12C,
	0,
	0x12E,
	0,
	0x132,
	0,
	0x134,
	0,
	0x136,
	0,
	0x139,
	0,
	0x13B,
	0,
	0x13D,
	0,
	0x13F,
	0,
	0x141,
	0,
	0x143,
	0,
	0x145,
	0,
	0x147,
	0,
	0x14A,
	0,
	0x14C,
	0,
	0x14E,
	0,
	0x150,
	0,
	0x152,
	0,
	0x154,
	0,
	0x156,
	0,
	0x158,
	0,
	0x15A,
	0,
	0x15C,
	0,
	0x15E,
	0,
	0x160,
	0,
	0x162,
	0,
	0x164,
	0,
	0x166,
	0,
	0x168,
	0,
	0x16A,
	0,
	0x16C,
	0,
	0x16E,
	0,
	0x170,
	0,
	0x172,
	0,
	0x174,
	0,
	0x176,
	0,
	0x179,
	0,
	0x17B,
	0,
	0x17D,
	0,
	0x243,
	0,
	0x182,
	0,
	0x184,
	0,
	0x187,
	0,
	0x18B,
	0,
	0x191,
	0,
	0x1F6,
	0,
	0x198,
	0x23D,
	0,
	0x220,
	0,
	0x1A0,
	0,
	0x1A2,
	0,
	0x1A4,
	0,
	0x1A7,
	0,
	0x1AC,
	0,
	0x1AF,
	0,
	0x1B3,
	0,
	0x1B5,
	0,
	0x1B8,
	0,
	0x1BC,
	0,
	0x1F7,
	0,
	IVCF_use_AUX_TABLE_4,
	0,
	IVCF_use_AUX_TABLE_5,
	0,
	IVCF_use_AUX_TABLE_6,
	0,
	0x1CD,
	0,
	0x1CF,
	0,
	0x1D1,
	0,
	0x1D3,
	0,
	0x1D5,
	0,
	0x1D7,
	0,
	0x1D9,
	0,
	0x1DB,
	0x18E,
	0,
	0x1DE,
	0,
	0x1E0,
	0,
	0x1E2,
	0,
	0x1E4,
	0,
	0x1E6,
	0,
	0x1E8,
	0,
	0x1EA,
	0,
	0x1EC,
	0,
	0x1EE,
	0,
	IVCF_use_AUX_TABLE_7,
	0,
	0x1F4,
	0,
	0x1F8,
	0,
	0x1FA,
	0,
	0x1FC,
	0,
	0x1FE,
	0,
	0x200,
	0,
	0x202,
	0,
	0x204,
	0,
	0x206,
	0,
	0x208,
	0,
	0x20A,
	0,
	0x20C,
	0,
	0x20E,
	0,
	0x210,
	0,
	0x212,
	0,
	0x214,
	0,
	0x216,
	0,
	0x218,
	0,
	0x21A,
	0,
	0x21C,
	0,
	0x21E,
	0,
	0x222,
	0,
	0x224,
	0,
	0x226,
	0,
	0x228,
	0,
	0x22A,
	0,
	0x22C,
	0,
	0x22E,
	0,
	0x230,
	0,
	0x232,
	0,
	0x23B,
	0,
	0x2C7E,
	0,
	0x241,
	0,
	0x246,
	0,
	0x248,
	0,
	0x24A,
	0,
	0x24C,
	0,
	0x24E,
	0x2C6F,
	0x2C6D,
	0x2C70,
	0x181,
	0x186,
	0,
	0x189,
	0,
	0x18F,
	0,
	0x190,
	0xA7AB,
	0,
	0x193,
	0xA7AC,
	0,
	0x194,
	0,
	0xA78D,
	0xA7AA,
	0,
	0x197,
	0x196,
	0xA7AE,
	0x2C62,
	0xA7AD,
	0,
	0x19C,
	0,
	0x2C6E,
	0x19D,
	0,
	0x19F,
	0,
	0x2C64,
	0,
	0x1A6,
	0,
	0x1A9,
	0,
	0xA7B1,
	0x1AE,
	0x244,
	0x1B1,
	0x245,
	0,
	0x1B7,
	0,
	0xA7B2,
	0xA7B0,
	0,
	0x370,
	0,
	0x372,
	0,
	0x376,
	0,
	0x3FD,
	0,
	0x1FD3,
	0,
	0x386,
	0x388,
	0x1FE3,
	0x391,
	IVCF_use_AUX_TABLE_8,
	0x393,
	IVCF_use_AUX_TABLE_9,
	0x396,
	IVCF_use_AUX_TABLE_10,
	IVCF_use_AUX_TABLE_11,
	IVCF_use_AUX_TABLE_12,
	0x39B,
	IVCF_use_AUX_TABLE_13,
	0x39D,
	IVCF_use_AUX_TABLE_14,
	IVCF_use_AUX_TABLE_15,
	0,
	IVCF_use_AUX_TABLE_16,
	0x3A4,
	IVCF_use_AUX_TABLE_17,
	0x3A7,
	IVCF_use_AUX_TABLE_18,
	0x3AA,
	0x38C,
	0x38E,
	0,
	0x3CF,
	0,
	0x3D8,
	0,
	0x3DA,
	0,
	0x3DC,
	0,
	0x3DE,
	0,
	0x3E0,
	0,
	0x3E2,
	0,
	0x3E4,
	0,
	0x3E6,
	0,
	0x3E8,
	0,
	0x3EA,
	0,
	0x3EC,
	0,
	0x3EE,
	0,
	0x3F9,
	0x37F,
	0,
	0x3F7,
	0,
	0x3FA,
	0,
	0x410,
	IVCF_use_AUX_TABLE_19,
	0x413,
	IVCF_use_AUX_TABLE_20,
	0x415,
	IVCF_use_AUX_TABLE_21,
	0x41F,
	IVCF_use_AUX_TABLE_22,
	IVCF_use_AUX_TABLE_23,
	0x423,
	IVCF_use_AUX_TABLE_24,
	0x42B,
	0x400,
	0,
	0x460,
	0,
	IVCF_use_AUX_TABLE_25,
	0,
	0x464,
	0,
	0x466,
	0,
	0x468,
	0,
	0x46A,
	0,
	0x46C,
	0,
	0x46E,
	0,
	0x470,
	0,
	0x472,
	0,
	0x474,
	0,
	0x476,
	0,
	0x478,
	0,
	0x47A,
	0,
	0x47C,
	0,
	0x47E,
	0,
	0x480,
	0,
	0x48A,
	0,
	0x48C,
	0,
	0x48E,
	0,
	0x490,
	0,
	0x492,
	0,
	0x494,
	0,
	0x496,
	0,
	0x498,
	0,
	0x49A,
	0,
	0x49C,
	0,
	0x49E,
	0,
	0x4A0,
	0,
	0x4A2,
	0,
	0x4A4,
	0,
	0x4A6,
	0,
	0x4A8,
	0,
	0x4AA,
	0,
	0x4AC,
	0,
	0x4AE,
	0,
	0x4B0,
	0,
	0x4B2,
	0,
	0x4B4,
	0,
	0x4B6,
	0,
	0x4B8,
	0,
	0x4BA,
	0,
	0x4BC,
	0,
	0x4BE,
	0,
	0x4C1,
	0,
	0x4C3,
	0,
	0x4C5,
	0,
	0x4C7,
	0,
	0x4C9,
	0,
	0x4CB,
	0,
	0x4CD,
	0x4C0,
	0,
	0x4D0,
	0,
	0x4D2,
	0,
	0x4D4,
	0,
	0x4D6,
	0,
	0x4D8,
	0,
	0x4DA,
	0,
	0x4DC,
	0,
	0x4DE,
	0,
	0x4E0,
	0,
	0x4E2,
	0,
	0x4E4,
	0,
	0x4E6,
	0,
	0x4E8,
	0,
	0x4EA,
	0,
	0x4EC,
	0,
	0x4EE,
	0,
	0x4F0,
	0,
	0x4F2,
	0,
	0x4F4,
	0,
	0x4F6,
	0,
	0x4F8,
	0,
	0x4FA,
	0,
	0x4FC,
	0,
	0x4FE,
	0,
	0x500,
	0,
	0x502,
	0,
	0x504,
	0,
	0x506,
	0,
	0x508,
	0,
	0x50A,
	0,
	0x50C,
	0,
	0x50E,
	0,
	0x510,
	0,
	0x512,
	0,
	0x514,
	0,
	0x516,
	0,
	0x518,
	0,
	0x51A,
	0,
	0x51C,
	0,
	0x51E,
	0,
	0x520,
	0,
	0x522,
	0,
	0x524,
	0,
	0x526,
	0,
	0x528,
	0,
	0x52A,
	0,
	0x52C,
	0,
	0x52E,
	0,
	0x531,
	0,
	0xAB70,
	0x13F8,
	0,
	0xA77D,
	0,
	0x2C63,
	0,
	0x1E00,
	0,
	0x1E02,
	0,
	0x1E04,
	0,
	0x1E06,
	0,
	0x1E08,
	0,
	0x1E0A,
	0,
	0x1E0C,
	0,
	0x1E0E,
	0,
	0x1E10,
	0,
	0x1E12,
	0,
	0x1E14,
	0,
	0x1E16,
	0,
	0x1E18,
	0,
	0x1E1A,
	0,
	0x1E1C,
	0,
	0x1E1E,
	0,
	0x1E20,
	0,
	0x1E22,
	0,
	0x1E24,
	0,
	0x1E26,
	0,
	0x1E28,
	0,
	0x1E2A,
	0,
	0x1E2C,
	0,
	0x1E2E,
	0,
	0x1E30,
	0,
	0x1E32,
	0,
	0x1E34,
	0,
	0x1E36,
	0,
	0x1E38,
	0,
	0x1E3A,
	0,
	0x1E3C,
	0,
	0x1E3E,
	0,
	0x1E40,
	0,
	0x1E42,
	0,
	0x1E44,
	0,
	0x1E46,
	0,
	0x1E48,
	0,
	0x1E4A,
	0,
	0x1E4C,
	0,
	0x1E4E,
	0,
	0x1E50,
	0,
	0x1E52,
	0,
	0x1E54,
	0,
	0x1E56,
	0,
	0x1E58,
	0,
	0x1E5A,
	0,
	0x1E5C,
	0,
	0x1E5E,
	0,
	IVCF_use_AUX_TABLE_26,
	0,
	0x1E62,
	0,
	0x1E64,
	0,
	0x1E66,
	0,
	0x1E68,
	0,
	0x1E6A,
	0,
	0x1E6C,
	0,
	0x1E6E,
	0,
	0x1E70,
	0,
	0x1E72,
	0,
	0x1E74,
	0,
	0x1E76,
	0,
	0x1E78,
	0,
	0x1E7A,
	0,
	0x1E7C,
	0,
	0x1E7E,
	0,
	0x1E80,
	0,
	0x1E82,
	0,
	0x1E84,
	0,
	0x1E86,
	0,
	0x1E88,
	0,
	0x1E8A,
	0,
	0x1E8C,
	0,
	0x1E8E,
	0,
	0x1E90,
	0,
	0x1E92,
	0,
	0x1E94,
	0,
	0xDF,
	0,
	0x1EA0,
	0,
	0x1EA2,
	0,
	0x1EA4,
	0,
	0x1EA6,
	0,
	0x1EA8,
	0,
	0x1EAA,
	0,
	0x1EAC,
	0,
	0x1EAE,
	0,
	0x1EB0,
	0,
	0x1EB2,
	0,
	0x1EB4,
	0,
	0x1EB6,
	0,
	0x1EB8,
	0,
	0x1EBA,
	0,
	0x1EBC,
	0,
	0x1EBE,
	0,
	0x1EC0,
	0,
	0x1EC2,
	0,
	0x1EC4,
	0,
	0x1EC6,
	0,
	0x1EC8,
	0,
	0x1ECA,
	0,
	0x1ECC,
	0,
	0x1ECE,
	0,
	0x1ED0,
	0,
	0x1ED2,
	0,
	0x1ED4,
	0,
	0x1ED6,
	0,
	0x1ED8,
	0,
	0x1EDA,
	0,
	0x1EDC,
	0,
	0x1EDE,
	0,
	0x1EE0,
	0,
	0x1EE2,
	0,
	0x1EE4,
	0,
	0x1EE6,
	0,
	0x1EE8,
	0,
	0x1EEA,
	0,
	0x1EEC,
	0,
	0x1EEE,
	0,
	0x1EF0,
	0,
	0x1EF2,
	0,
	0x1EF4,
	0,
	0x1EF6,
	0,
	0x1EF8,
	0,
	0x1EFA,
	0,
	0x1EFC,
	0,
	0x1EFE,
	0x1F08,
	0,
	0x1F18,
	0,
	0x1F28,
	0,
	0x1F38,
	0,
	0x1F48,
	0,
	0x1F59,
	0,
	0x1F5B,
	0,
	0x1F5D,
	0,
	0x1F5F,
	0,
	0x1F68,
	0,
	0x1FBA,
	0x1FC8,
	0x1FDA,
	0x1FF8,
	0x1FEA,
	0x1FFA,
	0,
	0x1F88,
	0x1F80,
	0x1F98,
	0x1F90,
	0x1FA8,
	0x1FA0,
	0x1FB8,
	0,
	0x1FBC,
	0,
	0x1FB3,
	0,
	0x1FCC,
	0,
	0x1FC3,
	0,
	0x1FD8,
	0,
	0x390,
	0,
	0x1FE8,
	0,
	0x3B0,
	0,
	0x1FEC,
	0,
	0x1FFC,
	0,
	0x1FF3,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	IVCF_use_AUX_TABLE_27,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B3,
	0,
	0xFB06,
	0xFB05,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x1E900
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_IVCF_invlist[] = { /* for EBCDIC 037 */
	1303,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x47,
	0x48,
	0x4A,
	0x51,
	0x59,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8D,
	0x8F,
	0x91,
	0x92,
	0x93,
	0x9A,
	0x9C,
	0x9D,
	0xA2,
	0xA3,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xDF,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19A,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x250,
	0x251,
	0x252,
	0x253,
	0x254,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25C,
	0x25D,
	0x260,
	0x261,
	0x262,
	0x263,
	0x264,
	0x265,
	0x266,
	0x267,
	0x268,
	0x269,
	0x26A,
	0x26B,
	0x26C,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x272,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x288,
	0x289,
	0x28A,
	0x28C,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29E,
	0x29F,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3AD,
	0x3B0,
	0x3B1,
	0x3B2,
	0x3B3,
	0x3B5,
	0x3B6,
	0x3B8,
	0x3B9,
	0x3BA,
	0x3BB,
	0x3BC,
	0x3BD,
	0x3C0,
	0x3C1,
	0x3C2,
	0x3C3,
	0x3C4,
	0x3C6,
	0x3C7,
	0x3C9,
	0x3CA,
	0x3CC,
	0x3CD,
	0x3CF,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F2,
	0x3F3,
	0x3F4,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x432,
	0x433,
	0x434,
	0x435,
	0x43E,
	0x43F,
	0x441,
	0x442,
	0x443,
	0x44A,
	0x44B,
	0x450,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4CF,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x587,
	0x13A0,
	0x13F0,
	0x13F6,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E9E,
	0x1E9F,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F00,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F72,
	0x1F76,
	0x1F78,
	0x1F7A,
	0x1F7C,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FBC,
	0x1FBD,
	0x1FC3,
	0x1FC4,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FE0,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FF3,
	0x1FF4,
	0x1FFC,
	0x1FFD,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C66,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xFB05,
	0xFB06,
	0xFB07,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	IVCF_0 = 0,
	IVCF_use_AUX_TABLE_1 = -1,
	IVCF_use_AUX_TABLE_2 = -2,
	IVCF_use_AUX_TABLE_3 = -3,
	IVCF_use_AUX_TABLE_4 = -4,
	IVCF_use_AUX_TABLE_5 = -5,
	IVCF_use_AUX_TABLE_6 = -6,
	IVCF_use_AUX_TABLE_7 = -7,
	IVCF_use_AUX_TABLE_8 = -8,
	IVCF_use_AUX_TABLE_9 = -9,
	IVCF_use_AUX_TABLE_10 = -10,
	IVCF_use_AUX_TABLE_11 = -11,
	IVCF_use_AUX_TABLE_12 = -12,
	IVCF_use_AUX_TABLE_13 = -13,
	IVCF_use_AUX_TABLE_14 = -14,
	IVCF_use_AUX_TABLE_15 = -15,
	IVCF_use_AUX_TABLE_16 = -16,
	IVCF_use_AUX_TABLE_17 = -17,
	IVCF_use_AUX_TABLE_18 = -18,
	IVCF_use_AUX_TABLE_19 = -19,
	IVCF_use_AUX_TABLE_20 = -20,
	IVCF_use_AUX_TABLE_21 = -21,
	IVCF_use_AUX_TABLE_22 = -22,
	IVCF_use_AUX_TABLE_23 = -23,
	IVCF_use_AUX_TABLE_24 = -24,
	IVCF_use_AUX_TABLE_25 = -25,
	IVCF_use_AUX_TABLE_26 = -26,
	IVCF_use_AUX_TABLE_27 = -27
} IVCF_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_IVCF_AUX_TABLES

static const unsigned int IVCF_AUX_TABLE_1[] = {
	0x67,
	0x212B
};

static const unsigned int IVCF_AUX_TABLE_2[] = {
	0xD2,
	0x212A
};

static const unsigned int IVCF_AUX_TABLE_3[] = {
	0xE2,
	0x17F
};

static const unsigned int IVCF_AUX_TABLE_4[] = {
	0x1C4,
	0x1C5
};

static const unsigned int IVCF_AUX_TABLE_5[] = {
	0x1C7,
	0x1C8
};

static const unsigned int IVCF_AUX_TABLE_6[] = {
	0x1CA,
	0x1CB
};

static const unsigned int IVCF_AUX_TABLE_7[] = {
	0x1F1,
	0x1F2
};

static const unsigned int IVCF_AUX_TABLE_8[] = {
	0x392,
	0x3D0
};

static const unsigned int IVCF_AUX_TABLE_9[] = {
	0x395,
	0x3F5
};

static const unsigned int IVCF_AUX_TABLE_10[] = {
	0x398,
	0x3D1,
	0x3F4
};

static const unsigned int IVCF_AUX_TABLE_11[] = {
	0x345,
	0x399,
	0x1FBE
};

static const unsigned int IVCF_AUX_TABLE_12[] = {
	0x39A,
	0x3F0
};

static const unsigned int IVCF_AUX_TABLE_13[] = {
	0xB5,
	0x39C
};

static const unsigned int IVCF_AUX_TABLE_14[] = {
	0x3A0,
	0x3D6
};

static const unsigned int IVCF_AUX_TABLE_15[] = {
	0x3A1,
	0x3F1
};

static const unsigned int IVCF_AUX_TABLE_16[] = {
	0x3A3,
	0x3C2
};

static const unsigned int IVCF_AUX_TABLE_17[] = {
	0x3A6,
	0x3D5
};

static const unsigned int IVCF_AUX_TABLE_18[] = {
	0x3A9,
	0x2126
};

static const unsigned int IVCF_AUX_TABLE_19[] = {
	0x412,
	0x1C80
};

static const unsigned int IVCF_AUX_TABLE_20[] = {
	0x414,
	0x1C81
};

static const unsigned int IVCF_AUX_TABLE_21[] = {
	0x41E,
	0x1C82
};

static const unsigned int IVCF_AUX_TABLE_22[] = {
	0x421,
	0x1C83
};

static const unsigned int IVCF_AUX_TABLE_23[] = {
	0x422,
	0x1C84,
	0x1C85
};

static const unsigned int IVCF_AUX_TABLE_24[] = {
	0x42A,
	0x1C86
};

static const unsigned int IVCF_AUX_TABLE_25[] = {
	0x462,
	0x1C87
};

static const unsigned int IVCF_AUX_TABLE_26[] = {
	0x1E60,
	0x1E9B
};

static const unsigned int IVCF_AUX_TABLE_27[] = {
	0x1C88,
	0xA64A
};

static const unsigned int * const IVCF_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	IVCF_AUX_TABLE_1,
	IVCF_AUX_TABLE_2,
	IVCF_AUX_TABLE_3,
	IVCF_AUX_TABLE_4,
	IVCF_AUX_TABLE_5,
	IVCF_AUX_TABLE_6,
	IVCF_AUX_TABLE_7,
	IVCF_AUX_TABLE_8,
	IVCF_AUX_TABLE_9,
	IVCF_AUX_TABLE_10,
	IVCF_AUX_TABLE_11,
	IVCF_AUX_TABLE_12,
	IVCF_AUX_TABLE_13,
	IVCF_AUX_TABLE_14,
	IVCF_AUX_TABLE_15,
	IVCF_AUX_TABLE_16,
	IVCF_AUX_TABLE_17,
	IVCF_AUX_TABLE_18,
	IVCF_AUX_TABLE_19,
	IVCF_AUX_TABLE_20,
	IVCF_AUX_TABLE_21,
	IVCF_AUX_TABLE_22,
	IVCF_AUX_TABLE_23,
	IVCF_AUX_TABLE_24,
	IVCF_AUX_TABLE_25,
	IVCF_AUX_TABLE_26,
	IVCF_AUX_TABLE_27
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 IVCF_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* IVCF_AUX_TABLE_1 */,
	2	/* IVCF_AUX_TABLE_2 */,
	2	/* IVCF_AUX_TABLE_3 */,
	2	/* IVCF_AUX_TABLE_4 */,
	2	/* IVCF_AUX_TABLE_5 */,
	2	/* IVCF_AUX_TABLE_6 */,
	2	/* IVCF_AUX_TABLE_7 */,
	2	/* IVCF_AUX_TABLE_8 */,
	2	/* IVCF_AUX_TABLE_9 */,
	3	/* IVCF_AUX_TABLE_10 */,
	3	/* IVCF_AUX_TABLE_11 */,
	2	/* IVCF_AUX_TABLE_12 */,
	2	/* IVCF_AUX_TABLE_13 */,
	2	/* IVCF_AUX_TABLE_14 */,
	2	/* IVCF_AUX_TABLE_15 */,
	2	/* IVCF_AUX_TABLE_16 */,
	2	/* IVCF_AUX_TABLE_17 */,
	2	/* IVCF_AUX_TABLE_18 */,
	2	/* IVCF_AUX_TABLE_19 */,
	2	/* IVCF_AUX_TABLE_20 */,
	2	/* IVCF_AUX_TABLE_21 */,
	2	/* IVCF_AUX_TABLE_22 */,
	3	/* IVCF_AUX_TABLE_23 */,
	2	/* IVCF_AUX_TABLE_24 */,
	2	/* IVCF_AUX_TABLE_25 */,
	2	/* IVCF_AUX_TABLE_26 */,
	2	/* IVCF_AUX_TABLE_27 */
};

static const int _Perl_IVCF_invmap[] = { /* for EBCDIC 037 */
	0,
	0xC0,
	IVCF_use_AUX_TABLE_1,
	0xC6,
	0,
	0xC6,
	0x1E9E,
	0,
	0xD8,
	0,
	0x41,
	0,
	0xC6,
	0xD8,
	0,
	0x41,
	IVCF_use_AUX_TABLE_2,
	0x4C,
	0,
	0xC6,
	0,
	IVCF_use_AUX_TABLE_3,
	0x54,
	0,
	0xC6,
	0,
	0xD8,
	0x178,
	0,
	0x100,
	0,
	0x102,
	0,
	0x104,
	0,
	0x106,
	0,
	0x108,
	0,
	0x10A,
	0,
	0x10C,
	0,
	0x10E,
	0,
	0x110,
	0,
	0x112,
	0,
	0x114,
	0,
	0x116,
	0,
	0x118,
	0,
	0x11A,
	0,
	0x11C,
	0,
	0x11E,
	0,
	0x120,
	0,
	0x122,
	0,
	0x124,
	0,
	0x126,
	0,
	0x128,
	0,
	0x12A,
	0,
	0x12C,
	0,
	0x12E,
	0,
	0x132,
	0,
	0x134,
	0,
	0x136,
	0,
	0x139,
	0,
	0x13B,
	0,
	0x13D,
	0,
	0x13F,
	0,
	0x141,
	0,
	0x143,
	0,
	0x145,
	0,
	0x147,
	0,
	0x14A,
	0,
	0x14C,
	0,
	0x14E,
	0,
	0x150,
	0,
	0x152,
	0,
	0x154,
	0,
	0x156,
	0,
	0x158,
	0,
	0x15A,
	0,
	0x15C,
	0,
	0x15E,
	0,
	0x160,
	0,
	0x162,
	0,
	0x164,
	0,
	0x166,
	0,
	0x168,
	0,
	0x16A,
	0,
	0x16C,
	0,
	0x16E,
	0,
	0x170,
	0,
	0x172,
	0,
	0x174,
	0,
	0x176,
	0,
	0x179,
	0,
	0x17B,
	0,
	0x17D,
	0,
	0x243,
	0,
	0x182,
	0,
	0x184,
	0,
	0x187,
	0,
	0x18B,
	0,
	0x191,
	0,
	0x1F6,
	0,
	0x198,
	0x23D,
	0,
	0x220,
	0,
	0x1A0,
	0,
	0x1A2,
	0,
	0x1A4,
	0,
	0x1A7,
	0,
	0x1AC,
	0,
	0x1AF,
	0,
	0x1B3,
	0,
	0x1B5,
	0,
	0x1B8,
	0,
	0x1BC,
	0,
	0x1F7,
	0,
	IVCF_use_AUX_TABLE_4,
	0,
	IVCF_use_AUX_TABLE_5,
	0,
	IVCF_use_AUX_TABLE_6,
	0,
	0x1CD,
	0,
	0x1CF,
	0,
	0x1D1,
	0,
	0x1D3,
	0,
	0x1D5,
	0,
	0x1D7,
	0,
	0x1D9,
	0,
	0x1DB,
	0x18E,
	0,
	0x1DE,
	0,
	0x1E0,
	0,
	0x1E2,
	0,
	0x1E4,
	0,
	0x1E6,
	0,
	0x1E8,
	0,
	0x1EA,
	0,
	0x1EC,
	0,
	0x1EE,
	0,
	IVCF_use_AUX_TABLE_7,
	0,
	0x1F4,
	0,
	0x1F8,
	0,
	0x1FA,
	0,
	0x1FC,
	0,
	0x1FE,
	0,
	0x200,
	0,
	0x202,
	0,
	0x204,
	0,
	0x206,
	0,
	0x208,
	0,
	0x20A,
	0,
	0x20C,
	0,
	0x20E,
	0,
	0x210,
	0,
	0x212,
	0,
	0x214,
	0,
	0x216,
	0,
	0x218,
	0,
	0x21A,
	0,
	0x21C,
	0,
	0x21E,
	0,
	0x222,
	0,
	0x224,
	0,
	0x226,
	0,
	0x228,
	0,
	0x22A,
	0,
	0x22C,
	0,
	0x22E,
	0,
	0x230,
	0,
	0x232,
	0,
	0x23B,
	0,
	0x2C7E,
	0,
	0x241,
	0,
	0x246,
	0,
	0x248,
	0,
	0x24A,
	0,
	0x24C,
	0,
	0x24E,
	0x2C6F,
	0x2C6D,
	0x2C70,
	0x181,
	0x186,
	0,
	0x189,
	0,
	0x18F,
	0,
	0x190,
	0xA7AB,
	0,
	0x193,
	0xA7AC,
	0,
	0x194,
	0,
	0xA78D,
	0xA7AA,
	0,
	0x197,
	0x196,
	0xA7AE,
	0x2C62,
	0xA7AD,
	0,
	0x19C,
	0,
	0x2C6E,
	0x19D,
	0,
	0x19F,
	0,
	0x2C64,
	0,
	0x1A6,
	0,
	0x1A9,
	0,
	0xA7B1,
	0x1AE,
	0x244,
	0x1B1,
	0x245,
	0,
	0x1B7,
	0,
	0xA7B2,
	0xA7B0,
	0,
	0x370,
	0,
	0x372,
	0,
	0x376,
	0,
	0x3FD,
	0,
	0x1FD3,
	0,
	0x386,
	0x388,
	0x1FE3,
	0x391,
	IVCF_use_AUX_TABLE_8,
	0x393,
	IVCF_use_AUX_TABLE_9,
	0x396,
	IVCF_use_AUX_TABLE_10,
	IVCF_use_AUX_TABLE_11,
	IVCF_use_AUX_TABLE_12,
	0x39B,
	IVCF_use_AUX_TABLE_13,
	0x39D,
	IVCF_use_AUX_TABLE_14,
	IVCF_use_AUX_TABLE_15,
	0,
	IVCF_use_AUX_TABLE_16,
	0x3A4,
	IVCF_use_AUX_TABLE_17,
	0x3A7,
	IVCF_use_AUX_TABLE_18,
	0x3AA,
	0x38C,
	0x38E,
	0,
	0x3CF,
	0,
	0x3D8,
	0,
	0x3DA,
	0,
	0x3DC,
	0,
	0x3DE,
	0,
	0x3E0,
	0,
	0x3E2,
	0,
	0x3E4,
	0,
	0x3E6,
	0,
	0x3E8,
	0,
	0x3EA,
	0,
	0x3EC,
	0,
	0x3EE,
	0,
	0x3F9,
	0x37F,
	0,
	0x3F7,
	0,
	0x3FA,
	0,
	0x410,
	IVCF_use_AUX_TABLE_19,
	0x413,
	IVCF_use_AUX_TABLE_20,
	0x415,
	IVCF_use_AUX_TABLE_21,
	0x41F,
	IVCF_use_AUX_TABLE_22,
	IVCF_use_AUX_TABLE_23,
	0x423,
	IVCF_use_AUX_TABLE_24,
	0x42B,
	0x400,
	0,
	0x460,
	0,
	IVCF_use_AUX_TABLE_25,
	0,
	0x464,
	0,
	0x466,
	0,
	0x468,
	0,
	0x46A,
	0,
	0x46C,
	0,
	0x46E,
	0,
	0x470,
	0,
	0x472,
	0,
	0x474,
	0,
	0x476,
	0,
	0x478,
	0,
	0x47A,
	0,
	0x47C,
	0,
	0x47E,
	0,
	0x480,
	0,
	0x48A,
	0,
	0x48C,
	0,
	0x48E,
	0,
	0x490,
	0,
	0x492,
	0,
	0x494,
	0,
	0x496,
	0,
	0x498,
	0,
	0x49A,
	0,
	0x49C,
	0,
	0x49E,
	0,
	0x4A0,
	0,
	0x4A2,
	0,
	0x4A4,
	0,
	0x4A6,
	0,
	0x4A8,
	0,
	0x4AA,
	0,
	0x4AC,
	0,
	0x4AE,
	0,
	0x4B0,
	0,
	0x4B2,
	0,
	0x4B4,
	0,
	0x4B6,
	0,
	0x4B8,
	0,
	0x4BA,
	0,
	0x4BC,
	0,
	0x4BE,
	0,
	0x4C1,
	0,
	0x4C3,
	0,
	0x4C5,
	0,
	0x4C7,
	0,
	0x4C9,
	0,
	0x4CB,
	0,
	0x4CD,
	0x4C0,
	0,
	0x4D0,
	0,
	0x4D2,
	0,
	0x4D4,
	0,
	0x4D6,
	0,
	0x4D8,
	0,
	0x4DA,
	0,
	0x4DC,
	0,
	0x4DE,
	0,
	0x4E0,
	0,
	0x4E2,
	0,
	0x4E4,
	0,
	0x4E6,
	0,
	0x4E8,
	0,
	0x4EA,
	0,
	0x4EC,
	0,
	0x4EE,
	0,
	0x4F0,
	0,
	0x4F2,
	0,
	0x4F4,
	0,
	0x4F6,
	0,
	0x4F8,
	0,
	0x4FA,
	0,
	0x4FC,
	0,
	0x4FE,
	0,
	0x500,
	0,
	0x502,
	0,
	0x504,
	0,
	0x506,
	0,
	0x508,
	0,
	0x50A,
	0,
	0x50C,
	0,
	0x50E,
	0,
	0x510,
	0,
	0x512,
	0,
	0x514,
	0,
	0x516,
	0,
	0x518,
	0,
	0x51A,
	0,
	0x51C,
	0,
	0x51E,
	0,
	0x520,
	0,
	0x522,
	0,
	0x524,
	0,
	0x526,
	0,
	0x528,
	0,
	0x52A,
	0,
	0x52C,
	0,
	0x52E,
	0,
	0x531,
	0,
	0xAB70,
	0x13F8,
	0,
	0xA77D,
	0,
	0x2C63,
	0,
	0x1E00,
	0,
	0x1E02,
	0,
	0x1E04,
	0,
	0x1E06,
	0,
	0x1E08,
	0,
	0x1E0A,
	0,
	0x1E0C,
	0,
	0x1E0E,
	0,
	0x1E10,
	0,
	0x1E12,
	0,
	0x1E14,
	0,
	0x1E16,
	0,
	0x1E18,
	0,
	0x1E1A,
	0,
	0x1E1C,
	0,
	0x1E1E,
	0,
	0x1E20,
	0,
	0x1E22,
	0,
	0x1E24,
	0,
	0x1E26,
	0,
	0x1E28,
	0,
	0x1E2A,
	0,
	0x1E2C,
	0,
	0x1E2E,
	0,
	0x1E30,
	0,
	0x1E32,
	0,
	0x1E34,
	0,
	0x1E36,
	0,
	0x1E38,
	0,
	0x1E3A,
	0,
	0x1E3C,
	0,
	0x1E3E,
	0,
	0x1E40,
	0,
	0x1E42,
	0,
	0x1E44,
	0,
	0x1E46,
	0,
	0x1E48,
	0,
	0x1E4A,
	0,
	0x1E4C,
	0,
	0x1E4E,
	0,
	0x1E50,
	0,
	0x1E52,
	0,
	0x1E54,
	0,
	0x1E56,
	0,
	0x1E58,
	0,
	0x1E5A,
	0,
	0x1E5C,
	0,
	0x1E5E,
	0,
	IVCF_use_AUX_TABLE_26,
	0,
	0x1E62,
	0,
	0x1E64,
	0,
	0x1E66,
	0,
	0x1E68,
	0,
	0x1E6A,
	0,
	0x1E6C,
	0,
	0x1E6E,
	0,
	0x1E70,
	0,
	0x1E72,
	0,
	0x1E74,
	0,
	0x1E76,
	0,
	0x1E78,
	0,
	0x1E7A,
	0,
	0x1E7C,
	0,
	0x1E7E,
	0,
	0x1E80,
	0,
	0x1E82,
	0,
	0x1E84,
	0,
	0x1E86,
	0,
	0x1E88,
	0,
	0x1E8A,
	0,
	0x1E8C,
	0,
	0x1E8E,
	0,
	0x1E90,
	0,
	0x1E92,
	0,
	0x1E94,
	0,
	0xDF,
	0,
	0x1EA0,
	0,
	0x1EA2,
	0,
	0x1EA4,
	0,
	0x1EA6,
	0,
	0x1EA8,
	0,
	0x1EAA,
	0,
	0x1EAC,
	0,
	0x1EAE,
	0,
	0x1EB0,
	0,
	0x1EB2,
	0,
	0x1EB4,
	0,
	0x1EB6,
	0,
	0x1EB8,
	0,
	0x1EBA,
	0,
	0x1EBC,
	0,
	0x1EBE,
	0,
	0x1EC0,
	0,
	0x1EC2,
	0,
	0x1EC4,
	0,
	0x1EC6,
	0,
	0x1EC8,
	0,
	0x1ECA,
	0,
	0x1ECC,
	0,
	0x1ECE,
	0,
	0x1ED0,
	0,
	0x1ED2,
	0,
	0x1ED4,
	0,
	0x1ED6,
	0,
	0x1ED8,
	0,
	0x1EDA,
	0,
	0x1EDC,
	0,
	0x1EDE,
	0,
	0x1EE0,
	0,
	0x1EE2,
	0,
	0x1EE4,
	0,
	0x1EE6,
	0,
	0x1EE8,
	0,
	0x1EEA,
	0,
	0x1EEC,
	0,
	0x1EEE,
	0,
	0x1EF0,
	0,
	0x1EF2,
	0,
	0x1EF4,
	0,
	0x1EF6,
	0,
	0x1EF8,
	0,
	0x1EFA,
	0,
	0x1EFC,
	0,
	0x1EFE,
	0x1F08,
	0,
	0x1F18,
	0,
	0x1F28,
	0,
	0x1F38,
	0,
	0x1F48,
	0,
	0x1F59,
	0,
	0x1F5B,
	0,
	0x1F5D,
	0,
	0x1F5F,
	0,
	0x1F68,
	0,
	0x1FBA,
	0x1FC8,
	0x1FDA,
	0x1FF8,
	0x1FEA,
	0x1FFA,
	0,
	0x1F88,
	0x1F80,
	0x1F98,
	0x1F90,
	0x1FA8,
	0x1FA0,
	0x1FB8,
	0,
	0x1FBC,
	0,
	0x1FB3,
	0,
	0x1FCC,
	0,
	0x1FC3,
	0,
	0x1FD8,
	0,
	0x390,
	0,
	0x1FE8,
	0,
	0x3B0,
	0,
	0x1FEC,
	0,
	0x1FFC,
	0,
	0x1FF3,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	IVCF_use_AUX_TABLE_27,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B3,
	0,
	0xFB06,
	0xFB05,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x1E900
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV _Perl_LB_invlist[] = { /* for ASCII/Latin1 */
	2313,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x21,
	0x22,
	0x23,
	0x24,
	0x25,
	0x26,
	0x27,
	0x28,
	0x29,
	0x2A,
	0x2B,
	0x2C,
	0x2D,
	0x2E,
	0x2F,
	0x30,
	0x3A,
	0x3C,
	0x3F,
	0x40,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0x7F,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0xA2,
	0xA3,
	0xA6,
	0xAB,
	0xAC,
	0xAD,
	0xAE,
	0xB0,
	0xB1,
	0xB2,
	0xB4,
	0xB5,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0x300,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0x370,
	0x37E,
	0x37F,
	0x483,
	0x48A,
	0x589,
	0x58A,
	0x58B,
	0x58F,
	0x590,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x609,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61E,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F8,
	0x7F9,
	0x7FA,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0x9FB,
	0x9FC,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xBF9,
	0xBFA,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD79,
	0xD7A,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE3F,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xF0C,
	0xF0D,
	0xF12,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFC0,
	0xFC6,
	0xFC7,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0xFD9,
	0xFDB,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x169C,
	0x169D,
	0x16EB,
	0x16EE,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1737,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17D6,
	0x17D7,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1804,
	0x1806,
	0x1807,
	0x1808,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1FFD,
	0x1FFE,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2015,
	0x2018,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2020,
	0x2024,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2038,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2044,
	0x2045,
	0x2046,
	0x2047,
	0x204A,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2061,
	0x2066,
	0x2070,
	0x207D,
	0x207E,
	0x207F,
	0x208D,
	0x208E,
	0x208F,
	0x20A0,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2103,
	0x2104,
	0x2109,
	0x210A,
	0x2116,
	0x2117,
	0x2212,
	0x2214,
	0x22EF,
	0x22F0,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x231A,
	0x231C,
	0x2329,
	0x232A,
	0x232B,
	0x23F0,
	0x23F4,
	0x2600,
	0x2604,
	0x2614,
	0x2616,
	0x2618,
	0x2619,
	0x261A,
	0x261D,
	0x261E,
	0x2620,
	0x2639,
	0x263C,
	0x2668,
	0x2669,
	0x267F,
	0x2680,
	0x26BD,
	0x26C9,
	0x26CD,
	0x26CE,
	0x26CF,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E2,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26F9,
	0x26FA,
	0x26FB,
	0x26FD,
	0x2705,
	0x2708,
	0x270A,
	0x270E,
	0x275B,
	0x2761,
	0x2762,
	0x2764,
	0x2765,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C5,
	0x27C6,
	0x27C7,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FC,
	0x29FD,
	0x29FE,
	0x2CEF,
	0x2CF2,
	0x2CF9,
	0x2CFA,
	0x2CFD,
	0x2CFE,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3A,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3003,
	0x3005,
	0x3006,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301D,
	0x301E,
	0x3020,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x303B,
	0x303D,
	0x3040,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x3099,
	0x309B,
	0x309F,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA015,
	0xA016,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA620,
	0xA62A,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F8,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA838,
	0xA839,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8FC,
	0xA8FD,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C7,
	0xA9CA,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFB00,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFD3E,
	0xFD3F,
	0xFD40,
	0xFDFC,
	0xFDFD,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE15,
	0xFE17,
	0xFE18,
	0xFE19,
	0xFE1A,
	0xFE20,
	0xFE30,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE47,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6B,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF04,
	0xFF05,
	0xFF06,
	0xFF08,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0xFF66,
	0xFF67,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE1,
	0xFFE2,
	0xFFE5,
	0xFFE7,
	0xFFF9,
	0xFFFC,
	0xFFFD,
	0x10100,
	0x10103,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x104A0,
	0x104AA,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A50,
	0x10A58,
	0x10AE5,
	0x10AE7,
	0x10AF0,
	0x10AF6,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BE,
	0x110C2,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11144,
	0x11173,
	0x11174,
	0x11175,
	0x11176,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x1123F,
	0x112A9,
	0x112AA,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x1144B,
	0x1144F,
	0x11450,
	0x1145A,
	0x1145B,
	0x1145C,
	0x114B0,
	0x114C4,
	0x114D0,
	0x114DA,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C6,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x11643,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118E0,
	0x118EA,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A40,
	0x11A41,
	0x11A45,
	0x11A46,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA1,
	0x11AA3,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C41,
	0x11C46,
	0x11C50,
	0x11C5A,
	0x11C70,
	0x11C71,
	0x11C72,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12470,
	0x12475,
	0x13258,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13286,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x13379,
	0x1337A,
	0x1337C,
	0x145CE,
	0x145CF,
	0x145D0,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B30,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1DA8B,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1F000,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F385,
	0x1F386,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AA,
	0x1F4AB,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F676,
	0x1F679,
	0x1F67C,
	0x1F680,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 65 /* ASCII/Latin1 */

typedef enum {
	LB_Alphabetic = 0,
	LB_Break_After = 1,
	LB_Break_Before = 2,
	LB_Break_Both = 3,
	LB_Break_Symbols = 4,
	LB_Carriage_Return = 5,
	LB_Close_Parenthesis = 6,
	LB_Close_Punctuation = 7,
	LB_Combining_Mark = 8,
	LB_Contingent_Break = 9,
	LB_E_Base = 10,
	LB_E_Modifier = 11,
	LB_Exclamation = 12,
	LB_Glue = 13,
	LB_H2 = 14,
	LB_H3 = 15,
	LB_Hebrew_Letter = 16,
	LB_Hyphen = 17,
	LB_Ideographic = 18,
	LB_Infix_Numeric = 19,
	LB_Inseparable = 20,
	LB_JL = 21,
	LB_JT = 22,
	LB_JV = 23,
	LB_Line_Feed = 24,
	LB_Mandatory_Break = 25,
	LB_Next_Line = 26,
	LB_Nonstarter = 27,
	LB_Numeric = 28,
	LB_Open_Punctuation = 29,
	LB_Postfix_Numeric = 30,
	LB_Prefix_Numeric = 31,
	LB_Quotation = 32,
	LB_Regional_Indicator = 33,
	LB_Space = 34,
	LB_Word_Joiner = 35,
	LB_ZWJ = 36,
	LB_ZWSpace = 37,
	LB_EDGE = 38
} LB_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const LB_enum _Perl_LB_invmap[] = { /* for ASCII/Latin1 */
	LB_Combining_Mark,
	LB_Break_After,
	LB_Line_Feed,
	LB_Mandatory_Break,
	LB_Carriage_Return,
	LB_Combining_Mark,
	LB_Space,
	LB_Exclamation,
	LB_Quotation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Close_Parenthesis,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Infix_Numeric,
	LB_Hyphen,
	LB_Infix_Numeric,
	LB_Break_Symbols,
	LB_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Prefix_Numeric,
	LB_Close_Parenthesis,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Next_Line,
	LB_Combining_Mark,
	LB_Glue,
	LB_Open_Punctuation,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Postfix_Numeric,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Glue,
	LB_Break_Before,
	LB_Break_After,
	LB_Glue,
	LB_Exclamation,
	LB_Glue,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Glue,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_JV,
	LB_JT,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_ZWSpace,
	LB_Combining_Mark,
	LB_ZWJ,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_Break_Both,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Break_After,
	LB_Mandatory_Break,
	LB_Combining_Mark,
	LB_Glue,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Quotation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_Both,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_Alphabetic,
	LB_JV,
	LB_Alphabetic,
	LB_JT,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Combining_Mark,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Infix_Numeric,
	LB_Close_Punctuation,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Contingent_Break,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_Before,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Regional_Indicator,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Modifier,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Alphabetic,
	LB_Quotation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_LB_invlist[] = { /* for EBCDIC 1047 */
	2325,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x41,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x4F,
	0x50,
	0x5A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0x62,
	0x6B,
	0x6C,
	0x6D,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x90,
	0x91,
	0x9F,
	0xA0,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB1,
	0xB3,
	0xBD,
	0xBE,
	0xBF,
	0xC0,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0x300,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0x370,
	0x37E,
	0x37F,
	0x483,
	0x48A,
	0x589,
	0x58A,
	0x58B,
	0x58F,
	0x590,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x609,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61E,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F8,
	0x7F9,
	0x7FA,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0x9FB,
	0x9FC,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xBF9,
	0xBFA,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD79,
	0xD7A,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE3F,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xF0C,
	0xF0D,
	0xF12,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFC0,
	0xFC6,
	0xFC7,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0xFD9,
	0xFDB,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x169C,
	0x169D,
	0x16EB,
	0x16EE,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1737,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17D6,
	0x17D7,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1804,
	0x1806,
	0x1807,
	0x1808,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1FFD,
	0x1FFE,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2015,
	0x2018,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2020,
	0x2024,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2038,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2044,
	0x2045,
	0x2046,
	0x2047,
	0x204A,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2061,
	0x2066,
	0x2070,
	0x207D,
	0x207E,
	0x207F,
	0x208D,
	0x208E,
	0x208F,
	0x20A0,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2103,
	0x2104,
	0x2109,
	0x210A,
	0x2116,
	0x2117,
	0x2212,
	0x2214,
	0x22EF,
	0x22F0,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x231A,
	0x231C,
	0x2329,
	0x232A,
	0x232B,
	0x23F0,
	0x23F4,
	0x2600,
	0x2604,
	0x2614,
	0x2616,
	0x2618,
	0x2619,
	0x261A,
	0x261D,
	0x261E,
	0x2620,
	0x2639,
	0x263C,
	0x2668,
	0x2669,
	0x267F,
	0x2680,
	0x26BD,
	0x26C9,
	0x26CD,
	0x26CE,
	0x26CF,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E2,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26F9,
	0x26FA,
	0x26FB,
	0x26FD,
	0x2705,
	0x2708,
	0x270A,
	0x270E,
	0x275B,
	0x2761,
	0x2762,
	0x2764,
	0x2765,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C5,
	0x27C6,
	0x27C7,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FC,
	0x29FD,
	0x29FE,
	0x2CEF,
	0x2CF2,
	0x2CF9,
	0x2CFA,
	0x2CFD,
	0x2CFE,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3A,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3003,
	0x3005,
	0x3006,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301D,
	0x301E,
	0x3020,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x303B,
	0x303D,
	0x3040,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x3099,
	0x309B,
	0x309F,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA015,
	0xA016,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA620,
	0xA62A,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F8,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA838,
	0xA839,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8FC,
	0xA8FD,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C7,
	0xA9CA,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFB00,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFD3E,
	0xFD3F,
	0xFD40,
	0xFDFC,
	0xFDFD,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE15,
	0xFE17,
	0xFE18,
	0xFE19,
	0xFE1A,
	0xFE20,
	0xFE30,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE47,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6B,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF04,
	0xFF05,
	0xFF06,
	0xFF08,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0xFF66,
	0xFF67,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE1,
	0xFFE2,
	0xFFE5,
	0xFFE7,
	0xFFF9,
	0xFFFC,
	0xFFFD,
	0x10100,
	0x10103,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x104A0,
	0x104AA,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A50,
	0x10A58,
	0x10AE5,
	0x10AE7,
	0x10AF0,
	0x10AF6,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BE,
	0x110C2,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11144,
	0x11173,
	0x11174,
	0x11175,
	0x11176,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x1123F,
	0x112A9,
	0x112AA,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x1144B,
	0x1144F,
	0x11450,
	0x1145A,
	0x1145B,
	0x1145C,
	0x114B0,
	0x114C4,
	0x114D0,
	0x114DA,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C6,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x11643,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118E0,
	0x118EA,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A40,
	0x11A41,
	0x11A45,
	0x11A46,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA1,
	0x11AA3,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C41,
	0x11C46,
	0x11C50,
	0x11C5A,
	0x11C70,
	0x11C71,
	0x11C72,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12470,
	0x12475,
	0x13258,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13286,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x13379,
	0x1337A,
	0x1337C,
	0x145CE,
	0x145CF,
	0x145D0,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B30,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1DA8B,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1F000,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F385,
	0x1F386,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AA,
	0x1F4AB,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F676,
	0x1F679,
	0x1F67C,
	0x1F680,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

typedef enum {
	LB_Alphabetic = 0,
	LB_Break_After = 1,
	LB_Break_Before = 2,
	LB_Break_Both = 3,
	LB_Break_Symbols = 4,
	LB_Carriage_Return = 5,
	LB_Close_Parenthesis = 6,
	LB_Close_Punctuation = 7,
	LB_Combining_Mark = 8,
	LB_Contingent_Break = 9,
	LB_E_Base = 10,
	LB_E_Modifier = 11,
	LB_Exclamation = 12,
	LB_Glue = 13,
	LB_H2 = 14,
	LB_H3 = 15,
	LB_Hebrew_Letter = 16,
	LB_Hyphen = 17,
	LB_Ideographic = 18,
	LB_Infix_Numeric = 19,
	LB_Inseparable = 20,
	LB_JL = 21,
	LB_JT = 22,
	LB_JV = 23,
	LB_Line_Feed = 24,
	LB_Mandatory_Break = 25,
	LB_Next_Line = 26,
	LB_Nonstarter = 27,
	LB_Numeric = 28,
	LB_Open_Punctuation = 29,
	LB_Postfix_Numeric = 30,
	LB_Prefix_Numeric = 31,
	LB_Quotation = 32,
	LB_Regional_Indicator = 33,
	LB_Space = 34,
	LB_Word_Joiner = 35,
	LB_ZWJ = 36,
	LB_ZWSpace = 37,
	LB_EDGE = 38
} LB_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const LB_enum _Perl_LB_invmap[] = { /* for EBCDIC 1047 */
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Mandatory_Break,
	LB_Carriage_Return,
	LB_Combining_Mark,
	LB_Line_Feed,
	LB_Combining_Mark,
	LB_Next_Line,
	LB_Combining_Mark,
	LB_Space,
	LB_Glue,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Prefix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Close_Parenthesis,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Hyphen,
	LB_Break_Symbols,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Close_Parenthesis,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Postfix_Numeric,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Glue,
	LB_Break_Before,
	LB_Break_After,
	LB_Glue,
	LB_Exclamation,
	LB_Glue,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Glue,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_JV,
	LB_JT,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_ZWSpace,
	LB_Combining_Mark,
	LB_ZWJ,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_Break_Both,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Break_After,
	LB_Mandatory_Break,
	LB_Combining_Mark,
	LB_Glue,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Quotation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_Both,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_Alphabetic,
	LB_JV,
	LB_Alphabetic,
	LB_JT,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Combining_Mark,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Infix_Numeric,
	LB_Close_Punctuation,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Contingent_Break,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_Before,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Regional_Indicator,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Modifier,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Alphabetic,
	LB_Quotation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_LB_invlist[] = { /* for EBCDIC 037 */
	2325,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x41,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x4F,
	0x50,
	0x5A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0x62,
	0x6B,
	0x6C,
	0x6D,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x90,
	0x91,
	0x9F,
	0xA0,
	0xAA,
	0xAC,
	0xB1,
	0xB3,
	0xBA,
	0xBB,
	0xBC,
	0xBE,
	0xBF,
	0xC0,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0x300,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0x370,
	0x37E,
	0x37F,
	0x483,
	0x48A,
	0x589,
	0x58A,
	0x58B,
	0x58F,
	0x590,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x609,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61E,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F8,
	0x7F9,
	0x7FA,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0x9FB,
	0x9FC,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xBF9,
	0xBFA,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD79,
	0xD7A,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE3F,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xF0C,
	0xF0D,
	0xF12,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFC0,
	0xFC6,
	0xFC7,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0xFD9,
	0xFDB,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x1100,
	0x1160,
	0x11A8,
	0x1200,
	0x135D,
	0x1360,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x169C,
	0x169D,
	0x16EB,
	0x16EE,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1737,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17D6,
	0x17D7,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1804,
	0x1806,
	0x1807,
	0x1808,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1FFD,
	0x1FFE,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2015,
	0x2018,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2020,
	0x2024,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2038,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2044,
	0x2045,
	0x2046,
	0x2047,
	0x204A,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2061,
	0x2066,
	0x2070,
	0x207D,
	0x207E,
	0x207F,
	0x208D,
	0x208E,
	0x208F,
	0x20A0,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2103,
	0x2104,
	0x2109,
	0x210A,
	0x2116,
	0x2117,
	0x2212,
	0x2214,
	0x22EF,
	0x22F0,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x231A,
	0x231C,
	0x2329,
	0x232A,
	0x232B,
	0x23F0,
	0x23F4,
	0x2600,
	0x2604,
	0x2614,
	0x2616,
	0x2618,
	0x2619,
	0x261A,
	0x261D,
	0x261E,
	0x2620,
	0x2639,
	0x263C,
	0x2668,
	0x2669,
	0x267F,
	0x2680,
	0x26BD,
	0x26C9,
	0x26CD,
	0x26CE,
	0x26CF,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E2,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26F9,
	0x26FA,
	0x26FB,
	0x26FD,
	0x2705,
	0x2708,
	0x270A,
	0x270E,
	0x275B,
	0x2761,
	0x2762,
	0x2764,
	0x2765,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C5,
	0x27C6,
	0x27C7,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FC,
	0x29FD,
	0x29FE,
	0x2CEF,
	0x2CF2,
	0x2CF9,
	0x2CFA,
	0x2CFD,
	0x2CFE,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3A,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3003,
	0x3005,
	0x3006,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301D,
	0x301E,
	0x3020,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x303B,
	0x303D,
	0x3040,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x3099,
	0x309B,
	0x309F,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA015,
	0xA016,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA620,
	0xA62A,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F8,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA838,
	0xA839,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8FC,
	0xA8FD,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C7,
	0xA9CA,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFB00,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFD3E,
	0xFD3F,
	0xFD40,
	0xFDFC,
	0xFDFD,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE15,
	0xFE17,
	0xFE18,
	0xFE19,
	0xFE1A,
	0xFE20,
	0xFE30,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE47,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6B,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF04,
	0xFF05,
	0xFF06,
	0xFF08,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0xFF66,
	0xFF67,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE1,
	0xFFE2,
	0xFFE5,
	0xFFE7,
	0xFFF9,
	0xFFFC,
	0xFFFD,
	0x10100,
	0x10103,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x104A0,
	0x104AA,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A50,
	0x10A58,
	0x10AE5,
	0x10AE7,
	0x10AF0,
	0x10AF6,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BE,
	0x110C2,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11144,
	0x11173,
	0x11174,
	0x11175,
	0x11176,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x1123F,
	0x112A9,
	0x112AA,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x1144B,
	0x1144F,
	0x11450,
	0x1145A,
	0x1145B,
	0x1145C,
	0x114B0,
	0x114C4,
	0x114D0,
	0x114DA,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C6,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x11643,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118E0,
	0x118EA,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A40,
	0x11A41,
	0x11A45,
	0x11A46,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA1,
	0x11AA3,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C41,
	0x11C46,
	0x11C50,
	0x11C5A,
	0x11C70,
	0x11C71,
	0x11C72,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12470,
	0x12475,
	0x13258,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13286,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x13379,
	0x1337A,
	0x1337C,
	0x145CE,
	0x145CF,
	0x145D0,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B30,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1DA8B,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1F000,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F385,
	0x1F386,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AA,
	0x1F4AB,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F676,
	0x1F679,
	0x1F67C,
	0x1F680,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

typedef enum {
	LB_Alphabetic = 0,
	LB_Break_After = 1,
	LB_Break_Before = 2,
	LB_Break_Both = 3,
	LB_Break_Symbols = 4,
	LB_Carriage_Return = 5,
	LB_Close_Parenthesis = 6,
	LB_Close_Punctuation = 7,
	LB_Combining_Mark = 8,
	LB_Contingent_Break = 9,
	LB_E_Base = 10,
	LB_E_Modifier = 11,
	LB_Exclamation = 12,
	LB_Glue = 13,
	LB_H2 = 14,
	LB_H3 = 15,
	LB_Hebrew_Letter = 16,
	LB_Hyphen = 17,
	LB_Ideographic = 18,
	LB_Infix_Numeric = 19,
	LB_Inseparable = 20,
	LB_JL = 21,
	LB_JT = 22,
	LB_JV = 23,
	LB_Line_Feed = 24,
	LB_Mandatory_Break = 25,
	LB_Next_Line = 26,
	LB_Nonstarter = 27,
	LB_Numeric = 28,
	LB_Open_Punctuation = 29,
	LB_Postfix_Numeric = 30,
	LB_Prefix_Numeric = 31,
	LB_Quotation = 32,
	LB_Regional_Indicator = 33,
	LB_Space = 34,
	LB_Word_Joiner = 35,
	LB_ZWJ = 36,
	LB_ZWSpace = 37,
	LB_EDGE = 38
} LB_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const LB_enum _Perl_LB_invmap[] = { /* for EBCDIC 037 */
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Mandatory_Break,
	LB_Carriage_Return,
	LB_Combining_Mark,
	LB_Next_Line,
	LB_Combining_Mark,
	LB_Line_Feed,
	LB_Combining_Mark,
	LB_Space,
	LB_Glue,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Prefix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Close_Parenthesis,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Hyphen,
	LB_Break_Symbols,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Parenthesis,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Glue,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Infix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Exclamation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Postfix_Numeric,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Glue,
	LB_Break_Before,
	LB_Break_After,
	LB_Glue,
	LB_Exclamation,
	LB_Glue,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Glue,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_JV,
	LB_JT,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Glue,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_ZWSpace,
	LB_Combining_Mark,
	LB_ZWJ,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Glue,
	LB_Break_After,
	LB_Break_Both,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Quotation,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Break_After,
	LB_Mandatory_Break,
	LB_Combining_Mark,
	LB_Glue,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Infix_Numeric,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Quotation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Quotation,
	LB_Alphabetic,
	LB_Quotation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_Both,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Open_Punctuation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Exclamation,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_JL,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_H2,
	LB_H3,
	LB_Alphabetic,
	LB_JV,
	LB_Alphabetic,
	LB_JT,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Combining_Mark,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Hebrew_Letter,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Infix_Numeric,
	LB_Close_Punctuation,
	LB_Infix_Numeric,
	LB_Exclamation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Word_Joiner,
	LB_Alphabetic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Postfix_Numeric,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Exclamation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Ideographic,
	LB_Close_Punctuation,
	LB_Ideographic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Nonstarter,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Postfix_Numeric,
	LB_Prefix_Numeric,
	LB_Ideographic,
	LB_Prefix_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Contingent_Break,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Inseparable,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_Before,
	LB_Break_After,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Break_After,
	LB_Break_Before,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_Before,
	LB_Exclamation,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Close_Punctuation,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Break_After,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Break_After,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Numeric,
	LB_Alphabetic,
	LB_Open_Punctuation,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Regional_Indicator,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Modifier,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Alphabetic,
	LB_Quotation,
	LB_Nonstarter,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_E_Base,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Ideographic,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic,
	LB_Combining_Mark,
	LB_Alphabetic
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV _Perl_SB_invlist[] = { /* for ASCII/Latin1 */
	3002,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x21,
	0x22,
	0x23,
	0x27,
	0x2A,
	0x2C,
	0x2E,
	0x2F,
	0x30,
	0x3A,
	0x3B,
	0x3F,
	0x40,
	0x41,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x61,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0xAA,
	0xAB,
	0xAC,
	0xAD,
	0xAE,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xBC,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0xF7,
	0xF8,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BC,
	0x1BD,
	0x1C0,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x370,
	0x371,
	0x372,
	0x373,
	0x374,
	0x375,
	0x376,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x483,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x55D,
	0x55E,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61F,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x703,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166E,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1737,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1803,
	0x1804,
	0x1808,
	0x1809,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A20,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AAC,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C3D,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FDC,
	0x1FE0,
	0x1FE8,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2013,
	0x2015,
	0x2018,
	0x2020,
	0x2024,
	0x2025,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2045,
	0x2047,
	0x204A,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207D,
	0x207F,
	0x2080,
	0x208D,
	0x208F,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2170,
	0x2180,
	0x2183,
	0x2184,
	0x2185,
	0x2189,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x24B6,
	0x24D0,
	0x24EA,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF2,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E3C,
	0x2E3D,
	0x2E42,
	0x2E43,
	0x3000,
	0x3001,
	0x3002,
	0x3003,
	0x3005,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0x3021,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA4FF,
	0xA500,
	0xA60D,
	0xA60E,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA717,
	0xA720,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA789,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA92F,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C8,
	0xA9CA,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE17,
	0xFE19,
	0xFE20,
	0xFE30,
	0xFE31,
	0xFE33,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5F,
	0xFE63,
	0xFE64,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1F,
	0xFF20,
	0xFF21,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF41,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x10428,
	0x10450,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A56,
	0x10A58,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11141,
	0x11144,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111DE,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112AA,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x1144D,
	0x11450,
	0x1145A,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11643,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118A0,
	0x118C0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A42,
	0x11A44,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11A9A,
	0x11A9B,
	0x11A9D,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C41,
	0x11C43,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B39,
	0x16B40,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA88,
	0x1DA89,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E922,
	0x1E944,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F676,
	0x1F679,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 65 /* ASCII/Latin1 */

typedef enum {
	SB_Other = 0,
	SB_ATerm = 1,
	SB_CR = 2,
	SB_Close = 3,
	SB_Extend = 4,
	SB_Format = 5,
	SB_LF = 6,
	SB_Lower = 7,
	SB_Numeric = 8,
	SB_OLetter = 9,
	SB_SContinue = 10,
	SB_STerm = 11,
	SB_Sep = 12,
	SB_Sp = 13,
	SB_Upper = 14,
	SB_EDGE = 15
} SB_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const SB_enum _Perl_SB_invmap[] = { /* for ASCII/Latin1 */
	SB_Other,
	SB_Sp,
	SB_LF,
	SB_Sp,
	SB_CR,
	SB_Other,
	SB_Sp,
	SB_STerm,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_Numeric,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Sep,
	SB_Other,
	SB_Sp,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Format,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Sp,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_STerm,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Lower,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Sep,
	SB_Format,
	SB_Sp,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Sp,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_SContinue,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_SContinue,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Close,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_SB_invlist[] = { /* for EBCDIC 1047 */
	3026,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x51,
	0x5A,
	0x5B,
	0x5D,
	0x5E,
	0x60,
	0x61,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6F,
	0x70,
	0x71,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BC,
	0x1BD,
	0x1C0,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x370,
	0x371,
	0x372,
	0x373,
	0x374,
	0x375,
	0x376,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x483,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x55D,
	0x55E,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61F,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x703,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166E,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1737,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1803,
	0x1804,
	0x1808,
	0x1809,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A20,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AAC,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C3D,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FDC,
	0x1FE0,
	0x1FE8,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2013,
	0x2015,
	0x2018,
	0x2020,
	0x2024,
	0x2025,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2045,
	0x2047,
	0x204A,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207D,
	0x207F,
	0x2080,
	0x208D,
	0x208F,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2170,
	0x2180,
	0x2183,
	0x2184,
	0x2185,
	0x2189,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x24B6,
	0x24D0,
	0x24EA,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF2,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E3C,
	0x2E3D,
	0x2E42,
	0x2E43,
	0x3000,
	0x3001,
	0x3002,
	0x3003,
	0x3005,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0x3021,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA4FF,
	0xA500,
	0xA60D,
	0xA60E,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA717,
	0xA720,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA789,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA92F,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C8,
	0xA9CA,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE17,
	0xFE19,
	0xFE20,
	0xFE30,
	0xFE31,
	0xFE33,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5F,
	0xFE63,
	0xFE64,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1F,
	0xFF20,
	0xFF21,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF41,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x10428,
	0x10450,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A56,
	0x10A58,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11141,
	0x11144,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111DE,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112AA,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x1144D,
	0x11450,
	0x1145A,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11643,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118A0,
	0x118C0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A42,
	0x11A44,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11A9A,
	0x11A9B,
	0x11A9D,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C41,
	0x11C43,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B39,
	0x16B40,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA88,
	0x1DA89,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E922,
	0x1E944,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F676,
	0x1F679,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

typedef enum {
	SB_Other = 0,
	SB_ATerm = 1,
	SB_CR = 2,
	SB_Close = 3,
	SB_Extend = 4,
	SB_Format = 5,
	SB_LF = 6,
	SB_Lower = 7,
	SB_Numeric = 8,
	SB_OLetter = 9,
	SB_SContinue = 10,
	SB_STerm = 11,
	SB_Sep = 12,
	SB_Sp = 13,
	SB_Upper = 14,
	SB_EDGE = 15
} SB_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const SB_enum _Perl_SB_invmap[] = { /* for EBCDIC 1047 */
	SB_Other,
	SB_Sp,
	SB_Other,
	SB_Sp,
	SB_CR,
	SB_Other,
	SB_LF,
	SB_Other,
	SB_Sep,
	SB_Other,
	SB_Sp,
	SB_Lower,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Upper,
	SB_Lower,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Upper,
	SB_Format,
	SB_Lower,
	SB_Close,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Numeric,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Format,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Sp,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_STerm,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Lower,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Sep,
	SB_Format,
	SB_Sp,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Sp,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_SContinue,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_SContinue,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Close,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_SB_invlist[] = { /* for EBCDIC 037 */
	3022,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x51,
	0x5A,
	0x5B,
	0x5D,
	0x5E,
	0x60,
	0x61,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6F,
	0x70,
	0x71,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BC,
	0x1BD,
	0x1C0,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x370,
	0x371,
	0x372,
	0x373,
	0x374,
	0x375,
	0x376,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x483,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x55D,
	0x55E,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61F,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x703,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE40,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x104C,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166E,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1737,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1803,
	0x1804,
	0x1808,
	0x1809,
	0x180A,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x1946,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A20,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AAC,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C3B,
	0x1C3D,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FDC,
	0x1FE0,
	0x1FE8,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2013,
	0x2015,
	0x2018,
	0x2020,
	0x2024,
	0x2025,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2045,
	0x2047,
	0x204A,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207D,
	0x207F,
	0x2080,
	0x208D,
	0x208F,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2170,
	0x2180,
	0x2183,
	0x2184,
	0x2185,
	0x2189,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x24B6,
	0x24D0,
	0x24EA,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF2,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2E,
	0x2E2F,
	0x2E30,
	0x2E3C,
	0x2E3D,
	0x2E42,
	0x2E43,
	0x3000,
	0x3001,
	0x3002,
	0x3003,
	0x3005,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0x3021,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA4FF,
	0xA500,
	0xA60D,
	0xA60E,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA717,
	0xA720,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA789,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8CE,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA92F,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C8,
	0xA9CA,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE17,
	0xFE19,
	0xFE20,
	0xFE30,
	0xFE31,
	0xFE33,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE5F,
	0xFE63,
	0xFE64,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1F,
	0xFF20,
	0xFF21,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF41,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x10428,
	0x10450,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A56,
	0x10A58,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11141,
	0x11144,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111DE,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112AA,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x1144D,
	0x11450,
	0x1145A,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11643,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118A0,
	0x118C0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A42,
	0x11A44,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11A9A,
	0x11A9B,
	0x11A9D,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C41,
	0x11C43,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16AF6,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B39,
	0x16B40,
	0x16B44,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA88,
	0x1DA89,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E922,
	0x1E944,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F676,
	0x1F679,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

typedef enum {
	SB_Other = 0,
	SB_ATerm = 1,
	SB_CR = 2,
	SB_Close = 3,
	SB_Extend = 4,
	SB_Format = 5,
	SB_LF = 6,
	SB_Lower = 7,
	SB_Numeric = 8,
	SB_OLetter = 9,
	SB_SContinue = 10,
	SB_STerm = 11,
	SB_Sep = 12,
	SB_Sp = 13,
	SB_Upper = 14,
	SB_EDGE = 15
} SB_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const SB_enum _Perl_SB_invmap[] = { /* for EBCDIC 037 */
	SB_Other,
	SB_Sp,
	SB_Other,
	SB_Sp,
	SB_CR,
	SB_Other,
	SB_Sep,
	SB_Other,
	SB_LF,
	SB_Other,
	SB_Sp,
	SB_Lower,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Upper,
	SB_Lower,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Upper,
	SB_Format,
	SB_Lower,
	SB_Close,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Numeric,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Format,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Numeric,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Sp,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Numeric,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_STerm,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Lower,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Extend,
	SB_Format,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_ATerm,
	SB_Other,
	SB_Sep,
	SB_Format,
	SB_Sp,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Other,
	SB_Sp,
	SB_Format,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Sp,
	SB_SContinue,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_SContinue,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_STerm,
	SB_SContinue,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_SContinue,
	SB_ATerm,
	SB_Other,
	SB_SContinue,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Lower,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_Close,
	SB_STerm,
	SB_Close,
	SB_SContinue,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Format,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_STerm,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_STerm,
	SB_Other,
	SB_OLetter,
	SB_STerm,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_STerm,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Format,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Other,
	SB_Lower,
	SB_Other,
	SB_Lower,
	SB_Upper,
	SB_Lower,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_STerm,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Upper,
	SB_Lower,
	SB_Extend,
	SB_Other,
	SB_Numeric,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Upper,
	SB_Other,
	SB_Close,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_OLetter,
	SB_Other,
	SB_Format,
	SB_Other,
	SB_Extend,
	SB_Other,
	SB_Extend,
	SB_Other
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV _Perl_SCX_invlist[] = { /* for ASCII/Latin1 */
	1580,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2B9,
	0x2E0,
	0x2E5,
	0x2EA,
	0x2EC,
	0x300,
	0x342,
	0x343,
	0x345,
	0x346,
	0x363,
	0x370,
	0x374,
	0x375,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x384,
	0x385,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3E2,
	0x3F0,
	0x400,
	0x483,
	0x484,
	0x485,
	0x487,
	0x488,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x605,
	0x606,
	0x60C,
	0x60D,
	0x61B,
	0x61D,
	0x61E,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x64B,
	0x656,
	0x660,
	0x66A,
	0x670,
	0x671,
	0x6DD,
	0x6DE,
	0x700,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x750,
	0x780,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x900,
	0x951,
	0x952,
	0x953,
	0x964,
	0x965,
	0x966,
	0x970,
	0x980,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAA,
	0xBAB,
	0xBAE,
	0xBB5,
	0xBB6,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF3,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE40,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFD5,
	0xFD9,
	0xFDB,
	0x1000,
	0x1040,
	0x104A,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1100,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x1680,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x1802,
	0x1804,
	0x1805,
	0x1806,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x19E0,
	0x1A00,
	0x1A1C,
	0x1A1E,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BC0,
	0x1BF4,
	0x1BFC,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C80,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CD1,
	0x1CD2,
	0x1CD4,
	0x1CD7,
	0x1CD8,
	0x1CD9,
	0x1CDA,
	0x1CDB,
	0x1CDC,
	0x1CDE,
	0x1CE0,
	0x1CE1,
	0x1CF2,
	0x1CF5,
	0x1CF6,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1D26,
	0x1D2B,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1DC2,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200C,
	0x200E,
	0x2065,
	0x2066,
	0x2071,
	0x2072,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F0,
	0x20F1,
	0x2100,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C80,
	0x2CF4,
	0x2CF9,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E43,
	0x2E44,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3003,
	0x3004,
	0x3005,
	0x3008,
	0x3012,
	0x3013,
	0x3014,
	0x301C,
	0x3020,
	0x3021,
	0x302A,
	0x302E,
	0x3030,
	0x3031,
	0x3036,
	0x3037,
	0x3038,
	0x303C,
	0x303E,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x30FD,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31A0,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3260,
	0x327F,
	0x3280,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0x3371,
	0x337B,
	0x3380,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DB6,
	0x4DC0,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA500,
	0xA62C,
	0xA640,
	0xA66F,
	0xA670,
	0xA6A0,
	0xA6F8,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA800,
	0xA82C,
	0xA830,
	0xA836,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8F1,
	0xA8F2,
	0xA8F3,
	0xA8F4,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA92F,
	0xA930,
	0xA954,
	0xA95F,
	0xA960,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA60,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAE0,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xAB66,
	0xAB70,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFBC2,
	0xFBD3,
	0xFD3E,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDF2,
	0xFDF3,
	0xFDFD,
	0xFDFE,
	0xFE00,
	0xFE10,
	0xFE1A,
	0xFE20,
	0xFE2E,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF61,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x10450,
	0x10480,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840,
	0x10856,
	0x10857,
	0x10860,
	0x10880,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x10900,
	0x1091C,
	0x1091F,
	0x10920,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109A0,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10A80,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B40,
	0x10B56,
	0x10B58,
	0x10B60,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x11080,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11301,
	0x11302,
	0x11303,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE1,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B001,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 65 /* ASCII/Latin1 */

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	SCX_Unknown = 0,
	SCX_Adlam = 1,
	SCX_Ahom = 2,
	SCX_Anatolian_Hieroglyphs = 3,
	SCX_Arabic = 4,
	SCX_Armenian = 5,
	SCX_Avestan = 6,
	SCX_Balinese = 7,
	SCX_Bamum = 8,
	SCX_Bassa_Vah = 9,
	SCX_Batak = 10,
	SCX_Bengali = 11,
	SCX_Bhaiksuki = 12,
	SCX_Bopomofo = 13,
	SCX_Brahmi = 14,
	SCX_Braille = 15,
	SCX_Buginese = 16,
	SCX_Buhid = 17,
	SCX_Canadian_Aboriginal = 18,
	SCX_Carian = 19,
	SCX_Caucasian_Albanian = 20,
	SCX_Chakma = 21,
	SCX_Cham = 22,
	SCX_Cherokee = 23,
	SCX_Common = 24,
	SCX_Coptic = 25,
	SCX_Cuneiform = 26,
	SCX_Cypriot = 27,
	SCX_Cyrillic = 28,
	SCX_Deseret = 29,
	SCX_Devanagari = 30,
	SCX_Duployan = 31,
	SCX_Egyptian_Hieroglyphs = 32,
	SCX_Elbasan = 33,
	SCX_Ethiopic = 34,
	SCX_Georgian = 35,
	SCX_Glagolitic = 36,
	SCX_Gothic = 37,
	SCX_Grantha = 38,
	SCX_Greek = 39,
	SCX_Gujarati = 40,
	SCX_Gurmukhi = 41,
	SCX_Han = 42,
	SCX_Hanb = 43,
	SCX_Hangul = 44,
	SCX_Hanunoo = 45,
	SCX_Hatran = 46,
	SCX_Hebrew = 47,
	SCX_Hiragana = 48,
	SCX_Imperial_Aramaic = 49,
	SCX_Inherited = 50,
	SCX_Inscriptional_Pahlavi = 51,
	SCX_Inscriptional_Parthian = 52,
	SCX_Javanese = 53,
	SCX_Jpan = 54,
	SCX_Kaithi = 55,
	SCX_Kannada = 56,
	SCX_Katakana = 57,
	SCX_Kayah_Li = 58,
	SCX_Kharoshthi = 59,
	SCX_Khmer = 60,
	SCX_Khojki = 61,
	SCX_Khudawadi = 62,
	SCX_Kore = 63,
	SCX_Lao = 64,
	SCX_Latin = 65,
	SCX_Lepcha = 66,
	SCX_Limbu = 67,
	SCX_Linear_A = 68,
	SCX_Linear_B = 69,
	SCX_Lisu = 70,
	SCX_Lycian = 71,
	SCX_Lydian = 72,
	SCX_Mahajani = 73,
	SCX_Malayalam = 74,
	SCX_Mandaic = 75,
	SCX_Manichaean = 76,
	SCX_Marchen = 77,
	SCX_Masaram_Gondi = 78,
	SCX_Meetei_Mayek = 79,
	SCX_Mende_Kikakui = 80,
	SCX_Meroitic_Cursive = 81,
	SCX_Meroitic_Hieroglyphs = 82,
	SCX_Miao = 83,
	SCX_Modi = 84,
	SCX_Mongolian = 85,
	SCX_Mro = 86,
	SCX_Multani = 87,
	SCX_Myanmar = 88,
	SCX_Nabataean = 89,
	SCX_New_Tai_Lue = 90,
	SCX_Newa = 91,
	SCX_Nko = 92,
	SCX_Nushu = 93,
	SCX_Ogham = 94,
	SCX_Ol_Chiki = 95,
	SCX_Old_Hungarian = 96,
	SCX_Old_Italic = 97,
	SCX_Old_North_Arabian = 98,
	SCX_Old_Permic = 99,
	SCX_Old_Persian = 100,
	SCX_Old_South_Arabian = 101,
	SCX_Old_Turkic = 102,
	SCX_Oriya = 103,
	SCX_Osage = 104,
	SCX_Osmanya = 105,
	SCX_Pahawh_Hmong = 106,
	SCX_Palmyrene = 107,
	SCX_Pau_Cin_Hau = 108,
	SCX_Phags_Pa = 109,
	SCX_Phoenician = 110,
	SCX_Psalter_Pahlavi = 111,
	SCX_Rejang = 112,
	SCX_Runic = 113,
	SCX_Samaritan = 114,
	SCX_Saurashtra = 115,
	SCX_Sharada = 116,
	SCX_Shavian = 117,
	SCX_Siddham = 118,
	SCX_SignWriting = 119,
	SCX_Sinhala = 120,
	SCX_Sora_Sompeng = 121,
	SCX_Soyombo = 122,
	SCX_Sundanese = 123,
	SCX_Syloti_Nagri = 124,
	SCX_Syriac = 125,
	SCX_Tagalog = 126,
	SCX_Tagbanwa = 127,
	SCX_Tai_Le = 128,
	SCX_Tai_Tham = 129,
	SCX_Tai_Viet = 130,
	SCX_Takri = 131,
	SCX_Tamil = 132,
	SCX_Tangut = 133,
	SCX_Telugu = 134,
	SCX_Thaana = 135,
	SCX_Thai = 136,
	SCX_Tibetan = 137,
	SCX_Tifinagh = 138,
	SCX_Tirhuta = 139,
	SCX_Ugaritic = 140,
	SCX_Vai = 141,
	SCX_Warang_Citi = 142,
	SCX_Yi = 143,
	SCX_Zanabazar_Square = 144,
	SCX_INVALID = 145,
	SCX_use_AUX_TABLE_1 = -1,
	SCX_use_AUX_TABLE_2 = -2,
	SCX_use_AUX_TABLE_3 = -3,
	SCX_use_AUX_TABLE_4 = -4,
	SCX_use_AUX_TABLE_5 = -5,
	SCX_use_AUX_TABLE_6 = -6,
	SCX_use_AUX_TABLE_7 = -7,
	SCX_use_AUX_TABLE_8 = -8,
	SCX_use_AUX_TABLE_9 = -9,
	SCX_use_AUX_TABLE_10 = -10,
	SCX_use_AUX_TABLE_11 = -11,
	SCX_use_AUX_TABLE_12 = -12,
	SCX_use_AUX_TABLE_13 = -13,
	SCX_use_AUX_TABLE_14 = -14,
	SCX_use_AUX_TABLE_15 = -15,
	SCX_use_AUX_TABLE_16 = -16,
	SCX_use_AUX_TABLE_17 = -17,
	SCX_use_AUX_TABLE_18 = -18,
	SCX_use_AUX_TABLE_19 = -19,
	SCX_use_AUX_TABLE_20 = -20,
	SCX_use_AUX_TABLE_21 = -21,
	SCX_use_AUX_TABLE_22 = -22,
	SCX_use_AUX_TABLE_23 = -23,
	SCX_use_AUX_TABLE_24 = -24,
	SCX_use_AUX_TABLE_25 = -25,
	SCX_use_AUX_TABLE_26 = -26,
	SCX_use_AUX_TABLE_27 = -27,
	SCX_use_AUX_TABLE_28 = -28,
	SCX_use_AUX_TABLE_29 = -29,
	SCX_use_AUX_TABLE_30 = -30,
	SCX_use_AUX_TABLE_31 = -31,
	SCX_use_AUX_TABLE_32 = -32,
	SCX_use_AUX_TABLE_33 = -33,
	SCX_use_AUX_TABLE_34 = -34,
	SCX_use_AUX_TABLE_35 = -35,
	SCX_use_AUX_TABLE_36 = -36,
	SCX_use_AUX_TABLE_37 = -37,
	SCX_use_AUX_TABLE_38 = -38,
	SCX_use_AUX_TABLE_39 = -39,
	SCX_use_AUX_TABLE_40 = -40,
	SCX_use_AUX_TABLE_41 = -41,
	SCX_use_AUX_TABLE_42 = -42,
	SCX_use_AUX_TABLE_43 = -43,
	SCX_use_AUX_TABLE_44 = -44,
	SCX_use_AUX_TABLE_45 = -45
} SCX_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

#define HAS_SCX_AUX_TABLES

static const SCX_enum SCX_AUX_TABLE_1[] = {
	SCX_Bopomofo,
	SCX_Hanb
};

static const SCX_enum SCX_AUX_TABLE_2[] = {
	SCX_Cyrillic,
	SCX_Old_Permic
};

static const SCX_enum SCX_AUX_TABLE_3[] = {
	SCX_Cyrillic,
	SCX_Glagolitic
};

static const SCX_enum SCX_AUX_TABLE_4[] = {
	SCX_Cyrillic,
	SCX_Latin
};

static const SCX_enum SCX_AUX_TABLE_5[] = {
	SCX_Armenian,
	SCX_Georgian
};

static const SCX_enum SCX_AUX_TABLE_6[] = {
	SCX_Arabic,
	SCX_Syriac,
	SCX_Thaana
};

static const SCX_enum SCX_AUX_TABLE_7[] = {
	SCX_Adlam,
	SCX_Arabic,
	SCX_Mandaic,
	SCX_Manichaean,
	SCX_Psalter_Pahlavi,
	SCX_Syriac
};

static const SCX_enum SCX_AUX_TABLE_8[] = {
	SCX_Arabic,
	SCX_Syriac
};

static const SCX_enum SCX_AUX_TABLE_9[] = {
	SCX_Arabic,
	SCX_Thaana
};

static const SCX_enum SCX_AUX_TABLE_10[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Latin,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Sharada,
	SCX_Tamil,
	SCX_Telugu
};

static const SCX_enum SCX_AUX_TABLE_11[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Latin,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Tamil,
	SCX_Telugu
};

static const SCX_enum SCX_AUX_TABLE_12[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Khudawadi,
	SCX_Mahajani,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Sinhala,
	SCX_Syloti_Nagri,
	SCX_Takri,
	SCX_Tamil,
	SCX_Telugu,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_13[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Khudawadi,
	SCX_Limbu,
	SCX_Mahajani,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Sinhala,
	SCX_Syloti_Nagri,
	SCX_Takri,
	SCX_Tamil,
	SCX_Telugu,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_14[] = {
	SCX_Devanagari,
	SCX_Kaithi,
	SCX_Mahajani
};

static const SCX_enum SCX_AUX_TABLE_15[] = {
	SCX_Bengali,
	SCX_Chakma,
	SCX_Syloti_Nagri
};

static const SCX_enum SCX_AUX_TABLE_16[] = {
	SCX_Gurmukhi,
	SCX_Multani
};

static const SCX_enum SCX_AUX_TABLE_17[] = {
	SCX_Gujarati,
	SCX_Khojki
};

static const SCX_enum SCX_AUX_TABLE_18[] = {
	SCX_Grantha,
	SCX_Tamil
};

static const SCX_enum SCX_AUX_TABLE_19[] = {
	SCX_Chakma,
	SCX_Myanmar,
	SCX_Tai_Le
};

static const SCX_enum SCX_AUX_TABLE_20[] = {
	SCX_Georgian,
	SCX_Latin
};

static const SCX_enum SCX_AUX_TABLE_21[] = {
	SCX_Hangul,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_22[] = {
	SCX_Buhid,
	SCX_Hanunoo,
	SCX_Tagalog,
	SCX_Tagbanwa
};

static const SCX_enum SCX_AUX_TABLE_23[] = {
	SCX_Mongolian,
	SCX_Phags_Pa
};

static const SCX_enum SCX_AUX_TABLE_24[] = {
	SCX_Devanagari,
	SCX_Grantha
};

static const SCX_enum SCX_AUX_TABLE_25[] = {
	SCX_Devanagari,
	SCX_Sharada
};

static const SCX_enum SCX_AUX_TABLE_26[] = {
	SCX_Devanagari,
	SCX_Kannada,
	SCX_Malayalam,
	SCX_Tamil,
	SCX_Telugu
};

static const SCX_enum SCX_AUX_TABLE_27[] = {
	SCX_Devanagari,
	SCX_Kannada
};

static const SCX_enum SCX_AUX_TABLE_28[] = {
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Latin
};

static const SCX_enum SCX_AUX_TABLE_29[] = {
	SCX_Han,
	SCX_Hanb,
	SCX_Jpan,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_30[] = {
	SCX_Bopomofo,
	SCX_Han,
	SCX_Hanb,
	SCX_Hangul,
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana,
	SCX_Kore,
	SCX_Yi
};

static const SCX_enum SCX_AUX_TABLE_31[] = {
	SCX_Bopomofo,
	SCX_Han,
	SCX_Hanb,
	SCX_Hangul,
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_32[] = {
	SCX_Bopomofo,
	SCX_Han,
	SCX_Hanb,
	SCX_Jpan,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_33[] = {
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana
};

static const SCX_enum SCX_AUX_TABLE_34[] = {
	SCX_Han,
	SCX_Hanb,
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_35[] = {
	SCX_Hiragana,
	SCX_Jpan
};

static const SCX_enum SCX_AUX_TABLE_36[] = {
	SCX_Jpan,
	SCX_Katakana
};

static const SCX_enum SCX_AUX_TABLE_37[] = {
	SCX_Devanagari,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kaithi,
	SCX_Kannada,
	SCX_Khudawadi,
	SCX_Mahajani,
	SCX_Modi,
	SCX_Takri,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_38[] = {
	SCX_Devanagari,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kaithi,
	SCX_Khudawadi,
	SCX_Mahajani,
	SCX_Modi,
	SCX_Takri,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_39[] = {
	SCX_Bengali,
	SCX_Devanagari
};

static const SCX_enum SCX_AUX_TABLE_40[] = {
	SCX_Devanagari,
	SCX_Tamil
};

static const SCX_enum SCX_AUX_TABLE_41[] = {
	SCX_Kayah_Li,
	SCX_Latin,
	SCX_Myanmar
};

static const SCX_enum SCX_AUX_TABLE_42[] = {
	SCX_Buginese,
	SCX_Javanese
};

static const SCX_enum SCX_AUX_TABLE_43[] = {
	SCX_Cypriot,
	SCX_Linear_B
};

static const SCX_enum SCX_AUX_TABLE_44[] = {
	SCX_Cypriot,
	SCX_Linear_A,
	SCX_Linear_B
};

static const SCX_enum SCX_AUX_TABLE_45[] = {
	SCX_Arabic,
	SCX_Coptic
};

static const SCX_enum * const SCX_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	SCX_AUX_TABLE_1,
	SCX_AUX_TABLE_2,
	SCX_AUX_TABLE_3,
	SCX_AUX_TABLE_4,
	SCX_AUX_TABLE_5,
	SCX_AUX_TABLE_6,
	SCX_AUX_TABLE_7,
	SCX_AUX_TABLE_8,
	SCX_AUX_TABLE_9,
	SCX_AUX_TABLE_10,
	SCX_AUX_TABLE_11,
	SCX_AUX_TABLE_12,
	SCX_AUX_TABLE_13,
	SCX_AUX_TABLE_14,
	SCX_AUX_TABLE_15,
	SCX_AUX_TABLE_16,
	SCX_AUX_TABLE_17,
	SCX_AUX_TABLE_18,
	SCX_AUX_TABLE_19,
	SCX_AUX_TABLE_20,
	SCX_AUX_TABLE_21,
	SCX_AUX_TABLE_22,
	SCX_AUX_TABLE_23,
	SCX_AUX_TABLE_24,
	SCX_AUX_TABLE_25,
	SCX_AUX_TABLE_26,
	SCX_AUX_TABLE_27,
	SCX_AUX_TABLE_28,
	SCX_AUX_TABLE_29,
	SCX_AUX_TABLE_30,
	SCX_AUX_TABLE_31,
	SCX_AUX_TABLE_32,
	SCX_AUX_TABLE_33,
	SCX_AUX_TABLE_34,
	SCX_AUX_TABLE_35,
	SCX_AUX_TABLE_36,
	SCX_AUX_TABLE_37,
	SCX_AUX_TABLE_38,
	SCX_AUX_TABLE_39,
	SCX_AUX_TABLE_40,
	SCX_AUX_TABLE_41,
	SCX_AUX_TABLE_42,
	SCX_AUX_TABLE_43,
	SCX_AUX_TABLE_44,
	SCX_AUX_TABLE_45
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 SCX_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* SCX_AUX_TABLE_1 */,
	2	/* SCX_AUX_TABLE_2 */,
	2	/* SCX_AUX_TABLE_3 */,
	2	/* SCX_AUX_TABLE_4 */,
	2	/* SCX_AUX_TABLE_5 */,
	3	/* SCX_AUX_TABLE_6 */,
	6	/* SCX_AUX_TABLE_7 */,
	2	/* SCX_AUX_TABLE_8 */,
	2	/* SCX_AUX_TABLE_9 */,
	12	/* SCX_AUX_TABLE_10 */,
	11	/* SCX_AUX_TABLE_11 */,
	16	/* SCX_AUX_TABLE_12 */,
	17	/* SCX_AUX_TABLE_13 */,
	3	/* SCX_AUX_TABLE_14 */,
	3	/* SCX_AUX_TABLE_15 */,
	2	/* SCX_AUX_TABLE_16 */,
	2	/* SCX_AUX_TABLE_17 */,
	2	/* SCX_AUX_TABLE_18 */,
	3	/* SCX_AUX_TABLE_19 */,
	2	/* SCX_AUX_TABLE_20 */,
	2	/* SCX_AUX_TABLE_21 */,
	4	/* SCX_AUX_TABLE_22 */,
	2	/* SCX_AUX_TABLE_23 */,
	2	/* SCX_AUX_TABLE_24 */,
	2	/* SCX_AUX_TABLE_25 */,
	5	/* SCX_AUX_TABLE_26 */,
	2	/* SCX_AUX_TABLE_27 */,
	3	/* SCX_AUX_TABLE_28 */,
	4	/* SCX_AUX_TABLE_29 */,
	9	/* SCX_AUX_TABLE_30 */,
	8	/* SCX_AUX_TABLE_31 */,
	5	/* SCX_AUX_TABLE_32 */,
	3	/* SCX_AUX_TABLE_33 */,
	6	/* SCX_AUX_TABLE_34 */,
	2	/* SCX_AUX_TABLE_35 */,
	2	/* SCX_AUX_TABLE_36 */,
	10	/* SCX_AUX_TABLE_37 */,
	9	/* SCX_AUX_TABLE_38 */,
	2	/* SCX_AUX_TABLE_39 */,
	2	/* SCX_AUX_TABLE_40 */,
	3	/* SCX_AUX_TABLE_41 */,
	2	/* SCX_AUX_TABLE_42 */,
	2	/* SCX_AUX_TABLE_43 */,
	3	/* SCX_AUX_TABLE_44 */,
	2	/* SCX_AUX_TABLE_45 */
};

/* This table, indexed by the script enum, gives the zero code point for that
 * script; 0 if the script has multiple digit sequences.  Scripts without a
 * digit sequence use ASCII [0-9], hence are marked '0' */
static const UV script_zeros[] = {
	'0',	/* Unknown */
	0x1e950,	/* Adlam */
	0x11730,	/* Ahom */
	'0',	/* Anatolian_Hieroglyphs */
	 0,	/* Arabic */
	'0',	/* Armenian */
	'0',	/* Avestan */
	0x1b50,	/* Balinese */
	'0',	/* Bamum */
	'0',	/* Bassa_Vah */
	'0',	/* Batak */
	0x9e6,	/* Bengali */
	0x11c50,	/* Bhaiksuki */
	'0',	/* Bopomofo */
	0x11066,	/* Brahmi */
	'0',	/* Braille */
	'0',	/* Buginese */
	'0',	/* Buhid */
	'0',	/* Canadian_Aboriginal */
	'0',	/* Carian */
	'0',	/* Caucasian_Albanian */
	 0,	/* Chakma */
	0xaa50,	/* Cham */
	'0',	/* Cherokee */
	 0,	/* Common */
	'0',	/* Coptic */
	'0',	/* Cuneiform */
	'0',	/* Cypriot */
	'0',	/* Cyrillic */
	'0',	/* Deseret */
	0x966,	/* Devanagari */
	'0',	/* Duployan */
	'0',	/* Egyptian_Hieroglyphs */
	'0',	/* Elbasan */
	'0',	/* Ethiopic */
	'0',	/* Georgian */
	'0',	/* Glagolitic */
	'0',	/* Gothic */
	0xbe6,	/* Grantha */
	'0',	/* Greek */
	0xae6,	/* Gujarati */
	0xa66,	/* Gurmukhi */
	'0',	/* Han */
	'0',	/* Hanb */
	'0',	/* Hangul */
	'0',	/* Hanunoo */
	'0',	/* Hatran */
	'0',	/* Hebrew */
	'0',	/* Hiragana */
	'0',	/* Imperial_Aramaic */
	 0,	/* Inherited */
	'0',	/* Inscriptional_Pahlavi */
	'0',	/* Inscriptional_Parthian */
	0xa9d0,	/* Javanese */
	'0',	/* Jpan */
	0x966,	/* Kaithi */
	0xce6,	/* Kannada */
	'0',	/* Katakana */
	0xa900,	/* Kayah_Li */
	'0',	/* Kharoshthi */
	0x17e0,	/* Khmer */
	0xae6,	/* Khojki */
	0x112f0,	/* Khudawadi */
	'0',	/* Kore */
	0xed0,	/* Lao */
	'0',	/* Latin */
	0x1c40,	/* Lepcha */
	0x1946,	/* Limbu */
	'0',	/* Linear_A */
	'0',	/* Linear_B */
	'0',	/* Lisu */
	'0',	/* Lycian */
	'0',	/* Lydian */
	0x966,	/* Mahajani */
	0xd66,	/* Malayalam */
	'0',	/* Mandaic */
	'0',	/* Manichaean */
	'0',	/* Marchen */
	0x11d50,	/* Masaram_Gondi */
	0xabf0,	/* Meetei_Mayek */
	'0',	/* Mende_Kikakui */
	'0',	/* Meroitic_Cursive */
	'0',	/* Meroitic_Hieroglyphs */
	'0',	/* Miao */
	0x11650,	/* Modi */
	0x1810,	/* Mongolian */
	0x16a60,	/* Mro */
	0xa66,	/* Multani */
	 0,	/* Myanmar */
	'0',	/* Nabataean */
	0x19d0,	/* New_Tai_Lue */
	0x11450,	/* Newa */
	0x7c0,	/* Nko */
	'0',	/* Nushu */
	'0',	/* Ogham */
	0x1c50,	/* Ol_Chiki */
	'0',	/* Old_Hungarian */
	'0',	/* Old_Italic */
	'0',	/* Old_North_Arabian */
	'0',	/* Old_Permic */
	'0',	/* Old_Persian */
	'0',	/* Old_South_Arabian */
	'0',	/* Old_Turkic */
	0xb66,	/* Oriya */
	'0',	/* Osage */
	0x104a0,	/* Osmanya */
	0x16b50,	/* Pahawh_Hmong */
	'0',	/* Palmyrene */
	'0',	/* Pau_Cin_Hau */
	'0',	/* Phags_Pa */
	'0',	/* Phoenician */
	'0',	/* Psalter_Pahlavi */
	'0',	/* Rejang */
	'0',	/* Runic */
	'0',	/* Samaritan */
	0xa8d0,	/* Saurashtra */
	0x111d0,	/* Sharada */
	'0',	/* Shavian */
	'0',	/* Siddham */
	'0',	/* SignWriting */
	0xde6,	/* Sinhala */
	0x110f0,	/* Sora_Sompeng */
	'0',	/* Soyombo */
	0x1bb0,	/* Sundanese */
	0x9e6,	/* Syloti_Nagri */
	'0',	/* Syriac */
	'0',	/* Tagalog */
	'0',	/* Tagbanwa */
	0x1040,	/* Tai_Le */
	 0,	/* Tai_Tham */
	'0',	/* Tai_Viet */
	0x116c0,	/* Takri */
	0xbe6,	/* Tamil */
	'0',	/* Tangut */
	0xc66,	/* Telugu */
	0x660,	/* Thaana */
	0xe50,	/* Thai */
	0xf20,	/* Tibetan */
	'0',	/* Tifinagh */
	0x114d0,	/* Tirhuta */
	'0',	/* Ugaritic */
	0xa620,	/* Vai */
	0x118e0	/* Warang_Citi */
};

static const SCX_enum _Perl_SCX_invmap[] = { /* for ASCII/Latin1 */
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_use_AUX_TABLE_1,
	SCX_Common,
	SCX_Inherited,
	SCX_Greek,
	SCX_Inherited,
	SCX_Greek,
	SCX_Inherited,
	SCX_Latin,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Coptic,
	SCX_Greek,
	SCX_Cyrillic,
	SCX_use_AUX_TABLE_2,
	SCX_use_AUX_TABLE_3,
	SCX_use_AUX_TABLE_4,
	SCX_use_AUX_TABLE_3,
	SCX_Cyrillic,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_use_AUX_TABLE_5,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Common,
	SCX_Arabic,
	SCX_use_AUX_TABLE_6,
	SCX_Arabic,
	SCX_use_AUX_TABLE_6,
	SCX_Unknown,
	SCX_Arabic,
	SCX_use_AUX_TABLE_6,
	SCX_Arabic,
	SCX_use_AUX_TABLE_7,
	SCX_Arabic,
	SCX_use_AUX_TABLE_8,
	SCX_Arabic,
	SCX_use_AUX_TABLE_9,
	SCX_Arabic,
	SCX_use_AUX_TABLE_8,
	SCX_Arabic,
	SCX_Common,
	SCX_Arabic,
	SCX_Syriac,
	SCX_Unknown,
	SCX_Syriac,
	SCX_Unknown,
	SCX_Syriac,
	SCX_Arabic,
	SCX_Thaana,
	SCX_Unknown,
	SCX_Nko,
	SCX_Unknown,
	SCX_Samaritan,
	SCX_Unknown,
	SCX_Samaritan,
	SCX_Unknown,
	SCX_Mandaic,
	SCX_Unknown,
	SCX_Mandaic,
	SCX_Unknown,
	SCX_Syriac,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Common,
	SCX_Arabic,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_10,
	SCX_use_AUX_TABLE_11,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_12,
	SCX_use_AUX_TABLE_13,
	SCX_use_AUX_TABLE_14,
	SCX_Devanagari,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_use_AUX_TABLE_15,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_use_AUX_TABLE_16,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_use_AUX_TABLE_17,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_use_AUX_TABLE_18,
	SCX_Unknown,
	SCX_Tamil,
	SCX_use_AUX_TABLE_18,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_use_AUX_TABLE_18,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Thai,
	SCX_Unknown,
	SCX_Common,
	SCX_Thai,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Common,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Myanmar,
	SCX_use_AUX_TABLE_19,
	SCX_Myanmar,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_use_AUX_TABLE_20,
	SCX_Georgian,
	SCX_use_AUX_TABLE_21,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Cherokee,
	SCX_Unknown,
	SCX_Cherokee,
	SCX_Unknown,
	SCX_Canadian_Aboriginal,
	SCX_Ogham,
	SCX_Unknown,
	SCX_Runic,
	SCX_Common,
	SCX_Runic,
	SCX_Unknown,
	SCX_Tagalog,
	SCX_Unknown,
	SCX_Tagalog,
	SCX_Unknown,
	SCX_Hanunoo,
	SCX_use_AUX_TABLE_22,
	SCX_Unknown,
	SCX_Buhid,
	SCX_Unknown,
	SCX_Tagbanwa,
	SCX_Unknown,
	SCX_Tagbanwa,
	SCX_Unknown,
	SCX_Tagbanwa,
	SCX_Unknown,
	SCX_Khmer,
	SCX_Unknown,
	SCX_Khmer,
	SCX_Unknown,
	SCX_Khmer,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_use_AUX_TABLE_23,
	SCX_Mongolian,
	SCX_use_AUX_TABLE_23,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Canadian_Aboriginal,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Tai_Le,
	SCX_Unknown,
	SCX_Tai_Le,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Khmer,
	SCX_Buginese,
	SCX_Unknown,
	SCX_Buginese,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Unknown,
	SCX_Balinese,
	SCX_Unknown,
	SCX_Balinese,
	SCX_Unknown,
	SCX_Sundanese,
	SCX_Batak,
	SCX_Unknown,
	SCX_Batak,
	SCX_Lepcha,
	SCX_Unknown,
	SCX_Lepcha,
	SCX_Unknown,
	SCX_Lepcha,
	SCX_Ol_Chiki,
	SCX_Cyrillic,
	SCX_Unknown,
	SCX_Sundanese,
	SCX_Unknown,
	SCX_use_AUX_TABLE_24,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_24,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_use_AUX_TABLE_26,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_24,
	SCX_use_AUX_TABLE_27,
	SCX_Devanagari,
	SCX_Bengali,
	SCX_use_AUX_TABLE_24,
	SCX_Unknown,
	SCX_Latin,
	SCX_Greek,
	SCX_Cyrillic,
	SCX_Latin,
	SCX_Greek,
	SCX_Latin,
	SCX_Greek,
	SCX_Latin,
	SCX_Cyrillic,
	SCX_Latin,
	SCX_Greek,
	SCX_Inherited,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Latin,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Unknown,
	SCX_Latin,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Inherited,
	SCX_use_AUX_TABLE_28,
	SCX_Unknown,
	SCX_Common,
	SCX_Greek,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Braille,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Latin,
	SCX_Coptic,
	SCX_Unknown,
	SCX_Coptic,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Tifinagh,
	SCX_Unknown,
	SCX_Tifinagh,
	SCX_Unknown,
	SCX_Tifinagh,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Cyrillic,
	SCX_Common,
	SCX_use_AUX_TABLE_3,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_31,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_30,
	SCX_Common,
	SCX_use_AUX_TABLE_31,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_31,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_32,
	SCX_use_AUX_TABLE_21,
	SCX_use_AUX_TABLE_31,
	SCX_use_AUX_TABLE_33,
	SCX_Common,
	SCX_use_AUX_TABLE_31,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_34,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_35,
	SCX_Unknown,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_35,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_36,
	SCX_Unknown,
	SCX_use_AUX_TABLE_1,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_1,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_21,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_36,
	SCX_Unknown,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Yi,
	SCX_Unknown,
	SCX_Yi,
	SCX_Unknown,
	SCX_Lisu,
	SCX_Vai,
	SCX_Unknown,
	SCX_Cyrillic,
	SCX_use_AUX_TABLE_3,
	SCX_Cyrillic,
	SCX_Bamum,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Unknown,
	SCX_Latin,
	SCX_Unknown,
	SCX_Latin,
	SCX_Syloti_Nagri,
	SCX_Unknown,
	SCX_use_AUX_TABLE_37,
	SCX_use_AUX_TABLE_38,
	SCX_Unknown,
	SCX_Phags_Pa,
	SCX_Unknown,
	SCX_Saurashtra,
	SCX_Unknown,
	SCX_Saurashtra,
	SCX_Unknown,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_39,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_40,
	SCX_Devanagari,
	SCX_Unknown,
	SCX_Kayah_Li,
	SCX_use_AUX_TABLE_41,
	SCX_Kayah_Li,
	SCX_Rejang,
	SCX_Unknown,
	SCX_Rejang,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_Javanese,
	SCX_Unknown,
	SCX_use_AUX_TABLE_42,
	SCX_Javanese,
	SCX_Unknown,
	SCX_Javanese,
	SCX_Myanmar,
	SCX_Unknown,
	SCX_Cham,
	SCX_Unknown,
	SCX_Cham,
	SCX_Unknown,
	SCX_Cham,
	SCX_Unknown,
	SCX_Cham,
	SCX_Myanmar,
	SCX_Tai_Viet,
	SCX_Unknown,
	SCX_Tai_Viet,
	SCX_Meetei_Mayek,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Greek,
	SCX_Unknown,
	SCX_Cherokee,
	SCX_Meetei_Mayek,
	SCX_Unknown,
	SCX_Meetei_Mayek,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Latin,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Common,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_use_AUX_TABLE_9,
	SCX_Arabic,
	SCX_use_AUX_TABLE_9,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Common,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Cyrillic,
	SCX_Common,
	SCX_use_AUX_TABLE_31,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_use_AUX_TABLE_43,
	SCX_Unknown,
	SCX_use_AUX_TABLE_44,
	SCX_Unknown,
	SCX_use_AUX_TABLE_43,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Inherited,
	SCX_Unknown,
	SCX_Lycian,
	SCX_Unknown,
	SCX_Carian,
	SCX_Unknown,
	SCX_use_AUX_TABLE_45,
	SCX_Unknown,
	SCX_Old_Italic,
	SCX_Unknown,
	SCX_Old_Italic,
	SCX_Gothic,
	SCX_Unknown,
	SCX_Old_Permic,
	SCX_Unknown,
	SCX_Ugaritic,
	SCX_Unknown,
	SCX_Ugaritic,
	SCX_Old_Persian,
	SCX_Unknown,
	SCX_Old_Persian,
	SCX_Unknown,
	SCX_Deseret,
	SCX_Shavian,
	SCX_Osmanya,
	SCX_Unknown,
	SCX_Osmanya,
	SCX_Unknown,
	SCX_Osage,
	SCX_Unknown,
	SCX_Osage,
	SCX_Unknown,
	SCX_Elbasan,
	SCX_Unknown,
	SCX_Caucasian_Albanian,
	SCX_Unknown,
	SCX_Caucasian_Albanian,
	SCX_Unknown,
	SCX_Linear_A,
	SCX_Unknown,
	SCX_Linear_A,
	SCX_Unknown,
	SCX_Linear_A,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Imperial_Aramaic,
	SCX_Unknown,
	SCX_Imperial_Aramaic,
	SCX_Palmyrene,
	SCX_Nabataean,
	SCX_Unknown,
	SCX_Nabataean,
	SCX_Unknown,
	SCX_Hatran,
	SCX_Unknown,
	SCX_Hatran,
	SCX_Unknown,
	SCX_Hatran,
	SCX_Phoenician,
	SCX_Unknown,
	SCX_Phoenician,
	SCX_Lydian,
	SCX_Unknown,
	SCX_Lydian,
	SCX_Unknown,
	SCX_Meroitic_Hieroglyphs,
	SCX_Meroitic_Cursive,
	SCX_Unknown,
	SCX_Meroitic_Cursive,
	SCX_Unknown,
	SCX_Meroitic_Cursive,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Old_South_Arabian,
	SCX_Old_North_Arabian,
	SCX_Unknown,
	SCX_Manichaean,
	SCX_Unknown,
	SCX_Manichaean,
	SCX_Unknown,
	SCX_Avestan,
	SCX_Unknown,
	SCX_Avestan,
	SCX_Inscriptional_Parthian,
	SCX_Unknown,
	SCX_Inscriptional_Parthian,
	SCX_Inscriptional_Pahlavi,
	SCX_Unknown,
	SCX_Inscriptional_Pahlavi,
	SCX_Psalter_Pahlavi,
	SCX_Unknown,
	SCX_Psalter_Pahlavi,
	SCX_Unknown,
	SCX_Psalter_Pahlavi,
	SCX_Unknown,
	SCX_Old_Turkic,
	SCX_Unknown,
	SCX_Old_Hungarian,
	SCX_Unknown,
	SCX_Old_Hungarian,
	SCX_Unknown,
	SCX_Old_Hungarian,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Brahmi,
	SCX_Unknown,
	SCX_Brahmi,
	SCX_Unknown,
	SCX_Brahmi,
	SCX_Kaithi,
	SCX_Unknown,
	SCX_Sora_Sompeng,
	SCX_Unknown,
	SCX_Sora_Sompeng,
	SCX_Unknown,
	SCX_Chakma,
	SCX_Unknown,
	SCX_Chakma,
	SCX_Unknown,
	SCX_Mahajani,
	SCX_Unknown,
	SCX_Sharada,
	SCX_Unknown,
	SCX_Sharada,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Khojki,
	SCX_Unknown,
	SCX_Khojki,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Khudawadi,
	SCX_Unknown,
	SCX_Khudawadi,
	SCX_Unknown,
	SCX_Grantha,
	SCX_use_AUX_TABLE_18,
	SCX_Grantha,
	SCX_use_AUX_TABLE_18,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_use_AUX_TABLE_18,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Newa,
	SCX_Unknown,
	SCX_Newa,
	SCX_Unknown,
	SCX_Newa,
	SCX_Unknown,
	SCX_Tirhuta,
	SCX_Unknown,
	SCX_Tirhuta,
	SCX_Unknown,
	SCX_Siddham,
	SCX_Unknown,
	SCX_Siddham,
	SCX_Unknown,
	SCX_Modi,
	SCX_Unknown,
	SCX_Modi,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Takri,
	SCX_Unknown,
	SCX_Takri,
	SCX_Unknown,
	SCX_Ahom,
	SCX_Unknown,
	SCX_Ahom,
	SCX_Unknown,
	SCX_Ahom,
	SCX_Unknown,
	SCX_Warang_Citi,
	SCX_Unknown,
	SCX_Warang_Citi,
	SCX_Unknown,
	SCX_Zanabazar_Square,
	SCX_Unknown,
	SCX_Soyombo,
	SCX_Unknown,
	SCX_Soyombo,
	SCX_Unknown,
	SCX_Soyombo,
	SCX_Unknown,
	SCX_Pau_Cin_Hau,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Marchen,
	SCX_Unknown,
	SCX_Marchen,
	SCX_Unknown,
	SCX_Marchen,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Egyptian_Hieroglyphs,
	SCX_Unknown,
	SCX_Anatolian_Hieroglyphs,
	SCX_Unknown,
	SCX_Bamum,
	SCX_Unknown,
	SCX_Mro,
	SCX_Unknown,
	SCX_Mro,
	SCX_Unknown,
	SCX_Mro,
	SCX_Unknown,
	SCX_Bassa_Vah,
	SCX_Unknown,
	SCX_Bassa_Vah,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Miao,
	SCX_Unknown,
	SCX_Miao,
	SCX_Unknown,
	SCX_Miao,
	SCX_Unknown,
	SCX_Tangut,
	SCX_Nushu,
	SCX_Unknown,
	SCX_Tangut,
	SCX_Unknown,
	SCX_Tangut,
	SCX_Unknown,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_35,
	SCX_Unknown,
	SCX_Nushu,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_SignWriting,
	SCX_Unknown,
	SCX_SignWriting,
	SCX_Unknown,
	SCX_SignWriting,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Mende_Kikakui,
	SCX_Unknown,
	SCX_Mende_Kikakui,
	SCX_Unknown,
	SCX_Adlam,
	SCX_Unknown,
	SCX_Adlam,
	SCX_Unknown,
	SCX_Adlam,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_use_AUX_TABLE_35,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Unknown
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_SCX_invlist[] = { /* for EBCDIC 1047 */
	1606,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x2EA,
	0x2EC,
	0x300,
	0x342,
	0x343,
	0x345,
	0x346,
	0x363,
	0x370,
	0x374,
	0x375,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x384,
	0x385,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3E2,
	0x3F0,
	0x400,
	0x483,
	0x484,
	0x485,
	0x487,
	0x488,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x605,
	0x606,
	0x60C,
	0x60D,
	0x61B,
	0x61D,
	0x61E,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x64B,
	0x656,
	0x660,
	0x66A,
	0x670,
	0x671,
	0x6DD,
	0x6DE,
	0x700,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x750,
	0x780,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x900,
	0x951,
	0x952,
	0x953,
	0x964,
	0x965,
	0x966,
	0x970,
	0x980,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAA,
	0xBAB,
	0xBAE,
	0xBB5,
	0xBB6,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF3,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE40,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFD5,
	0xFD9,
	0xFDB,
	0x1000,
	0x1040,
	0x104A,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1100,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x1680,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x1802,
	0x1804,
	0x1805,
	0x1806,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x19E0,
	0x1A00,
	0x1A1C,
	0x1A1E,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BC0,
	0x1BF4,
	0x1BFC,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C80,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CD1,
	0x1CD2,
	0x1CD4,
	0x1CD7,
	0x1CD8,
	0x1CD9,
	0x1CDA,
	0x1CDB,
	0x1CDC,
	0x1CDE,
	0x1CE0,
	0x1CE1,
	0x1CF2,
	0x1CF5,
	0x1CF6,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1D26,
	0x1D2B,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1DC2,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200C,
	0x200E,
	0x2065,
	0x2066,
	0x2071,
	0x2072,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F0,
	0x20F1,
	0x2100,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C80,
	0x2CF4,
	0x2CF9,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E43,
	0x2E44,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3003,
	0x3004,
	0x3005,
	0x3008,
	0x3012,
	0x3013,
	0x3014,
	0x301C,
	0x3020,
	0x3021,
	0x302A,
	0x302E,
	0x3030,
	0x3031,
	0x3036,
	0x3037,
	0x3038,
	0x303C,
	0x303E,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x30FD,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31A0,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3260,
	0x327F,
	0x3280,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0x3371,
	0x337B,
	0x3380,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DB6,
	0x4DC0,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA500,
	0xA62C,
	0xA640,
	0xA66F,
	0xA670,
	0xA6A0,
	0xA6F8,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA800,
	0xA82C,
	0xA830,
	0xA836,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8F1,
	0xA8F2,
	0xA8F3,
	0xA8F4,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA92F,
	0xA930,
	0xA954,
	0xA95F,
	0xA960,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA60,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAE0,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xAB66,
	0xAB70,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFBC2,
	0xFBD3,
	0xFD3E,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDF2,
	0xFDF3,
	0xFDFD,
	0xFDFE,
	0xFE00,
	0xFE10,
	0xFE1A,
	0xFE20,
	0xFE2E,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF61,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x10450,
	0x10480,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840,
	0x10856,
	0x10857,
	0x10860,
	0x10880,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x10900,
	0x1091C,
	0x1091F,
	0x10920,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109A0,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10A80,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B40,
	0x10B56,
	0x10B58,
	0x10B60,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x11080,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11301,
	0x11302,
	0x11303,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE1,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B001,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	SCX_Unknown = 0,
	SCX_Adlam = 1,
	SCX_Ahom = 2,
	SCX_Anatolian_Hieroglyphs = 3,
	SCX_Arabic = 4,
	SCX_Armenian = 5,
	SCX_Avestan = 6,
	SCX_Balinese = 7,
	SCX_Bamum = 8,
	SCX_Bassa_Vah = 9,
	SCX_Batak = 10,
	SCX_Bengali = 11,
	SCX_Bhaiksuki = 12,
	SCX_Bopomofo = 13,
	SCX_Brahmi = 14,
	SCX_Braille = 15,
	SCX_Buginese = 16,
	SCX_Buhid = 17,
	SCX_Canadian_Aboriginal = 18,
	SCX_Carian = 19,
	SCX_Caucasian_Albanian = 20,
	SCX_Chakma = 21,
	SCX_Cham = 22,
	SCX_Cherokee = 23,
	SCX_Common = 24,
	SCX_Coptic = 25,
	SCX_Cuneiform = 26,
	SCX_Cypriot = 27,
	SCX_Cyrillic = 28,
	SCX_Deseret = 29,
	SCX_Devanagari = 30,
	SCX_Duployan = 31,
	SCX_Egyptian_Hieroglyphs = 32,
	SCX_Elbasan = 33,
	SCX_Ethiopic = 34,
	SCX_Georgian = 35,
	SCX_Glagolitic = 36,
	SCX_Gothic = 37,
	SCX_Grantha = 38,
	SCX_Greek = 39,
	SCX_Gujarati = 40,
	SCX_Gurmukhi = 41,
	SCX_Han = 42,
	SCX_Hanb = 43,
	SCX_Hangul = 44,
	SCX_Hanunoo = 45,
	SCX_Hatran = 46,
	SCX_Hebrew = 47,
	SCX_Hiragana = 48,
	SCX_Imperial_Aramaic = 49,
	SCX_Inherited = 50,
	SCX_Inscriptional_Pahlavi = 51,
	SCX_Inscriptional_Parthian = 52,
	SCX_Javanese = 53,
	SCX_Jpan = 54,
	SCX_Kaithi = 55,
	SCX_Kannada = 56,
	SCX_Katakana = 57,
	SCX_Kayah_Li = 58,
	SCX_Kharoshthi = 59,
	SCX_Khmer = 60,
	SCX_Khojki = 61,
	SCX_Khudawadi = 62,
	SCX_Kore = 63,
	SCX_Lao = 64,
	SCX_Latin = 65,
	SCX_Lepcha = 66,
	SCX_Limbu = 67,
	SCX_Linear_A = 68,
	SCX_Linear_B = 69,
	SCX_Lisu = 70,
	SCX_Lycian = 71,
	SCX_Lydian = 72,
	SCX_Mahajani = 73,
	SCX_Malayalam = 74,
	SCX_Mandaic = 75,
	SCX_Manichaean = 76,
	SCX_Marchen = 77,
	SCX_Masaram_Gondi = 78,
	SCX_Meetei_Mayek = 79,
	SCX_Mende_Kikakui = 80,
	SCX_Meroitic_Cursive = 81,
	SCX_Meroitic_Hieroglyphs = 82,
	SCX_Miao = 83,
	SCX_Modi = 84,
	SCX_Mongolian = 85,
	SCX_Mro = 86,
	SCX_Multani = 87,
	SCX_Myanmar = 88,
	SCX_Nabataean = 89,
	SCX_New_Tai_Lue = 90,
	SCX_Newa = 91,
	SCX_Nko = 92,
	SCX_Nushu = 93,
	SCX_Ogham = 94,
	SCX_Ol_Chiki = 95,
	SCX_Old_Hungarian = 96,
	SCX_Old_Italic = 97,
	SCX_Old_North_Arabian = 98,
	SCX_Old_Permic = 99,
	SCX_Old_Persian = 100,
	SCX_Old_South_Arabian = 101,
	SCX_Old_Turkic = 102,
	SCX_Oriya = 103,
	SCX_Osage = 104,
	SCX_Osmanya = 105,
	SCX_Pahawh_Hmong = 106,
	SCX_Palmyrene = 107,
	SCX_Pau_Cin_Hau = 108,
	SCX_Phags_Pa = 109,
	SCX_Phoenician = 110,
	SCX_Psalter_Pahlavi = 111,
	SCX_Rejang = 112,
	SCX_Runic = 113,
	SCX_Samaritan = 114,
	SCX_Saurashtra = 115,
	SCX_Sharada = 116,
	SCX_Shavian = 117,
	SCX_Siddham = 118,
	SCX_SignWriting = 119,
	SCX_Sinhala = 120,
	SCX_Sora_Sompeng = 121,
	SCX_Soyombo = 122,
	SCX_Sundanese = 123,
	SCX_Syloti_Nagri = 124,
	SCX_Syriac = 125,
	SCX_Tagalog = 126,
	SCX_Tagbanwa = 127,
	SCX_Tai_Le = 128,
	SCX_Tai_Tham = 129,
	SCX_Tai_Viet = 130,
	SCX_Takri = 131,
	SCX_Tamil = 132,
	SCX_Tangut = 133,
	SCX_Telugu = 134,
	SCX_Thaana = 135,
	SCX_Thai = 136,
	SCX_Tibetan = 137,
	SCX_Tifinagh = 138,
	SCX_Tirhuta = 139,
	SCX_Ugaritic = 140,
	SCX_Vai = 141,
	SCX_Warang_Citi = 142,
	SCX_Yi = 143,
	SCX_Zanabazar_Square = 144,
	SCX_INVALID = 145,
	SCX_use_AUX_TABLE_1 = -1,
	SCX_use_AUX_TABLE_2 = -2,
	SCX_use_AUX_TABLE_3 = -3,
	SCX_use_AUX_TABLE_4 = -4,
	SCX_use_AUX_TABLE_5 = -5,
	SCX_use_AUX_TABLE_6 = -6,
	SCX_use_AUX_TABLE_7 = -7,
	SCX_use_AUX_TABLE_8 = -8,
	SCX_use_AUX_TABLE_9 = -9,
	SCX_use_AUX_TABLE_10 = -10,
	SCX_use_AUX_TABLE_11 = -11,
	SCX_use_AUX_TABLE_12 = -12,
	SCX_use_AUX_TABLE_13 = -13,
	SCX_use_AUX_TABLE_14 = -14,
	SCX_use_AUX_TABLE_15 = -15,
	SCX_use_AUX_TABLE_16 = -16,
	SCX_use_AUX_TABLE_17 = -17,
	SCX_use_AUX_TABLE_18 = -18,
	SCX_use_AUX_TABLE_19 = -19,
	SCX_use_AUX_TABLE_20 = -20,
	SCX_use_AUX_TABLE_21 = -21,
	SCX_use_AUX_TABLE_22 = -22,
	SCX_use_AUX_TABLE_23 = -23,
	SCX_use_AUX_TABLE_24 = -24,
	SCX_use_AUX_TABLE_25 = -25,
	SCX_use_AUX_TABLE_26 = -26,
	SCX_use_AUX_TABLE_27 = -27,
	SCX_use_AUX_TABLE_28 = -28,
	SCX_use_AUX_TABLE_29 = -29,
	SCX_use_AUX_TABLE_30 = -30,
	SCX_use_AUX_TABLE_31 = -31,
	SCX_use_AUX_TABLE_32 = -32,
	SCX_use_AUX_TABLE_33 = -33,
	SCX_use_AUX_TABLE_34 = -34,
	SCX_use_AUX_TABLE_35 = -35,
	SCX_use_AUX_TABLE_36 = -36,
	SCX_use_AUX_TABLE_37 = -37,
	SCX_use_AUX_TABLE_38 = -38,
	SCX_use_AUX_TABLE_39 = -39,
	SCX_use_AUX_TABLE_40 = -40,
	SCX_use_AUX_TABLE_41 = -41,
	SCX_use_AUX_TABLE_42 = -42,
	SCX_use_AUX_TABLE_43 = -43,
	SCX_use_AUX_TABLE_44 = -44,
	SCX_use_AUX_TABLE_45 = -45
} SCX_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_SCX_AUX_TABLES

static const SCX_enum SCX_AUX_TABLE_1[] = {
	SCX_Bopomofo,
	SCX_Hanb
};

static const SCX_enum SCX_AUX_TABLE_2[] = {
	SCX_Cyrillic,
	SCX_Old_Permic
};

static const SCX_enum SCX_AUX_TABLE_3[] = {
	SCX_Cyrillic,
	SCX_Glagolitic
};

static const SCX_enum SCX_AUX_TABLE_4[] = {
	SCX_Cyrillic,
	SCX_Latin
};

static const SCX_enum SCX_AUX_TABLE_5[] = {
	SCX_Armenian,
	SCX_Georgian
};

static const SCX_enum SCX_AUX_TABLE_6[] = {
	SCX_Arabic,
	SCX_Syriac,
	SCX_Thaana
};

static const SCX_enum SCX_AUX_TABLE_7[] = {
	SCX_Adlam,
	SCX_Arabic,
	SCX_Mandaic,
	SCX_Manichaean,
	SCX_Psalter_Pahlavi,
	SCX_Syriac
};

static const SCX_enum SCX_AUX_TABLE_8[] = {
	SCX_Arabic,
	SCX_Syriac
};

static const SCX_enum SCX_AUX_TABLE_9[] = {
	SCX_Arabic,
	SCX_Thaana
};

static const SCX_enum SCX_AUX_TABLE_10[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Latin,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Sharada,
	SCX_Tamil,
	SCX_Telugu
};

static const SCX_enum SCX_AUX_TABLE_11[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Latin,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Tamil,
	SCX_Telugu
};

static const SCX_enum SCX_AUX_TABLE_12[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Khudawadi,
	SCX_Mahajani,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Sinhala,
	SCX_Syloti_Nagri,
	SCX_Takri,
	SCX_Tamil,
	SCX_Telugu,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_13[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Khudawadi,
	SCX_Limbu,
	SCX_Mahajani,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Sinhala,
	SCX_Syloti_Nagri,
	SCX_Takri,
	SCX_Tamil,
	SCX_Telugu,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_14[] = {
	SCX_Devanagari,
	SCX_Kaithi,
	SCX_Mahajani
};

static const SCX_enum SCX_AUX_TABLE_15[] = {
	SCX_Bengali,
	SCX_Chakma,
	SCX_Syloti_Nagri
};

static const SCX_enum SCX_AUX_TABLE_16[] = {
	SCX_Gurmukhi,
	SCX_Multani
};

static const SCX_enum SCX_AUX_TABLE_17[] = {
	SCX_Gujarati,
	SCX_Khojki
};

static const SCX_enum SCX_AUX_TABLE_18[] = {
	SCX_Grantha,
	SCX_Tamil
};

static const SCX_enum SCX_AUX_TABLE_19[] = {
	SCX_Chakma,
	SCX_Myanmar,
	SCX_Tai_Le
};

static const SCX_enum SCX_AUX_TABLE_20[] = {
	SCX_Georgian,
	SCX_Latin
};

static const SCX_enum SCX_AUX_TABLE_21[] = {
	SCX_Hangul,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_22[] = {
	SCX_Buhid,
	SCX_Hanunoo,
	SCX_Tagalog,
	SCX_Tagbanwa
};

static const SCX_enum SCX_AUX_TABLE_23[] = {
	SCX_Mongolian,
	SCX_Phags_Pa
};

static const SCX_enum SCX_AUX_TABLE_24[] = {
	SCX_Devanagari,
	SCX_Grantha
};

static const SCX_enum SCX_AUX_TABLE_25[] = {
	SCX_Devanagari,
	SCX_Sharada
};

static const SCX_enum SCX_AUX_TABLE_26[] = {
	SCX_Devanagari,
	SCX_Kannada,
	SCX_Malayalam,
	SCX_Tamil,
	SCX_Telugu
};

static const SCX_enum SCX_AUX_TABLE_27[] = {
	SCX_Devanagari,
	SCX_Kannada
};

static const SCX_enum SCX_AUX_TABLE_28[] = {
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Latin
};

static const SCX_enum SCX_AUX_TABLE_29[] = {
	SCX_Han,
	SCX_Hanb,
	SCX_Jpan,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_30[] = {
	SCX_Bopomofo,
	SCX_Han,
	SCX_Hanb,
	SCX_Hangul,
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana,
	SCX_Kore,
	SCX_Yi
};

static const SCX_enum SCX_AUX_TABLE_31[] = {
	SCX_Bopomofo,
	SCX_Han,
	SCX_Hanb,
	SCX_Hangul,
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_32[] = {
	SCX_Bopomofo,
	SCX_Han,
	SCX_Hanb,
	SCX_Jpan,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_33[] = {
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana
};

static const SCX_enum SCX_AUX_TABLE_34[] = {
	SCX_Han,
	SCX_Hanb,
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_35[] = {
	SCX_Hiragana,
	SCX_Jpan
};

static const SCX_enum SCX_AUX_TABLE_36[] = {
	SCX_Jpan,
	SCX_Katakana
};

static const SCX_enum SCX_AUX_TABLE_37[] = {
	SCX_Devanagari,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kaithi,
	SCX_Kannada,
	SCX_Khudawadi,
	SCX_Mahajani,
	SCX_Modi,
	SCX_Takri,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_38[] = {
	SCX_Devanagari,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kaithi,
	SCX_Khudawadi,
	SCX_Mahajani,
	SCX_Modi,
	SCX_Takri,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_39[] = {
	SCX_Bengali,
	SCX_Devanagari
};

static const SCX_enum SCX_AUX_TABLE_40[] = {
	SCX_Devanagari,
	SCX_Tamil
};

static const SCX_enum SCX_AUX_TABLE_41[] = {
	SCX_Kayah_Li,
	SCX_Latin,
	SCX_Myanmar
};

static const SCX_enum SCX_AUX_TABLE_42[] = {
	SCX_Buginese,
	SCX_Javanese
};

static const SCX_enum SCX_AUX_TABLE_43[] = {
	SCX_Cypriot,
	SCX_Linear_B
};

static const SCX_enum SCX_AUX_TABLE_44[] = {
	SCX_Cypriot,
	SCX_Linear_A,
	SCX_Linear_B
};

static const SCX_enum SCX_AUX_TABLE_45[] = {
	SCX_Arabic,
	SCX_Coptic
};

static const SCX_enum * const SCX_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	SCX_AUX_TABLE_1,
	SCX_AUX_TABLE_2,
	SCX_AUX_TABLE_3,
	SCX_AUX_TABLE_4,
	SCX_AUX_TABLE_5,
	SCX_AUX_TABLE_6,
	SCX_AUX_TABLE_7,
	SCX_AUX_TABLE_8,
	SCX_AUX_TABLE_9,
	SCX_AUX_TABLE_10,
	SCX_AUX_TABLE_11,
	SCX_AUX_TABLE_12,
	SCX_AUX_TABLE_13,
	SCX_AUX_TABLE_14,
	SCX_AUX_TABLE_15,
	SCX_AUX_TABLE_16,
	SCX_AUX_TABLE_17,
	SCX_AUX_TABLE_18,
	SCX_AUX_TABLE_19,
	SCX_AUX_TABLE_20,
	SCX_AUX_TABLE_21,
	SCX_AUX_TABLE_22,
	SCX_AUX_TABLE_23,
	SCX_AUX_TABLE_24,
	SCX_AUX_TABLE_25,
	SCX_AUX_TABLE_26,
	SCX_AUX_TABLE_27,
	SCX_AUX_TABLE_28,
	SCX_AUX_TABLE_29,
	SCX_AUX_TABLE_30,
	SCX_AUX_TABLE_31,
	SCX_AUX_TABLE_32,
	SCX_AUX_TABLE_33,
	SCX_AUX_TABLE_34,
	SCX_AUX_TABLE_35,
	SCX_AUX_TABLE_36,
	SCX_AUX_TABLE_37,
	SCX_AUX_TABLE_38,
	SCX_AUX_TABLE_39,
	SCX_AUX_TABLE_40,
	SCX_AUX_TABLE_41,
	SCX_AUX_TABLE_42,
	SCX_AUX_TABLE_43,
	SCX_AUX_TABLE_44,
	SCX_AUX_TABLE_45
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 SCX_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* SCX_AUX_TABLE_1 */,
	2	/* SCX_AUX_TABLE_2 */,
	2	/* SCX_AUX_TABLE_3 */,
	2	/* SCX_AUX_TABLE_4 */,
	2	/* SCX_AUX_TABLE_5 */,
	3	/* SCX_AUX_TABLE_6 */,
	6	/* SCX_AUX_TABLE_7 */,
	2	/* SCX_AUX_TABLE_8 */,
	2	/* SCX_AUX_TABLE_9 */,
	12	/* SCX_AUX_TABLE_10 */,
	11	/* SCX_AUX_TABLE_11 */,
	16	/* SCX_AUX_TABLE_12 */,
	17	/* SCX_AUX_TABLE_13 */,
	3	/* SCX_AUX_TABLE_14 */,
	3	/* SCX_AUX_TABLE_15 */,
	2	/* SCX_AUX_TABLE_16 */,
	2	/* SCX_AUX_TABLE_17 */,
	2	/* SCX_AUX_TABLE_18 */,
	3	/* SCX_AUX_TABLE_19 */,
	2	/* SCX_AUX_TABLE_20 */,
	2	/* SCX_AUX_TABLE_21 */,
	4	/* SCX_AUX_TABLE_22 */,
	2	/* SCX_AUX_TABLE_23 */,
	2	/* SCX_AUX_TABLE_24 */,
	2	/* SCX_AUX_TABLE_25 */,
	5	/* SCX_AUX_TABLE_26 */,
	2	/* SCX_AUX_TABLE_27 */,
	3	/* SCX_AUX_TABLE_28 */,
	4	/* SCX_AUX_TABLE_29 */,
	9	/* SCX_AUX_TABLE_30 */,
	8	/* SCX_AUX_TABLE_31 */,
	5	/* SCX_AUX_TABLE_32 */,
	3	/* SCX_AUX_TABLE_33 */,
	6	/* SCX_AUX_TABLE_34 */,
	2	/* SCX_AUX_TABLE_35 */,
	2	/* SCX_AUX_TABLE_36 */,
	10	/* SCX_AUX_TABLE_37 */,
	9	/* SCX_AUX_TABLE_38 */,
	2	/* SCX_AUX_TABLE_39 */,
	2	/* SCX_AUX_TABLE_40 */,
	3	/* SCX_AUX_TABLE_41 */,
	2	/* SCX_AUX_TABLE_42 */,
	2	/* SCX_AUX_TABLE_43 */,
	3	/* SCX_AUX_TABLE_44 */,
	2	/* SCX_AUX_TABLE_45 */
};

/* This table, indexed by the script enum, gives the zero code point for that
 * script; 0 if the script has multiple digit sequences.  Scripts without a
 * digit sequence use ASCII [0-9], hence are marked '0' */
static const UV script_zeros[] = {
	'0',	/* Unknown */
	0x1e950,	/* Adlam */
	0x11730,	/* Ahom */
	'0',	/* Anatolian_Hieroglyphs */
	 0,	/* Arabic */
	'0',	/* Armenian */
	'0',	/* Avestan */
	0x1b50,	/* Balinese */
	'0',	/* Bamum */
	'0',	/* Bassa_Vah */
	'0',	/* Batak */
	0x9e6,	/* Bengali */
	0x11c50,	/* Bhaiksuki */
	'0',	/* Bopomofo */
	0x11066,	/* Brahmi */
	'0',	/* Braille */
	'0',	/* Buginese */
	'0',	/* Buhid */
	'0',	/* Canadian_Aboriginal */
	'0',	/* Carian */
	'0',	/* Caucasian_Albanian */
	 0,	/* Chakma */
	0xaa50,	/* Cham */
	'0',	/* Cherokee */
	 0,	/* Common */
	'0',	/* Coptic */
	'0',	/* Cuneiform */
	'0',	/* Cypriot */
	'0',	/* Cyrillic */
	'0',	/* Deseret */
	0x966,	/* Devanagari */
	'0',	/* Duployan */
	'0',	/* Egyptian_Hieroglyphs */
	'0',	/* Elbasan */
	'0',	/* Ethiopic */
	'0',	/* Georgian */
	'0',	/* Glagolitic */
	'0',	/* Gothic */
	0xbe6,	/* Grantha */
	'0',	/* Greek */
	0xae6,	/* Gujarati */
	0xa66,	/* Gurmukhi */
	'0',	/* Han */
	'0',	/* Hanb */
	'0',	/* Hangul */
	'0',	/* Hanunoo */
	'0',	/* Hatran */
	'0',	/* Hebrew */
	'0',	/* Hiragana */
	'0',	/* Imperial_Aramaic */
	 0,	/* Inherited */
	'0',	/* Inscriptional_Pahlavi */
	'0',	/* Inscriptional_Parthian */
	0xa9d0,	/* Javanese */
	'0',	/* Jpan */
	0x966,	/* Kaithi */
	0xce6,	/* Kannada */
	'0',	/* Katakana */
	0xa900,	/* Kayah_Li */
	'0',	/* Kharoshthi */
	0x17e0,	/* Khmer */
	0xae6,	/* Khojki */
	0x112f0,	/* Khudawadi */
	'0',	/* Kore */
	0xed0,	/* Lao */
	'0',	/* Latin */
	0x1c40,	/* Lepcha */
	0x1946,	/* Limbu */
	'0',	/* Linear_A */
	'0',	/* Linear_B */
	'0',	/* Lisu */
	'0',	/* Lycian */
	'0',	/* Lydian */
	0x966,	/* Mahajani */
	0xd66,	/* Malayalam */
	'0',	/* Mandaic */
	'0',	/* Manichaean */
	'0',	/* Marchen */
	0x11d50,	/* Masaram_Gondi */
	0xabf0,	/* Meetei_Mayek */
	'0',	/* Mende_Kikakui */
	'0',	/* Meroitic_Cursive */
	'0',	/* Meroitic_Hieroglyphs */
	'0',	/* Miao */
	0x11650,	/* Modi */
	0x1810,	/* Mongolian */
	0x16a60,	/* Mro */
	0xa66,	/* Multani */
	 0,	/* Myanmar */
	'0',	/* Nabataean */
	0x19d0,	/* New_Tai_Lue */
	0x11450,	/* Newa */
	0x7c0,	/* Nko */
	'0',	/* Nushu */
	'0',	/* Ogham */
	0x1c50,	/* Ol_Chiki */
	'0',	/* Old_Hungarian */
	'0',	/* Old_Italic */
	'0',	/* Old_North_Arabian */
	'0',	/* Old_Permic */
	'0',	/* Old_Persian */
	'0',	/* Old_South_Arabian */
	'0',	/* Old_Turkic */
	0xb66,	/* Oriya */
	'0',	/* Osage */
	0x104a0,	/* Osmanya */
	0x16b50,	/* Pahawh_Hmong */
	'0',	/* Palmyrene */
	'0',	/* Pau_Cin_Hau */
	'0',	/* Phags_Pa */
	'0',	/* Phoenician */
	'0',	/* Psalter_Pahlavi */
	'0',	/* Rejang */
	'0',	/* Runic */
	'0',	/* Samaritan */
	0xa8d0,	/* Saurashtra */
	0x111d0,	/* Sharada */
	'0',	/* Shavian */
	'0',	/* Siddham */
	'0',	/* SignWriting */
	0xde6,	/* Sinhala */
	0x110f0,	/* Sora_Sompeng */
	'0',	/* Soyombo */
	0x1bb0,	/* Sundanese */
	0x9e6,	/* Syloti_Nagri */
	'0',	/* Syriac */
	'0',	/* Tagalog */
	'0',	/* Tagbanwa */
	0x1040,	/* Tai_Le */
	 0,	/* Tai_Tham */
	'0',	/* Tai_Viet */
	0x116c0,	/* Takri */
	0xbe6,	/* Tamil */
	'0',	/* Tangut */
	0xc66,	/* Telugu */
	0x660,	/* Thaana */
	0xe50,	/* Thai */
	0xf20,	/* Tibetan */
	'0',	/* Tifinagh */
	0x114d0,	/* Tirhuta */
	'0',	/* Ugaritic */
	0xa620,	/* Vai */
	0x118e0	/* Warang_Citi */
};

static const SCX_enum _Perl_SCX_invmap[] = { /* for EBCDIC 1047 */
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_use_AUX_TABLE_1,
	SCX_Common,
	SCX_Inherited,
	SCX_Greek,
	SCX_Inherited,
	SCX_Greek,
	SCX_Inherited,
	SCX_Latin,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Coptic,
	SCX_Greek,
	SCX_Cyrillic,
	SCX_use_AUX_TABLE_2,
	SCX_use_AUX_TABLE_3,
	SCX_use_AUX_TABLE_4,
	SCX_use_AUX_TABLE_3,
	SCX_Cyrillic,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_use_AUX_TABLE_5,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Common,
	SCX_Arabic,
	SCX_use_AUX_TABLE_6,
	SCX_Arabic,
	SCX_use_AUX_TABLE_6,
	SCX_Unknown,
	SCX_Arabic,
	SCX_use_AUX_TABLE_6,
	SCX_Arabic,
	SCX_use_AUX_TABLE_7,
	SCX_Arabic,
	SCX_use_AUX_TABLE_8,
	SCX_Arabic,
	SCX_use_AUX_TABLE_9,
	SCX_Arabic,
	SCX_use_AUX_TABLE_8,
	SCX_Arabic,
	SCX_Common,
	SCX_Arabic,
	SCX_Syriac,
	SCX_Unknown,
	SCX_Syriac,
	SCX_Unknown,
	SCX_Syriac,
	SCX_Arabic,
	SCX_Thaana,
	SCX_Unknown,
	SCX_Nko,
	SCX_Unknown,
	SCX_Samaritan,
	SCX_Unknown,
	SCX_Samaritan,
	SCX_Unknown,
	SCX_Mandaic,
	SCX_Unknown,
	SCX_Mandaic,
	SCX_Unknown,
	SCX_Syriac,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Common,
	SCX_Arabic,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_10,
	SCX_use_AUX_TABLE_11,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_12,
	SCX_use_AUX_TABLE_13,
	SCX_use_AUX_TABLE_14,
	SCX_Devanagari,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_use_AUX_TABLE_15,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_use_AUX_TABLE_16,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_use_AUX_TABLE_17,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_use_AUX_TABLE_18,
	SCX_Unknown,
	SCX_Tamil,
	SCX_use_AUX_TABLE_18,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_use_AUX_TABLE_18,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Thai,
	SCX_Unknown,
	SCX_Common,
	SCX_Thai,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Common,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Myanmar,
	SCX_use_AUX_TABLE_19,
	SCX_Myanmar,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_use_AUX_TABLE_20,
	SCX_Georgian,
	SCX_use_AUX_TABLE_21,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Cherokee,
	SCX_Unknown,
	SCX_Cherokee,
	SCX_Unknown,
	SCX_Canadian_Aboriginal,
	SCX_Ogham,
	SCX_Unknown,
	SCX_Runic,
	SCX_Common,
	SCX_Runic,
	SCX_Unknown,
	SCX_Tagalog,
	SCX_Unknown,
	SCX_Tagalog,
	SCX_Unknown,
	SCX_Hanunoo,
	SCX_use_AUX_TABLE_22,
	SCX_Unknown,
	SCX_Buhid,
	SCX_Unknown,
	SCX_Tagbanwa,
	SCX_Unknown,
	SCX_Tagbanwa,
	SCX_Unknown,
	SCX_Tagbanwa,
	SCX_Unknown,
	SCX_Khmer,
	SCX_Unknown,
	SCX_Khmer,
	SCX_Unknown,
	SCX_Khmer,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_use_AUX_TABLE_23,
	SCX_Mongolian,
	SCX_use_AUX_TABLE_23,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Canadian_Aboriginal,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Tai_Le,
	SCX_Unknown,
	SCX_Tai_Le,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Khmer,
	SCX_Buginese,
	SCX_Unknown,
	SCX_Buginese,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Unknown,
	SCX_Balinese,
	SCX_Unknown,
	SCX_Balinese,
	SCX_Unknown,
	SCX_Sundanese,
	SCX_Batak,
	SCX_Unknown,
	SCX_Batak,
	SCX_Lepcha,
	SCX_Unknown,
	SCX_Lepcha,
	SCX_Unknown,
	SCX_Lepcha,
	SCX_Ol_Chiki,
	SCX_Cyrillic,
	SCX_Unknown,
	SCX_Sundanese,
	SCX_Unknown,
	SCX_use_AUX_TABLE_24,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_24,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_use_AUX_TABLE_26,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_24,
	SCX_use_AUX_TABLE_27,
	SCX_Devanagari,
	SCX_Bengali,
	SCX_use_AUX_TABLE_24,
	SCX_Unknown,
	SCX_Latin,
	SCX_Greek,
	SCX_Cyrillic,
	SCX_Latin,
	SCX_Greek,
	SCX_Latin,
	SCX_Greek,
	SCX_Latin,
	SCX_Cyrillic,
	SCX_Latin,
	SCX_Greek,
	SCX_Inherited,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Latin,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Unknown,
	SCX_Latin,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Inherited,
	SCX_use_AUX_TABLE_28,
	SCX_Unknown,
	SCX_Common,
	SCX_Greek,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Braille,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Latin,
	SCX_Coptic,
	SCX_Unknown,
	SCX_Coptic,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Tifinagh,
	SCX_Unknown,
	SCX_Tifinagh,
	SCX_Unknown,
	SCX_Tifinagh,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Cyrillic,
	SCX_Common,
	SCX_use_AUX_TABLE_3,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_31,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_30,
	SCX_Common,
	SCX_use_AUX_TABLE_31,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_31,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_32,
	SCX_use_AUX_TABLE_21,
	SCX_use_AUX_TABLE_31,
	SCX_use_AUX_TABLE_33,
	SCX_Common,
	SCX_use_AUX_TABLE_31,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_34,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_35,
	SCX_Unknown,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_35,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_36,
	SCX_Unknown,
	SCX_use_AUX_TABLE_1,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_1,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_21,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_36,
	SCX_Unknown,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Yi,
	SCX_Unknown,
	SCX_Yi,
	SCX_Unknown,
	SCX_Lisu,
	SCX_Vai,
	SCX_Unknown,
	SCX_Cyrillic,
	SCX_use_AUX_TABLE_3,
	SCX_Cyrillic,
	SCX_Bamum,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Unknown,
	SCX_Latin,
	SCX_Unknown,
	SCX_Latin,
	SCX_Syloti_Nagri,
	SCX_Unknown,
	SCX_use_AUX_TABLE_37,
	SCX_use_AUX_TABLE_38,
	SCX_Unknown,
	SCX_Phags_Pa,
	SCX_Unknown,
	SCX_Saurashtra,
	SCX_Unknown,
	SCX_Saurashtra,
	SCX_Unknown,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_39,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_40,
	SCX_Devanagari,
	SCX_Unknown,
	SCX_Kayah_Li,
	SCX_use_AUX_TABLE_41,
	SCX_Kayah_Li,
	SCX_Rejang,
	SCX_Unknown,
	SCX_Rejang,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_Javanese,
	SCX_Unknown,
	SCX_use_AUX_TABLE_42,
	SCX_Javanese,
	SCX_Unknown,
	SCX_Javanese,
	SCX_Myanmar,
	SCX_Unknown,
	SCX_Cham,
	SCX_Unknown,
	SCX_Cham,
	SCX_Unknown,
	SCX_Cham,
	SCX_Unknown,
	SCX_Cham,
	SCX_Myanmar,
	SCX_Tai_Viet,
	SCX_Unknown,
	SCX_Tai_Viet,
	SCX_Meetei_Mayek,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Greek,
	SCX_Unknown,
	SCX_Cherokee,
	SCX_Meetei_Mayek,
	SCX_Unknown,
	SCX_Meetei_Mayek,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Latin,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Common,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_use_AUX_TABLE_9,
	SCX_Arabic,
	SCX_use_AUX_TABLE_9,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Common,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Cyrillic,
	SCX_Common,
	SCX_use_AUX_TABLE_31,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_use_AUX_TABLE_43,
	SCX_Unknown,
	SCX_use_AUX_TABLE_44,
	SCX_Unknown,
	SCX_use_AUX_TABLE_43,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Inherited,
	SCX_Unknown,
	SCX_Lycian,
	SCX_Unknown,
	SCX_Carian,
	SCX_Unknown,
	SCX_use_AUX_TABLE_45,
	SCX_Unknown,
	SCX_Old_Italic,
	SCX_Unknown,
	SCX_Old_Italic,
	SCX_Gothic,
	SCX_Unknown,
	SCX_Old_Permic,
	SCX_Unknown,
	SCX_Ugaritic,
	SCX_Unknown,
	SCX_Ugaritic,
	SCX_Old_Persian,
	SCX_Unknown,
	SCX_Old_Persian,
	SCX_Unknown,
	SCX_Deseret,
	SCX_Shavian,
	SCX_Osmanya,
	SCX_Unknown,
	SCX_Osmanya,
	SCX_Unknown,
	SCX_Osage,
	SCX_Unknown,
	SCX_Osage,
	SCX_Unknown,
	SCX_Elbasan,
	SCX_Unknown,
	SCX_Caucasian_Albanian,
	SCX_Unknown,
	SCX_Caucasian_Albanian,
	SCX_Unknown,
	SCX_Linear_A,
	SCX_Unknown,
	SCX_Linear_A,
	SCX_Unknown,
	SCX_Linear_A,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Imperial_Aramaic,
	SCX_Unknown,
	SCX_Imperial_Aramaic,
	SCX_Palmyrene,
	SCX_Nabataean,
	SCX_Unknown,
	SCX_Nabataean,
	SCX_Unknown,
	SCX_Hatran,
	SCX_Unknown,
	SCX_Hatran,
	SCX_Unknown,
	SCX_Hatran,
	SCX_Phoenician,
	SCX_Unknown,
	SCX_Phoenician,
	SCX_Lydian,
	SCX_Unknown,
	SCX_Lydian,
	SCX_Unknown,
	SCX_Meroitic_Hieroglyphs,
	SCX_Meroitic_Cursive,
	SCX_Unknown,
	SCX_Meroitic_Cursive,
	SCX_Unknown,
	SCX_Meroitic_Cursive,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Old_South_Arabian,
	SCX_Old_North_Arabian,
	SCX_Unknown,
	SCX_Manichaean,
	SCX_Unknown,
	SCX_Manichaean,
	SCX_Unknown,
	SCX_Avestan,
	SCX_Unknown,
	SCX_Avestan,
	SCX_Inscriptional_Parthian,
	SCX_Unknown,
	SCX_Inscriptional_Parthian,
	SCX_Inscriptional_Pahlavi,
	SCX_Unknown,
	SCX_Inscriptional_Pahlavi,
	SCX_Psalter_Pahlavi,
	SCX_Unknown,
	SCX_Psalter_Pahlavi,
	SCX_Unknown,
	SCX_Psalter_Pahlavi,
	SCX_Unknown,
	SCX_Old_Turkic,
	SCX_Unknown,
	SCX_Old_Hungarian,
	SCX_Unknown,
	SCX_Old_Hungarian,
	SCX_Unknown,
	SCX_Old_Hungarian,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Brahmi,
	SCX_Unknown,
	SCX_Brahmi,
	SCX_Unknown,
	SCX_Brahmi,
	SCX_Kaithi,
	SCX_Unknown,
	SCX_Sora_Sompeng,
	SCX_Unknown,
	SCX_Sora_Sompeng,
	SCX_Unknown,
	SCX_Chakma,
	SCX_Unknown,
	SCX_Chakma,
	SCX_Unknown,
	SCX_Mahajani,
	SCX_Unknown,
	SCX_Sharada,
	SCX_Unknown,
	SCX_Sharada,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Khojki,
	SCX_Unknown,
	SCX_Khojki,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Khudawadi,
	SCX_Unknown,
	SCX_Khudawadi,
	SCX_Unknown,
	SCX_Grantha,
	SCX_use_AUX_TABLE_18,
	SCX_Grantha,
	SCX_use_AUX_TABLE_18,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_use_AUX_TABLE_18,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Newa,
	SCX_Unknown,
	SCX_Newa,
	SCX_Unknown,
	SCX_Newa,
	SCX_Unknown,
	SCX_Tirhuta,
	SCX_Unknown,
	SCX_Tirhuta,
	SCX_Unknown,
	SCX_Siddham,
	SCX_Unknown,
	SCX_Siddham,
	SCX_Unknown,
	SCX_Modi,
	SCX_Unknown,
	SCX_Modi,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Takri,
	SCX_Unknown,
	SCX_Takri,
	SCX_Unknown,
	SCX_Ahom,
	SCX_Unknown,
	SCX_Ahom,
	SCX_Unknown,
	SCX_Ahom,
	SCX_Unknown,
	SCX_Warang_Citi,
	SCX_Unknown,
	SCX_Warang_Citi,
	SCX_Unknown,
	SCX_Zanabazar_Square,
	SCX_Unknown,
	SCX_Soyombo,
	SCX_Unknown,
	SCX_Soyombo,
	SCX_Unknown,
	SCX_Soyombo,
	SCX_Unknown,
	SCX_Pau_Cin_Hau,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Marchen,
	SCX_Unknown,
	SCX_Marchen,
	SCX_Unknown,
	SCX_Marchen,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Egyptian_Hieroglyphs,
	SCX_Unknown,
	SCX_Anatolian_Hieroglyphs,
	SCX_Unknown,
	SCX_Bamum,
	SCX_Unknown,
	SCX_Mro,
	SCX_Unknown,
	SCX_Mro,
	SCX_Unknown,
	SCX_Mro,
	SCX_Unknown,
	SCX_Bassa_Vah,
	SCX_Unknown,
	SCX_Bassa_Vah,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Miao,
	SCX_Unknown,
	SCX_Miao,
	SCX_Unknown,
	SCX_Miao,
	SCX_Unknown,
	SCX_Tangut,
	SCX_Nushu,
	SCX_Unknown,
	SCX_Tangut,
	SCX_Unknown,
	SCX_Tangut,
	SCX_Unknown,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_35,
	SCX_Unknown,
	SCX_Nushu,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_SignWriting,
	SCX_Unknown,
	SCX_SignWriting,
	SCX_Unknown,
	SCX_SignWriting,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Mende_Kikakui,
	SCX_Unknown,
	SCX_Mende_Kikakui,
	SCX_Unknown,
	SCX_Adlam,
	SCX_Unknown,
	SCX_Adlam,
	SCX_Unknown,
	SCX_Adlam,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_use_AUX_TABLE_35,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Unknown
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_SCX_invlist[] = { /* for EBCDIC 037 */
	1602,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x2EA,
	0x2EC,
	0x300,
	0x342,
	0x343,
	0x345,
	0x346,
	0x363,
	0x370,
	0x374,
	0x375,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x384,
	0x385,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3E2,
	0x3F0,
	0x400,
	0x483,
	0x484,
	0x485,
	0x487,
	0x488,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x605,
	0x606,
	0x60C,
	0x60D,
	0x61B,
	0x61D,
	0x61E,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x64B,
	0x656,
	0x660,
	0x66A,
	0x670,
	0x671,
	0x6DD,
	0x6DE,
	0x700,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x750,
	0x780,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x900,
	0x951,
	0x952,
	0x953,
	0x964,
	0x965,
	0x966,
	0x970,
	0x980,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAA,
	0xBAB,
	0xBAE,
	0xBB5,
	0xBB6,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF3,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE40,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFD5,
	0xFD9,
	0xFDB,
	0x1000,
	0x1040,
	0x104A,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1100,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x1680,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x1802,
	0x1804,
	0x1805,
	0x1806,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x19E0,
	0x1A00,
	0x1A1C,
	0x1A1E,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BC0,
	0x1BF4,
	0x1BFC,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C80,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CD1,
	0x1CD2,
	0x1CD4,
	0x1CD7,
	0x1CD8,
	0x1CD9,
	0x1CDA,
	0x1CDB,
	0x1CDC,
	0x1CDE,
	0x1CE0,
	0x1CE1,
	0x1CF2,
	0x1CF5,
	0x1CF6,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1D26,
	0x1D2B,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1DC2,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200C,
	0x200E,
	0x2065,
	0x2066,
	0x2071,
	0x2072,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F0,
	0x20F1,
	0x2100,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C80,
	0x2CF4,
	0x2CF9,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E43,
	0x2E44,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3003,
	0x3004,
	0x3005,
	0x3008,
	0x3012,
	0x3013,
	0x3014,
	0x301C,
	0x3020,
	0x3021,
	0x302A,
	0x302E,
	0x3030,
	0x3031,
	0x3036,
	0x3037,
	0x3038,
	0x303C,
	0x303E,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x30FD,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31A0,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3260,
	0x327F,
	0x3280,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0x3371,
	0x337B,
	0x3380,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DB6,
	0x4DC0,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA500,
	0xA62C,
	0xA640,
	0xA66F,
	0xA670,
	0xA6A0,
	0xA6F8,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA800,
	0xA82C,
	0xA830,
	0xA836,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8F1,
	0xA8F2,
	0xA8F3,
	0xA8F4,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA92F,
	0xA930,
	0xA954,
	0xA95F,
	0xA960,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA60,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAE0,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xAB66,
	0xAB70,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFBC2,
	0xFBD3,
	0xFD3E,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDF2,
	0xFDF3,
	0xFDFD,
	0xFDFE,
	0xFE00,
	0xFE10,
	0xFE1A,
	0xFE20,
	0xFE2E,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF61,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x10450,
	0x10480,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840,
	0x10856,
	0x10857,
	0x10860,
	0x10880,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x10900,
	0x1091C,
	0x1091F,
	0x10920,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109A0,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10A80,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B40,
	0x10B56,
	0x10B58,
	0x10B60,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x11080,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11301,
	0x11302,
	0x11303,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE1,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B001,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	SCX_Unknown = 0,
	SCX_Adlam = 1,
	SCX_Ahom = 2,
	SCX_Anatolian_Hieroglyphs = 3,
	SCX_Arabic = 4,
	SCX_Armenian = 5,
	SCX_Avestan = 6,
	SCX_Balinese = 7,
	SCX_Bamum = 8,
	SCX_Bassa_Vah = 9,
	SCX_Batak = 10,
	SCX_Bengali = 11,
	SCX_Bhaiksuki = 12,
	SCX_Bopomofo = 13,
	SCX_Brahmi = 14,
	SCX_Braille = 15,
	SCX_Buginese = 16,
	SCX_Buhid = 17,
	SCX_Canadian_Aboriginal = 18,
	SCX_Carian = 19,
	SCX_Caucasian_Albanian = 20,
	SCX_Chakma = 21,
	SCX_Cham = 22,
	SCX_Cherokee = 23,
	SCX_Common = 24,
	SCX_Coptic = 25,
	SCX_Cuneiform = 26,
	SCX_Cypriot = 27,
	SCX_Cyrillic = 28,
	SCX_Deseret = 29,
	SCX_Devanagari = 30,
	SCX_Duployan = 31,
	SCX_Egyptian_Hieroglyphs = 32,
	SCX_Elbasan = 33,
	SCX_Ethiopic = 34,
	SCX_Georgian = 35,
	SCX_Glagolitic = 36,
	SCX_Gothic = 37,
	SCX_Grantha = 38,
	SCX_Greek = 39,
	SCX_Gujarati = 40,
	SCX_Gurmukhi = 41,
	SCX_Han = 42,
	SCX_Hanb = 43,
	SCX_Hangul = 44,
	SCX_Hanunoo = 45,
	SCX_Hatran = 46,
	SCX_Hebrew = 47,
	SCX_Hiragana = 48,
	SCX_Imperial_Aramaic = 49,
	SCX_Inherited = 50,
	SCX_Inscriptional_Pahlavi = 51,
	SCX_Inscriptional_Parthian = 52,
	SCX_Javanese = 53,
	SCX_Jpan = 54,
	SCX_Kaithi = 55,
	SCX_Kannada = 56,
	SCX_Katakana = 57,
	SCX_Kayah_Li = 58,
	SCX_Kharoshthi = 59,
	SCX_Khmer = 60,
	SCX_Khojki = 61,
	SCX_Khudawadi = 62,
	SCX_Kore = 63,
	SCX_Lao = 64,
	SCX_Latin = 65,
	SCX_Lepcha = 66,
	SCX_Limbu = 67,
	SCX_Linear_A = 68,
	SCX_Linear_B = 69,
	SCX_Lisu = 70,
	SCX_Lycian = 71,
	SCX_Lydian = 72,
	SCX_Mahajani = 73,
	SCX_Malayalam = 74,
	SCX_Mandaic = 75,
	SCX_Manichaean = 76,
	SCX_Marchen = 77,
	SCX_Masaram_Gondi = 78,
	SCX_Meetei_Mayek = 79,
	SCX_Mende_Kikakui = 80,
	SCX_Meroitic_Cursive = 81,
	SCX_Meroitic_Hieroglyphs = 82,
	SCX_Miao = 83,
	SCX_Modi = 84,
	SCX_Mongolian = 85,
	SCX_Mro = 86,
	SCX_Multani = 87,
	SCX_Myanmar = 88,
	SCX_Nabataean = 89,
	SCX_New_Tai_Lue = 90,
	SCX_Newa = 91,
	SCX_Nko = 92,
	SCX_Nushu = 93,
	SCX_Ogham = 94,
	SCX_Ol_Chiki = 95,
	SCX_Old_Hungarian = 96,
	SCX_Old_Italic = 97,
	SCX_Old_North_Arabian = 98,
	SCX_Old_Permic = 99,
	SCX_Old_Persian = 100,
	SCX_Old_South_Arabian = 101,
	SCX_Old_Turkic = 102,
	SCX_Oriya = 103,
	SCX_Osage = 104,
	SCX_Osmanya = 105,
	SCX_Pahawh_Hmong = 106,
	SCX_Palmyrene = 107,
	SCX_Pau_Cin_Hau = 108,
	SCX_Phags_Pa = 109,
	SCX_Phoenician = 110,
	SCX_Psalter_Pahlavi = 111,
	SCX_Rejang = 112,
	SCX_Runic = 113,
	SCX_Samaritan = 114,
	SCX_Saurashtra = 115,
	SCX_Sharada = 116,
	SCX_Shavian = 117,
	SCX_Siddham = 118,
	SCX_SignWriting = 119,
	SCX_Sinhala = 120,
	SCX_Sora_Sompeng = 121,
	SCX_Soyombo = 122,
	SCX_Sundanese = 123,
	SCX_Syloti_Nagri = 124,
	SCX_Syriac = 125,
	SCX_Tagalog = 126,
	SCX_Tagbanwa = 127,
	SCX_Tai_Le = 128,
	SCX_Tai_Tham = 129,
	SCX_Tai_Viet = 130,
	SCX_Takri = 131,
	SCX_Tamil = 132,
	SCX_Tangut = 133,
	SCX_Telugu = 134,
	SCX_Thaana = 135,
	SCX_Thai = 136,
	SCX_Tibetan = 137,
	SCX_Tifinagh = 138,
	SCX_Tirhuta = 139,
	SCX_Ugaritic = 140,
	SCX_Vai = 141,
	SCX_Warang_Citi = 142,
	SCX_Yi = 143,
	SCX_Zanabazar_Square = 144,
	SCX_INVALID = 145,
	SCX_use_AUX_TABLE_1 = -1,
	SCX_use_AUX_TABLE_2 = -2,
	SCX_use_AUX_TABLE_3 = -3,
	SCX_use_AUX_TABLE_4 = -4,
	SCX_use_AUX_TABLE_5 = -5,
	SCX_use_AUX_TABLE_6 = -6,
	SCX_use_AUX_TABLE_7 = -7,
	SCX_use_AUX_TABLE_8 = -8,
	SCX_use_AUX_TABLE_9 = -9,
	SCX_use_AUX_TABLE_10 = -10,
	SCX_use_AUX_TABLE_11 = -11,
	SCX_use_AUX_TABLE_12 = -12,
	SCX_use_AUX_TABLE_13 = -13,
	SCX_use_AUX_TABLE_14 = -14,
	SCX_use_AUX_TABLE_15 = -15,
	SCX_use_AUX_TABLE_16 = -16,
	SCX_use_AUX_TABLE_17 = -17,
	SCX_use_AUX_TABLE_18 = -18,
	SCX_use_AUX_TABLE_19 = -19,
	SCX_use_AUX_TABLE_20 = -20,
	SCX_use_AUX_TABLE_21 = -21,
	SCX_use_AUX_TABLE_22 = -22,
	SCX_use_AUX_TABLE_23 = -23,
	SCX_use_AUX_TABLE_24 = -24,
	SCX_use_AUX_TABLE_25 = -25,
	SCX_use_AUX_TABLE_26 = -26,
	SCX_use_AUX_TABLE_27 = -27,
	SCX_use_AUX_TABLE_28 = -28,
	SCX_use_AUX_TABLE_29 = -29,
	SCX_use_AUX_TABLE_30 = -30,
	SCX_use_AUX_TABLE_31 = -31,
	SCX_use_AUX_TABLE_32 = -32,
	SCX_use_AUX_TABLE_33 = -33,
	SCX_use_AUX_TABLE_34 = -34,
	SCX_use_AUX_TABLE_35 = -35,
	SCX_use_AUX_TABLE_36 = -36,
	SCX_use_AUX_TABLE_37 = -37,
	SCX_use_AUX_TABLE_38 = -38,
	SCX_use_AUX_TABLE_39 = -39,
	SCX_use_AUX_TABLE_40 = -40,
	SCX_use_AUX_TABLE_41 = -41,
	SCX_use_AUX_TABLE_42 = -42,
	SCX_use_AUX_TABLE_43 = -43,
	SCX_use_AUX_TABLE_44 = -44,
	SCX_use_AUX_TABLE_45 = -45
} SCX_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_SCX_AUX_TABLES

static const SCX_enum SCX_AUX_TABLE_1[] = {
	SCX_Bopomofo,
	SCX_Hanb
};

static const SCX_enum SCX_AUX_TABLE_2[] = {
	SCX_Cyrillic,
	SCX_Old_Permic
};

static const SCX_enum SCX_AUX_TABLE_3[] = {
	SCX_Cyrillic,
	SCX_Glagolitic
};

static const SCX_enum SCX_AUX_TABLE_4[] = {
	SCX_Cyrillic,
	SCX_Latin
};

static const SCX_enum SCX_AUX_TABLE_5[] = {
	SCX_Armenian,
	SCX_Georgian
};

static const SCX_enum SCX_AUX_TABLE_6[] = {
	SCX_Arabic,
	SCX_Syriac,
	SCX_Thaana
};

static const SCX_enum SCX_AUX_TABLE_7[] = {
	SCX_Adlam,
	SCX_Arabic,
	SCX_Mandaic,
	SCX_Manichaean,
	SCX_Psalter_Pahlavi,
	SCX_Syriac
};

static const SCX_enum SCX_AUX_TABLE_8[] = {
	SCX_Arabic,
	SCX_Syriac
};

static const SCX_enum SCX_AUX_TABLE_9[] = {
	SCX_Arabic,
	SCX_Thaana
};

static const SCX_enum SCX_AUX_TABLE_10[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Latin,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Sharada,
	SCX_Tamil,
	SCX_Telugu
};

static const SCX_enum SCX_AUX_TABLE_11[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Latin,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Tamil,
	SCX_Telugu
};

static const SCX_enum SCX_AUX_TABLE_12[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Khudawadi,
	SCX_Mahajani,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Sinhala,
	SCX_Syloti_Nagri,
	SCX_Takri,
	SCX_Tamil,
	SCX_Telugu,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_13[] = {
	SCX_Bengali,
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kannada,
	SCX_Khudawadi,
	SCX_Limbu,
	SCX_Mahajani,
	SCX_Malayalam,
	SCX_Oriya,
	SCX_Sinhala,
	SCX_Syloti_Nagri,
	SCX_Takri,
	SCX_Tamil,
	SCX_Telugu,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_14[] = {
	SCX_Devanagari,
	SCX_Kaithi,
	SCX_Mahajani
};

static const SCX_enum SCX_AUX_TABLE_15[] = {
	SCX_Bengali,
	SCX_Chakma,
	SCX_Syloti_Nagri
};

static const SCX_enum SCX_AUX_TABLE_16[] = {
	SCX_Gurmukhi,
	SCX_Multani
};

static const SCX_enum SCX_AUX_TABLE_17[] = {
	SCX_Gujarati,
	SCX_Khojki
};

static const SCX_enum SCX_AUX_TABLE_18[] = {
	SCX_Grantha,
	SCX_Tamil
};

static const SCX_enum SCX_AUX_TABLE_19[] = {
	SCX_Chakma,
	SCX_Myanmar,
	SCX_Tai_Le
};

static const SCX_enum SCX_AUX_TABLE_20[] = {
	SCX_Georgian,
	SCX_Latin
};

static const SCX_enum SCX_AUX_TABLE_21[] = {
	SCX_Hangul,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_22[] = {
	SCX_Buhid,
	SCX_Hanunoo,
	SCX_Tagalog,
	SCX_Tagbanwa
};

static const SCX_enum SCX_AUX_TABLE_23[] = {
	SCX_Mongolian,
	SCX_Phags_Pa
};

static const SCX_enum SCX_AUX_TABLE_24[] = {
	SCX_Devanagari,
	SCX_Grantha
};

static const SCX_enum SCX_AUX_TABLE_25[] = {
	SCX_Devanagari,
	SCX_Sharada
};

static const SCX_enum SCX_AUX_TABLE_26[] = {
	SCX_Devanagari,
	SCX_Kannada,
	SCX_Malayalam,
	SCX_Tamil,
	SCX_Telugu
};

static const SCX_enum SCX_AUX_TABLE_27[] = {
	SCX_Devanagari,
	SCX_Kannada
};

static const SCX_enum SCX_AUX_TABLE_28[] = {
	SCX_Devanagari,
	SCX_Grantha,
	SCX_Latin
};

static const SCX_enum SCX_AUX_TABLE_29[] = {
	SCX_Han,
	SCX_Hanb,
	SCX_Jpan,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_30[] = {
	SCX_Bopomofo,
	SCX_Han,
	SCX_Hanb,
	SCX_Hangul,
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana,
	SCX_Kore,
	SCX_Yi
};

static const SCX_enum SCX_AUX_TABLE_31[] = {
	SCX_Bopomofo,
	SCX_Han,
	SCX_Hanb,
	SCX_Hangul,
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_32[] = {
	SCX_Bopomofo,
	SCX_Han,
	SCX_Hanb,
	SCX_Jpan,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_33[] = {
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana
};

static const SCX_enum SCX_AUX_TABLE_34[] = {
	SCX_Han,
	SCX_Hanb,
	SCX_Hiragana,
	SCX_Jpan,
	SCX_Katakana,
	SCX_Kore
};

static const SCX_enum SCX_AUX_TABLE_35[] = {
	SCX_Hiragana,
	SCX_Jpan
};

static const SCX_enum SCX_AUX_TABLE_36[] = {
	SCX_Jpan,
	SCX_Katakana
};

static const SCX_enum SCX_AUX_TABLE_37[] = {
	SCX_Devanagari,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kaithi,
	SCX_Kannada,
	SCX_Khudawadi,
	SCX_Mahajani,
	SCX_Modi,
	SCX_Takri,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_38[] = {
	SCX_Devanagari,
	SCX_Gujarati,
	SCX_Gurmukhi,
	SCX_Kaithi,
	SCX_Khudawadi,
	SCX_Mahajani,
	SCX_Modi,
	SCX_Takri,
	SCX_Tirhuta
};

static const SCX_enum SCX_AUX_TABLE_39[] = {
	SCX_Bengali,
	SCX_Devanagari
};

static const SCX_enum SCX_AUX_TABLE_40[] = {
	SCX_Devanagari,
	SCX_Tamil
};

static const SCX_enum SCX_AUX_TABLE_41[] = {
	SCX_Kayah_Li,
	SCX_Latin,
	SCX_Myanmar
};

static const SCX_enum SCX_AUX_TABLE_42[] = {
	SCX_Buginese,
	SCX_Javanese
};

static const SCX_enum SCX_AUX_TABLE_43[] = {
	SCX_Cypriot,
	SCX_Linear_B
};

static const SCX_enum SCX_AUX_TABLE_44[] = {
	SCX_Cypriot,
	SCX_Linear_A,
	SCX_Linear_B
};

static const SCX_enum SCX_AUX_TABLE_45[] = {
	SCX_Arabic,
	SCX_Coptic
};

static const SCX_enum * const SCX_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	SCX_AUX_TABLE_1,
	SCX_AUX_TABLE_2,
	SCX_AUX_TABLE_3,
	SCX_AUX_TABLE_4,
	SCX_AUX_TABLE_5,
	SCX_AUX_TABLE_6,
	SCX_AUX_TABLE_7,
	SCX_AUX_TABLE_8,
	SCX_AUX_TABLE_9,
	SCX_AUX_TABLE_10,
	SCX_AUX_TABLE_11,
	SCX_AUX_TABLE_12,
	SCX_AUX_TABLE_13,
	SCX_AUX_TABLE_14,
	SCX_AUX_TABLE_15,
	SCX_AUX_TABLE_16,
	SCX_AUX_TABLE_17,
	SCX_AUX_TABLE_18,
	SCX_AUX_TABLE_19,
	SCX_AUX_TABLE_20,
	SCX_AUX_TABLE_21,
	SCX_AUX_TABLE_22,
	SCX_AUX_TABLE_23,
	SCX_AUX_TABLE_24,
	SCX_AUX_TABLE_25,
	SCX_AUX_TABLE_26,
	SCX_AUX_TABLE_27,
	SCX_AUX_TABLE_28,
	SCX_AUX_TABLE_29,
	SCX_AUX_TABLE_30,
	SCX_AUX_TABLE_31,
	SCX_AUX_TABLE_32,
	SCX_AUX_TABLE_33,
	SCX_AUX_TABLE_34,
	SCX_AUX_TABLE_35,
	SCX_AUX_TABLE_36,
	SCX_AUX_TABLE_37,
	SCX_AUX_TABLE_38,
	SCX_AUX_TABLE_39,
	SCX_AUX_TABLE_40,
	SCX_AUX_TABLE_41,
	SCX_AUX_TABLE_42,
	SCX_AUX_TABLE_43,
	SCX_AUX_TABLE_44,
	SCX_AUX_TABLE_45
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 SCX_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* SCX_AUX_TABLE_1 */,
	2	/* SCX_AUX_TABLE_2 */,
	2	/* SCX_AUX_TABLE_3 */,
	2	/* SCX_AUX_TABLE_4 */,
	2	/* SCX_AUX_TABLE_5 */,
	3	/* SCX_AUX_TABLE_6 */,
	6	/* SCX_AUX_TABLE_7 */,
	2	/* SCX_AUX_TABLE_8 */,
	2	/* SCX_AUX_TABLE_9 */,
	12	/* SCX_AUX_TABLE_10 */,
	11	/* SCX_AUX_TABLE_11 */,
	16	/* SCX_AUX_TABLE_12 */,
	17	/* SCX_AUX_TABLE_13 */,
	3	/* SCX_AUX_TABLE_14 */,
	3	/* SCX_AUX_TABLE_15 */,
	2	/* SCX_AUX_TABLE_16 */,
	2	/* SCX_AUX_TABLE_17 */,
	2	/* SCX_AUX_TABLE_18 */,
	3	/* SCX_AUX_TABLE_19 */,
	2	/* SCX_AUX_TABLE_20 */,
	2	/* SCX_AUX_TABLE_21 */,
	4	/* SCX_AUX_TABLE_22 */,
	2	/* SCX_AUX_TABLE_23 */,
	2	/* SCX_AUX_TABLE_24 */,
	2	/* SCX_AUX_TABLE_25 */,
	5	/* SCX_AUX_TABLE_26 */,
	2	/* SCX_AUX_TABLE_27 */,
	3	/* SCX_AUX_TABLE_28 */,
	4	/* SCX_AUX_TABLE_29 */,
	9	/* SCX_AUX_TABLE_30 */,
	8	/* SCX_AUX_TABLE_31 */,
	5	/* SCX_AUX_TABLE_32 */,
	3	/* SCX_AUX_TABLE_33 */,
	6	/* SCX_AUX_TABLE_34 */,
	2	/* SCX_AUX_TABLE_35 */,
	2	/* SCX_AUX_TABLE_36 */,
	10	/* SCX_AUX_TABLE_37 */,
	9	/* SCX_AUX_TABLE_38 */,
	2	/* SCX_AUX_TABLE_39 */,
	2	/* SCX_AUX_TABLE_40 */,
	3	/* SCX_AUX_TABLE_41 */,
	2	/* SCX_AUX_TABLE_42 */,
	2	/* SCX_AUX_TABLE_43 */,
	3	/* SCX_AUX_TABLE_44 */,
	2	/* SCX_AUX_TABLE_45 */
};

/* This table, indexed by the script enum, gives the zero code point for that
 * script; 0 if the script has multiple digit sequences.  Scripts without a
 * digit sequence use ASCII [0-9], hence are marked '0' */
static const UV script_zeros[] = {
	'0',	/* Unknown */
	0x1e950,	/* Adlam */
	0x11730,	/* Ahom */
	'0',	/* Anatolian_Hieroglyphs */
	 0,	/* Arabic */
	'0',	/* Armenian */
	'0',	/* Avestan */
	0x1b50,	/* Balinese */
	'0',	/* Bamum */
	'0',	/* Bassa_Vah */
	'0',	/* Batak */
	0x9e6,	/* Bengali */
	0x11c50,	/* Bhaiksuki */
	'0',	/* Bopomofo */
	0x11066,	/* Brahmi */
	'0',	/* Braille */
	'0',	/* Buginese */
	'0',	/* Buhid */
	'0',	/* Canadian_Aboriginal */
	'0',	/* Carian */
	'0',	/* Caucasian_Albanian */
	 0,	/* Chakma */
	0xaa50,	/* Cham */
	'0',	/* Cherokee */
	 0,	/* Common */
	'0',	/* Coptic */
	'0',	/* Cuneiform */
	'0',	/* Cypriot */
	'0',	/* Cyrillic */
	'0',	/* Deseret */
	0x966,	/* Devanagari */
	'0',	/* Duployan */
	'0',	/* Egyptian_Hieroglyphs */
	'0',	/* Elbasan */
	'0',	/* Ethiopic */
	'0',	/* Georgian */
	'0',	/* Glagolitic */
	'0',	/* Gothic */
	0xbe6,	/* Grantha */
	'0',	/* Greek */
	0xae6,	/* Gujarati */
	0xa66,	/* Gurmukhi */
	'0',	/* Han */
	'0',	/* Hanb */
	'0',	/* Hangul */
	'0',	/* Hanunoo */
	'0',	/* Hatran */
	'0',	/* Hebrew */
	'0',	/* Hiragana */
	'0',	/* Imperial_Aramaic */
	 0,	/* Inherited */
	'0',	/* Inscriptional_Pahlavi */
	'0',	/* Inscriptional_Parthian */
	0xa9d0,	/* Javanese */
	'0',	/* Jpan */
	0x966,	/* Kaithi */
	0xce6,	/* Kannada */
	'0',	/* Katakana */
	0xa900,	/* Kayah_Li */
	'0',	/* Kharoshthi */
	0x17e0,	/* Khmer */
	0xae6,	/* Khojki */
	0x112f0,	/* Khudawadi */
	'0',	/* Kore */
	0xed0,	/* Lao */
	'0',	/* Latin */
	0x1c40,	/* Lepcha */
	0x1946,	/* Limbu */
	'0',	/* Linear_A */
	'0',	/* Linear_B */
	'0',	/* Lisu */
	'0',	/* Lycian */
	'0',	/* Lydian */
	0x966,	/* Mahajani */
	0xd66,	/* Malayalam */
	'0',	/* Mandaic */
	'0',	/* Manichaean */
	'0',	/* Marchen */
	0x11d50,	/* Masaram_Gondi */
	0xabf0,	/* Meetei_Mayek */
	'0',	/* Mende_Kikakui */
	'0',	/* Meroitic_Cursive */
	'0',	/* Meroitic_Hieroglyphs */
	'0',	/* Miao */
	0x11650,	/* Modi */
	0x1810,	/* Mongolian */
	0x16a60,	/* Mro */
	0xa66,	/* Multani */
	 0,	/* Myanmar */
	'0',	/* Nabataean */
	0x19d0,	/* New_Tai_Lue */
	0x11450,	/* Newa */
	0x7c0,	/* Nko */
	'0',	/* Nushu */
	'0',	/* Ogham */
	0x1c50,	/* Ol_Chiki */
	'0',	/* Old_Hungarian */
	'0',	/* Old_Italic */
	'0',	/* Old_North_Arabian */
	'0',	/* Old_Permic */
	'0',	/* Old_Persian */
	'0',	/* Old_South_Arabian */
	'0',	/* Old_Turkic */
	0xb66,	/* Oriya */
	'0',	/* Osage */
	0x104a0,	/* Osmanya */
	0x16b50,	/* Pahawh_Hmong */
	'0',	/* Palmyrene */
	'0',	/* Pau_Cin_Hau */
	'0',	/* Phags_Pa */
	'0',	/* Phoenician */
	'0',	/* Psalter_Pahlavi */
	'0',	/* Rejang */
	'0',	/* Runic */
	'0',	/* Samaritan */
	0xa8d0,	/* Saurashtra */
	0x111d0,	/* Sharada */
	'0',	/* Shavian */
	'0',	/* Siddham */
	'0',	/* SignWriting */
	0xde6,	/* Sinhala */
	0x110f0,	/* Sora_Sompeng */
	'0',	/* Soyombo */
	0x1bb0,	/* Sundanese */
	0x9e6,	/* Syloti_Nagri */
	'0',	/* Syriac */
	'0',	/* Tagalog */
	'0',	/* Tagbanwa */
	0x1040,	/* Tai_Le */
	 0,	/* Tai_Tham */
	'0',	/* Tai_Viet */
	0x116c0,	/* Takri */
	0xbe6,	/* Tamil */
	'0',	/* Tangut */
	0xc66,	/* Telugu */
	0x660,	/* Thaana */
	0xe50,	/* Thai */
	0xf20,	/* Tibetan */
	'0',	/* Tifinagh */
	0x114d0,	/* Tirhuta */
	'0',	/* Ugaritic */
	0xa620,	/* Vai */
	0x118e0	/* Warang_Citi */
};

static const SCX_enum _Perl_SCX_invmap[] = { /* for EBCDIC 037 */
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_use_AUX_TABLE_1,
	SCX_Common,
	SCX_Inherited,
	SCX_Greek,
	SCX_Inherited,
	SCX_Greek,
	SCX_Inherited,
	SCX_Latin,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Common,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Coptic,
	SCX_Greek,
	SCX_Cyrillic,
	SCX_use_AUX_TABLE_2,
	SCX_use_AUX_TABLE_3,
	SCX_use_AUX_TABLE_4,
	SCX_use_AUX_TABLE_3,
	SCX_Cyrillic,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_use_AUX_TABLE_5,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Common,
	SCX_Arabic,
	SCX_use_AUX_TABLE_6,
	SCX_Arabic,
	SCX_use_AUX_TABLE_6,
	SCX_Unknown,
	SCX_Arabic,
	SCX_use_AUX_TABLE_6,
	SCX_Arabic,
	SCX_use_AUX_TABLE_7,
	SCX_Arabic,
	SCX_use_AUX_TABLE_8,
	SCX_Arabic,
	SCX_use_AUX_TABLE_9,
	SCX_Arabic,
	SCX_use_AUX_TABLE_8,
	SCX_Arabic,
	SCX_Common,
	SCX_Arabic,
	SCX_Syriac,
	SCX_Unknown,
	SCX_Syriac,
	SCX_Unknown,
	SCX_Syriac,
	SCX_Arabic,
	SCX_Thaana,
	SCX_Unknown,
	SCX_Nko,
	SCX_Unknown,
	SCX_Samaritan,
	SCX_Unknown,
	SCX_Samaritan,
	SCX_Unknown,
	SCX_Mandaic,
	SCX_Unknown,
	SCX_Mandaic,
	SCX_Unknown,
	SCX_Syriac,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Common,
	SCX_Arabic,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_10,
	SCX_use_AUX_TABLE_11,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_12,
	SCX_use_AUX_TABLE_13,
	SCX_use_AUX_TABLE_14,
	SCX_Devanagari,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Bengali,
	SCX_Unknown,
	SCX_use_AUX_TABLE_15,
	SCX_Bengali,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_use_AUX_TABLE_16,
	SCX_Gurmukhi,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_use_AUX_TABLE_17,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Gujarati,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Oriya,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_use_AUX_TABLE_18,
	SCX_Unknown,
	SCX_Tamil,
	SCX_use_AUX_TABLE_18,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Tamil,
	SCX_Unknown,
	SCX_use_AUX_TABLE_18,
	SCX_Tamil,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Unknown,
	SCX_Telugu,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Kannada,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Malayalam,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Thai,
	SCX_Unknown,
	SCX_Common,
	SCX_Thai,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Lao,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Tibetan,
	SCX_Common,
	SCX_Tibetan,
	SCX_Unknown,
	SCX_Myanmar,
	SCX_use_AUX_TABLE_19,
	SCX_Myanmar,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_use_AUX_TABLE_20,
	SCX_Georgian,
	SCX_use_AUX_TABLE_21,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Cherokee,
	SCX_Unknown,
	SCX_Cherokee,
	SCX_Unknown,
	SCX_Canadian_Aboriginal,
	SCX_Ogham,
	SCX_Unknown,
	SCX_Runic,
	SCX_Common,
	SCX_Runic,
	SCX_Unknown,
	SCX_Tagalog,
	SCX_Unknown,
	SCX_Tagalog,
	SCX_Unknown,
	SCX_Hanunoo,
	SCX_use_AUX_TABLE_22,
	SCX_Unknown,
	SCX_Buhid,
	SCX_Unknown,
	SCX_Tagbanwa,
	SCX_Unknown,
	SCX_Tagbanwa,
	SCX_Unknown,
	SCX_Tagbanwa,
	SCX_Unknown,
	SCX_Khmer,
	SCX_Unknown,
	SCX_Khmer,
	SCX_Unknown,
	SCX_Khmer,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_use_AUX_TABLE_23,
	SCX_Mongolian,
	SCX_use_AUX_TABLE_23,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Canadian_Aboriginal,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Unknown,
	SCX_Limbu,
	SCX_Tai_Le,
	SCX_Unknown,
	SCX_Tai_Le,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Unknown,
	SCX_New_Tai_Lue,
	SCX_Khmer,
	SCX_Buginese,
	SCX_Unknown,
	SCX_Buginese,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Tai_Tham,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Unknown,
	SCX_Balinese,
	SCX_Unknown,
	SCX_Balinese,
	SCX_Unknown,
	SCX_Sundanese,
	SCX_Batak,
	SCX_Unknown,
	SCX_Batak,
	SCX_Lepcha,
	SCX_Unknown,
	SCX_Lepcha,
	SCX_Unknown,
	SCX_Lepcha,
	SCX_Ol_Chiki,
	SCX_Cyrillic,
	SCX_Unknown,
	SCX_Sundanese,
	SCX_Unknown,
	SCX_use_AUX_TABLE_24,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_24,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_use_AUX_TABLE_26,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_25,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_24,
	SCX_use_AUX_TABLE_27,
	SCX_Devanagari,
	SCX_Bengali,
	SCX_use_AUX_TABLE_24,
	SCX_Unknown,
	SCX_Latin,
	SCX_Greek,
	SCX_Cyrillic,
	SCX_Latin,
	SCX_Greek,
	SCX_Latin,
	SCX_Greek,
	SCX_Latin,
	SCX_Cyrillic,
	SCX_Latin,
	SCX_Greek,
	SCX_Inherited,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Latin,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Unknown,
	SCX_Latin,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Inherited,
	SCX_use_AUX_TABLE_28,
	SCX_Unknown,
	SCX_Common,
	SCX_Greek,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Braille,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Latin,
	SCX_Coptic,
	SCX_Unknown,
	SCX_Coptic,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Georgian,
	SCX_Unknown,
	SCX_Tifinagh,
	SCX_Unknown,
	SCX_Tifinagh,
	SCX_Unknown,
	SCX_Tifinagh,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Cyrillic,
	SCX_Common,
	SCX_use_AUX_TABLE_3,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_31,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_30,
	SCX_Common,
	SCX_use_AUX_TABLE_31,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_31,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_32,
	SCX_use_AUX_TABLE_21,
	SCX_use_AUX_TABLE_31,
	SCX_use_AUX_TABLE_33,
	SCX_Common,
	SCX_use_AUX_TABLE_31,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_34,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_35,
	SCX_Unknown,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_35,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_36,
	SCX_Unknown,
	SCX_use_AUX_TABLE_1,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_use_AUX_TABLE_1,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_21,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_36,
	SCX_Unknown,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Yi,
	SCX_Unknown,
	SCX_Yi,
	SCX_Unknown,
	SCX_Lisu,
	SCX_Vai,
	SCX_Unknown,
	SCX_Cyrillic,
	SCX_use_AUX_TABLE_3,
	SCX_Cyrillic,
	SCX_Bamum,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Unknown,
	SCX_Latin,
	SCX_Unknown,
	SCX_Latin,
	SCX_Syloti_Nagri,
	SCX_Unknown,
	SCX_use_AUX_TABLE_37,
	SCX_use_AUX_TABLE_38,
	SCX_Unknown,
	SCX_Phags_Pa,
	SCX_Unknown,
	SCX_Saurashtra,
	SCX_Unknown,
	SCX_Saurashtra,
	SCX_Unknown,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_39,
	SCX_Devanagari,
	SCX_use_AUX_TABLE_40,
	SCX_Devanagari,
	SCX_Unknown,
	SCX_Kayah_Li,
	SCX_use_AUX_TABLE_41,
	SCX_Kayah_Li,
	SCX_Rejang,
	SCX_Unknown,
	SCX_Rejang,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_Javanese,
	SCX_Unknown,
	SCX_use_AUX_TABLE_42,
	SCX_Javanese,
	SCX_Unknown,
	SCX_Javanese,
	SCX_Myanmar,
	SCX_Unknown,
	SCX_Cham,
	SCX_Unknown,
	SCX_Cham,
	SCX_Unknown,
	SCX_Cham,
	SCX_Unknown,
	SCX_Cham,
	SCX_Myanmar,
	SCX_Tai_Viet,
	SCX_Unknown,
	SCX_Tai_Viet,
	SCX_Meetei_Mayek,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Ethiopic,
	SCX_Unknown,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Greek,
	SCX_Unknown,
	SCX_Cherokee,
	SCX_Meetei_Mayek,
	SCX_Unknown,
	SCX_Meetei_Mayek,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Latin,
	SCX_Unknown,
	SCX_Armenian,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Unknown,
	SCX_Hebrew,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Common,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_use_AUX_TABLE_9,
	SCX_Arabic,
	SCX_use_AUX_TABLE_9,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Common,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Cyrillic,
	SCX_Common,
	SCX_use_AUX_TABLE_31,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_Latin,
	SCX_Common,
	SCX_use_AUX_TABLE_30,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_33,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_use_AUX_TABLE_21,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_Linear_B,
	SCX_Unknown,
	SCX_use_AUX_TABLE_43,
	SCX_Unknown,
	SCX_use_AUX_TABLE_44,
	SCX_Unknown,
	SCX_use_AUX_TABLE_43,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Inherited,
	SCX_Unknown,
	SCX_Lycian,
	SCX_Unknown,
	SCX_Carian,
	SCX_Unknown,
	SCX_use_AUX_TABLE_45,
	SCX_Unknown,
	SCX_Old_Italic,
	SCX_Unknown,
	SCX_Old_Italic,
	SCX_Gothic,
	SCX_Unknown,
	SCX_Old_Permic,
	SCX_Unknown,
	SCX_Ugaritic,
	SCX_Unknown,
	SCX_Ugaritic,
	SCX_Old_Persian,
	SCX_Unknown,
	SCX_Old_Persian,
	SCX_Unknown,
	SCX_Deseret,
	SCX_Shavian,
	SCX_Osmanya,
	SCX_Unknown,
	SCX_Osmanya,
	SCX_Unknown,
	SCX_Osage,
	SCX_Unknown,
	SCX_Osage,
	SCX_Unknown,
	SCX_Elbasan,
	SCX_Unknown,
	SCX_Caucasian_Albanian,
	SCX_Unknown,
	SCX_Caucasian_Albanian,
	SCX_Unknown,
	SCX_Linear_A,
	SCX_Unknown,
	SCX_Linear_A,
	SCX_Unknown,
	SCX_Linear_A,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Unknown,
	SCX_Cypriot,
	SCX_Imperial_Aramaic,
	SCX_Unknown,
	SCX_Imperial_Aramaic,
	SCX_Palmyrene,
	SCX_Nabataean,
	SCX_Unknown,
	SCX_Nabataean,
	SCX_Unknown,
	SCX_Hatran,
	SCX_Unknown,
	SCX_Hatran,
	SCX_Unknown,
	SCX_Hatran,
	SCX_Phoenician,
	SCX_Unknown,
	SCX_Phoenician,
	SCX_Lydian,
	SCX_Unknown,
	SCX_Lydian,
	SCX_Unknown,
	SCX_Meroitic_Hieroglyphs,
	SCX_Meroitic_Cursive,
	SCX_Unknown,
	SCX_Meroitic_Cursive,
	SCX_Unknown,
	SCX_Meroitic_Cursive,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Kharoshthi,
	SCX_Unknown,
	SCX_Old_South_Arabian,
	SCX_Old_North_Arabian,
	SCX_Unknown,
	SCX_Manichaean,
	SCX_Unknown,
	SCX_Manichaean,
	SCX_Unknown,
	SCX_Avestan,
	SCX_Unknown,
	SCX_Avestan,
	SCX_Inscriptional_Parthian,
	SCX_Unknown,
	SCX_Inscriptional_Parthian,
	SCX_Inscriptional_Pahlavi,
	SCX_Unknown,
	SCX_Inscriptional_Pahlavi,
	SCX_Psalter_Pahlavi,
	SCX_Unknown,
	SCX_Psalter_Pahlavi,
	SCX_Unknown,
	SCX_Psalter_Pahlavi,
	SCX_Unknown,
	SCX_Old_Turkic,
	SCX_Unknown,
	SCX_Old_Hungarian,
	SCX_Unknown,
	SCX_Old_Hungarian,
	SCX_Unknown,
	SCX_Old_Hungarian,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Brahmi,
	SCX_Unknown,
	SCX_Brahmi,
	SCX_Unknown,
	SCX_Brahmi,
	SCX_Kaithi,
	SCX_Unknown,
	SCX_Sora_Sompeng,
	SCX_Unknown,
	SCX_Sora_Sompeng,
	SCX_Unknown,
	SCX_Chakma,
	SCX_Unknown,
	SCX_Chakma,
	SCX_Unknown,
	SCX_Mahajani,
	SCX_Unknown,
	SCX_Sharada,
	SCX_Unknown,
	SCX_Sharada,
	SCX_Unknown,
	SCX_Sinhala,
	SCX_Unknown,
	SCX_Khojki,
	SCX_Unknown,
	SCX_Khojki,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Multani,
	SCX_Unknown,
	SCX_Khudawadi,
	SCX_Unknown,
	SCX_Khudawadi,
	SCX_Unknown,
	SCX_Grantha,
	SCX_use_AUX_TABLE_18,
	SCX_Grantha,
	SCX_use_AUX_TABLE_18,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_use_AUX_TABLE_18,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Grantha,
	SCX_Unknown,
	SCX_Newa,
	SCX_Unknown,
	SCX_Newa,
	SCX_Unknown,
	SCX_Newa,
	SCX_Unknown,
	SCX_Tirhuta,
	SCX_Unknown,
	SCX_Tirhuta,
	SCX_Unknown,
	SCX_Siddham,
	SCX_Unknown,
	SCX_Siddham,
	SCX_Unknown,
	SCX_Modi,
	SCX_Unknown,
	SCX_Modi,
	SCX_Unknown,
	SCX_Mongolian,
	SCX_Unknown,
	SCX_Takri,
	SCX_Unknown,
	SCX_Takri,
	SCX_Unknown,
	SCX_Ahom,
	SCX_Unknown,
	SCX_Ahom,
	SCX_Unknown,
	SCX_Ahom,
	SCX_Unknown,
	SCX_Warang_Citi,
	SCX_Unknown,
	SCX_Warang_Citi,
	SCX_Unknown,
	SCX_Zanabazar_Square,
	SCX_Unknown,
	SCX_Soyombo,
	SCX_Unknown,
	SCX_Soyombo,
	SCX_Unknown,
	SCX_Soyombo,
	SCX_Unknown,
	SCX_Pau_Cin_Hau,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Bhaiksuki,
	SCX_Unknown,
	SCX_Marchen,
	SCX_Unknown,
	SCX_Marchen,
	SCX_Unknown,
	SCX_Marchen,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Masaram_Gondi,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Cuneiform,
	SCX_Unknown,
	SCX_Egyptian_Hieroglyphs,
	SCX_Unknown,
	SCX_Anatolian_Hieroglyphs,
	SCX_Unknown,
	SCX_Bamum,
	SCX_Unknown,
	SCX_Mro,
	SCX_Unknown,
	SCX_Mro,
	SCX_Unknown,
	SCX_Mro,
	SCX_Unknown,
	SCX_Bassa_Vah,
	SCX_Unknown,
	SCX_Bassa_Vah,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Pahawh_Hmong,
	SCX_Unknown,
	SCX_Miao,
	SCX_Unknown,
	SCX_Miao,
	SCX_Unknown,
	SCX_Miao,
	SCX_Unknown,
	SCX_Tangut,
	SCX_Nushu,
	SCX_Unknown,
	SCX_Tangut,
	SCX_Unknown,
	SCX_Tangut,
	SCX_Unknown,
	SCX_use_AUX_TABLE_36,
	SCX_use_AUX_TABLE_35,
	SCX_Unknown,
	SCX_Nushu,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Duployan,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Inherited,
	SCX_Common,
	SCX_Unknown,
	SCX_Greek,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_SignWriting,
	SCX_Unknown,
	SCX_SignWriting,
	SCX_Unknown,
	SCX_SignWriting,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Glagolitic,
	SCX_Unknown,
	SCX_Mende_Kikakui,
	SCX_Unknown,
	SCX_Mende_Kikakui,
	SCX_Unknown,
	SCX_Adlam,
	SCX_Unknown,
	SCX_Adlam,
	SCX_Unknown,
	SCX_Adlam,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Arabic,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_use_AUX_TABLE_35,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_use_AUX_TABLE_29,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Common,
	SCX_Unknown,
	SCX_Inherited,
	SCX_Unknown
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV _Perl_WB_invlist[] = { /* for ASCII/Latin1 */
	1721,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x21,
	0x22,
	0x23,
	0x27,
	0x28,
	0x2C,
	0x2D,
	0x2E,
	0x2F,
	0x30,
	0x3A,
	0x3B,
	0x3C,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0xAA,
	0xAB,
	0xAD,
	0xAE,
	0xB5,
	0xB6,
	0xB7,
	0xB8,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2D8,
	0x2DE,
	0x2E5,
	0x2EC,
	0x300,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x203F,
	0x2041,
	0x2044,
	0x2045,
	0x2054,
	0x2055,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3000,
	0x3001,
	0x3005,
	0x3006,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA717,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE14,
	0xFE15,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1C,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1B000,
	0x1B001,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E944,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 65 /* ASCII/Latin1 */

typedef enum {
	WB_Other = 0,
	WB_ALetter = 1,
	WB_CR = 2,
	WB_Double_Quote = 3,
	WB_E_Base = 4,
	WB_E_Base_GAZ = 5,
	WB_E_Modifier = 6,
	WB_Extend = 7,
	WB_ExtendNumLet = 8,
	WB_Format = 9,
	WB_Glue_After_Zwj = 10,
	WB_Hebrew_Letter = 11,
	WB_Katakana = 12,
	WB_LF = 13,
	WB_MidLetter = 14,
	WB_MidNum = 15,
	WB_MidNumLet = 16,
	WB_Newline = 17,
	WB_Numeric = 18,
	WB_Perl_Tailored_HSpace = 19,
	WB_Regional_Indicator = 20,
	WB_Single_Quote = 21,
	WB_ZWJ = 22,
	WB_EDGE = 23,
	WB_UNKNOWN = 24
} WB_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const WB_enum _Perl_WB_invmap[] = { /* for ASCII/Latin1 */
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_LF,
	WB_Newline,
	WB_CR,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Double_Quote,
	WB_Other,
	WB_Single_Quote,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_Numeric,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Newline,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidNum,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidLetter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_MidLetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Extend,
	WB_ZWJ,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_Newline,
	WB_Format,
	WB_ExtendNumLet,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Format,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Extend,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_MidNum,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ExtendNumLet,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Regional_Indicator,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Modifier,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base_GAZ,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_WB_invlist[] = { /* for EBCDIC 1047 */
	1744,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x51,
	0x5A,
	0x5E,
	0x5F,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB3,
	0xB4,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2D8,
	0x2DE,
	0x2E5,
	0x2EC,
	0x300,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x203F,
	0x2041,
	0x2044,
	0x2045,
	0x2054,
	0x2055,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3000,
	0x3001,
	0x3005,
	0x3006,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA717,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE14,
	0xFE15,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1C,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1B000,
	0x1B001,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E944,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

typedef enum {
	WB_Other = 0,
	WB_ALetter = 1,
	WB_CR = 2,
	WB_Double_Quote = 3,
	WB_E_Base = 4,
	WB_E_Base_GAZ = 5,
	WB_E_Modifier = 6,
	WB_Extend = 7,
	WB_ExtendNumLet = 8,
	WB_Format = 9,
	WB_Glue_After_Zwj = 10,
	WB_Hebrew_Letter = 11,
	WB_Katakana = 12,
	WB_LF = 13,
	WB_MidLetter = 14,
	WB_MidNum = 15,
	WB_MidNumLet = 16,
	WB_Newline = 17,
	WB_Numeric = 18,
	WB_Perl_Tailored_HSpace = 19,
	WB_Regional_Indicator = 20,
	WB_Single_Quote = 21,
	WB_ZWJ = 22,
	WB_EDGE = 23,
	WB_UNKNOWN = 24
} WB_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const WB_enum _Perl_WB_invmap[] = { /* for EBCDIC 1047 */
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Newline,
	WB_CR,
	WB_Other,
	WB_LF,
	WB_Other,
	WB_Newline,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_Single_Quote,
	WB_Other,
	WB_Double_Quote,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Format,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidNum,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidLetter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_MidLetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Extend,
	WB_ZWJ,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_Newline,
	WB_Format,
	WB_ExtendNumLet,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Format,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Extend,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_MidNum,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ExtendNumLet,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Regional_Indicator,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Modifier,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base_GAZ,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV _Perl_WB_invlist[] = { /* for EBCDIC 037 */
	1740,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x51,
	0x5A,
	0x5E,
	0x5F,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB3,
	0xB4,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2D8,
	0x2DE,
	0x2E5,
	0x2EC,
	0x300,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x64B,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x66D,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x859,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x966,
	0x970,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E4,
	0x9E6,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD58,
	0xD5F,
	0xD62,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1715,
	0x1720,
	0x1732,
	0x1735,
	0x1740,
	0x1752,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BF4,
	0x1C00,
	0x1C24,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D00,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2000,
	0x200B,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x203F,
	0x2041,
	0x2044,
	0x2045,
	0x2054,
	0x2055,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3000,
	0x3001,
	0x3005,
	0x3006,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA717,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA90A,
	0xA926,
	0xA92E,
	0xA930,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9CF,
	0xA9D0,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA00,
	0xAA29,
	0xAA37,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAE0,
	0xAAEB,
	0xAAF0,
	0xAAF2,
	0xAAF5,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE14,
	0xFE15,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1C,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DC,
	0x115DE,
	0x11600,
	0x11630,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116AB,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118E0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1B000,
	0x1B001,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E944,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

typedef enum {
	WB_Other = 0,
	WB_ALetter = 1,
	WB_CR = 2,
	WB_Double_Quote = 3,
	WB_E_Base = 4,
	WB_E_Base_GAZ = 5,
	WB_E_Modifier = 6,
	WB_Extend = 7,
	WB_ExtendNumLet = 8,
	WB_Format = 9,
	WB_Glue_After_Zwj = 10,
	WB_Hebrew_Letter = 11,
	WB_Katakana = 12,
	WB_LF = 13,
	WB_MidLetter = 14,
	WB_MidNum = 15,
	WB_MidNumLet = 16,
	WB_Newline = 17,
	WB_Numeric = 18,
	WB_Perl_Tailored_HSpace = 19,
	WB_Regional_Indicator = 20,
	WB_Single_Quote = 21,
	WB_ZWJ = 22,
	WB_EDGE = 23,
	WB_UNKNOWN = 24
} WB_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const WB_enum _Perl_WB_invmap[] = { /* for EBCDIC 037 */
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Newline,
	WB_CR,
	WB_Other,
	WB_Newline,
	WB_Other,
	WB_LF,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_Single_Quote,
	WB_Other,
	WB_Double_Quote,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Format,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidNum,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_MidLetter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_MidLetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Perl_Tailored_HSpace,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Numeric,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_Extend,
	WB_ZWJ,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_Newline,
	WB_Format,
	WB_ExtendNumLet,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Format,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Perl_Tailored_HSpace,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Extend,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_Other,
	WB_Hebrew_Letter,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_MidNum,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ExtendNumLet,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_MidLetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidNum,
	WB_Other,
	WB_MidNumLet,
	WB_Other,
	WB_MidLetter,
	WB_MidNum,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ExtendNumLet,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Katakana,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Format,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_ALetter,
	WB_Extend,
	WB_Other,
	WB_Numeric,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_ALetter,
	WB_Other,
	WB_Regional_Indicator,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Modifier,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base_GAZ,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_Glue_After_Zwj,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_E_Base,
	WB_Other,
	WB_Format,
	WB_Other,
	WB_Extend,
	WB_Other,
	WB_Extend,
	WB_Other
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_REGEXEC_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV Simple_Case_Folding_invlist[] = { /* for ASCII/Latin1 */
	1266,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xB5,
	0xB6,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x179,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x182,
	0x183,
	0x184,
	0x185,
	0x186,
	0x187,
	0x188,
	0x189,
	0x18B,
	0x18C,
	0x18E,
	0x18F,
	0x190,
	0x191,
	0x192,
	0x193,
	0x194,
	0x195,
	0x196,
	0x197,
	0x198,
	0x199,
	0x19C,
	0x19D,
	0x19E,
	0x19F,
	0x1A0,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A7,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1AF,
	0x1B0,
	0x1B1,
	0x1B3,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B8,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F7,
	0x1F8,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23B,
	0x23C,
	0x23D,
	0x23E,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x244,
	0x245,
	0x246,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x345,
	0x346,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FA,
	0x3FB,
	0x3FD,
	0x400,
	0x410,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C1,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9B,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBA,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD8,
	0x1FDA,
	0x1FDC,
	0x1FE8,
	0x1FEA,
	0x1FEC,
	0x1FED,
	0x1FF8,
	0x1FFA,
	0x1FFC,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212B,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C63,
	0x2C64,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C6E,
	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xAB70,
	0xABC0,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const int Simple_Case_Folding_invmap[] = { /* for ASCII/Latin1 */
	0,
	0x61,
	0,
	0x3BC,
	0,
	0xE0,
	0,
	0xF8,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xFF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0x73,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x3B9,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	0,
	0x3B1,
	0,
	0x3C3,
	0,
	0x3C3,
	0,
	0x3D7,
	0x3B2,
	0x3B8,
	0,
	0x3C6,
	0x3C0,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3BA,
	0x3C1,
	0,
	0x3B8,
	0x3B5,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
	0,
	0x52F,
	0,
	0x561,
	0,
	0x2D00,
	0,
	0x2D27,
	0,
	0x2D2D,
	0,
	0x13F0,
	0,
	0x432,
	0x434,
	0x43E,
	0x441,
	0x442,
	0x44A,
	0x463,
	0xA64B,
	0,
	0x1E01,
	0,
	0x1E03,
	0,
	0x1E05,
	0,
	0x1E07,
	0,
	0x1E09,
	0,
	0x1E0B,
	0,
	0x1E0D,
	0,
	0x1E0F,
	0,
	0x1E11,
	0,
	0x1E13,
	0,
	0x1E15,
	0,
	0x1E17,
	0,
	0x1E19,
	0,
	0x1E1B,
	0,
	0x1E1D,
	0,
	0x1E1F,
	0,
	0x1E21,
	0,
	0x1E23,
	0,
	0x1E25,
	0,
	0x1E27,
	0,
	0x1E29,
	0,
	0x1E2B,
	0,
	0x1E2D,
	0,
	0x1E2F,
	0,
	0x1E31,
	0,
	0x1E33,
	0,
	0x1E35,
	0,
	0x1E37,
	0,
	0x1E39,
	0,
	0x1E3B,
	0,
	0x1E3D,
	0,
	0x1E3F,
	0,
	0x1E41,
	0,
	0x1E43,
	0,
	0x1E45,
	0,
	0x1E47,
	0,
	0x1E49,
	0,
	0x1E4B,
	0,
	0x1E4D,
	0,
	0x1E4F,
	0,
	0x1E51,
	0,
	0x1E53,
	0,
	0x1E55,
	0,
	0x1E57,
	0,
	0x1E59,
	0,
	0x1E5B,
	0,
	0x1E5D,
	0,
	0x1E5F,
	0,
	0x1E61,
	0,
	0x1E63,
	0,
	0x1E65,
	0,
	0x1E67,
	0,
	0x1E69,
	0,
	0x1E6B,
	0,
	0x1E6D,
	0,
	0x1E6F,
	0,
	0x1E71,
	0,
	0x1E73,
	0,
	0x1E75,
	0,
	0x1E77,
	0,
	0x1E79,
	0,
	0x1E7B,
	0,
	0x1E7D,
	0,
	0x1E7F,
	0,
	0x1E81,
	0,
	0x1E83,
	0,
	0x1E85,
	0,
	0x1E87,
	0,
	0x1E89,
	0,
	0x1E8B,
	0,
	0x1E8D,
	0,
	0x1E8F,
	0,
	0x1E91,
	0,
	0x1E93,
	0,
	0x1E95,
	0,
	0x1E61,
	0,
	0xDF,
	0,
	0x1EA1,
	0,
	0x1EA3,
	0,
	0x1EA5,
	0,
	0x1EA7,
	0,
	0x1EA9,
	0,
	0x1EAB,
	0,
	0x1EAD,
	0,
	0x1EAF,
	0,
	0x1EB1,
	0,
	0x1EB3,
	0,
	0x1EB5,
	0,
	0x1EB7,
	0,
	0x1EB9,
	0,
	0x1EBB,
	0,
	0x1EBD,
	0,
	0x1EBF,
	0,
	0x1EC1,
	0,
	0x1EC3,
	0,
	0x1EC5,
	0,
	0x1EC7,
	0,
	0x1EC9,
	0,
	0x1ECB,
	0,
	0x1ECD,
	0,
	0x1ECF,
	0,
	0x1ED1,
	0,
	0x1ED3,
	0,
	0x1ED5,
	0,
	0x1ED7,
	0,
	0x1ED9,
	0,
	0x1EDB,
	0,
	0x1EDD,
	0,
	0x1EDF,
	0,
	0x1EE1,
	0,
	0x1EE3,
	0,
	0x1EE5,
	0,
	0x1EE7,
	0,
	0x1EE9,
	0,
	0x1EEB,
	0,
	0x1EED,
	0,
	0x1EEF,
	0,
	0x1EF1,
	0,
	0x1EF3,
	0,
	0x1EF5,
	0,
	0x1EF7,
	0,
	0x1EF9,
	0,
	0x1EFB,
	0,
	0x1EFD,
	0,
	0x1EFF,
	0,
	0x1F00,
	0,
	0x1F10,
	0,
	0x1F20,
	0,
	0x1F30,
	0,
	0x1F40,
	0,
	0x1F51,
	0,
	0x1F53,
	0,
	0x1F55,
	0,
	0x1F57,
	0,
	0x1F60,
	0,
	0x1F80,
	0,
	0x1F90,
	0,
	0x1FA0,
	0,
	0x1FB0,
	0x1F70,
	0x1FB3,
	0,
	0x3B9,
	0,
	0x1F72,
	0x1FC3,
	0,
	0x1FD0,
	0x1F76,
	0,
	0x1FE0,
	0x1F7A,
	0x1FE5,
	0,
	0x1F78,
	0x1F7C,
	0x1FF3,
	0,
	0x3C9,
	0,
	0x6B,
	0xE5,
	0,
	0x214E,
	0,
	0x2170,
	0,
	0x2184,
	0,
	0x24D0,
	0,
	0x2C30,
	0,
	0x2C61,
	0,
	0x26B,
	0x1D7D,
	0x27D,
	0,
	0x2C68,
	0,
	0x2C6A,
	0,
	0x2C6C,
	0,
	0x251,
	0x271,
	0x250,
	0x252,
	0,
	0x2C73,
	0,
	0x2C76,
	0,
	0x23F,
	0x2C81,
	0,
	0x2C83,
	0,
	0x2C85,
	0,
	0x2C87,
	0,
	0x2C89,
	0,
	0x2C8B,
	0,
	0x2C8D,
	0,
	0x2C8F,
	0,
	0x2C91,
	0,
	0x2C93,
	0,
	0x2C95,
	0,
	0x2C97,
	0,
	0x2C99,
	0,
	0x2C9B,
	0,
	0x2C9D,
	0,
	0x2C9F,
	0,
	0x2CA1,
	0,
	0x2CA3,
	0,
	0x2CA5,
	0,
	0x2CA7,
	0,
	0x2CA9,
	0,
	0x2CAB,
	0,
	0x2CAD,
	0,
	0x2CAF,
	0,
	0x2CB1,
	0,
	0x2CB3,
	0,
	0x2CB5,
	0,
	0x2CB7,
	0,
	0x2CB9,
	0,
	0x2CBB,
	0,
	0x2CBD,
	0,
	0x2CBF,
	0,
	0x2CC1,
	0,
	0x2CC3,
	0,
	0x2CC5,
	0,
	0x2CC7,
	0,
	0x2CC9,
	0,
	0x2CCB,
	0,
	0x2CCD,
	0,
	0x2CCF,
	0,
	0x2CD1,
	0,
	0x2CD3,
	0,
	0x2CD5,
	0,
	0x2CD7,
	0,
	0x2CD9,
	0,
	0x2CDB,
	0,
	0x2CDD,
	0,
	0x2CDF,
	0,
	0x2CE1,
	0,
	0x2CE3,
	0,
	0x2CEC,
	0,
	0x2CEE,
	0,
	0x2CF3,
	0,
	0xA641,
	0,
	0xA643,
	0,
	0xA645,
	0,
	0xA647,
	0,
	0xA649,
	0,
	0xA64B,
	0,
	0xA64D,
	0,
	0xA64F,
	0,
	0xA651,
	0,
	0xA653,
	0,
	0xA655,
	0,
	0xA657,
	0,
	0xA659,
	0,
	0xA65B,
	0,
	0xA65D,
	0,
	0xA65F,
	0,
	0xA661,
	0,
	0xA663,
	0,
	0xA665,
	0,
	0xA667,
	0,
	0xA669,
	0,
	0xA66B,
	0,
	0xA66D,
	0,
	0xA681,
	0,
	0xA683,
	0,
	0xA685,
	0,
	0xA687,
	0,
	0xA689,
	0,
	0xA68B,
	0,
	0xA68D,
	0,
	0xA68F,
	0,
	0xA691,
	0,
	0xA693,
	0,
	0xA695,
	0,
	0xA697,
	0,
	0xA699,
	0,
	0xA69B,
	0,
	0xA723,
	0,
	0xA725,
	0,
	0xA727,
	0,
	0xA729,
	0,
	0xA72B,
	0,
	0xA72D,
	0,
	0xA72F,
	0,
	0xA733,
	0,
	0xA735,
	0,
	0xA737,
	0,
	0xA739,
	0,
	0xA73B,
	0,
	0xA73D,
	0,
	0xA73F,
	0,
	0xA741,
	0,
	0xA743,
	0,
	0xA745,
	0,
	0xA747,
	0,
	0xA749,
	0,
	0xA74B,
	0,
	0xA74D,
	0,
	0xA74F,
	0,
	0xA751,
	0,
	0xA753,
	0,
	0xA755,
	0,
	0xA757,
	0,
	0xA759,
	0,
	0xA75B,
	0,
	0xA75D,
	0,
	0xA75F,
	0,
	0xA761,
	0,
	0xA763,
	0,
	0xA765,
	0,
	0xA767,
	0,
	0xA769,
	0,
	0xA76B,
	0,
	0xA76D,
	0,
	0xA76F,
	0,
	0xA77A,
	0,
	0xA77C,
	0,
	0x1D79,
	0xA77F,
	0,
	0xA781,
	0,
	0xA783,
	0,
	0xA785,
	0,
	0xA787,
	0,
	0xA78C,
	0,
	0x265,
	0,
	0xA791,
	0,
	0xA793,
	0,
	0xA797,
	0,
	0xA799,
	0,
	0xA79B,
	0,
	0xA79D,
	0,
	0xA79F,
	0,
	0xA7A1,
	0,
	0xA7A3,
	0,
	0xA7A5,
	0,
	0xA7A7,
	0,
	0xA7A9,
	0,
	0x266,
	0x25C,
	0x261,
	0x26C,
	0x26A,
	0,
	0x29E,
	0x287,
	0x29D,
	0xAB53,
	0xA7B5,
	0,
	0xA7B7,
	0,
	0x13A0,
	0,
	0xFF41,
	0,
	0x10428,
	0,
	0x104D8,
	0,
	0x10CC0,
	0,
	0x118C0,
	0,
	0x1E922,
	0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Simple_Case_Folding_invlist[] = { /* for EBCDIC 1047 */
	1284,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x179,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x182,
	0x183,
	0x184,
	0x185,
	0x186,
	0x187,
	0x188,
	0x189,
	0x18B,
	0x18C,
	0x18E,
	0x18F,
	0x190,
	0x191,
	0x192,
	0x193,
	0x194,
	0x195,
	0x196,
	0x197,
	0x198,
	0x199,
	0x19C,
	0x19D,
	0x19E,
	0x19F,
	0x1A0,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A7,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1AF,
	0x1B0,
	0x1B1,
	0x1B3,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B8,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F7,
	0x1F8,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23B,
	0x23C,
	0x23D,
	0x23E,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x244,
	0x245,
	0x246,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x345,
	0x346,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FA,
	0x3FB,
	0x3FD,
	0x400,
	0x410,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C1,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9B,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBA,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD8,
	0x1FDA,
	0x1FDC,
	0x1FE8,
	0x1FEA,
	0x1FEC,
	0x1FED,
	0x1FF8,
	0x1FFA,
	0x1FFC,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212B,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C63,
	0x2C64,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C6E,
	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xAB70,
	0xABC0,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const int Simple_Case_Folding_invmap[] = { /* for EBCDIC 1047 */
	0,
	0x42,
	0,
	0x51,
	0,
	0x70,
	0,
	0x9C,
	0,
	0x3BC,
	0,
	0x8C,
	0,
	0x8E,
	0,
	0x8D,
	0,
	0x81,
	0,
	0x91,
	0,
	0xA2,
	0,
	0xCB,
	0,
	0xDB,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xDF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0xA2,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x3B9,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	0,
	0x3B1,
	0,
	0x3C3,
	0,
	0x3C3,
	0,
	0x3D7,
	0x3B2,
	0x3B8,
	0,
	0x3C6,
	0x3C0,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3BA,
	0x3C1,
	0,
	0x3B8,
	0x3B5,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
	0,
	0x52F,
	0,
	0x561,
	0,
	0x2D00,
	0,
	0x2D27,
	0,
	0x2D2D,
	0,
	0x13F0,
	0,
	0x432,
	0x434,
	0x43E,
	0x441,
	0x442,
	0x44A,
	0x463,
	0xA64B,
	0,
	0x1E01,
	0,
	0x1E03,
	0,
	0x1E05,
	0,
	0x1E07,
	0,
	0x1E09,
	0,
	0x1E0B,
	0,
	0x1E0D,
	0,
	0x1E0F,
	0,
	0x1E11,
	0,
	0x1E13,
	0,
	0x1E15,
	0,
	0x1E17,
	0,
	0x1E19,
	0,
	0x1E1B,
	0,
	0x1E1D,
	0,
	0x1E1F,
	0,
	0x1E21,
	0,
	0x1E23,
	0,
	0x1E25,
	0,
	0x1E27,
	0,
	0x1E29,
	0,
	0x1E2B,
	0,
	0x1E2D,
	0,
	0x1E2F,
	0,
	0x1E31,
	0,
	0x1E33,
	0,
	0x1E35,
	0,
	0x1E37,
	0,
	0x1E39,
	0,
	0x1E3B,
	0,
	0x1E3D,
	0,
	0x1E3F,
	0,
	0x1E41,
	0,
	0x1E43,
	0,
	0x1E45,
	0,
	0x1E47,
	0,
	0x1E49,
	0,
	0x1E4B,
	0,
	0x1E4D,
	0,
	0x1E4F,
	0,
	0x1E51,
	0,
	0x1E53,
	0,
	0x1E55,
	0,
	0x1E57,
	0,
	0x1E59,
	0,
	0x1E5B,
	0,
	0x1E5D,
	0,
	0x1E5F,
	0,
	0x1E61,
	0,
	0x1E63,
	0,
	0x1E65,
	0,
	0x1E67,
	0,
	0x1E69,
	0,
	0x1E6B,
	0,
	0x1E6D,
	0,
	0x1E6F,
	0,
	0x1E71,
	0,
	0x1E73,
	0,
	0x1E75,
	0,
	0x1E77,
	0,
	0x1E79,
	0,
	0x1E7B,
	0,
	0x1E7D,
	0,
	0x1E7F,
	0,
	0x1E81,
	0,
	0x1E83,
	0,
	0x1E85,
	0,
	0x1E87,
	0,
	0x1E89,
	0,
	0x1E8B,
	0,
	0x1E8D,
	0,
	0x1E8F,
	0,
	0x1E91,
	0,
	0x1E93,
	0,
	0x1E95,
	0,
	0x1E61,
	0,
	0x59,
	0,
	0x1EA1,
	0,
	0x1EA3,
	0,
	0x1EA5,
	0,
	0x1EA7,
	0,
	0x1EA9,
	0,
	0x1EAB,
	0,
	0x1EAD,
	0,
	0x1EAF,
	0,
	0x1EB1,
	0,
	0x1EB3,
	0,
	0x1EB5,
	0,
	0x1EB7,
	0,
	0x1EB9,
	0,
	0x1EBB,
	0,
	0x1EBD,
	0,
	0x1EBF,
	0,
	0x1EC1,
	0,
	0x1EC3,
	0,
	0x1EC5,
	0,
	0x1EC7,
	0,
	0x1EC9,
	0,
	0x1ECB,
	0,
	0x1ECD,
	0,
	0x1ECF,
	0,
	0x1ED1,
	0,
	0x1ED3,
	0,
	0x1ED5,
	0,
	0x1ED7,
	0,
	0x1ED9,
	0,
	0x1EDB,
	0,
	0x1EDD,
	0,
	0x1EDF,
	0,
	0x1EE1,
	0,
	0x1EE3,
	0,
	0x1EE5,
	0,
	0x1EE7,
	0,
	0x1EE9,
	0,
	0x1EEB,
	0,
	0x1EED,
	0,
	0x1EEF,
	0,
	0x1EF1,
	0,
	0x1EF3,
	0,
	0x1EF5,
	0,
	0x1EF7,
	0,
	0x1EF9,
	0,
	0x1EFB,
	0,
	0x1EFD,
	0,
	0x1EFF,
	0,
	0x1F00,
	0,
	0x1F10,
	0,
	0x1F20,
	0,
	0x1F30,
	0,
	0x1F40,
	0,
	0x1F51,
	0,
	0x1F53,
	0,
	0x1F55,
	0,
	0x1F57,
	0,
	0x1F60,
	0,
	0x1F80,
	0,
	0x1F90,
	0,
	0x1FA0,
	0,
	0x1FB0,
	0x1F70,
	0x1FB3,
	0,
	0x3B9,
	0,
	0x1F72,
	0x1FC3,
	0,
	0x1FD0,
	0x1F76,
	0,
	0x1FE0,
	0x1F7A,
	0x1FE5,
	0,
	0x1F78,
	0x1F7C,
	0x1FF3,
	0,
	0x3C9,
	0,
	0x92,
	0x47,
	0,
	0x214E,
	0,
	0x2170,
	0,
	0x2184,
	0,
	0x24D0,
	0,
	0x2C30,
	0,
	0x2C61,
	0,
	0x26B,
	0x1D7D,
	0x27D,
	0,
	0x2C68,
	0,
	0x2C6A,
	0,
	0x2C6C,
	0,
	0x251,
	0x271,
	0x250,
	0x252,
	0,
	0x2C73,
	0,
	0x2C76,
	0,
	0x23F,
	0x2C81,
	0,
	0x2C83,
	0,
	0x2C85,
	0,
	0x2C87,
	0,
	0x2C89,
	0,
	0x2C8B,
	0,
	0x2C8D,
	0,
	0x2C8F,
	0,
	0x2C91,
	0,
	0x2C93,
	0,
	0x2C95,
	0,
	0x2C97,
	0,
	0x2C99,
	0,
	0x2C9B,
	0,
	0x2C9D,
	0,
	0x2C9F,
	0,
	0x2CA1,
	0,
	0x2CA3,
	0,
	0x2CA5,
	0,
	0x2CA7,
	0,
	0x2CA9,
	0,
	0x2CAB,
	0,
	0x2CAD,
	0,
	0x2CAF,
	0,
	0x2CB1,
	0,
	0x2CB3,
	0,
	0x2CB5,
	0,
	0x2CB7,
	0,
	0x2CB9,
	0,
	0x2CBB,
	0,
	0x2CBD,
	0,
	0x2CBF,
	0,
	0x2CC1,
	0,
	0x2CC3,
	0,
	0x2CC5,
	0,
	0x2CC7,
	0,
	0x2CC9,
	0,
	0x2CCB,
	0,
	0x2CCD,
	0,
	0x2CCF,
	0,
	0x2CD1,
	0,
	0x2CD3,
	0,
	0x2CD5,
	0,
	0x2CD7,
	0,
	0x2CD9,
	0,
	0x2CDB,
	0,
	0x2CDD,
	0,
	0x2CDF,
	0,
	0x2CE1,
	0,
	0x2CE3,
	0,
	0x2CEC,
	0,
	0x2CEE,
	0,
	0x2CF3,
	0,
	0xA641,
	0,
	0xA643,
	0,
	0xA645,
	0,
	0xA647,
	0,
	0xA649,
	0,
	0xA64B,
	0,
	0xA64D,
	0,
	0xA64F,
	0,
	0xA651,
	0,
	0xA653,
	0,
	0xA655,
	0,
	0xA657,
	0,
	0xA659,
	0,
	0xA65B,
	0,
	0xA65D,
	0,
	0xA65F,
	0,
	0xA661,
	0,
	0xA663,
	0,
	0xA665,
	0,
	0xA667,
	0,
	0xA669,
	0,
	0xA66B,
	0,
	0xA66D,
	0,
	0xA681,
	0,
	0xA683,
	0,
	0xA685,
	0,
	0xA687,
	0,
	0xA689,
	0,
	0xA68B,
	0,
	0xA68D,
	0,
	0xA68F,
	0,
	0xA691,
	0,
	0xA693,
	0,
	0xA695,
	0,
	0xA697,
	0,
	0xA699,
	0,
	0xA69B,
	0,
	0xA723,
	0,
	0xA725,
	0,
	0xA727,
	0,
	0xA729,
	0,
	0xA72B,
	0,
	0xA72D,
	0,
	0xA72F,
	0,
	0xA733,
	0,
	0xA735,
	0,
	0xA737,
	0,
	0xA739,
	0,
	0xA73B,
	0,
	0xA73D,
	0,
	0xA73F,
	0,
	0xA741,
	0,
	0xA743,
	0,
	0xA745,
	0,
	0xA747,
	0,
	0xA749,
	0,
	0xA74B,
	0,
	0xA74D,
	0,
	0xA74F,
	0,
	0xA751,
	0,
	0xA753,
	0,
	0xA755,
	0,
	0xA757,
	0,
	0xA759,
	0,
	0xA75B,
	0,
	0xA75D,
	0,
	0xA75F,
	0,
	0xA761,
	0,
	0xA763,
	0,
	0xA765,
	0,
	0xA767,
	0,
	0xA769,
	0,
	0xA76B,
	0,
	0xA76D,
	0,
	0xA76F,
	0,
	0xA77A,
	0,
	0xA77C,
	0,
	0x1D79,
	0xA77F,
	0,
	0xA781,
	0,
	0xA783,
	0,
	0xA785,
	0,
	0xA787,
	0,
	0xA78C,
	0,
	0x265,
	0,
	0xA791,
	0,
	0xA793,
	0,
	0xA797,
	0,
	0xA799,
	0,
	0xA79B,
	0,
	0xA79D,
	0,
	0xA79F,
	0,
	0xA7A1,
	0,
	0xA7A3,
	0,
	0xA7A5,
	0,
	0xA7A7,
	0,
	0xA7A9,
	0,
	0x266,
	0x25C,
	0x261,
	0x26C,
	0x26A,
	0,
	0x29E,
	0x287,
	0x29D,
	0xAB53,
	0xA7B5,
	0,
	0xA7B7,
	0,
	0x13A0,
	0,
	0xFF41,
	0,
	0x10428,
	0,
	0x104D8,
	0,
	0x10CC0,
	0,
	0x118C0,
	0,
	0x1E922,
	0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Simple_Case_Folding_invlist[] = { /* for EBCDIC 037 */
	1280,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x179,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x182,
	0x183,
	0x184,
	0x185,
	0x186,
	0x187,
	0x188,
	0x189,
	0x18B,
	0x18C,
	0x18E,
	0x18F,
	0x190,
	0x191,
	0x192,
	0x193,
	0x194,
	0x195,
	0x196,
	0x197,
	0x198,
	0x199,
	0x19C,
	0x19D,
	0x19E,
	0x19F,
	0x1A0,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A7,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1AF,
	0x1B0,
	0x1B1,
	0x1B3,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B8,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F7,
	0x1F8,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23B,
	0x23C,
	0x23D,
	0x23E,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x244,
	0x245,
	0x246,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x345,
	0x346,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FA,
	0x3FB,
	0x3FD,
	0x400,
	0x410,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C1,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9B,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBA,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD8,
	0x1FDA,
	0x1FDC,
	0x1FE8,
	0x1FEA,
	0x1FEC,
	0x1FED,
	0x1FF8,
	0x1FFA,
	0x1FFC,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212B,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C63,
	0x2C64,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C6E,
	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xAB70,
	0xABC0,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const int Simple_Case_Folding_invmap[] = { /* for EBCDIC 037 */
	0,
	0x42,
	0,
	0x51,
	0,
	0x70,
	0,
	0x9C,
	0,
	0x3BC,
	0,
	0x8C,
	0,
	0x81,
	0,
	0x91,
	0,
	0xA2,
	0,
	0xCB,
	0,
	0xDB,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xDF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0xA2,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x3B9,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	0,
	0x3B1,
	0,
	0x3C3,
	0,
	0x3C3,
	0,
	0x3D7,
	0x3B2,
	0x3B8,
	0,
	0x3C6,
	0x3C0,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3BA,
	0x3C1,
	0,
	0x3B8,
	0x3B5,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
	0,
	0x52F,
	0,
	0x561,
	0,
	0x2D00,
	0,
	0x2D27,
	0,
	0x2D2D,
	0,
	0x13F0,
	0,
	0x432,
	0x434,
	0x43E,
	0x441,
	0x442,
	0x44A,
	0x463,
	0xA64B,
	0,
	0x1E01,
	0,
	0x1E03,
	0,
	0x1E05,
	0,
	0x1E07,
	0,
	0x1E09,
	0,
	0x1E0B,
	0,
	0x1E0D,
	0,
	0x1E0F,
	0,
	0x1E11,
	0,
	0x1E13,
	0,
	0x1E15,
	0,
	0x1E17,
	0,
	0x1E19,
	0,
	0x1E1B,
	0,
	0x1E1D,
	0,
	0x1E1F,
	0,
	0x1E21,
	0,
	0x1E23,
	0,
	0x1E25,
	0,
	0x1E27,
	0,
	0x1E29,
	0,
	0x1E2B,
	0,
	0x1E2D,
	0,
	0x1E2F,
	0,
	0x1E31,
	0,
	0x1E33,
	0,
	0x1E35,
	0,
	0x1E37,
	0,
	0x1E39,
	0,
	0x1E3B,
	0,
	0x1E3D,
	0,
	0x1E3F,
	0,
	0x1E41,
	0,
	0x1E43,
	0,
	0x1E45,
	0,
	0x1E47,
	0,
	0x1E49,
	0,
	0x1E4B,
	0,
	0x1E4D,
	0,
	0x1E4F,
	0,
	0x1E51,
	0,
	0x1E53,
	0,
	0x1E55,
	0,
	0x1E57,
	0,
	0x1E59,
	0,
	0x1E5B,
	0,
	0x1E5D,
	0,
	0x1E5F,
	0,
	0x1E61,
	0,
	0x1E63,
	0,
	0x1E65,
	0,
	0x1E67,
	0,
	0x1E69,
	0,
	0x1E6B,
	0,
	0x1E6D,
	0,
	0x1E6F,
	0,
	0x1E71,
	0,
	0x1E73,
	0,
	0x1E75,
	0,
	0x1E77,
	0,
	0x1E79,
	0,
	0x1E7B,
	0,
	0x1E7D,
	0,
	0x1E7F,
	0,
	0x1E81,
	0,
	0x1E83,
	0,
	0x1E85,
	0,
	0x1E87,
	0,
	0x1E89,
	0,
	0x1E8B,
	0,
	0x1E8D,
	0,
	0x1E8F,
	0,
	0x1E91,
	0,
	0x1E93,
	0,
	0x1E95,
	0,
	0x1E61,
	0,
	0x59,
	0,
	0x1EA1,
	0,
	0x1EA3,
	0,
	0x1EA5,
	0,
	0x1EA7,
	0,
	0x1EA9,
	0,
	0x1EAB,
	0,
	0x1EAD,
	0,
	0x1EAF,
	0,
	0x1EB1,
	0,
	0x1EB3,
	0,
	0x1EB5,
	0,
	0x1EB7,
	0,
	0x1EB9,
	0,
	0x1EBB,
	0,
	0x1EBD,
	0,
	0x1EBF,
	0,
	0x1EC1,
	0,
	0x1EC3,
	0,
	0x1EC5,
	0,
	0x1EC7,
	0,
	0x1EC9,
	0,
	0x1ECB,
	0,
	0x1ECD,
	0,
	0x1ECF,
	0,
	0x1ED1,
	0,
	0x1ED3,
	0,
	0x1ED5,
	0,
	0x1ED7,
	0,
	0x1ED9,
	0,
	0x1EDB,
	0,
	0x1EDD,
	0,
	0x1EDF,
	0,
	0x1EE1,
	0,
	0x1EE3,
	0,
	0x1EE5,
	0,
	0x1EE7,
	0,
	0x1EE9,
	0,
	0x1EEB,
	0,
	0x1EED,
	0,
	0x1EEF,
	0,
	0x1EF1,
	0,
	0x1EF3,
	0,
	0x1EF5,
	0,
	0x1EF7,
	0,
	0x1EF9,
	0,
	0x1EFB,
	0,
	0x1EFD,
	0,
	0x1EFF,
	0,
	0x1F00,
	0,
	0x1F10,
	0,
	0x1F20,
	0,
	0x1F30,
	0,
	0x1F40,
	0,
	0x1F51,
	0,
	0x1F53,
	0,
	0x1F55,
	0,
	0x1F57,
	0,
	0x1F60,
	0,
	0x1F80,
	0,
	0x1F90,
	0,
	0x1FA0,
	0,
	0x1FB0,
	0x1F70,
	0x1FB3,
	0,
	0x3B9,
	0,
	0x1F72,
	0x1FC3,
	0,
	0x1FD0,
	0x1F76,
	0,
	0x1FE0,
	0x1F7A,
	0x1FE5,
	0,
	0x1F78,
	0x1F7C,
	0x1FF3,
	0,
	0x3C9,
	0,
	0x92,
	0x47,
	0,
	0x214E,
	0,
	0x2170,
	0,
	0x2184,
	0,
	0x24D0,
	0,
	0x2C30,
	0,
	0x2C61,
	0,
	0x26B,
	0x1D7D,
	0x27D,
	0,
	0x2C68,
	0,
	0x2C6A,
	0,
	0x2C6C,
	0,
	0x251,
	0x271,
	0x250,
	0x252,
	0,
	0x2C73,
	0,
	0x2C76,
	0,
	0x23F,
	0x2C81,
	0,
	0x2C83,
	0,
	0x2C85,
	0,
	0x2C87,
	0,
	0x2C89,
	0,
	0x2C8B,
	0,
	0x2C8D,
	0,
	0x2C8F,
	0,
	0x2C91,
	0,
	0x2C93,
	0,
	0x2C95,
	0,
	0x2C97,
	0,
	0x2C99,
	0,
	0x2C9B,
	0,
	0x2C9D,
	0,
	0x2C9F,
	0,
	0x2CA1,
	0,
	0x2CA3,
	0,
	0x2CA5,
	0,
	0x2CA7,
	0,
	0x2CA9,
	0,
	0x2CAB,
	0,
	0x2CAD,
	0,
	0x2CAF,
	0,
	0x2CB1,
	0,
	0x2CB3,
	0,
	0x2CB5,
	0,
	0x2CB7,
	0,
	0x2CB9,
	0,
	0x2CBB,
	0,
	0x2CBD,
	0,
	0x2CBF,
	0,
	0x2CC1,
	0,
	0x2CC3,
	0,
	0x2CC5,
	0,
	0x2CC7,
	0,
	0x2CC9,
	0,
	0x2CCB,
	0,
	0x2CCD,
	0,
	0x2CCF,
	0,
	0x2CD1,
	0,
	0x2CD3,
	0,
	0x2CD5,
	0,
	0x2CD7,
	0,
	0x2CD9,
	0,
	0x2CDB,
	0,
	0x2CDD,
	0,
	0x2CDF,
	0,
	0x2CE1,
	0,
	0x2CE3,
	0,
	0x2CEC,
	0,
	0x2CEE,
	0,
	0x2CF3,
	0,
	0xA641,
	0,
	0xA643,
	0,
	0xA645,
	0,
	0xA647,
	0,
	0xA649,
	0,
	0xA64B,
	0,
	0xA64D,
	0,
	0xA64F,
	0,
	0xA651,
	0,
	0xA653,
	0,
	0xA655,
	0,
	0xA657,
	0,
	0xA659,
	0,
	0xA65B,
	0,
	0xA65D,
	0,
	0xA65F,
	0,
	0xA661,
	0,
	0xA663,
	0,
	0xA665,
	0,
	0xA667,
	0,
	0xA669,
	0,
	0xA66B,
	0,
	0xA66D,
	0,
	0xA681,
	0,
	0xA683,
	0,
	0xA685,
	0,
	0xA687,
	0,
	0xA689,
	0,
	0xA68B,
	0,
	0xA68D,
	0,
	0xA68F,
	0,
	0xA691,
	0,
	0xA693,
	0,
	0xA695,
	0,
	0xA697,
	0,
	0xA699,
	0,
	0xA69B,
	0,
	0xA723,
	0,
	0xA725,
	0,
	0xA727,
	0,
	0xA729,
	0,
	0xA72B,
	0,
	0xA72D,
	0,
	0xA72F,
	0,
	0xA733,
	0,
	0xA735,
	0,
	0xA737,
	0,
	0xA739,
	0,
	0xA73B,
	0,
	0xA73D,
	0,
	0xA73F,
	0,
	0xA741,
	0,
	0xA743,
	0,
	0xA745,
	0,
	0xA747,
	0,
	0xA749,
	0,
	0xA74B,
	0,
	0xA74D,
	0,
	0xA74F,
	0,
	0xA751,
	0,
	0xA753,
	0,
	0xA755,
	0,
	0xA757,
	0,
	0xA759,
	0,
	0xA75B,
	0,
	0xA75D,
	0,
	0xA75F,
	0,
	0xA761,
	0,
	0xA763,
	0,
	0xA765,
	0,
	0xA767,
	0,
	0xA769,
	0,
	0xA76B,
	0,
	0xA76D,
	0,
	0xA76F,
	0,
	0xA77A,
	0,
	0xA77C,
	0,
	0x1D79,
	0xA77F,
	0,
	0xA781,
	0,
	0xA783,
	0,
	0xA785,
	0,
	0xA787,
	0,
	0xA78C,
	0,
	0x265,
	0,
	0xA791,
	0,
	0xA793,
	0,
	0xA797,
	0,
	0xA799,
	0,
	0xA79B,
	0,
	0xA79D,
	0,
	0xA79F,
	0,
	0xA7A1,
	0,
	0xA7A3,
	0,
	0xA7A5,
	0,
	0xA7A7,
	0,
	0xA7A9,
	0,
	0x266,
	0x25C,
	0x261,
	0x26C,
	0x26A,
	0,
	0x29E,
	0x287,
	0x29D,
	0xAB53,
	0xA7B5,
	0,
	0xA7B7,
	0,
	0x13A0,
	0,
	0xFF41,
	0,
	0x10428,
	0,
	0x104D8,
	0,
	0x10CC0,
	0,
	0x118C0,
	0,
	0x1E922,
	0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV Titlecase_Mapping_invlist[] = { /* for ASCII/Latin1 */
	1318,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x7B,
	0xB5,
	0xB6,
	0xDF,
	0xE0,
	0xF7,
	0xF8,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19A,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x250,
	0x251,
	0x252,
	0x253,
	0x254,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25C,
	0x25D,
	0x260,
	0x261,
	0x262,
	0x263,
	0x264,
	0x265,
	0x266,
	0x267,
	0x268,
	0x269,
	0x26A,
	0x26B,
	0x26C,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x272,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x288,
	0x289,
	0x28A,
	0x28C,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29E,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3AD,
	0x3B0,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CC,
	0x3CD,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F3,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x450,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4CF,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x587,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E97,
	0x1E98,
	0x1E99,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F00,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F72,
	0x1F76,
	0x1F78,
	0x1F7A,
	0x1F7C,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FB5,
	0x1FB6,
	0x1FB7,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC3,
	0x1FC4,
	0x1FC5,
	0x1FC6,
	0x1FC7,
	0x1FC8,
	0x1FD0,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FD6,
	0x1FD7,
	0x1FD8,
	0x1FE0,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FE7,
	0x1FE8,
	0x1FF2,
	0x1FF3,
	0x1FF4,
	0x1FF5,
	0x1FF6,
	0x1FF7,
	0x1FF8,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C66,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB01,
	0xFB02,
	0xFB03,
	0xFB04,
	0xFB05,
	0xFB07,
	0xFB13,
	0xFB14,
	0xFB15,
	0xFB16,
	0xFB17,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	TC_0 = 0,
	TC_use_AUX_TABLE_1 = -1,
	TC_use_AUX_TABLE_2 = -2,
	TC_use_AUX_TABLE_3 = -3,
	TC_use_AUX_TABLE_4 = -4,
	TC_use_AUX_TABLE_5 = -5,
	TC_use_AUX_TABLE_6 = -6,
	TC_use_AUX_TABLE_7 = -7,
	TC_use_AUX_TABLE_8 = -8,
	TC_use_AUX_TABLE_9 = -9,
	TC_use_AUX_TABLE_10 = -10,
	TC_use_AUX_TABLE_11 = -11,
	TC_use_AUX_TABLE_12 = -12,
	TC_use_AUX_TABLE_13 = -13,
	TC_use_AUX_TABLE_14 = -14,
	TC_use_AUX_TABLE_15 = -15,
	TC_use_AUX_TABLE_16 = -16,
	TC_use_AUX_TABLE_17 = -17,
	TC_use_AUX_TABLE_18 = -18,
	TC_use_AUX_TABLE_19 = -19,
	TC_use_AUX_TABLE_20 = -20,
	TC_use_AUX_TABLE_21 = -21,
	TC_use_AUX_TABLE_22 = -22,
	TC_use_AUX_TABLE_23 = -23,
	TC_use_AUX_TABLE_24 = -24,
	TC_use_AUX_TABLE_25 = -25,
	TC_use_AUX_TABLE_26 = -26,
	TC_use_AUX_TABLE_27 = -27,
	TC_use_AUX_TABLE_28 = -28,
	TC_use_AUX_TABLE_29 = -29,
	TC_use_AUX_TABLE_30 = -30,
	TC_use_AUX_TABLE_31 = -31,
	TC_use_AUX_TABLE_32 = -32,
	TC_use_AUX_TABLE_33 = -33,
	TC_use_AUX_TABLE_34 = -34,
	TC_use_AUX_TABLE_35 = -35,
	TC_use_AUX_TABLE_36 = -36,
	TC_use_AUX_TABLE_37 = -37,
	TC_use_AUX_TABLE_38 = -38,
	TC_use_AUX_TABLE_39 = -39,
	TC_use_AUX_TABLE_40 = -40,
	TC_use_AUX_TABLE_41 = -41,
	TC_use_AUX_TABLE_42 = -42,
	TC_use_AUX_TABLE_43 = -43,
	TC_use_AUX_TABLE_44 = -44,
	TC_use_AUX_TABLE_45 = -45
} TC_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

#define HAS_TC_AUX_TABLES

static const unsigned int TC_AUX_TABLE_1[] = {
	0x53,
	0x73
};

static const unsigned int TC_AUX_TABLE_2[] = {
	0x2BC,
	0x4E
};

static const unsigned int TC_AUX_TABLE_3[] = {
	0x4A,
	0x30C
};

static const unsigned int TC_AUX_TABLE_4[] = {
	0x399,
	0x308,
	0x301
};

static const unsigned int TC_AUX_TABLE_5[] = {
	0x3A5,
	0x308,
	0x301
};

static const unsigned int TC_AUX_TABLE_6[] = {
	0x535,
	0x582
};

static const unsigned int TC_AUX_TABLE_7[] = {
	0x48,
	0x331
};

static const unsigned int TC_AUX_TABLE_8[] = {
	0x54,
	0x308
};

static const unsigned int TC_AUX_TABLE_9[] = {
	0x57,
	0x30A
};

static const unsigned int TC_AUX_TABLE_10[] = {
	0x59,
	0x30A
};

static const unsigned int TC_AUX_TABLE_11[] = {
	0x41,
	0x2BE
};

static const unsigned int TC_AUX_TABLE_12[] = {
	0x3A5,
	0x313
};

static const unsigned int TC_AUX_TABLE_13[] = {
	0x3A5,
	0x313,
	0x300
};

static const unsigned int TC_AUX_TABLE_14[] = {
	0x3A5,
	0x313,
	0x301
};

static const unsigned int TC_AUX_TABLE_15[] = {
	0x3A5,
	0x313,
	0x342
};

static const unsigned int TC_AUX_TABLE_16[] = {
	0x1FBA,
	0x345
};

static const unsigned int TC_AUX_TABLE_17[] = {
	0x386,
	0x345
};

static const unsigned int TC_AUX_TABLE_18[] = {
	0x391,
	0x342
};

static const unsigned int TC_AUX_TABLE_19[] = {
	0x391,
	0x342,
	0x345
};

static const unsigned int TC_AUX_TABLE_20[] = {
	0x1FCA,
	0x345
};

static const unsigned int TC_AUX_TABLE_21[] = {
	0x389,
	0x345
};

static const unsigned int TC_AUX_TABLE_22[] = {
	0x397,
	0x342
};

static const unsigned int TC_AUX_TABLE_23[] = {
	0x397,
	0x342,
	0x345
};

static const unsigned int TC_AUX_TABLE_24[] = {
	0x399,
	0x308,
	0x300
};

static const unsigned int TC_AUX_TABLE_25[] = {
	0x399,
	0x342
};

static const unsigned int TC_AUX_TABLE_26[] = {
	0x399,
	0x308,
	0x342
};

static const unsigned int TC_AUX_TABLE_27[] = {
	0x3A5,
	0x308,
	0x300
};

static const unsigned int TC_AUX_TABLE_28[] = {
	0x3A1,
	0x313
};

static const unsigned int TC_AUX_TABLE_29[] = {
	0x3A5,
	0x342
};

static const unsigned int TC_AUX_TABLE_30[] = {
	0x3A5,
	0x308,
	0x342
};

static const unsigned int TC_AUX_TABLE_31[] = {
	0x1FFA,
	0x345
};

static const unsigned int TC_AUX_TABLE_32[] = {
	0x38F,
	0x345
};

static const unsigned int TC_AUX_TABLE_33[] = {
	0x3A9,
	0x342
};

static const unsigned int TC_AUX_TABLE_34[] = {
	0x3A9,
	0x342,
	0x345
};

static const unsigned int TC_AUX_TABLE_35[] = {
	0x46,
	0x66
};

static const unsigned int TC_AUX_TABLE_36[] = {
	0x46,
	0x69
};

static const unsigned int TC_AUX_TABLE_37[] = {
	0x46,
	0x6C
};

static const unsigned int TC_AUX_TABLE_38[] = {
	0x46,
	0x66,
	0x69
};

static const unsigned int TC_AUX_TABLE_39[] = {
	0x46,
	0x66,
	0x6C
};

static const unsigned int TC_AUX_TABLE_40[] = {
	0x53,
	0x74
};

static const unsigned int TC_AUX_TABLE_41[] = {
	0x544,
	0x576
};

static const unsigned int TC_AUX_TABLE_42[] = {
	0x544,
	0x565
};

static const unsigned int TC_AUX_TABLE_43[] = {
	0x544,
	0x56B
};

static const unsigned int TC_AUX_TABLE_44[] = {
	0x54E,
	0x576
};

static const unsigned int TC_AUX_TABLE_45[] = {
	0x544,
	0x56D
};

static const unsigned int * const TC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	TC_AUX_TABLE_1,
	TC_AUX_TABLE_2,
	TC_AUX_TABLE_3,
	TC_AUX_TABLE_4,
	TC_AUX_TABLE_5,
	TC_AUX_TABLE_6,
	TC_AUX_TABLE_7,
	TC_AUX_TABLE_8,
	TC_AUX_TABLE_9,
	TC_AUX_TABLE_10,
	TC_AUX_TABLE_11,
	TC_AUX_TABLE_12,
	TC_AUX_TABLE_13,
	TC_AUX_TABLE_14,
	TC_AUX_TABLE_15,
	TC_AUX_TABLE_16,
	TC_AUX_TABLE_17,
	TC_AUX_TABLE_18,
	TC_AUX_TABLE_19,
	TC_AUX_TABLE_20,
	TC_AUX_TABLE_21,
	TC_AUX_TABLE_22,
	TC_AUX_TABLE_23,
	TC_AUX_TABLE_24,
	TC_AUX_TABLE_25,
	TC_AUX_TABLE_26,
	TC_AUX_TABLE_27,
	TC_AUX_TABLE_28,
	TC_AUX_TABLE_29,
	TC_AUX_TABLE_30,
	TC_AUX_TABLE_31,
	TC_AUX_TABLE_32,
	TC_AUX_TABLE_33,
	TC_AUX_TABLE_34,
	TC_AUX_TABLE_35,
	TC_AUX_TABLE_36,
	TC_AUX_TABLE_37,
	TC_AUX_TABLE_38,
	TC_AUX_TABLE_39,
	TC_AUX_TABLE_40,
	TC_AUX_TABLE_41,
	TC_AUX_TABLE_42,
	TC_AUX_TABLE_43,
	TC_AUX_TABLE_44,
	TC_AUX_TABLE_45
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 TC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* TC_AUX_TABLE_1 */,
	2	/* TC_AUX_TABLE_2 */,
	2	/* TC_AUX_TABLE_3 */,
	3	/* TC_AUX_TABLE_4 */,
	3	/* TC_AUX_TABLE_5 */,
	2	/* TC_AUX_TABLE_6 */,
	2	/* TC_AUX_TABLE_7 */,
	2	/* TC_AUX_TABLE_8 */,
	2	/* TC_AUX_TABLE_9 */,
	2	/* TC_AUX_TABLE_10 */,
	2	/* TC_AUX_TABLE_11 */,
	2	/* TC_AUX_TABLE_12 */,
	3	/* TC_AUX_TABLE_13 */,
	3	/* TC_AUX_TABLE_14 */,
	3	/* TC_AUX_TABLE_15 */,
	2	/* TC_AUX_TABLE_16 */,
	2	/* TC_AUX_TABLE_17 */,
	2	/* TC_AUX_TABLE_18 */,
	3	/* TC_AUX_TABLE_19 */,
	2	/* TC_AUX_TABLE_20 */,
	2	/* TC_AUX_TABLE_21 */,
	2	/* TC_AUX_TABLE_22 */,
	3	/* TC_AUX_TABLE_23 */,
	3	/* TC_AUX_TABLE_24 */,
	2	/* TC_AUX_TABLE_25 */,
	3	/* TC_AUX_TABLE_26 */,
	3	/* TC_AUX_TABLE_27 */,
	2	/* TC_AUX_TABLE_28 */,
	2	/* TC_AUX_TABLE_29 */,
	3	/* TC_AUX_TABLE_30 */,
	2	/* TC_AUX_TABLE_31 */,
	2	/* TC_AUX_TABLE_32 */,
	2	/* TC_AUX_TABLE_33 */,
	3	/* TC_AUX_TABLE_34 */,
	2	/* TC_AUX_TABLE_35 */,
	2	/* TC_AUX_TABLE_36 */,
	2	/* TC_AUX_TABLE_37 */,
	3	/* TC_AUX_TABLE_38 */,
	3	/* TC_AUX_TABLE_39 */,
	2	/* TC_AUX_TABLE_40 */,
	2	/* TC_AUX_TABLE_41 */,
	2	/* TC_AUX_TABLE_42 */,
	2	/* TC_AUX_TABLE_43 */,
	2	/* TC_AUX_TABLE_44 */,
	2	/* TC_AUX_TABLE_45 */
};

static const int Titlecase_Mapping_invmap[] = { /* for ASCII/Latin1 */
	0,
	0x41,
	0,
	0x39C,
	0,
	TC_use_AUX_TABLE_1,
	0xC0,
	0,
	0xD8,
	0x178,
	0,
	0x100,
	0,
	0x102,
	0,
	0x104,
	0,
	0x106,
	0,
	0x108,
	0,
	0x10A,
	0,
	0x10C,
	0,
	0x10E,
	0,
	0x110,
	0,
	0x112,
	0,
	0x114,
	0,
	0x116,
	0,
	0x118,
	0,
	0x11A,
	0,
	0x11C,
	0,
	0x11E,
	0,
	0x120,
	0,
	0x122,
	0,
	0x124,
	0,
	0x126,
	0,
	0x128,
	0,
	0x12A,
	0,
	0x12C,
	0,
	0x12E,
	0,
	0x49,
	0,
	0x132,
	0,
	0x134,
	0,
	0x136,
	0,
	0x139,
	0,
	0x13B,
	0,
	0x13D,
	0,
	0x13F,
	0,
	0x141,
	0,
	0x143,
	0,
	0x145,
	0,
	0x147,
	TC_use_AUX_TABLE_2,
	0,
	0x14A,
	0,
	0x14C,
	0,
	0x14E,
	0,
	0x150,
	0,
	0x152,
	0,
	0x154,
	0,
	0x156,
	0,
	0x158,
	0,
	0x15A,
	0,
	0x15C,
	0,
	0x15E,
	0,
	0x160,
	0,
	0x162,
	0,
	0x164,
	0,
	0x166,
	0,
	0x168,
	0,
	0x16A,
	0,
	0x16C,
	0,
	0x16E,
	0,
	0x170,
	0,
	0x172,
	0,
	0x174,
	0,
	0x176,
	0,
	0x179,
	0,
	0x17B,
	0,
	0x17D,
	0x53,
	0x243,
	0,
	0x182,
	0,
	0x184,
	0,
	0x187,
	0,
	0x18B,
	0,
	0x191,
	0,
	0x1F6,
	0,
	0x198,
	0x23D,
	0,
	0x220,
	0,
	0x1A0,
	0,
	0x1A2,
	0,
	0x1A4,
	0,
	0x1A7,
	0,
	0x1AC,
	0,
	0x1AF,
	0,
	0x1B3,
	0,
	0x1B5,
	0,
	0x1B8,
	0,
	0x1BC,
	0,
	0x1F7,
	0,
	0x1C5,
	0,
	0x1C5,
	0x1C8,
	0,
	0x1C8,
	0x1CB,
	0,
	0x1CB,
	0,
	0x1CD,
	0,
	0x1CF,
	0,
	0x1D1,
	0,
	0x1D3,
	0,
	0x1D5,
	0,
	0x1D7,
	0,
	0x1D9,
	0,
	0x1DB,
	0x18E,
	0,
	0x1DE,
	0,
	0x1E0,
	0,
	0x1E2,
	0,
	0x1E4,
	0,
	0x1E6,
	0,
	0x1E8,
	0,
	0x1EA,
	0,
	0x1EC,
	0,
	0x1EE,
	TC_use_AUX_TABLE_3,
	0x1F2,
	0,
	0x1F2,
	0,
	0x1F4,
	0,
	0x1F8,
	0,
	0x1FA,
	0,
	0x1FC,
	0,
	0x1FE,
	0,
	0x200,
	0,
	0x202,
	0,
	0x204,
	0,
	0x206,
	0,
	0x208,
	0,
	0x20A,
	0,
	0x20C,
	0,
	0x20E,
	0,
	0x210,
	0,
	0x212,
	0,
	0x214,
	0,
	0x216,
	0,
	0x218,
	0,
	0x21A,
	0,
	0x21C,
	0,
	0x21E,
	0,
	0x222,
	0,
	0x224,
	0,
	0x226,
	0,
	0x228,
	0,
	0x22A,
	0,
	0x22C,
	0,
	0x22E,
	0,
	0x230,
	0,
	0x232,
	0,
	0x23B,
	0,
	0x2C7E,
	0,
	0x241,
	0,
	0x246,
	0,
	0x248,
	0,
	0x24A,
	0,
	0x24C,
	0,
	0x24E,
	0x2C6F,
	0x2C6D,
	0x2C70,
	0x181,
	0x186,
	0,
	0x189,
	0,
	0x18F,
	0,
	0x190,
	0xA7AB,
	0,
	0x193,
	0xA7AC,
	0,
	0x194,
	0,
	0xA78D,
	0xA7AA,
	0,
	0x197,
	0x196,
	0xA7AE,
	0x2C62,
	0xA7AD,
	0,
	0x19C,
	0,
	0x2C6E,
	0x19D,
	0,
	0x19F,
	0,
	0x2C64,
	0,
	0x1A6,
	0,
	0x1A9,
	0,
	0xA7B1,
	0x1AE,
	0x244,
	0x1B1,
	0x245,
	0,
	0x1B7,
	0,
	0xA7B2,
	0xA7B0,
	0,
	0x399,
	0,
	0x370,
	0,
	0x372,
	0,
	0x376,
	0,
	0x3FD,
	0,
	TC_use_AUX_TABLE_4,
	0,
	0x386,
	0x388,
	TC_use_AUX_TABLE_5,
	0x391,
	0x3A3,
	0x3A3,
	0x38C,
	0x38E,
	0,
	0x392,
	0x398,
	0,
	0x3A6,
	0x3A0,
	0x3CF,
	0,
	0x3D8,
	0,
	0x3DA,
	0,
	0x3DC,
	0,
	0x3DE,
	0,
	0x3E0,
	0,
	0x3E2,
	0,
	0x3E4,
	0,
	0x3E6,
	0,
	0x3E8,
	0,
	0x3EA,
	0,
	0x3EC,
	0,
	0x3EE,
	0x39A,
	0x3A1,
	0x3F9,
	0x37F,
	0,
	0x395,
	0,
	0x3F7,
	0,
	0x3FA,
	0,
	0x410,
	0x400,
	0,
	0x460,
	0,
	0x462,
	0,
	0x464,
	0,
	0x466,
	0,
	0x468,
	0,
	0x46A,
	0,
	0x46C,
	0,
	0x46E,
	0,
	0x470,
	0,
	0x472,
	0,
	0x474,
	0,
	0x476,
	0,
	0x478,
	0,
	0x47A,
	0,
	0x47C,
	0,
	0x47E,
	0,
	0x480,
	0,
	0x48A,
	0,
	0x48C,
	0,
	0x48E,
	0,
	0x490,
	0,
	0x492,
	0,
	0x494,
	0,
	0x496,
	0,
	0x498,
	0,
	0x49A,
	0,
	0x49C,
	0,
	0x49E,
	0,
	0x4A0,
	0,
	0x4A2,
	0,
	0x4A4,
	0,
	0x4A6,
	0,
	0x4A8,
	0,
	0x4AA,
	0,
	0x4AC,
	0,
	0x4AE,
	0,
	0x4B0,
	0,
	0x4B2,
	0,
	0x4B4,
	0,
	0x4B6,
	0,
	0x4B8,
	0,
	0x4BA,
	0,
	0x4BC,
	0,
	0x4BE,
	0,
	0x4C1,
	0,
	0x4C3,
	0,
	0x4C5,
	0,
	0x4C7,
	0,
	0x4C9,
	0,
	0x4CB,
	0,
	0x4CD,
	0x4C0,
	0,
	0x4D0,
	0,
	0x4D2,
	0,
	0x4D4,
	0,
	0x4D6,
	0,
	0x4D8,
	0,
	0x4DA,
	0,
	0x4DC,
	0,
	0x4DE,
	0,
	0x4E0,
	0,
	0x4E2,
	0,
	0x4E4,
	0,
	0x4E6,
	0,
	0x4E8,
	0,
	0x4EA,
	0,
	0x4EC,
	0,
	0x4EE,
	0,
	0x4F0,
	0,
	0x4F2,
	0,
	0x4F4,
	0,
	0x4F6,
	0,
	0x4F8,
	0,
	0x4FA,
	0,
	0x4FC,
	0,
	0x4FE,
	0,
	0x500,
	0,
	0x502,
	0,
	0x504,
	0,
	0x506,
	0,
	0x508,
	0,
	0x50A,
	0,
	0x50C,
	0,
	0x50E,
	0,
	0x510,
	0,
	0x512,
	0,
	0x514,
	0,
	0x516,
	0,
	0x518,
	0,
	0x51A,
	0,
	0x51C,
	0,
	0x51E,
	0,
	0x520,
	0,
	0x522,
	0,
	0x524,
	0,
	0x526,
	0,
	0x528,
	0,
	0x52A,
	0,
	0x52C,
	0,
	0x52E,
	0,
	0x531,
	TC_use_AUX_TABLE_6,
	0,
	0x13F0,
	0,
	0x412,
	0x414,
	0x41E,
	0x421,
	0x422,
	0x42A,
	0x462,
	0xA64A,
	0,
	0xA77D,
	0,
	0x2C63,
	0,
	0x1E00,
	0,
	0x1E02,
	0,
	0x1E04,
	0,
	0x1E06,
	0,
	0x1E08,
	0,
	0x1E0A,
	0,
	0x1E0C,
	0,
	0x1E0E,
	0,
	0x1E10,
	0,
	0x1E12,
	0,
	0x1E14,
	0,
	0x1E16,
	0,
	0x1E18,
	0,
	0x1E1A,
	0,
	0x1E1C,
	0,
	0x1E1E,
	0,
	0x1E20,
	0,
	0x1E22,
	0,
	0x1E24,
	0,
	0x1E26,
	0,
	0x1E28,
	0,
	0x1E2A,
	0,
	0x1E2C,
	0,
	0x1E2E,
	0,
	0x1E30,
	0,
	0x1E32,
	0,
	0x1E34,
	0,
	0x1E36,
	0,
	0x1E38,
	0,
	0x1E3A,
	0,
	0x1E3C,
	0,
	0x1E3E,
	0,
	0x1E40,
	0,
	0x1E42,
	0,
	0x1E44,
	0,
	0x1E46,
	0,
	0x1E48,
	0,
	0x1E4A,
	0,
	0x1E4C,
	0,
	0x1E4E,
	0,
	0x1E50,
	0,
	0x1E52,
	0,
	0x1E54,
	0,
	0x1E56,
	0,
	0x1E58,
	0,
	0x1E5A,
	0,
	0x1E5C,
	0,
	0x1E5E,
	0,
	0x1E60,
	0,
	0x1E62,
	0,
	0x1E64,
	0,
	0x1E66,
	0,
	0x1E68,
	0,
	0x1E6A,
	0,
	0x1E6C,
	0,
	0x1E6E,
	0,
	0x1E70,
	0,
	0x1E72,
	0,
	0x1E74,
	0,
	0x1E76,
	0,
	0x1E78,
	0,
	0x1E7A,
	0,
	0x1E7C,
	0,
	0x1E7E,
	0,
	0x1E80,
	0,
	0x1E82,
	0,
	0x1E84,
	0,
	0x1E86,
	0,
	0x1E88,
	0,
	0x1E8A,
	0,
	0x1E8C,
	0,
	0x1E8E,
	0,
	0x1E90,
	0,
	0x1E92,
	0,
	0x1E94,
	TC_use_AUX_TABLE_7,
	TC_use_AUX_TABLE_8,
	TC_use_AUX_TABLE_9,
	TC_use_AUX_TABLE_10,
	TC_use_AUX_TABLE_11,
	0x1E60,
	0,
	0x1EA0,
	0,
	0x1EA2,
	0,
	0x1EA4,
	0,
	0x1EA6,
	0,
	0x1EA8,
	0,
	0x1EAA,
	0,
	0x1EAC,
	0,
	0x1EAE,
	0,
	0x1EB0,
	0,
	0x1EB2,
	0,
	0x1EB4,
	0,
	0x1EB6,
	0,
	0x1EB8,
	0,
	0x1EBA,
	0,
	0x1EBC,
	0,
	0x1EBE,
	0,
	0x1EC0,
	0,
	0x1EC2,
	0,
	0x1EC4,
	0,
	0x1EC6,
	0,
	0x1EC8,
	0,
	0x1ECA,
	0,
	0x1ECC,
	0,
	0x1ECE,
	0,
	0x1ED0,
	0,
	0x1ED2,
	0,
	0x1ED4,
	0,
	0x1ED6,
	0,
	0x1ED8,
	0,
	0x1EDA,
	0,
	0x1EDC,
	0,
	0x1EDE,
	0,
	0x1EE0,
	0,
	0x1EE2,
	0,
	0x1EE4,
	0,
	0x1EE6,
	0,
	0x1EE8,
	0,
	0x1EEA,
	0,
	0x1EEC,
	0,
	0x1EEE,
	0,
	0x1EF0,
	0,
	0x1EF2,
	0,
	0x1EF4,
	0,
	0x1EF6,
	0,
	0x1EF8,
	0,
	0x1EFA,
	0,
	0x1EFC,
	0,
	0x1EFE,
	0x1F08,
	0,
	0x1F18,
	0,
	0x1F28,
	0,
	0x1F38,
	0,
	0x1F48,
	0,
	TC_use_AUX_TABLE_12,
	0x1F59,
	TC_use_AUX_TABLE_13,
	0x1F5B,
	TC_use_AUX_TABLE_14,
	0x1F5D,
	TC_use_AUX_TABLE_15,
	0x1F5F,
	0,
	0x1F68,
	0,
	0x1FBA,
	0x1FC8,
	0x1FDA,
	0x1FF8,
	0x1FEA,
	0x1FFA,
	0,
	0x1F88,
	0,
	0x1F98,
	0,
	0x1FA8,
	0,
	0x1FB8,
	TC_use_AUX_TABLE_16,
	0x1FBC,
	TC_use_AUX_TABLE_17,
	0,
	TC_use_AUX_TABLE_18,
	TC_use_AUX_TABLE_19,
	0,
	0x399,
	0,
	TC_use_AUX_TABLE_20,
	0x1FCC,
	TC_use_AUX_TABLE_21,
	0,
	TC_use_AUX_TABLE_22,
	TC_use_AUX_TABLE_23,
	0,
	0x1FD8,
	TC_use_AUX_TABLE_24,
	TC_use_AUX_TABLE_4,
	0,
	TC_use_AUX_TABLE_25,
	TC_use_AUX_TABLE_26,
	0,
	0x1FE8,
	TC_use_AUX_TABLE_27,
	TC_use_AUX_TABLE_5,
	TC_use_AUX_TABLE_28,
	0x1FEC,
	TC_use_AUX_TABLE_29,
	TC_use_AUX_TABLE_30,
	0,
	TC_use_AUX_TABLE_31,
	0x1FFC,
	TC_use_AUX_TABLE_32,
	0,
	TC_use_AUX_TABLE_33,
	TC_use_AUX_TABLE_34,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	0xA64A,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B3,
	0,
	0x13A0,
	0,
	TC_use_AUX_TABLE_35,
	TC_use_AUX_TABLE_36,
	TC_use_AUX_TABLE_37,
	TC_use_AUX_TABLE_38,
	TC_use_AUX_TABLE_39,
	TC_use_AUX_TABLE_40,
	0,
	TC_use_AUX_TABLE_41,
	TC_use_AUX_TABLE_42,
	TC_use_AUX_TABLE_43,
	TC_use_AUX_TABLE_44,
	TC_use_AUX_TABLE_45,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x1E900,
	0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Titlecase_Mapping_invlist[] = { /* for EBCDIC 1047 */
	1334,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x59,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8D,
	0x8E,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xDF,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19A,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x250,
	0x251,
	0x252,
	0x253,
	0x254,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25C,
	0x25D,
	0x260,
	0x261,
	0x262,
	0x263,
	0x264,
	0x265,
	0x266,
	0x267,
	0x268,
	0x269,
	0x26A,
	0x26B,
	0x26C,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x272,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x288,
	0x289,
	0x28A,
	0x28C,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29E,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3AD,
	0x3B0,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CC,
	0x3CD,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F3,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x450,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4CF,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x587,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E97,
	0x1E98,
	0x1E99,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F00,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F72,
	0x1F76,
	0x1F78,
	0x1F7A,
	0x1F7C,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FB5,
	0x1FB6,
	0x1FB7,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC3,
	0x1FC4,
	0x1FC5,
	0x1FC6,
	0x1FC7,
	0x1FC8,
	0x1FD0,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FD6,
	0x1FD7,
	0x1FD8,
	0x1FE0,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FE7,
	0x1FE8,
	0x1FF2,
	0x1FF3,
	0x1FF4,
	0x1FF5,
	0x1FF6,
	0x1FF7,
	0x1FF8,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C66,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB01,
	0xFB02,
	0xFB03,
	0xFB04,
	0xFB05,
	0xFB07,
	0xFB13,
	0xFB14,
	0xFB15,
	0xFB16,
	0xFB17,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	TC_0 = 0,
	TC_use_AUX_TABLE_1 = -1,
	TC_use_AUX_TABLE_2 = -2,
	TC_use_AUX_TABLE_3 = -3,
	TC_use_AUX_TABLE_4 = -4,
	TC_use_AUX_TABLE_5 = -5,
	TC_use_AUX_TABLE_6 = -6,
	TC_use_AUX_TABLE_7 = -7,
	TC_use_AUX_TABLE_8 = -8,
	TC_use_AUX_TABLE_9 = -9,
	TC_use_AUX_TABLE_10 = -10,
	TC_use_AUX_TABLE_11 = -11,
	TC_use_AUX_TABLE_12 = -12,
	TC_use_AUX_TABLE_13 = -13,
	TC_use_AUX_TABLE_14 = -14,
	TC_use_AUX_TABLE_15 = -15,
	TC_use_AUX_TABLE_16 = -16,
	TC_use_AUX_TABLE_17 = -17,
	TC_use_AUX_TABLE_18 = -18,
	TC_use_AUX_TABLE_19 = -19,
	TC_use_AUX_TABLE_20 = -20,
	TC_use_AUX_TABLE_21 = -21,
	TC_use_AUX_TABLE_22 = -22,
	TC_use_AUX_TABLE_23 = -23,
	TC_use_AUX_TABLE_24 = -24,
	TC_use_AUX_TABLE_25 = -25,
	TC_use_AUX_TABLE_26 = -26,
	TC_use_AUX_TABLE_27 = -27,
	TC_use_AUX_TABLE_28 = -28,
	TC_use_AUX_TABLE_29 = -29,
	TC_use_AUX_TABLE_30 = -30,
	TC_use_AUX_TABLE_31 = -31,
	TC_use_AUX_TABLE_32 = -32,
	TC_use_AUX_TABLE_33 = -33,
	TC_use_AUX_TABLE_34 = -34,
	TC_use_AUX_TABLE_35 = -35,
	TC_use_AUX_TABLE_36 = -36,
	TC_use_AUX_TABLE_37 = -37,
	TC_use_AUX_TABLE_38 = -38,
	TC_use_AUX_TABLE_39 = -39,
	TC_use_AUX_TABLE_40 = -40,
	TC_use_AUX_TABLE_41 = -41,
	TC_use_AUX_TABLE_42 = -42,
	TC_use_AUX_TABLE_43 = -43,
	TC_use_AUX_TABLE_44 = -44,
	TC_use_AUX_TABLE_45 = -45
} TC_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_TC_AUX_TABLES

static const unsigned int TC_AUX_TABLE_1[] = {
	0xE2,
	0xA2
};

static const unsigned int TC_AUX_TABLE_2[] = {
	0x2BC,
	0xD5
};

static const unsigned int TC_AUX_TABLE_3[] = {
	0xD1,
	0x30C
};

static const unsigned int TC_AUX_TABLE_4[] = {
	0x399,
	0x308,
	0x301
};

static const unsigned int TC_AUX_TABLE_5[] = {
	0x3A5,
	0x308,
	0x301
};

static const unsigned int TC_AUX_TABLE_6[] = {
	0x535,
	0x582
};

static const unsigned int TC_AUX_TABLE_7[] = {
	0xC8,
	0x331
};

static const unsigned int TC_AUX_TABLE_8[] = {
	0xE3,
	0x308
};

static const unsigned int TC_AUX_TABLE_9[] = {
	0xE6,
	0x30A
};

static const unsigned int TC_AUX_TABLE_10[] = {
	0xE8,
	0x30A
};

static const unsigned int TC_AUX_TABLE_11[] = {
	0xC1,
	0x2BE
};

static const unsigned int TC_AUX_TABLE_12[] = {
	0x3A5,
	0x313
};

static const unsigned int TC_AUX_TABLE_13[] = {
	0x3A5,
	0x313,
	0x300
};

static const unsigned int TC_AUX_TABLE_14[] = {
	0x3A5,
	0x313,
	0x301
};

static const unsigned int TC_AUX_TABLE_15[] = {
	0x3A5,
	0x313,
	0x342
};

static const unsigned int TC_AUX_TABLE_16[] = {
	0x1FBA,
	0x345
};

static const unsigned int TC_AUX_TABLE_17[] = {
	0x386,
	0x345
};

static const unsigned int TC_AUX_TABLE_18[] = {
	0x391,
	0x342
};

static const unsigned int TC_AUX_TABLE_19[] = {
	0x391,
	0x342,
	0x345
};

static const unsigned int TC_AUX_TABLE_20[] = {
	0x1FCA,
	0x345
};

static const unsigned int TC_AUX_TABLE_21[] = {
	0x389,
	0x345
};

static const unsigned int TC_AUX_TABLE_22[] = {
	0x397,
	0x342
};

static const unsigned int TC_AUX_TABLE_23[] = {
	0x397,
	0x342,
	0x345
};

static const unsigned int TC_AUX_TABLE_24[] = {
	0x399,
	0x308,
	0x300
};

static const unsigned int TC_AUX_TABLE_25[] = {
	0x399,
	0x342
};

static const unsigned int TC_AUX_TABLE_26[] = {
	0x399,
	0x308,
	0x342
};

static const unsigned int TC_AUX_TABLE_27[] = {
	0x3A5,
	0x308,
	0x300
};

static const unsigned int TC_AUX_TABLE_28[] = {
	0x3A1,
	0x313
};

static const unsigned int TC_AUX_TABLE_29[] = {
	0x3A5,
	0x342
};

static const unsigned int TC_AUX_TABLE_30[] = {
	0x3A5,
	0x308,
	0x342
};

static const unsigned int TC_AUX_TABLE_31[] = {
	0x1FFA,
	0x345
};

static const unsigned int TC_AUX_TABLE_32[] = {
	0x38F,
	0x345
};

static const unsigned int TC_AUX_TABLE_33[] = {
	0x3A9,
	0x342
};

static const unsigned int TC_AUX_TABLE_34[] = {
	0x3A9,
	0x342,
	0x345
};

static const unsigned int TC_AUX_TABLE_35[] = {
	0xC6,
	0x86
};

static const unsigned int TC_AUX_TABLE_36[] = {
	0xC6,
	0x89
};

static const unsigned int TC_AUX_TABLE_37[] = {
	0xC6,
	0x93
};

static const unsigned int TC_AUX_TABLE_38[] = {
	0xC6,
	0x86,
	0x89
};

static const unsigned int TC_AUX_TABLE_39[] = {
	0xC6,
	0x86,
	0x93
};

static const unsigned int TC_AUX_TABLE_40[] = {
	0xE2,
	0xA3
};

static const unsigned int TC_AUX_TABLE_41[] = {
	0x544,
	0x576
};

static const unsigned int TC_AUX_TABLE_42[] = {
	0x544,
	0x565
};

static const unsigned int TC_AUX_TABLE_43[] = {
	0x544,
	0x56B
};

static const unsigned int TC_AUX_TABLE_44[] = {
	0x54E,
	0x576
};

static const unsigned int TC_AUX_TABLE_45[] = {
	0x544,
	0x56D
};

static const unsigned int * const TC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	TC_AUX_TABLE_1,
	TC_AUX_TABLE_2,
	TC_AUX_TABLE_3,
	TC_AUX_TABLE_4,
	TC_AUX_TABLE_5,
	TC_AUX_TABLE_6,
	TC_AUX_TABLE_7,
	TC_AUX_TABLE_8,
	TC_AUX_TABLE_9,
	TC_AUX_TABLE_10,
	TC_AUX_TABLE_11,
	TC_AUX_TABLE_12,
	TC_AUX_TABLE_13,
	TC_AUX_TABLE_14,
	TC_AUX_TABLE_15,
	TC_AUX_TABLE_16,
	TC_AUX_TABLE_17,
	TC_AUX_TABLE_18,
	TC_AUX_TABLE_19,
	TC_AUX_TABLE_20,
	TC_AUX_TABLE_21,
	TC_AUX_TABLE_22,
	TC_AUX_TABLE_23,
	TC_AUX_TABLE_24,
	TC_AUX_TABLE_25,
	TC_AUX_TABLE_26,
	TC_AUX_TABLE_27,
	TC_AUX_TABLE_28,
	TC_AUX_TABLE_29,
	TC_AUX_TABLE_30,
	TC_AUX_TABLE_31,
	TC_AUX_TABLE_32,
	TC_AUX_TABLE_33,
	TC_AUX_TABLE_34,
	TC_AUX_TABLE_35,
	TC_AUX_TABLE_36,
	TC_AUX_TABLE_37,
	TC_AUX_TABLE_38,
	TC_AUX_TABLE_39,
	TC_AUX_TABLE_40,
	TC_AUX_TABLE_41,
	TC_AUX_TABLE_42,
	TC_AUX_TABLE_43,
	TC_AUX_TABLE_44,
	TC_AUX_TABLE_45
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 TC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* TC_AUX_TABLE_1 */,
	2	/* TC_AUX_TABLE_2 */,
	2	/* TC_AUX_TABLE_3 */,
	3	/* TC_AUX_TABLE_4 */,
	3	/* TC_AUX_TABLE_5 */,
	2	/* TC_AUX_TABLE_6 */,
	2	/* TC_AUX_TABLE_7 */,
	2	/* TC_AUX_TABLE_8 */,
	2	/* TC_AUX_TABLE_9 */,
	2	/* TC_AUX_TABLE_10 */,
	2	/* TC_AUX_TABLE_11 */,
	2	/* TC_AUX_TABLE_12 */,
	3	/* TC_AUX_TABLE_13 */,
	3	/* TC_AUX_TABLE_14 */,
	3	/* TC_AUX_TABLE_15 */,
	2	/* TC_AUX_TABLE_16 */,
	2	/* TC_AUX_TABLE_17 */,
	2	/* TC_AUX_TABLE_18 */,
	3	/* TC_AUX_TABLE_19 */,
	2	/* TC_AUX_TABLE_20 */,
	2	/* TC_AUX_TABLE_21 */,
	2	/* TC_AUX_TABLE_22 */,
	3	/* TC_AUX_TABLE_23 */,
	3	/* TC_AUX_TABLE_24 */,
	2	/* TC_AUX_TABLE_25 */,
	3	/* TC_AUX_TABLE_26 */,
	3	/* TC_AUX_TABLE_27 */,
	2	/* TC_AUX_TABLE_28 */,
	2	/* TC_AUX_TABLE_29 */,
	3	/* TC_AUX_TABLE_30 */,
	2	/* TC_AUX_TABLE_31 */,
	2	/* TC_AUX_TABLE_32 */,
	2	/* TC_AUX_TABLE_33 */,
	3	/* TC_AUX_TABLE_34 */,
	2	/* TC_AUX_TABLE_35 */,
	2	/* TC_AUX_TABLE_36 */,
	2	/* TC_AUX_TABLE_37 */,
	3	/* TC_AUX_TABLE_38 */,
	3	/* TC_AUX_TABLE_39 */,
	2	/* TC_AUX_TABLE_40 */,
	2	/* TC_AUX_TABLE_41 */,
	2	/* TC_AUX_TABLE_42 */,
	2	/* TC_AUX_TABLE_43 */,
	2	/* TC_AUX_TABLE_44 */,
	2	/* TC_AUX_TABLE_45 */
};

static const int Titlecase_Mapping_invmap[] = { /* for EBCDIC 1047 */
	0,
	0x62,
	0,
	0x71,
	TC_use_AUX_TABLE_1,
	0,
	0x80,
	0,
	0xC1,
	0,
	0xAC,
	0xBA,
	0xAE,
	0,
	0xD1,
	0,
	0x9E,
	0,
	0x39C,
	0,
	0xE2,
	0,
	0xEB,
	0,
	0xFB,
	0x178,
	0,
	0x100,
	0,
	0x102,
	0,
	0x104,
	0,
	0x106,
	0,
	0x108,
	0,
	0x10A,
	0,
	0x10C,
	0,
	0x10E,
	0,
	0x110,
	0,
	0x112,
	0,
	0x114,
	0,
	0x116,
	0,
	0x118,
	0,
	0x11A,
	0,
	0x11C,
	0,
	0x11E,
	0,
	0x120,
	0,
	0x122,
	0,
	0x124,
	0,
	0x126,
	0,
	0x128,
	0,
	0x12A,
	0,
	0x12C,
	0,
	0x12E,
	0,
	0xC9,
	0,
	0x132,
	0,
	0x134,
	0,
	0x136,
	0,
	0x139,
	0,
	0x13B,
	0,
	0x13D,
	0,
	0x13F,
	0,
	0x141,
	0,
	0x143,
	0,
	0x145,
	0,
	0x147,
	TC_use_AUX_TABLE_2,
	0,
	0x14A,
	0,
	0x14C,
	0,
	0x14E,
	0,
	0x150,
	0,
	0x152,
	0,
	0x154,
	0,
	0x156,
	0,
	0x158,
	0,
	0x15A,
	0,
	0x15C,
	0,
	0x15E,
	0,
	0x160,
	0,
	0x162,
	0,
	0x164,
	0,
	0x166,
	0,
	0x168,
	0,
	0x16A,
	0,
	0x16C,
	0,
	0x16E,
	0,
	0x170,
	0,
	0x172,
	0,
	0x174,
	0,
	0x176,
	0,
	0x179,
	0,
	0x17B,
	0,
	0x17D,
	0xE2,
	0x243,
	0,
	0x182,
	0,
	0x184,
	0,
	0x187,
	0,
	0x18B,
	0,
	0x191,
	0,
	0x1F6,
	0,
	0x198,
	0x23D,
	0,
	0x220,
	0,
	0x1A0,
	0,
	0x1A2,
	0,
	0x1A4,
	0,
	0x1A7,
	0,
	0x1AC,
	0,
	0x1AF,
	0,
	0x1B3,
	0,
	0x1B5,
	0,
	0x1B8,
	0,
	0x1BC,
	0,
	0x1F7,
	0,
	0x1C5,
	0,
	0x1C5,
	0x1C8,
	0,
	0x1C8,
	0x1CB,
	0,
	0x1CB,
	0,
	0x1CD,
	0,
	0x1CF,
	0,
	0x1D1,
	0,
	0x1D3,
	0,
	0x1D5,
	0,
	0x1D7,
	0,
	0x1D9,
	0,
	0x1DB,
	0x18E,
	0,
	0x1DE,
	0,
	0x1E0,
	0,
	0x1E2,
	0,
	0x1E4,
	0,
	0x1E6,
	0,
	0x1E8,
	0,
	0x1EA,
	0,
	0x1EC,
	0,
	0x1EE,
	TC_use_AUX_TABLE_3,
	0x1F2,
	0,
	0x1F2,
	0,
	0x1F4,
	0,
	0x1F8,
	0,
	0x1FA,
	0,
	0x1FC,
	0,
	0x1FE,
	0,
	0x200,
	0,
	0x202,
	0,
	0x204,
	0,
	0x206,
	0,
	0x208,
	0,
	0x20A,
	0,
	0x20C,
	0,
	0x20E,
	0,
	0x210,
	0,
	0x212,
	0,
	0x214,
	0,
	0x216,
	0,
	0x218,
	0,
	0x21A,
	0,
	0x21C,
	0,
	0x21E,
	0,
	0x222,
	0,
	0x224,
	0,
	0x226,
	0,
	0x228,
	0,
	0x22A,
	0,
	0x22C,
	0,
	0x22E,
	0,
	0x230,
	0,
	0x232,
	0,
	0x23B,
	0,
	0x2C7E,
	0,
	0x241,
	0,
	0x246,
	0,
	0x248,
	0,
	0x24A,
	0,
	0x24C,
	0,
	0x24E,
	0x2C6F,
	0x2C6D,
	0x2C70,
	0x181,
	0x186,
	0,
	0x189,
	0,
	0x18F,
	0,
	0x190,
	0xA7AB,
	0,
	0x193,
	0xA7AC,
	0,
	0x194,
	0,
	0xA78D,
	0xA7AA,
	0,
	0x197,
	0x196,
	0xA7AE,
	0x2C62,
	0xA7AD,
	0,
	0x19C,
	0,
	0x2C6E,
	0x19D,
	0,
	0x19F,
	0,
	0x2C64,
	0,
	0x1A6,
	0,
	0x1A9,
	0,
	0xA7B1,
	0x1AE,
	0x244,
	0x1B1,
	0x245,
	0,
	0x1B7,
	0,
	0xA7B2,
	0xA7B0,
	0,
	0x399,
	0,
	0x370,
	0,
	0x372,
	0,
	0x376,
	0,
	0x3FD,
	0,
	TC_use_AUX_TABLE_4,
	0,
	0x386,
	0x388,
	TC_use_AUX_TABLE_5,
	0x391,
	0x3A3,
	0x3A3,
	0x38C,
	0x38E,
	0,
	0x392,
	0x398,
	0,
	0x3A6,
	0x3A0,
	0x3CF,
	0,
	0x3D8,
	0,
	0x3DA,
	0,
	0x3DC,
	0,
	0x3DE,
	0,
	0x3E0,
	0,
	0x3E2,
	0,
	0x3E4,
	0,
	0x3E6,
	0,
	0x3E8,
	0,
	0x3EA,
	0,
	0x3EC,
	0,
	0x3EE,
	0x39A,
	0x3A1,
	0x3F9,
	0x37F,
	0,
	0x395,
	0,
	0x3F7,
	0,
	0x3FA,
	0,
	0x410,
	0x400,
	0,
	0x460,
	0,
	0x462,
	0,
	0x464,
	0,
	0x466,
	0,
	0x468,
	0,
	0x46A,
	0,
	0x46C,
	0,
	0x46E,
	0,
	0x470,
	0,
	0x472,
	0,
	0x474,
	0,
	0x476,
	0,
	0x478,
	0,
	0x47A,
	0,
	0x47C,
	0,
	0x47E,
	0,
	0x480,
	0,
	0x48A,
	0,
	0x48C,
	0,
	0x48E,
	0,
	0x490,
	0,
	0x492,
	0,
	0x494,
	0,
	0x496,
	0,
	0x498,
	0,
	0x49A,
	0,
	0x49C,
	0,
	0x49E,
	0,
	0x4A0,
	0,
	0x4A2,
	0,
	0x4A4,
	0,
	0x4A6,
	0,
	0x4A8,
	0,
	0x4AA,
	0,
	0x4AC,
	0,
	0x4AE,
	0,
	0x4B0,
	0,
	0x4B2,
	0,
	0x4B4,
	0,
	0x4B6,
	0,
	0x4B8,
	0,
	0x4BA,
	0,
	0x4BC,
	0,
	0x4BE,
	0,
	0x4C1,
	0,
	0x4C3,
	0,
	0x4C5,
	0,
	0x4C7,
	0,
	0x4C9,
	0,
	0x4CB,
	0,
	0x4CD,
	0x4C0,
	0,
	0x4D0,
	0,
	0x4D2,
	0,
	0x4D4,
	0,
	0x4D6,
	0,
	0x4D8,
	0,
	0x4DA,
	0,
	0x4DC,
	0,
	0x4DE,
	0,
	0x4E0,
	0,
	0x4E2,
	0,
	0x4E4,
	0,
	0x4E6,
	0,
	0x4E8,
	0,
	0x4EA,
	0,
	0x4EC,
	0,
	0x4EE,
	0,
	0x4F0,
	0,
	0x4F2,
	0,
	0x4F4,
	0,
	0x4F6,
	0,
	0x4F8,
	0,
	0x4FA,
	0,
	0x4FC,
	0,
	0x4FE,
	0,
	0x500,
	0,
	0x502,
	0,
	0x504,
	0,
	0x506,
	0,
	0x508,
	0,
	0x50A,
	0,
	0x50C,
	0,
	0x50E,
	0,
	0x510,
	0,
	0x512,
	0,
	0x514,
	0,
	0x516,
	0,
	0x518,
	0,
	0x51A,
	0,
	0x51C,
	0,
	0x51E,
	0,
	0x520,
	0,
	0x522,
	0,
	0x524,
	0,
	0x526,
	0,
	0x528,
	0,
	0x52A,
	0,
	0x52C,
	0,
	0x52E,
	0,
	0x531,
	TC_use_AUX_TABLE_6,
	0,
	0x13F0,
	0,
	0x412,
	0x414,
	0x41E,
	0x421,
	0x422,
	0x42A,
	0x462,
	0xA64A,
	0,
	0xA77D,
	0,
	0x2C63,
	0,
	0x1E00,
	0,
	0x1E02,
	0,
	0x1E04,
	0,
	0x1E06,
	0,
	0x1E08,
	0,
	0x1E0A,
	0,
	0x1E0C,
	0,
	0x1E0E,
	0,
	0x1E10,
	0,
	0x1E12,
	0,
	0x1E14,
	0,
	0x1E16,
	0,
	0x1E18,
	0,
	0x1E1A,
	0,
	0x1E1C,
	0,
	0x1E1E,
	0,
	0x1E20,
	0,
	0x1E22,
	0,
	0x1E24,
	0,
	0x1E26,
	0,
	0x1E28,
	0,
	0x1E2A,
	0,
	0x1E2C,
	0,
	0x1E2E,
	0,
	0x1E30,
	0,
	0x1E32,
	0,
	0x1E34,
	0,
	0x1E36,
	0,
	0x1E38,
	0,
	0x1E3A,
	0,
	0x1E3C,
	0,
	0x1E3E,
	0,
	0x1E40,
	0,
	0x1E42,
	0,
	0x1E44,
	0,
	0x1E46,
	0,
	0x1E48,
	0,
	0x1E4A,
	0,
	0x1E4C,
	0,
	0x1E4E,
	0,
	0x1E50,
	0,
	0x1E52,
	0,
	0x1E54,
	0,
	0x1E56,
	0,
	0x1E58,
	0,
	0x1E5A,
	0,
	0x1E5C,
	0,
	0x1E5E,
	0,
	0x1E60,
	0,
	0x1E62,
	0,
	0x1E64,
	0,
	0x1E66,
	0,
	0x1E68,
	0,
	0x1E6A,
	0,
	0x1E6C,
	0,
	0x1E6E,
	0,
	0x1E70,
	0,
	0x1E72,
	0,
	0x1E74,
	0,
	0x1E76,
	0,
	0x1E78,
	0,
	0x1E7A,
	0,
	0x1E7C,
	0,
	0x1E7E,
	0,
	0x1E80,
	0,
	0x1E82,
	0,
	0x1E84,
	0,
	0x1E86,
	0,
	0x1E88,
	0,
	0x1E8A,
	0,
	0x1E8C,
	0,
	0x1E8E,
	0,
	0x1E90,
	0,
	0x1E92,
	0,
	0x1E94,
	TC_use_AUX_TABLE_7,
	TC_use_AUX_TABLE_8,
	TC_use_AUX_TABLE_9,
	TC_use_AUX_TABLE_10,
	TC_use_AUX_TABLE_11,
	0x1E60,
	0,
	0x1EA0,
	0,
	0x1EA2,
	0,
	0x1EA4,
	0,
	0x1EA6,
	0,
	0x1EA8,
	0,
	0x1EAA,
	0,
	0x1EAC,
	0,
	0x1EAE,
	0,
	0x1EB0,
	0,
	0x1EB2,
	0,
	0x1EB4,
	0,
	0x1EB6,
	0,
	0x1EB8,
	0,
	0x1EBA,
	0,
	0x1EBC,
	0,
	0x1EBE,
	0,
	0x1EC0,
	0,
	0x1EC2,
	0,
	0x1EC4,
	0,
	0x1EC6,
	0,
	0x1EC8,
	0,
	0x1ECA,
	0,
	0x1ECC,
	0,
	0x1ECE,
	0,
	0x1ED0,
	0,
	0x1ED2,
	0,
	0x1ED4,
	0,
	0x1ED6,
	0,
	0x1ED8,
	0,
	0x1EDA,
	0,
	0x1EDC,
	0,
	0x1EDE,
	0,
	0x1EE0,
	0,
	0x1EE2,
	0,
	0x1EE4,
	0,
	0x1EE6,
	0,
	0x1EE8,
	0,
	0x1EEA,
	0,
	0x1EEC,
	0,
	0x1EEE,
	0,
	0x1EF0,
	0,
	0x1EF2,
	0,
	0x1EF4,
	0,
	0x1EF6,
	0,
	0x1EF8,
	0,
	0x1EFA,
	0,
	0x1EFC,
	0,
	0x1EFE,
	0x1F08,
	0,
	0x1F18,
	0,
	0x1F28,
	0,
	0x1F38,
	0,
	0x1F48,
	0,
	TC_use_AUX_TABLE_12,
	0x1F59,
	TC_use_AUX_TABLE_13,
	0x1F5B,
	TC_use_AUX_TABLE_14,
	0x1F5D,
	TC_use_AUX_TABLE_15,
	0x1F5F,
	0,
	0x1F68,
	0,
	0x1FBA,
	0x1FC8,
	0x1FDA,
	0x1FF8,
	0x1FEA,
	0x1FFA,
	0,
	0x1F88,
	0,
	0x1F98,
	0,
	0x1FA8,
	0,
	0x1FB8,
	TC_use_AUX_TABLE_16,
	0x1FBC,
	TC_use_AUX_TABLE_17,
	0,
	TC_use_AUX_TABLE_18,
	TC_use_AUX_TABLE_19,
	0,
	0x399,
	0,
	TC_use_AUX_TABLE_20,
	0x1FCC,
	TC_use_AUX_TABLE_21,
	0,
	TC_use_AUX_TABLE_22,
	TC_use_AUX_TABLE_23,
	0,
	0x1FD8,
	TC_use_AUX_TABLE_24,
	TC_use_AUX_TABLE_4,
	0,
	TC_use_AUX_TABLE_25,
	TC_use_AUX_TABLE_26,
	0,
	0x1FE8,
	TC_use_AUX_TABLE_27,
	TC_use_AUX_TABLE_5,
	TC_use_AUX_TABLE_28,
	0x1FEC,
	TC_use_AUX_TABLE_29,
	TC_use_AUX_TABLE_30,
	0,
	TC_use_AUX_TABLE_31,
	0x1FFC,
	TC_use_AUX_TABLE_32,
	0,
	TC_use_AUX_TABLE_33,
	TC_use_AUX_TABLE_34,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	0xA64A,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B3,
	0,
	0x13A0,
	0,
	TC_use_AUX_TABLE_35,
	TC_use_AUX_TABLE_36,
	TC_use_AUX_TABLE_37,
	TC_use_AUX_TABLE_38,
	TC_use_AUX_TABLE_39,
	TC_use_AUX_TABLE_40,
	0,
	TC_use_AUX_TABLE_41,
	TC_use_AUX_TABLE_42,
	TC_use_AUX_TABLE_43,
	TC_use_AUX_TABLE_44,
	TC_use_AUX_TABLE_45,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x1E900,
	0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Titlecase_Mapping_invlist[] = { /* for EBCDIC 037 */
	1332,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x59,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xDF,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19A,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x250,
	0x251,
	0x252,
	0x253,
	0x254,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25C,
	0x25D,
	0x260,
	0x261,
	0x262,
	0x263,
	0x264,
	0x265,
	0x266,
	0x267,
	0x268,
	0x269,
	0x26A,
	0x26B,
	0x26C,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x272,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x288,
	0x289,
	0x28A,
	0x28C,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29E,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3AD,
	0x3B0,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CC,
	0x3CD,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F3,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x450,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4CF,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x587,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E97,
	0x1E98,
	0x1E99,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F00,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F72,
	0x1F76,
	0x1F78,
	0x1F7A,
	0x1F7C,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FB5,
	0x1FB6,
	0x1FB7,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC3,
	0x1FC4,
	0x1FC5,
	0x1FC6,
	0x1FC7,
	0x1FC8,
	0x1FD0,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FD6,
	0x1FD7,
	0x1FD8,
	0x1FE0,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FE7,
	0x1FE8,
	0x1FF2,
	0x1FF3,
	0x1FF4,
	0x1FF5,
	0x1FF6,
	0x1FF7,
	0x1FF8,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C66,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB01,
	0xFB02,
	0xFB03,
	0xFB04,
	0xFB05,
	0xFB07,
	0xFB13,
	0xFB14,
	0xFB15,
	0xFB16,
	0xFB17,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	TC_0 = 0,
	TC_use_AUX_TABLE_1 = -1,
	TC_use_AUX_TABLE_2 = -2,
	TC_use_AUX_TABLE_3 = -3,
	TC_use_AUX_TABLE_4 = -4,
	TC_use_AUX_TABLE_5 = -5,
	TC_use_AUX_TABLE_6 = -6,
	TC_use_AUX_TABLE_7 = -7,
	TC_use_AUX_TABLE_8 = -8,
	TC_use_AUX_TABLE_9 = -9,
	TC_use_AUX_TABLE_10 = -10,
	TC_use_AUX_TABLE_11 = -11,
	TC_use_AUX_TABLE_12 = -12,
	TC_use_AUX_TABLE_13 = -13,
	TC_use_AUX_TABLE_14 = -14,
	TC_use_AUX_TABLE_15 = -15,
	TC_use_AUX_TABLE_16 = -16,
	TC_use_AUX_TABLE_17 = -17,
	TC_use_AUX_TABLE_18 = -18,
	TC_use_AUX_TABLE_19 = -19,
	TC_use_AUX_TABLE_20 = -20,
	TC_use_AUX_TABLE_21 = -21,
	TC_use_AUX_TABLE_22 = -22,
	TC_use_AUX_TABLE_23 = -23,
	TC_use_AUX_TABLE_24 = -24,
	TC_use_AUX_TABLE_25 = -25,
	TC_use_AUX_TABLE_26 = -26,
	TC_use_AUX_TABLE_27 = -27,
	TC_use_AUX_TABLE_28 = -28,
	TC_use_AUX_TABLE_29 = -29,
	TC_use_AUX_TABLE_30 = -30,
	TC_use_AUX_TABLE_31 = -31,
	TC_use_AUX_TABLE_32 = -32,
	TC_use_AUX_TABLE_33 = -33,
	TC_use_AUX_TABLE_34 = -34,
	TC_use_AUX_TABLE_35 = -35,
	TC_use_AUX_TABLE_36 = -36,
	TC_use_AUX_TABLE_37 = -37,
	TC_use_AUX_TABLE_38 = -38,
	TC_use_AUX_TABLE_39 = -39,
	TC_use_AUX_TABLE_40 = -40,
	TC_use_AUX_TABLE_41 = -41,
	TC_use_AUX_TABLE_42 = -42,
	TC_use_AUX_TABLE_43 = -43,
	TC_use_AUX_TABLE_44 = -44,
	TC_use_AUX_TABLE_45 = -45
} TC_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_TC_AUX_TABLES

static const unsigned int TC_AUX_TABLE_1[] = {
	0xE2,
	0xA2
};

static const unsigned int TC_AUX_TABLE_2[] = {
	0x2BC,
	0xD5
};

static const unsigned int TC_AUX_TABLE_3[] = {
	0xD1,
	0x30C
};

static const unsigned int TC_AUX_TABLE_4[] = {
	0x399,
	0x308,
	0x301
};

static const unsigned int TC_AUX_TABLE_5[] = {
	0x3A5,
	0x308,
	0x301
};

static const unsigned int TC_AUX_TABLE_6[] = {
	0x535,
	0x582
};

static const unsigned int TC_AUX_TABLE_7[] = {
	0xC8,
	0x331
};

static const unsigned int TC_AUX_TABLE_8[] = {
	0xE3,
	0x308
};

static const unsigned int TC_AUX_TABLE_9[] = {
	0xE6,
	0x30A
};

static const unsigned int TC_AUX_TABLE_10[] = {
	0xE8,
	0x30A
};

static const unsigned int TC_AUX_TABLE_11[] = {
	0xC1,
	0x2BE
};

static const unsigned int TC_AUX_TABLE_12[] = {
	0x3A5,
	0x313
};

static const unsigned int TC_AUX_TABLE_13[] = {
	0x3A5,
	0x313,
	0x300
};

static const unsigned int TC_AUX_TABLE_14[] = {
	0x3A5,
	0x313,
	0x301
};

static const unsigned int TC_AUX_TABLE_15[] = {
	0x3A5,
	0x313,
	0x342
};

static const unsigned int TC_AUX_TABLE_16[] = {
	0x1FBA,
	0x345
};

static const unsigned int TC_AUX_TABLE_17[] = {
	0x386,
	0x345
};

static const unsigned int TC_AUX_TABLE_18[] = {
	0x391,
	0x342
};

static const unsigned int TC_AUX_TABLE_19[] = {
	0x391,
	0x342,
	0x345
};

static const unsigned int TC_AUX_TABLE_20[] = {
	0x1FCA,
	0x345
};

static const unsigned int TC_AUX_TABLE_21[] = {
	0x389,
	0x345
};

static const unsigned int TC_AUX_TABLE_22[] = {
	0x397,
	0x342
};

static const unsigned int TC_AUX_TABLE_23[] = {
	0x397,
	0x342,
	0x345
};

static const unsigned int TC_AUX_TABLE_24[] = {
	0x399,
	0x308,
	0x300
};

static const unsigned int TC_AUX_TABLE_25[] = {
	0x399,
	0x342
};

static const unsigned int TC_AUX_TABLE_26[] = {
	0x399,
	0x308,
	0x342
};

static const unsigned int TC_AUX_TABLE_27[] = {
	0x3A5,
	0x308,
	0x300
};

static const unsigned int TC_AUX_TABLE_28[] = {
	0x3A1,
	0x313
};

static const unsigned int TC_AUX_TABLE_29[] = {
	0x3A5,
	0x342
};

static const unsigned int TC_AUX_TABLE_30[] = {
	0x3A5,
	0x308,
	0x342
};

static const unsigned int TC_AUX_TABLE_31[] = {
	0x1FFA,
	0x345
};

static const unsigned int TC_AUX_TABLE_32[] = {
	0x38F,
	0x345
};

static const unsigned int TC_AUX_TABLE_33[] = {
	0x3A9,
	0x342
};

static const unsigned int TC_AUX_TABLE_34[] = {
	0x3A9,
	0x342,
	0x345
};

static const unsigned int TC_AUX_TABLE_35[] = {
	0xC6,
	0x86
};

static const unsigned int TC_AUX_TABLE_36[] = {
	0xC6,
	0x89
};

static const unsigned int TC_AUX_TABLE_37[] = {
	0xC6,
	0x93
};

static const unsigned int TC_AUX_TABLE_38[] = {
	0xC6,
	0x86,
	0x89
};

static const unsigned int TC_AUX_TABLE_39[] = {
	0xC6,
	0x86,
	0x93
};

static const unsigned int TC_AUX_TABLE_40[] = {
	0xE2,
	0xA3
};

static const unsigned int TC_AUX_TABLE_41[] = {
	0x544,
	0x576
};

static const unsigned int TC_AUX_TABLE_42[] = {
	0x544,
	0x565
};

static const unsigned int TC_AUX_TABLE_43[] = {
	0x544,
	0x56B
};

static const unsigned int TC_AUX_TABLE_44[] = {
	0x54E,
	0x576
};

static const unsigned int TC_AUX_TABLE_45[] = {
	0x544,
	0x56D
};

static const unsigned int * const TC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	TC_AUX_TABLE_1,
	TC_AUX_TABLE_2,
	TC_AUX_TABLE_3,
	TC_AUX_TABLE_4,
	TC_AUX_TABLE_5,
	TC_AUX_TABLE_6,
	TC_AUX_TABLE_7,
	TC_AUX_TABLE_8,
	TC_AUX_TABLE_9,
	TC_AUX_TABLE_10,
	TC_AUX_TABLE_11,
	TC_AUX_TABLE_12,
	TC_AUX_TABLE_13,
	TC_AUX_TABLE_14,
	TC_AUX_TABLE_15,
	TC_AUX_TABLE_16,
	TC_AUX_TABLE_17,
	TC_AUX_TABLE_18,
	TC_AUX_TABLE_19,
	TC_AUX_TABLE_20,
	TC_AUX_TABLE_21,
	TC_AUX_TABLE_22,
	TC_AUX_TABLE_23,
	TC_AUX_TABLE_24,
	TC_AUX_TABLE_25,
	TC_AUX_TABLE_26,
	TC_AUX_TABLE_27,
	TC_AUX_TABLE_28,
	TC_AUX_TABLE_29,
	TC_AUX_TABLE_30,
	TC_AUX_TABLE_31,
	TC_AUX_TABLE_32,
	TC_AUX_TABLE_33,
	TC_AUX_TABLE_34,
	TC_AUX_TABLE_35,
	TC_AUX_TABLE_36,
	TC_AUX_TABLE_37,
	TC_AUX_TABLE_38,
	TC_AUX_TABLE_39,
	TC_AUX_TABLE_40,
	TC_AUX_TABLE_41,
	TC_AUX_TABLE_42,
	TC_AUX_TABLE_43,
	TC_AUX_TABLE_44,
	TC_AUX_TABLE_45
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 TC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* TC_AUX_TABLE_1 */,
	2	/* TC_AUX_TABLE_2 */,
	2	/* TC_AUX_TABLE_3 */,
	3	/* TC_AUX_TABLE_4 */,
	3	/* TC_AUX_TABLE_5 */,
	2	/* TC_AUX_TABLE_6 */,
	2	/* TC_AUX_TABLE_7 */,
	2	/* TC_AUX_TABLE_8 */,
	2	/* TC_AUX_TABLE_9 */,
	2	/* TC_AUX_TABLE_10 */,
	2	/* TC_AUX_TABLE_11 */,
	2	/* TC_AUX_TABLE_12 */,
	3	/* TC_AUX_TABLE_13 */,
	3	/* TC_AUX_TABLE_14 */,
	3	/* TC_AUX_TABLE_15 */,
	2	/* TC_AUX_TABLE_16 */,
	2	/* TC_AUX_TABLE_17 */,
	2	/* TC_AUX_TABLE_18 */,
	3	/* TC_AUX_TABLE_19 */,
	2	/* TC_AUX_TABLE_20 */,
	2	/* TC_AUX_TABLE_21 */,
	2	/* TC_AUX_TABLE_22 */,
	3	/* TC_AUX_TABLE_23 */,
	3	/* TC_AUX_TABLE_24 */,
	2	/* TC_AUX_TABLE_25 */,
	3	/* TC_AUX_TABLE_26 */,
	3	/* TC_AUX_TABLE_27 */,
	2	/* TC_AUX_TABLE_28 */,
	2	/* TC_AUX_TABLE_29 */,
	3	/* TC_AUX_TABLE_30 */,
	2	/* TC_AUX_TABLE_31 */,
	2	/* TC_AUX_TABLE_32 */,
	2	/* TC_AUX_TABLE_33 */,
	3	/* TC_AUX_TABLE_34 */,
	2	/* TC_AUX_TABLE_35 */,
	2	/* TC_AUX_TABLE_36 */,
	2	/* TC_AUX_TABLE_37 */,
	3	/* TC_AUX_TABLE_38 */,
	3	/* TC_AUX_TABLE_39 */,
	2	/* TC_AUX_TABLE_40 */,
	2	/* TC_AUX_TABLE_41 */,
	2	/* TC_AUX_TABLE_42 */,
	2	/* TC_AUX_TABLE_43 */,
	2	/* TC_AUX_TABLE_44 */,
	2	/* TC_AUX_TABLE_45 */
};

static const int Titlecase_Mapping_invmap[] = { /* for EBCDIC 037 */
	0,
	0x62,
	0,
	0x71,
	TC_use_AUX_TABLE_1,
	0,
	0x80,
	0,
	0xC1,
	0,
	0xAC,
	0,
	0xD1,
	0,
	0x9E,
	0,
	0x39C,
	0,
	0xE2,
	0,
	0xEB,
	0,
	0xFB,
	0x178,
	0,
	0x100,
	0,
	0x102,
	0,
	0x104,
	0,
	0x106,
	0,
	0x108,
	0,
	0x10A,
	0,
	0x10C,
	0,
	0x10E,
	0,
	0x110,
	0,
	0x112,
	0,
	0x114,
	0,
	0x116,
	0,
	0x118,
	0,
	0x11A,
	0,
	0x11C,
	0,
	0x11E,
	0,
	0x120,
	0,
	0x122,
	0,
	0x124,
	0,
	0x126,
	0,
	0x128,
	0,
	0x12A,
	0,
	0x12C,
	0,
	0x12E,
	0,
	0xC9,
	0,
	0x132,
	0,
	0x134,
	0,
	0x136,
	0,
	0x139,
	0,
	0x13B,
	0,
	0x13D,
	0,
	0x13F,
	0,
	0x141,
	0,
	0x143,
	0,
	0x145,
	0,
	0x147,
	TC_use_AUX_TABLE_2,
	0,
	0x14A,
	0,
	0x14C,
	0,
	0x14E,
	0,
	0x150,
	0,
	0x152,
	0,
	0x154,
	0,
	0x156,
	0,
	0x158,
	0,
	0x15A,
	0,
	0x15C,
	0,
	0x15E,
	0,
	0x160,
	0,
	0x162,
	0,
	0x164,
	0,
	0x166,
	0,
	0x168,
	0,
	0x16A,
	0,
	0x16C,
	0,
	0x16E,
	0,
	0x170,
	0,
	0x172,
	0,
	0x174,
	0,
	0x176,
	0,
	0x179,
	0,
	0x17B,
	0,
	0x17D,
	0xE2,
	0x243,
	0,
	0x182,
	0,
	0x184,
	0,
	0x187,
	0,
	0x18B,
	0,
	0x191,
	0,
	0x1F6,
	0,
	0x198,
	0x23D,
	0,
	0x220,
	0,
	0x1A0,
	0,
	0x1A2,
	0,
	0x1A4,
	0,
	0x1A7,
	0,
	0x1AC,
	0,
	0x1AF,
	0,
	0x1B3,
	0,
	0x1B5,
	0,
	0x1B8,
	0,
	0x1BC,
	0,
	0x1F7,
	0,
	0x1C5,
	0,
	0x1C5,
	0x1C8,
	0,
	0x1C8,
	0x1CB,
	0,
	0x1CB,
	0,
	0x1CD,
	0,
	0x1CF,
	0,
	0x1D1,
	0,
	0x1D3,
	0,
	0x1D5,
	0,
	0x1D7,
	0,
	0x1D9,
	0,
	0x1DB,
	0x18E,
	0,
	0x1DE,
	0,
	0x1E0,
	0,
	0x1E2,
	0,
	0x1E4,
	0,
	0x1E6,
	0,
	0x1E8,
	0,
	0x1EA,
	0,
	0x1EC,
	0,
	0x1EE,
	TC_use_AUX_TABLE_3,
	0x1F2,
	0,
	0x1F2,
	0,
	0x1F4,
	0,
	0x1F8,
	0,
	0x1FA,
	0,
	0x1FC,
	0,
	0x1FE,
	0,
	0x200,
	0,
	0x202,
	0,
	0x204,
	0,
	0x206,
	0,
	0x208,
	0,
	0x20A,
	0,
	0x20C,
	0,
	0x20E,
	0,
	0x210,
	0,
	0x212,
	0,
	0x214,
	0,
	0x216,
	0,
	0x218,
	0,
	0x21A,
	0,
	0x21C,
	0,
	0x21E,
	0,
	0x222,
	0,
	0x224,
	0,
	0x226,
	0,
	0x228,
	0,
	0x22A,
	0,
	0x22C,
	0,
	0x22E,
	0,
	0x230,
	0,
	0x232,
	0,
	0x23B,
	0,
	0x2C7E,
	0,
	0x241,
	0,
	0x246,
	0,
	0x248,
	0,
	0x24A,
	0,
	0x24C,
	0,
	0x24E,
	0x2C6F,
	0x2C6D,
	0x2C70,
	0x181,
	0x186,
	0,
	0x189,
	0,
	0x18F,
	0,
	0x190,
	0xA7AB,
	0,
	0x193,
	0xA7AC,
	0,
	0x194,
	0,
	0xA78D,
	0xA7AA,
	0,
	0x197,
	0x196,
	0xA7AE,
	0x2C62,
	0xA7AD,
	0,
	0x19C,
	0,
	0x2C6E,
	0x19D,
	0,
	0x19F,
	0,
	0x2C64,
	0,
	0x1A6,
	0,
	0x1A9,
	0,
	0xA7B1,
	0x1AE,
	0x244,
	0x1B1,
	0x245,
	0,
	0x1B7,
	0,
	0xA7B2,
	0xA7B0,
	0,
	0x399,
	0,
	0x370,
	0,
	0x372,
	0,
	0x376,
	0,
	0x3FD,
	0,
	TC_use_AUX_TABLE_4,
	0,
	0x386,
	0x388,
	TC_use_AUX_TABLE_5,
	0x391,
	0x3A3,
	0x3A3,
	0x38C,
	0x38E,
	0,
	0x392,
	0x398,
	0,
	0x3A6,
	0x3A0,
	0x3CF,
	0,
	0x3D8,
	0,
	0x3DA,
	0,
	0x3DC,
	0,
	0x3DE,
	0,
	0x3E0,
	0,
	0x3E2,
	0,
	0x3E4,
	0,
	0x3E6,
	0,
	0x3E8,
	0,
	0x3EA,
	0,
	0x3EC,
	0,
	0x3EE,
	0x39A,
	0x3A1,
	0x3F9,
	0x37F,
	0,
	0x395,
	0,
	0x3F7,
	0,
	0x3FA,
	0,
	0x410,
	0x400,
	0,
	0x460,
	0,
	0x462,
	0,
	0x464,
	0,
	0x466,
	0,
	0x468,
	0,
	0x46A,
	0,
	0x46C,
	0,
	0x46E,
	0,
	0x470,
	0,
	0x472,
	0,
	0x474,
	0,
	0x476,
	0,
	0x478,
	0,
	0x47A,
	0,
	0x47C,
	0,
	0x47E,
	0,
	0x480,
	0,
	0x48A,
	0,
	0x48C,
	0,
	0x48E,
	0,
	0x490,
	0,
	0x492,
	0,
	0x494,
	0,
	0x496,
	0,
	0x498,
	0,
	0x49A,
	0,
	0x49C,
	0,
	0x49E,
	0,
	0x4A0,
	0,
	0x4A2,
	0,
	0x4A4,
	0,
	0x4A6,
	0,
	0x4A8,
	0,
	0x4AA,
	0,
	0x4AC,
	0,
	0x4AE,
	0,
	0x4B0,
	0,
	0x4B2,
	0,
	0x4B4,
	0,
	0x4B6,
	0,
	0x4B8,
	0,
	0x4BA,
	0,
	0x4BC,
	0,
	0x4BE,
	0,
	0x4C1,
	0,
	0x4C3,
	0,
	0x4C5,
	0,
	0x4C7,
	0,
	0x4C9,
	0,
	0x4CB,
	0,
	0x4CD,
	0x4C0,
	0,
	0x4D0,
	0,
	0x4D2,
	0,
	0x4D4,
	0,
	0x4D6,
	0,
	0x4D8,
	0,
	0x4DA,
	0,
	0x4DC,
	0,
	0x4DE,
	0,
	0x4E0,
	0,
	0x4E2,
	0,
	0x4E4,
	0,
	0x4E6,
	0,
	0x4E8,
	0,
	0x4EA,
	0,
	0x4EC,
	0,
	0x4EE,
	0,
	0x4F0,
	0,
	0x4F2,
	0,
	0x4F4,
	0,
	0x4F6,
	0,
	0x4F8,
	0,
	0x4FA,
	0,
	0x4FC,
	0,
	0x4FE,
	0,
	0x500,
	0,
	0x502,
	0,
	0x504,
	0,
	0x506,
	0,
	0x508,
	0,
	0x50A,
	0,
	0x50C,
	0,
	0x50E,
	0,
	0x510,
	0,
	0x512,
	0,
	0x514,
	0,
	0x516,
	0,
	0x518,
	0,
	0x51A,
	0,
	0x51C,
	0,
	0x51E,
	0,
	0x520,
	0,
	0x522,
	0,
	0x524,
	0,
	0x526,
	0,
	0x528,
	0,
	0x52A,
	0,
	0x52C,
	0,
	0x52E,
	0,
	0x531,
	TC_use_AUX_TABLE_6,
	0,
	0x13F0,
	0,
	0x412,
	0x414,
	0x41E,
	0x421,
	0x422,
	0x42A,
	0x462,
	0xA64A,
	0,
	0xA77D,
	0,
	0x2C63,
	0,
	0x1E00,
	0,
	0x1E02,
	0,
	0x1E04,
	0,
	0x1E06,
	0,
	0x1E08,
	0,
	0x1E0A,
	0,
	0x1E0C,
	0,
	0x1E0E,
	0,
	0x1E10,
	0,
	0x1E12,
	0,
	0x1E14,
	0,
	0x1E16,
	0,
	0x1E18,
	0,
	0x1E1A,
	0,
	0x1E1C,
	0,
	0x1E1E,
	0,
	0x1E20,
	0,
	0x1E22,
	0,
	0x1E24,
	0,
	0x1E26,
	0,
	0x1E28,
	0,
	0x1E2A,
	0,
	0x1E2C,
	0,
	0x1E2E,
	0,
	0x1E30,
	0,
	0x1E32,
	0,
	0x1E34,
	0,
	0x1E36,
	0,
	0x1E38,
	0,
	0x1E3A,
	0,
	0x1E3C,
	0,
	0x1E3E,
	0,
	0x1E40,
	0,
	0x1E42,
	0,
	0x1E44,
	0,
	0x1E46,
	0,
	0x1E48,
	0,
	0x1E4A,
	0,
	0x1E4C,
	0,
	0x1E4E,
	0,
	0x1E50,
	0,
	0x1E52,
	0,
	0x1E54,
	0,
	0x1E56,
	0,
	0x1E58,
	0,
	0x1E5A,
	0,
	0x1E5C,
	0,
	0x1E5E,
	0,
	0x1E60,
	0,
	0x1E62,
	0,
	0x1E64,
	0,
	0x1E66,
	0,
	0x1E68,
	0,
	0x1E6A,
	0,
	0x1E6C,
	0,
	0x1E6E,
	0,
	0x1E70,
	0,
	0x1E72,
	0,
	0x1E74,
	0,
	0x1E76,
	0,
	0x1E78,
	0,
	0x1E7A,
	0,
	0x1E7C,
	0,
	0x1E7E,
	0,
	0x1E80,
	0,
	0x1E82,
	0,
	0x1E84,
	0,
	0x1E86,
	0,
	0x1E88,
	0,
	0x1E8A,
	0,
	0x1E8C,
	0,
	0x1E8E,
	0,
	0x1E90,
	0,
	0x1E92,
	0,
	0x1E94,
	TC_use_AUX_TABLE_7,
	TC_use_AUX_TABLE_8,
	TC_use_AUX_TABLE_9,
	TC_use_AUX_TABLE_10,
	TC_use_AUX_TABLE_11,
	0x1E60,
	0,
	0x1EA0,
	0,
	0x1EA2,
	0,
	0x1EA4,
	0,
	0x1EA6,
	0,
	0x1EA8,
	0,
	0x1EAA,
	0,
	0x1EAC,
	0,
	0x1EAE,
	0,
	0x1EB0,
	0,
	0x1EB2,
	0,
	0x1EB4,
	0,
	0x1EB6,
	0,
	0x1EB8,
	0,
	0x1EBA,
	0,
	0x1EBC,
	0,
	0x1EBE,
	0,
	0x1EC0,
	0,
	0x1EC2,
	0,
	0x1EC4,
	0,
	0x1EC6,
	0,
	0x1EC8,
	0,
	0x1ECA,
	0,
	0x1ECC,
	0,
	0x1ECE,
	0,
	0x1ED0,
	0,
	0x1ED2,
	0,
	0x1ED4,
	0,
	0x1ED6,
	0,
	0x1ED8,
	0,
	0x1EDA,
	0,
	0x1EDC,
	0,
	0x1EDE,
	0,
	0x1EE0,
	0,
	0x1EE2,
	0,
	0x1EE4,
	0,
	0x1EE6,
	0,
	0x1EE8,
	0,
	0x1EEA,
	0,
	0x1EEC,
	0,
	0x1EEE,
	0,
	0x1EF0,
	0,
	0x1EF2,
	0,
	0x1EF4,
	0,
	0x1EF6,
	0,
	0x1EF8,
	0,
	0x1EFA,
	0,
	0x1EFC,
	0,
	0x1EFE,
	0x1F08,
	0,
	0x1F18,
	0,
	0x1F28,
	0,
	0x1F38,
	0,
	0x1F48,
	0,
	TC_use_AUX_TABLE_12,
	0x1F59,
	TC_use_AUX_TABLE_13,
	0x1F5B,
	TC_use_AUX_TABLE_14,
	0x1F5D,
	TC_use_AUX_TABLE_15,
	0x1F5F,
	0,
	0x1F68,
	0,
	0x1FBA,
	0x1FC8,
	0x1FDA,
	0x1FF8,
	0x1FEA,
	0x1FFA,
	0,
	0x1F88,
	0,
	0x1F98,
	0,
	0x1FA8,
	0,
	0x1FB8,
	TC_use_AUX_TABLE_16,
	0x1FBC,
	TC_use_AUX_TABLE_17,
	0,
	TC_use_AUX_TABLE_18,
	TC_use_AUX_TABLE_19,
	0,
	0x399,
	0,
	TC_use_AUX_TABLE_20,
	0x1FCC,
	TC_use_AUX_TABLE_21,
	0,
	TC_use_AUX_TABLE_22,
	TC_use_AUX_TABLE_23,
	0,
	0x1FD8,
	TC_use_AUX_TABLE_24,
	TC_use_AUX_TABLE_4,
	0,
	TC_use_AUX_TABLE_25,
	TC_use_AUX_TABLE_26,
	0,
	0x1FE8,
	TC_use_AUX_TABLE_27,
	TC_use_AUX_TABLE_5,
	TC_use_AUX_TABLE_28,
	0x1FEC,
	TC_use_AUX_TABLE_29,
	TC_use_AUX_TABLE_30,
	0,
	TC_use_AUX_TABLE_31,
	0x1FFC,
	TC_use_AUX_TABLE_32,
	0,
	TC_use_AUX_TABLE_33,
	TC_use_AUX_TABLE_34,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	0xA64A,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B3,
	0,
	0x13A0,
	0,
	TC_use_AUX_TABLE_35,
	TC_use_AUX_TABLE_36,
	TC_use_AUX_TABLE_37,
	TC_use_AUX_TABLE_38,
	TC_use_AUX_TABLE_39,
	TC_use_AUX_TABLE_40,
	0,
	TC_use_AUX_TABLE_41,
	TC_use_AUX_TABLE_42,
	TC_use_AUX_TABLE_43,
	TC_use_AUX_TABLE_44,
	TC_use_AUX_TABLE_45,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x1E900,
	0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV Uppercase_Mapping_invlist[] = { /* for ASCII/Latin1 */
	1365,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x7B,
	0xB5,
	0xB6,
	0xDF,
	0xE0,
	0xF7,
	0xF8,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19A,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x250,
	0x251,
	0x252,
	0x253,
	0x254,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25C,
	0x25D,
	0x260,
	0x261,
	0x262,
	0x263,
	0x264,
	0x265,
	0x266,
	0x267,
	0x268,
	0x269,
	0x26A,
	0x26B,
	0x26C,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x272,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x288,
	0x289,
	0x28A,
	0x28C,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29E,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3AD,
	0x3B0,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CC,
	0x3CD,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F3,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x450,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4CF,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x587,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E97,
	0x1E98,
	0x1E99,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F00,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F72,
	0x1F76,
	0x1F78,
	0x1F7A,
	0x1F7C,
	0x1F7E,
	0x1F80,
	0x1F81,
	0x1F82,
	0x1F83,
	0x1F84,
	0x1F85,
	0x1F86,
	0x1F87,
	0x1F88,
	0x1F89,
	0x1F8A,
	0x1F8B,
	0x1F8C,
	0x1F8D,
	0x1F8E,
	0x1F8F,
	0x1F90,
	0x1F91,
	0x1F92,
	0x1F93,
	0x1F94,
	0x1F95,
	0x1F96,
	0x1F97,
	0x1F98,
	0x1F99,
	0x1F9A,
	0x1F9B,
	0x1F9C,
	0x1F9D,
	0x1F9E,
	0x1F9F,
	0x1FA0,
	0x1FA1,
	0x1FA2,
	0x1FA3,
	0x1FA4,
	0x1FA5,
	0x1FA6,
	0x1FA7,
	0x1FA8,
	0x1FA9,
	0x1FAA,
	0x1FAB,
	0x1FAC,
	0x1FAD,
	0x1FAE,
	0x1FAF,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FB5,
	0x1FB6,
	0x1FB7,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC3,
	0x1FC4,
	0x1FC5,
	0x1FC6,
	0x1FC7,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FD6,
	0x1FD7,
	0x1FD8,
	0x1FE0,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FE7,
	0x1FE8,
	0x1FF2,
	0x1FF3,
	0x1FF4,
	0x1FF5,
	0x1FF6,
	0x1FF7,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C66,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB01,
	0xFB02,
	0xFB03,
	0xFB04,
	0xFB05,
	0xFB07,
	0xFB13,
	0xFB14,
	0xFB15,
	0xFB16,
	0xFB17,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 65 /* ASCII/Latin1 */

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	UC_0 = 0,
	UC_use_AUX_TABLE_1 = -1,
	UC_use_AUX_TABLE_2 = -2,
	UC_use_AUX_TABLE_3 = -3,
	UC_use_AUX_TABLE_4 = -4,
	UC_use_AUX_TABLE_5 = -5,
	UC_use_AUX_TABLE_6 = -6,
	UC_use_AUX_TABLE_7 = -7,
	UC_use_AUX_TABLE_8 = -8,
	UC_use_AUX_TABLE_9 = -9,
	UC_use_AUX_TABLE_10 = -10,
	UC_use_AUX_TABLE_11 = -11,
	UC_use_AUX_TABLE_12 = -12,
	UC_use_AUX_TABLE_13 = -13,
	UC_use_AUX_TABLE_14 = -14,
	UC_use_AUX_TABLE_15 = -15,
	UC_use_AUX_TABLE_16 = -16,
	UC_use_AUX_TABLE_17 = -17,
	UC_use_AUX_TABLE_18 = -18,
	UC_use_AUX_TABLE_19 = -19,
	UC_use_AUX_TABLE_20 = -20,
	UC_use_AUX_TABLE_21 = -21,
	UC_use_AUX_TABLE_22 = -22,
	UC_use_AUX_TABLE_23 = -23,
	UC_use_AUX_TABLE_24 = -24,
	UC_use_AUX_TABLE_25 = -25,
	UC_use_AUX_TABLE_26 = -26,
	UC_use_AUX_TABLE_27 = -27,
	UC_use_AUX_TABLE_28 = -28,
	UC_use_AUX_TABLE_29 = -29,
	UC_use_AUX_TABLE_30 = -30,
	UC_use_AUX_TABLE_31 = -31,
	UC_use_AUX_TABLE_32 = -32,
	UC_use_AUX_TABLE_33 = -33,
	UC_use_AUX_TABLE_34 = -34,
	UC_use_AUX_TABLE_35 = -35,
	UC_use_AUX_TABLE_36 = -36,
	UC_use_AUX_TABLE_37 = -37,
	UC_use_AUX_TABLE_38 = -38,
	UC_use_AUX_TABLE_39 = -39,
	UC_use_AUX_TABLE_40 = -40,
	UC_use_AUX_TABLE_41 = -41,
	UC_use_AUX_TABLE_42 = -42,
	UC_use_AUX_TABLE_43 = -43,
	UC_use_AUX_TABLE_44 = -44,
	UC_use_AUX_TABLE_45 = -45,
	UC_use_AUX_TABLE_46 = -46,
	UC_use_AUX_TABLE_47 = -47,
	UC_use_AUX_TABLE_48 = -48,
	UC_use_AUX_TABLE_49 = -49,
	UC_use_AUX_TABLE_50 = -50,
	UC_use_AUX_TABLE_51 = -51,
	UC_use_AUX_TABLE_52 = -52,
	UC_use_AUX_TABLE_53 = -53,
	UC_use_AUX_TABLE_54 = -54,
	UC_use_AUX_TABLE_55 = -55,
	UC_use_AUX_TABLE_56 = -56,
	UC_use_AUX_TABLE_57 = -57,
	UC_use_AUX_TABLE_58 = -58,
	UC_use_AUX_TABLE_59 = -59,
	UC_use_AUX_TABLE_60 = -60,
	UC_use_AUX_TABLE_61 = -61,
	UC_use_AUX_TABLE_62 = -62,
	UC_use_AUX_TABLE_63 = -63,
	UC_use_AUX_TABLE_64 = -64,
	UC_use_AUX_TABLE_65 = -65,
	UC_use_AUX_TABLE_66 = -66,
	UC_use_AUX_TABLE_67 = -67,
	UC_use_AUX_TABLE_68 = -68,
	UC_use_AUX_TABLE_69 = -69,
	UC_use_AUX_TABLE_70 = -70,
	UC_use_AUX_TABLE_71 = -71,
	UC_use_AUX_TABLE_72 = -72
} UC_enum;

#   endif	/* ASCII/Latin1 */

#   if 'A' == 65 /* ASCII/Latin1 */

#define HAS_UC_AUX_TABLES

static const unsigned int UC_AUX_TABLE_1[] = {
	0x53,
	0x53
};

static const unsigned int UC_AUX_TABLE_2[] = {
	0x2BC,
	0x4E
};

static const unsigned int UC_AUX_TABLE_3[] = {
	0x4A,
	0x30C
};

static const unsigned int UC_AUX_TABLE_4[] = {
	0x399,
	0x308,
	0x301
};

static const unsigned int UC_AUX_TABLE_5[] = {
	0x3A5,
	0x308,
	0x301
};

static const unsigned int UC_AUX_TABLE_6[] = {
	0x535,
	0x552
};

static const unsigned int UC_AUX_TABLE_7[] = {
	0x48,
	0x331
};

static const unsigned int UC_AUX_TABLE_8[] = {
	0x54,
	0x308
};

static const unsigned int UC_AUX_TABLE_9[] = {
	0x57,
	0x30A
};

static const unsigned int UC_AUX_TABLE_10[] = {
	0x59,
	0x30A
};

static const unsigned int UC_AUX_TABLE_11[] = {
	0x41,
	0x2BE
};

static const unsigned int UC_AUX_TABLE_12[] = {
	0x3A5,
	0x313
};

static const unsigned int UC_AUX_TABLE_13[] = {
	0x3A5,
	0x313,
	0x300
};

static const unsigned int UC_AUX_TABLE_14[] = {
	0x3A5,
	0x313,
	0x301
};

static const unsigned int UC_AUX_TABLE_15[] = {
	0x3A5,
	0x313,
	0x342
};

static const unsigned int UC_AUX_TABLE_16[] = {
	0x1F08,
	0x399
};

static const unsigned int UC_AUX_TABLE_17[] = {
	0x1F09,
	0x399
};

static const unsigned int UC_AUX_TABLE_18[] = {
	0x1F0A,
	0x399
};

static const unsigned int UC_AUX_TABLE_19[] = {
	0x1F0B,
	0x399
};

static const unsigned int UC_AUX_TABLE_20[] = {
	0x1F0C,
	0x399
};

static const unsigned int UC_AUX_TABLE_21[] = {
	0x1F0D,
	0x399
};

static const unsigned int UC_AUX_TABLE_22[] = {
	0x1F0E,
	0x399
};

static const unsigned int UC_AUX_TABLE_23[] = {
	0x1F0F,
	0x399
};

static const unsigned int UC_AUX_TABLE_24[] = {
	0x1F28,
	0x399
};

static const unsigned int UC_AUX_TABLE_25[] = {
	0x1F29,
	0x399
};

static const unsigned int UC_AUX_TABLE_26[] = {
	0x1F2A,
	0x399
};

static const unsigned int UC_AUX_TABLE_27[] = {
	0x1F2B,
	0x399
};

static const unsigned int UC_AUX_TABLE_28[] = {
	0x1F2C,
	0x399
};

static const unsigned int UC_AUX_TABLE_29[] = {
	0x1F2D,
	0x399
};

static const unsigned int UC_AUX_TABLE_30[] = {
	0x1F2E,
	0x399
};

static const unsigned int UC_AUX_TABLE_31[] = {
	0x1F2F,
	0x399
};

static const unsigned int UC_AUX_TABLE_32[] = {
	0x1F68,
	0x399
};

static const unsigned int UC_AUX_TABLE_33[] = {
	0x1F69,
	0x399
};

static const unsigned int UC_AUX_TABLE_34[] = {
	0x1F6A,
	0x399
};

static const unsigned int UC_AUX_TABLE_35[] = {
	0x1F6B,
	0x399
};

static const unsigned int UC_AUX_TABLE_36[] = {
	0x1F6C,
	0x399
};

static const unsigned int UC_AUX_TABLE_37[] = {
	0x1F6D,
	0x399
};

static const unsigned int UC_AUX_TABLE_38[] = {
	0x1F6E,
	0x399
};

static const unsigned int UC_AUX_TABLE_39[] = {
	0x1F6F,
	0x399
};

static const unsigned int UC_AUX_TABLE_40[] = {
	0x1FBA,
	0x399
};

static const unsigned int UC_AUX_TABLE_41[] = {
	0x391,
	0x399
};

static const unsigned int UC_AUX_TABLE_42[] = {
	0x386,
	0x399
};

static const unsigned int UC_AUX_TABLE_43[] = {
	0x391,
	0x342
};

static const unsigned int UC_AUX_TABLE_44[] = {
	0x391,
	0x342,
	0x399
};

static const unsigned int UC_AUX_TABLE_45[] = {
	0x1FCA,
	0x399
};

static const unsigned int UC_AUX_TABLE_46[] = {
	0x397,
	0x399
};

static const unsigned int UC_AUX_TABLE_47[] = {
	0x389,
	0x399
};

static const unsigned int UC_AUX_TABLE_48[] = {
	0x397,
	0x342
};

static const unsigned int UC_AUX_TABLE_49[] = {
	0x397,
	0x342,
	0x399
};

static const unsigned int UC_AUX_TABLE_50[] = {
	0x399,
	0x308,
	0x300
};

static const unsigned int UC_AUX_TABLE_51[] = {
	0x399,
	0x342
};

static const unsigned int UC_AUX_TABLE_52[] = {
	0x399,
	0x308,
	0x342
};

static const unsigned int UC_AUX_TABLE_53[] = {
	0x3A5,
	0x308,
	0x300
};

static const unsigned int UC_AUX_TABLE_54[] = {
	0x3A1,
	0x313
};

static const unsigned int UC_AUX_TABLE_55[] = {
	0x3A5,
	0x342
};

static const unsigned int UC_AUX_TABLE_56[] = {
	0x3A5,
	0x308,
	0x342
};

static const unsigned int UC_AUX_TABLE_57[] = {
	0x1FFA,
	0x399
};

static const unsigned int UC_AUX_TABLE_58[] = {
	0x3A9,
	0x399
};

static const unsigned int UC_AUX_TABLE_59[] = {
	0x38F,
	0x399
};

static const unsigned int UC_AUX_TABLE_60[] = {
	0x3A9,
	0x342
};

static const unsigned int UC_AUX_TABLE_61[] = {
	0x3A9,
	0x342,
	0x399
};

static const unsigned int UC_AUX_TABLE_62[] = {
	0x46,
	0x46
};

static const unsigned int UC_AUX_TABLE_63[] = {
	0x46,
	0x49
};

static const unsigned int UC_AUX_TABLE_64[] = {
	0x46,
	0x4C
};

static const unsigned int UC_AUX_TABLE_65[] = {
	0x46,
	0x46,
	0x49
};

static const unsigned int UC_AUX_TABLE_66[] = {
	0x46,
	0x46,
	0x4C
};

static const unsigned int UC_AUX_TABLE_67[] = {
	0x53,
	0x54
};

static const unsigned int UC_AUX_TABLE_68[] = {
	0x544,
	0x546
};

static const unsigned int UC_AUX_TABLE_69[] = {
	0x544,
	0x535
};

static const unsigned int UC_AUX_TABLE_70[] = {
	0x544,
	0x53B
};

static const unsigned int UC_AUX_TABLE_71[] = {
	0x54E,
	0x546
};

static const unsigned int UC_AUX_TABLE_72[] = {
	0x544,
	0x53D
};

static const unsigned int * const UC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	UC_AUX_TABLE_1,
	UC_AUX_TABLE_2,
	UC_AUX_TABLE_3,
	UC_AUX_TABLE_4,
	UC_AUX_TABLE_5,
	UC_AUX_TABLE_6,
	UC_AUX_TABLE_7,
	UC_AUX_TABLE_8,
	UC_AUX_TABLE_9,
	UC_AUX_TABLE_10,
	UC_AUX_TABLE_11,
	UC_AUX_TABLE_12,
	UC_AUX_TABLE_13,
	UC_AUX_TABLE_14,
	UC_AUX_TABLE_15,
	UC_AUX_TABLE_16,
	UC_AUX_TABLE_17,
	UC_AUX_TABLE_18,
	UC_AUX_TABLE_19,
	UC_AUX_TABLE_20,
	UC_AUX_TABLE_21,
	UC_AUX_TABLE_22,
	UC_AUX_TABLE_23,
	UC_AUX_TABLE_24,
	UC_AUX_TABLE_25,
	UC_AUX_TABLE_26,
	UC_AUX_TABLE_27,
	UC_AUX_TABLE_28,
	UC_AUX_TABLE_29,
	UC_AUX_TABLE_30,
	UC_AUX_TABLE_31,
	UC_AUX_TABLE_32,
	UC_AUX_TABLE_33,
	UC_AUX_TABLE_34,
	UC_AUX_TABLE_35,
	UC_AUX_TABLE_36,
	UC_AUX_TABLE_37,
	UC_AUX_TABLE_38,
	UC_AUX_TABLE_39,
	UC_AUX_TABLE_40,
	UC_AUX_TABLE_41,
	UC_AUX_TABLE_42,
	UC_AUX_TABLE_43,
	UC_AUX_TABLE_44,
	UC_AUX_TABLE_45,
	UC_AUX_TABLE_46,
	UC_AUX_TABLE_47,
	UC_AUX_TABLE_48,
	UC_AUX_TABLE_49,
	UC_AUX_TABLE_50,
	UC_AUX_TABLE_51,
	UC_AUX_TABLE_52,
	UC_AUX_TABLE_53,
	UC_AUX_TABLE_54,
	UC_AUX_TABLE_55,
	UC_AUX_TABLE_56,
	UC_AUX_TABLE_57,
	UC_AUX_TABLE_58,
	UC_AUX_TABLE_59,
	UC_AUX_TABLE_60,
	UC_AUX_TABLE_61,
	UC_AUX_TABLE_62,
	UC_AUX_TABLE_63,
	UC_AUX_TABLE_64,
	UC_AUX_TABLE_65,
	UC_AUX_TABLE_66,
	UC_AUX_TABLE_67,
	UC_AUX_TABLE_68,
	UC_AUX_TABLE_69,
	UC_AUX_TABLE_70,
	UC_AUX_TABLE_71,
	UC_AUX_TABLE_72
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 UC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* UC_AUX_TABLE_1 */,
	2	/* UC_AUX_TABLE_2 */,
	2	/* UC_AUX_TABLE_3 */,
	3	/* UC_AUX_TABLE_4 */,
	3	/* UC_AUX_TABLE_5 */,
	2	/* UC_AUX_TABLE_6 */,
	2	/* UC_AUX_TABLE_7 */,
	2	/* UC_AUX_TABLE_8 */,
	2	/* UC_AUX_TABLE_9 */,
	2	/* UC_AUX_TABLE_10 */,
	2	/* UC_AUX_TABLE_11 */,
	2	/* UC_AUX_TABLE_12 */,
	3	/* UC_AUX_TABLE_13 */,
	3	/* UC_AUX_TABLE_14 */,
	3	/* UC_AUX_TABLE_15 */,
	2	/* UC_AUX_TABLE_16 */,
	2	/* UC_AUX_TABLE_17 */,
	2	/* UC_AUX_TABLE_18 */,
	2	/* UC_AUX_TABLE_19 */,
	2	/* UC_AUX_TABLE_20 */,
	2	/* UC_AUX_TABLE_21 */,
	2	/* UC_AUX_TABLE_22 */,
	2	/* UC_AUX_TABLE_23 */,
	2	/* UC_AUX_TABLE_24 */,
	2	/* UC_AUX_TABLE_25 */,
	2	/* UC_AUX_TABLE_26 */,
	2	/* UC_AUX_TABLE_27 */,
	2	/* UC_AUX_TABLE_28 */,
	2	/* UC_AUX_TABLE_29 */,
	2	/* UC_AUX_TABLE_30 */,
	2	/* UC_AUX_TABLE_31 */,
	2	/* UC_AUX_TABLE_32 */,
	2	/* UC_AUX_TABLE_33 */,
	2	/* UC_AUX_TABLE_34 */,
	2	/* UC_AUX_TABLE_35 */,
	2	/* UC_AUX_TABLE_36 */,
	2	/* UC_AUX_TABLE_37 */,
	2	/* UC_AUX_TABLE_38 */,
	2	/* UC_AUX_TABLE_39 */,
	2	/* UC_AUX_TABLE_40 */,
	2	/* UC_AUX_TABLE_41 */,
	2	/* UC_AUX_TABLE_42 */,
	2	/* UC_AUX_TABLE_43 */,
	3	/* UC_AUX_TABLE_44 */,
	2	/* UC_AUX_TABLE_45 */,
	2	/* UC_AUX_TABLE_46 */,
	2	/* UC_AUX_TABLE_47 */,
	2	/* UC_AUX_TABLE_48 */,
	3	/* UC_AUX_TABLE_49 */,
	3	/* UC_AUX_TABLE_50 */,
	2	/* UC_AUX_TABLE_51 */,
	3	/* UC_AUX_TABLE_52 */,
	3	/* UC_AUX_TABLE_53 */,
	2	/* UC_AUX_TABLE_54 */,
	2	/* UC_AUX_TABLE_55 */,
	3	/* UC_AUX_TABLE_56 */,
	2	/* UC_AUX_TABLE_57 */,
	2	/* UC_AUX_TABLE_58 */,
	2	/* UC_AUX_TABLE_59 */,
	2	/* UC_AUX_TABLE_60 */,
	3	/* UC_AUX_TABLE_61 */,
	2	/* UC_AUX_TABLE_62 */,
	2	/* UC_AUX_TABLE_63 */,
	2	/* UC_AUX_TABLE_64 */,
	3	/* UC_AUX_TABLE_65 */,
	3	/* UC_AUX_TABLE_66 */,
	2	/* UC_AUX_TABLE_67 */,
	2	/* UC_AUX_TABLE_68 */,
	2	/* UC_AUX_TABLE_69 */,
	2	/* UC_AUX_TABLE_70 */,
	2	/* UC_AUX_TABLE_71 */,
	2	/* UC_AUX_TABLE_72 */
};

static const int Uppercase_Mapping_invmap[] = { /* for ASCII/Latin1 */
	0,
	0x41,
	0,
	0x39C,
	0,
	UC_use_AUX_TABLE_1,
	0xC0,
	0,
	0xD8,
	0x178,
	0,
	0x100,
	0,
	0x102,
	0,
	0x104,
	0,
	0x106,
	0,
	0x108,
	0,
	0x10A,
	0,
	0x10C,
	0,
	0x10E,
	0,
	0x110,
	0,
	0x112,
	0,
	0x114,
	0,
	0x116,
	0,
	0x118,
	0,
	0x11A,
	0,
	0x11C,
	0,
	0x11E,
	0,
	0x120,
	0,
	0x122,
	0,
	0x124,
	0,
	0x126,
	0,
	0x128,
	0,
	0x12A,
	0,
	0x12C,
	0,
	0x12E,
	0,
	0x49,
	0,
	0x132,
	0,
	0x134,
	0,
	0x136,
	0,
	0x139,
	0,
	0x13B,
	0,
	0x13D,
	0,
	0x13F,
	0,
	0x141,
	0,
	0x143,
	0,
	0x145,
	0,
	0x147,
	UC_use_AUX_TABLE_2,
	0,
	0x14A,
	0,
	0x14C,
	0,
	0x14E,
	0,
	0x150,
	0,
	0x152,
	0,
	0x154,
	0,
	0x156,
	0,
	0x158,
	0,
	0x15A,
	0,
	0x15C,
	0,
	0x15E,
	0,
	0x160,
	0,
	0x162,
	0,
	0x164,
	0,
	0x166,
	0,
	0x168,
	0,
	0x16A,
	0,
	0x16C,
	0,
	0x16E,
	0,
	0x170,
	0,
	0x172,
	0,
	0x174,
	0,
	0x176,
	0,
	0x179,
	0,
	0x17B,
	0,
	0x17D,
	0x53,
	0x243,
	0,
	0x182,
	0,
	0x184,
	0,
	0x187,
	0,
	0x18B,
	0,
	0x191,
	0,
	0x1F6,
	0,
	0x198,
	0x23D,
	0,
	0x220,
	0,
	0x1A0,
	0,
	0x1A2,
	0,
	0x1A4,
	0,
	0x1A7,
	0,
	0x1AC,
	0,
	0x1AF,
	0,
	0x1B3,
	0,
	0x1B5,
	0,
	0x1B8,
	0,
	0x1BC,
	0,
	0x1F7,
	0,
	0x1C4,
	0x1C4,
	0,
	0x1C7,
	0x1C7,
	0,
	0x1CA,
	0x1CA,
	0,
	0x1CD,
	0,
	0x1CF,
	0,
	0x1D1,
	0,
	0x1D3,
	0,
	0x1D5,
	0,
	0x1D7,
	0,
	0x1D9,
	0,
	0x1DB,
	0x18E,
	0,
	0x1DE,
	0,
	0x1E0,
	0,
	0x1E2,
	0,
	0x1E4,
	0,
	0x1E6,
	0,
	0x1E8,
	0,
	0x1EA,
	0,
	0x1EC,
	0,
	0x1EE,
	UC_use_AUX_TABLE_3,
	0,
	0x1F1,
	0x1F1,
	0,
	0x1F4,
	0,
	0x1F8,
	0,
	0x1FA,
	0,
	0x1FC,
	0,
	0x1FE,
	0,
	0x200,
	0,
	0x202,
	0,
	0x204,
	0,
	0x206,
	0,
	0x208,
	0,
	0x20A,
	0,
	0x20C,
	0,
	0x20E,
	0,
	0x210,
	0,
	0x212,
	0,
	0x214,
	0,
	0x216,
	0,
	0x218,
	0,
	0x21A,
	0,
	0x21C,
	0,
	0x21E,
	0,
	0x222,
	0,
	0x224,
	0,
	0x226,
	0,
	0x228,
	0,
	0x22A,
	0,
	0x22C,
	0,
	0x22E,
	0,
	0x230,
	0,
	0x232,
	0,
	0x23B,
	0,
	0x2C7E,
	0,
	0x241,
	0,
	0x246,
	0,
	0x248,
	0,
	0x24A,
	0,
	0x24C,
	0,
	0x24E,
	0x2C6F,
	0x2C6D,
	0x2C70,
	0x181,
	0x186,
	0,
	0x189,
	0,
	0x18F,
	0,
	0x190,
	0xA7AB,
	0,
	0x193,
	0xA7AC,
	0,
	0x194,
	0,
	0xA78D,
	0xA7AA,
	0,
	0x197,
	0x196,
	0xA7AE,
	0x2C62,
	0xA7AD,
	0,
	0x19C,
	0,
	0x2C6E,
	0x19D,
	0,
	0x19F,
	0,
	0x2C64,
	0,
	0x1A6,
	0,
	0x1A9,
	0,
	0xA7B1,
	0x1AE,
	0x244,
	0x1B1,
	0x245,
	0,
	0x1B7,
	0,
	0xA7B2,
	0xA7B0,
	0,
	0x399,
	0,
	0x370,
	0,
	0x372,
	0,
	0x376,
	0,
	0x3FD,
	0,
	UC_use_AUX_TABLE_4,
	0,
	0x386,
	0x388,
	UC_use_AUX_TABLE_5,
	0x391,
	0x3A3,
	0x3A3,
	0x38C,
	0x38E,
	0,
	0x392,
	0x398,
	0,
	0x3A6,
	0x3A0,
	0x3CF,
	0,
	0x3D8,
	0,
	0x3DA,
	0,
	0x3DC,
	0,
	0x3DE,
	0,
	0x3E0,
	0,
	0x3E2,
	0,
	0x3E4,
	0,
	0x3E6,
	0,
	0x3E8,
	0,
	0x3EA,
	0,
	0x3EC,
	0,
	0x3EE,
	0x39A,
	0x3A1,
	0x3F9,
	0x37F,
	0,
	0x395,
	0,
	0x3F7,
	0,
	0x3FA,
	0,
	0x410,
	0x400,
	0,
	0x460,
	0,
	0x462,
	0,
	0x464,
	0,
	0x466,
	0,
	0x468,
	0,
	0x46A,
	0,
	0x46C,
	0,
	0x46E,
	0,
	0x470,
	0,
	0x472,
	0,
	0x474,
	0,
	0x476,
	0,
	0x478,
	0,
	0x47A,
	0,
	0x47C,
	0,
	0x47E,
	0,
	0x480,
	0,
	0x48A,
	0,
	0x48C,
	0,
	0x48E,
	0,
	0x490,
	0,
	0x492,
	0,
	0x494,
	0,
	0x496,
	0,
	0x498,
	0,
	0x49A,
	0,
	0x49C,
	0,
	0x49E,
	0,
	0x4A0,
	0,
	0x4A2,
	0,
	0x4A4,
	0,
	0x4A6,
	0,
	0x4A8,
	0,
	0x4AA,
	0,
	0x4AC,
	0,
	0x4AE,
	0,
	0x4B0,
	0,
	0x4B2,
	0,
	0x4B4,
	0,
	0x4B6,
	0,
	0x4B8,
	0,
	0x4BA,
	0,
	0x4BC,
	0,
	0x4BE,
	0,
	0x4C1,
	0,
	0x4C3,
	0,
	0x4C5,
	0,
	0x4C7,
	0,
	0x4C9,
	0,
	0x4CB,
	0,
	0x4CD,
	0x4C0,
	0,
	0x4D0,
	0,
	0x4D2,
	0,
	0x4D4,
	0,
	0x4D6,
	0,
	0x4D8,
	0,
	0x4DA,
	0,
	0x4DC,
	0,
	0x4DE,
	0,
	0x4E0,
	0,
	0x4E2,
	0,
	0x4E4,
	0,
	0x4E6,
	0,
	0x4E8,
	0,
	0x4EA,
	0,
	0x4EC,
	0,
	0x4EE,
	0,
	0x4F0,
	0,
	0x4F2,
	0,
	0x4F4,
	0,
	0x4F6,
	0,
	0x4F8,
	0,
	0x4FA,
	0,
	0x4FC,
	0,
	0x4FE,
	0,
	0x500,
	0,
	0x502,
	0,
	0x504,
	0,
	0x506,
	0,
	0x508,
	0,
	0x50A,
	0,
	0x50C,
	0,
	0x50E,
	0,
	0x510,
	0,
	0x512,
	0,
	0x514,
	0,
	0x516,
	0,
	0x518,
	0,
	0x51A,
	0,
	0x51C,
	0,
	0x51E,
	0,
	0x520,
	0,
	0x522,
	0,
	0x524,
	0,
	0x526,
	0,
	0x528,
	0,
	0x52A,
	0,
	0x52C,
	0,
	0x52E,
	0,
	0x531,
	UC_use_AUX_TABLE_6,
	0,
	0x13F0,
	0,
	0x412,
	0x414,
	0x41E,
	0x421,
	0x422,
	0x42A,
	0x462,
	0xA64A,
	0,
	0xA77D,
	0,
	0x2C63,
	0,
	0x1E00,
	0,
	0x1E02,
	0,
	0x1E04,
	0,
	0x1E06,
	0,
	0x1E08,
	0,
	0x1E0A,
	0,
	0x1E0C,
	0,
	0x1E0E,
	0,
	0x1E10,
	0,
	0x1E12,
	0,
	0x1E14,
	0,
	0x1E16,
	0,
	0x1E18,
	0,
	0x1E1A,
	0,
	0x1E1C,
	0,
	0x1E1E,
	0,
	0x1E20,
	0,
	0x1E22,
	0,
	0x1E24,
	0,
	0x1E26,
	0,
	0x1E28,
	0,
	0x1E2A,
	0,
	0x1E2C,
	0,
	0x1E2E,
	0,
	0x1E30,
	0,
	0x1E32,
	0,
	0x1E34,
	0,
	0x1E36,
	0,
	0x1E38,
	0,
	0x1E3A,
	0,
	0x1E3C,
	0,
	0x1E3E,
	0,
	0x1E40,
	0,
	0x1E42,
	0,
	0x1E44,
	0,
	0x1E46,
	0,
	0x1E48,
	0,
	0x1E4A,
	0,
	0x1E4C,
	0,
	0x1E4E,
	0,
	0x1E50,
	0,
	0x1E52,
	0,
	0x1E54,
	0,
	0x1E56,
	0,
	0x1E58,
	0,
	0x1E5A,
	0,
	0x1E5C,
	0,
	0x1E5E,
	0,
	0x1E60,
	0,
	0x1E62,
	0,
	0x1E64,
	0,
	0x1E66,
	0,
	0x1E68,
	0,
	0x1E6A,
	0,
	0x1E6C,
	0,
	0x1E6E,
	0,
	0x1E70,
	0,
	0x1E72,
	0,
	0x1E74,
	0,
	0x1E76,
	0,
	0x1E78,
	0,
	0x1E7A,
	0,
	0x1E7C,
	0,
	0x1E7E,
	0,
	0x1E80,
	0,
	0x1E82,
	0,
	0x1E84,
	0,
	0x1E86,
	0,
	0x1E88,
	0,
	0x1E8A,
	0,
	0x1E8C,
	0,
	0x1E8E,
	0,
	0x1E90,
	0,
	0x1E92,
	0,
	0x1E94,
	UC_use_AUX_TABLE_7,
	UC_use_AUX_TABLE_8,
	UC_use_AUX_TABLE_9,
	UC_use_AUX_TABLE_10,
	UC_use_AUX_TABLE_11,
	0x1E60,
	0,
	0x1EA0,
	0,
	0x1EA2,
	0,
	0x1EA4,
	0,
	0x1EA6,
	0,
	0x1EA8,
	0,
	0x1EAA,
	0,
	0x1EAC,
	0,
	0x1EAE,
	0,
	0x1EB0,
	0,
	0x1EB2,
	0,
	0x1EB4,
	0,
	0x1EB6,
	0,
	0x1EB8,
	0,
	0x1EBA,
	0,
	0x1EBC,
	0,
	0x1EBE,
	0,
	0x1EC0,
	0,
	0x1EC2,
	0,
	0x1EC4,
	0,
	0x1EC6,
	0,
	0x1EC8,
	0,
	0x1ECA,
	0,
	0x1ECC,
	0,
	0x1ECE,
	0,
	0x1ED0,
	0,
	0x1ED2,
	0,
	0x1ED4,
	0,
	0x1ED6,
	0,
	0x1ED8,
	0,
	0x1EDA,
	0,
	0x1EDC,
	0,
	0x1EDE,
	0,
	0x1EE0,
	0,
	0x1EE2,
	0,
	0x1EE4,
	0,
	0x1EE6,
	0,
	0x1EE8,
	0,
	0x1EEA,
	0,
	0x1EEC,
	0,
	0x1EEE,
	0,
	0x1EF0,
	0,
	0x1EF2,
	0,
	0x1EF4,
	0,
	0x1EF6,
	0,
	0x1EF8,
	0,
	0x1EFA,
	0,
	0x1EFC,
	0,
	0x1EFE,
	0x1F08,
	0,
	0x1F18,
	0,
	0x1F28,
	0,
	0x1F38,
	0,
	0x1F48,
	0,
	UC_use_AUX_TABLE_12,
	0x1F59,
	UC_use_AUX_TABLE_13,
	0x1F5B,
	UC_use_AUX_TABLE_14,
	0x1F5D,
	UC_use_AUX_TABLE_15,
	0x1F5F,
	0,
	0x1F68,
	0,
	0x1FBA,
	0x1FC8,
	0x1FDA,
	0x1FF8,
	0x1FEA,
	0x1FFA,
	0,
	UC_use_AUX_TABLE_16,
	UC_use_AUX_TABLE_17,
	UC_use_AUX_TABLE_18,
	UC_use_AUX_TABLE_19,
	UC_use_AUX_TABLE_20,
	UC_use_AUX_TABLE_21,
	UC_use_AUX_TABLE_22,
	UC_use_AUX_TABLE_23,
	UC_use_AUX_TABLE_16,
	UC_use_AUX_TABLE_17,
	UC_use_AUX_TABLE_18,
	UC_use_AUX_TABLE_19,
	UC_use_AUX_TABLE_20,
	UC_use_AUX_TABLE_21,
	UC_use_AUX_TABLE_22,
	UC_use_AUX_TABLE_23,
	UC_use_AUX_TABLE_24,
	UC_use_AUX_TABLE_25,
	UC_use_AUX_TABLE_26,
	UC_use_AUX_TABLE_27,
	UC_use_AUX_TABLE_28,
	UC_use_AUX_TABLE_29,
	UC_use_AUX_TABLE_30,
	UC_use_AUX_TABLE_31,
	UC_use_AUX_TABLE_24,
	UC_use_AUX_TABLE_25,
	UC_use_AUX_TABLE_26,
	UC_use_AUX_TABLE_27,
	UC_use_AUX_TABLE_28,
	UC_use_AUX_TABLE_29,
	UC_use_AUX_TABLE_30,
	UC_use_AUX_TABLE_31,
	UC_use_AUX_TABLE_32,
	UC_use_AUX_TABLE_33,
	UC_use_AUX_TABLE_34,
	UC_use_AUX_TABLE_35,
	UC_use_AUX_TABLE_36,
	UC_use_AUX_TABLE_37,
	UC_use_AUX_TABLE_38,
	UC_use_AUX_TABLE_39,
	UC_use_AUX_TABLE_32,
	UC_use_AUX_TABLE_33,
	UC_use_AUX_TABLE_34,
	UC_use_AUX_TABLE_35,
	UC_use_AUX_TABLE_36,
	UC_use_AUX_TABLE_37,
	UC_use_AUX_TABLE_38,
	UC_use_AUX_TABLE_39,
	0x1FB8,
	UC_use_AUX_TABLE_40,
	UC_use_AUX_TABLE_41,
	UC_use_AUX_TABLE_42,
	0,
	UC_use_AUX_TABLE_43,
	UC_use_AUX_TABLE_44,
	0,
	UC_use_AUX_TABLE_41,
	0,
	0x399,
	0,
	UC_use_AUX_TABLE_45,
	UC_use_AUX_TABLE_46,
	UC_use_AUX_TABLE_47,
	0,
	UC_use_AUX_TABLE_48,
	UC_use_AUX_TABLE_49,
	0,
	UC_use_AUX_TABLE_46,
	0,
	0x1FD8,
	UC_use_AUX_TABLE_50,
	UC_use_AUX_TABLE_4,
	0,
	UC_use_AUX_TABLE_51,
	UC_use_AUX_TABLE_52,
	0,
	0x1FE8,
	UC_use_AUX_TABLE_53,
	UC_use_AUX_TABLE_5,
	UC_use_AUX_TABLE_54,
	0x1FEC,
	UC_use_AUX_TABLE_55,
	UC_use_AUX_TABLE_56,
	0,
	UC_use_AUX_TABLE_57,
	UC_use_AUX_TABLE_58,
	UC_use_AUX_TABLE_59,
	0,
	UC_use_AUX_TABLE_60,
	UC_use_AUX_TABLE_61,
	0,
	UC_use_AUX_TABLE_58,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	0xA64A,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B3,
	0,
	0x13A0,
	0,
	UC_use_AUX_TABLE_62,
	UC_use_AUX_TABLE_63,
	UC_use_AUX_TABLE_64,
	UC_use_AUX_TABLE_65,
	UC_use_AUX_TABLE_66,
	UC_use_AUX_TABLE_67,
	0,
	UC_use_AUX_TABLE_68,
	UC_use_AUX_TABLE_69,
	UC_use_AUX_TABLE_70,
	UC_use_AUX_TABLE_71,
	UC_use_AUX_TABLE_72,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x1E900,
	0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Uppercase_Mapping_invlist[] = { /* for EBCDIC 1047 */
	1381,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x59,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8D,
	0x8E,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xDF,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19A,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x250,
	0x251,
	0x252,
	0x253,
	0x254,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25C,
	0x25D,
	0x260,
	0x261,
	0x262,
	0x263,
	0x264,
	0x265,
	0x266,
	0x267,
	0x268,
	0x269,
	0x26A,
	0x26B,
	0x26C,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x272,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x288,
	0x289,
	0x28A,
	0x28C,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29E,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3AD,
	0x3B0,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CC,
	0x3CD,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F3,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x450,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4CF,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x587,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E97,
	0x1E98,
	0x1E99,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F00,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F72,
	0x1F76,
	0x1F78,
	0x1F7A,
	0x1F7C,
	0x1F7E,
	0x1F80,
	0x1F81,
	0x1F82,
	0x1F83,
	0x1F84,
	0x1F85,
	0x1F86,
	0x1F87,
	0x1F88,
	0x1F89,
	0x1F8A,
	0x1F8B,
	0x1F8C,
	0x1F8D,
	0x1F8E,
	0x1F8F,
	0x1F90,
	0x1F91,
	0x1F92,
	0x1F93,
	0x1F94,
	0x1F95,
	0x1F96,
	0x1F97,
	0x1F98,
	0x1F99,
	0x1F9A,
	0x1F9B,
	0x1F9C,
	0x1F9D,
	0x1F9E,
	0x1F9F,
	0x1FA0,
	0x1FA1,
	0x1FA2,
	0x1FA3,
	0x1FA4,
	0x1FA5,
	0x1FA6,
	0x1FA7,
	0x1FA8,
	0x1FA9,
	0x1FAA,
	0x1FAB,
	0x1FAC,
	0x1FAD,
	0x1FAE,
	0x1FAF,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FB5,
	0x1FB6,
	0x1FB7,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC3,
	0x1FC4,
	0x1FC5,
	0x1FC6,
	0x1FC7,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FD6,
	0x1FD7,
	0x1FD8,
	0x1FE0,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FE7,
	0x1FE8,
	0x1FF2,
	0x1FF3,
	0x1FF4,
	0x1FF5,
	0x1FF6,
	0x1FF7,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C66,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB01,
	0xFB02,
	0xFB03,
	0xFB04,
	0xFB05,
	0xFB07,
	0xFB13,
	0xFB14,
	0xFB15,
	0xFB16,
	0xFB17,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	UC_0 = 0,
	UC_use_AUX_TABLE_1 = -1,
	UC_use_AUX_TABLE_2 = -2,
	UC_use_AUX_TABLE_3 = -3,
	UC_use_AUX_TABLE_4 = -4,
	UC_use_AUX_TABLE_5 = -5,
	UC_use_AUX_TABLE_6 = -6,
	UC_use_AUX_TABLE_7 = -7,
	UC_use_AUX_TABLE_8 = -8,
	UC_use_AUX_TABLE_9 = -9,
	UC_use_AUX_TABLE_10 = -10,
	UC_use_AUX_TABLE_11 = -11,
	UC_use_AUX_TABLE_12 = -12,
	UC_use_AUX_TABLE_13 = -13,
	UC_use_AUX_TABLE_14 = -14,
	UC_use_AUX_TABLE_15 = -15,
	UC_use_AUX_TABLE_16 = -16,
	UC_use_AUX_TABLE_17 = -17,
	UC_use_AUX_TABLE_18 = -18,
	UC_use_AUX_TABLE_19 = -19,
	UC_use_AUX_TABLE_20 = -20,
	UC_use_AUX_TABLE_21 = -21,
	UC_use_AUX_TABLE_22 = -22,
	UC_use_AUX_TABLE_23 = -23,
	UC_use_AUX_TABLE_24 = -24,
	UC_use_AUX_TABLE_25 = -25,
	UC_use_AUX_TABLE_26 = -26,
	UC_use_AUX_TABLE_27 = -27,
	UC_use_AUX_TABLE_28 = -28,
	UC_use_AUX_TABLE_29 = -29,
	UC_use_AUX_TABLE_30 = -30,
	UC_use_AUX_TABLE_31 = -31,
	UC_use_AUX_TABLE_32 = -32,
	UC_use_AUX_TABLE_33 = -33,
	UC_use_AUX_TABLE_34 = -34,
	UC_use_AUX_TABLE_35 = -35,
	UC_use_AUX_TABLE_36 = -36,
	UC_use_AUX_TABLE_37 = -37,
	UC_use_AUX_TABLE_38 = -38,
	UC_use_AUX_TABLE_39 = -39,
	UC_use_AUX_TABLE_40 = -40,
	UC_use_AUX_TABLE_41 = -41,
	UC_use_AUX_TABLE_42 = -42,
	UC_use_AUX_TABLE_43 = -43,
	UC_use_AUX_TABLE_44 = -44,
	UC_use_AUX_TABLE_45 = -45,
	UC_use_AUX_TABLE_46 = -46,
	UC_use_AUX_TABLE_47 = -47,
	UC_use_AUX_TABLE_48 = -48,
	UC_use_AUX_TABLE_49 = -49,
	UC_use_AUX_TABLE_50 = -50,
	UC_use_AUX_TABLE_51 = -51,
	UC_use_AUX_TABLE_52 = -52,
	UC_use_AUX_TABLE_53 = -53,
	UC_use_AUX_TABLE_54 = -54,
	UC_use_AUX_TABLE_55 = -55,
	UC_use_AUX_TABLE_56 = -56,
	UC_use_AUX_TABLE_57 = -57,
	UC_use_AUX_TABLE_58 = -58,
	UC_use_AUX_TABLE_59 = -59,
	UC_use_AUX_TABLE_60 = -60,
	UC_use_AUX_TABLE_61 = -61,
	UC_use_AUX_TABLE_62 = -62,
	UC_use_AUX_TABLE_63 = -63,
	UC_use_AUX_TABLE_64 = -64,
	UC_use_AUX_TABLE_65 = -65,
	UC_use_AUX_TABLE_66 = -66,
	UC_use_AUX_TABLE_67 = -67,
	UC_use_AUX_TABLE_68 = -68,
	UC_use_AUX_TABLE_69 = -69,
	UC_use_AUX_TABLE_70 = -70,
	UC_use_AUX_TABLE_71 = -71,
	UC_use_AUX_TABLE_72 = -72
} UC_enum;

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_UC_AUX_TABLES

static const unsigned int UC_AUX_TABLE_1[] = {
	0xE2,
	0xE2
};

static const unsigned int UC_AUX_TABLE_2[] = {
	0x2BC,
	0xD5
};

static const unsigned int UC_AUX_TABLE_3[] = {
	0xD1,
	0x30C
};

static const unsigned int UC_AUX_TABLE_4[] = {
	0x399,
	0x308,
	0x301
};

static const unsigned int UC_AUX_TABLE_5[] = {
	0x3A5,
	0x308,
	0x301
};

static const unsigned int UC_AUX_TABLE_6[] = {
	0x535,
	0x552
};

static const unsigned int UC_AUX_TABLE_7[] = {
	0xC8,
	0x331
};

static const unsigned int UC_AUX_TABLE_8[] = {
	0xE3,
	0x308
};

static const unsigned int UC_AUX_TABLE_9[] = {
	0xE6,
	0x30A
};

static const unsigned int UC_AUX_TABLE_10[] = {
	0xE8,
	0x30A
};

static const unsigned int UC_AUX_TABLE_11[] = {
	0xC1,
	0x2BE
};

static const unsigned int UC_AUX_TABLE_12[] = {
	0x3A5,
	0x313
};

static const unsigned int UC_AUX_TABLE_13[] = {
	0x3A5,
	0x313,
	0x300
};

static const unsigned int UC_AUX_TABLE_14[] = {
	0x3A5,
	0x313,
	0x301
};

static const unsigned int UC_AUX_TABLE_15[] = {
	0x3A5,
	0x313,
	0x342
};

static const unsigned int UC_AUX_TABLE_16[] = {
	0x1F08,
	0x399
};

static const unsigned int UC_AUX_TABLE_17[] = {
	0x1F09,
	0x399
};

static const unsigned int UC_AUX_TABLE_18[] = {
	0x1F0A,
	0x399
};

static const unsigned int UC_AUX_TABLE_19[] = {
	0x1F0B,
	0x399
};

static const unsigned int UC_AUX_TABLE_20[] = {
	0x1F0C,
	0x399
};

static const unsigned int UC_AUX_TABLE_21[] = {
	0x1F0D,
	0x399
};

static const unsigned int UC_AUX_TABLE_22[] = {
	0x1F0E,
	0x399
};

static const unsigned int UC_AUX_TABLE_23[] = {
	0x1F0F,
	0x399
};

static const unsigned int UC_AUX_TABLE_24[] = {
	0x1F28,
	0x399
};

static const unsigned int UC_AUX_TABLE_25[] = {
	0x1F29,
	0x399
};

static const unsigned int UC_AUX_TABLE_26[] = {
	0x1F2A,
	0x399
};

static const unsigned int UC_AUX_TABLE_27[] = {
	0x1F2B,
	0x399
};

static const unsigned int UC_AUX_TABLE_28[] = {
	0x1F2C,
	0x399
};

static const unsigned int UC_AUX_TABLE_29[] = {
	0x1F2D,
	0x399
};

static const unsigned int UC_AUX_TABLE_30[] = {
	0x1F2E,
	0x399
};

static const unsigned int UC_AUX_TABLE_31[] = {
	0x1F2F,
	0x399
};

static const unsigned int UC_AUX_TABLE_32[] = {
	0x1F68,
	0x399
};

static const unsigned int UC_AUX_TABLE_33[] = {
	0x1F69,
	0x399
};

static const unsigned int UC_AUX_TABLE_34[] = {
	0x1F6A,
	0x399
};

static const unsigned int UC_AUX_TABLE_35[] = {
	0x1F6B,
	0x399
};

static const unsigned int UC_AUX_TABLE_36[] = {
	0x1F6C,
	0x399
};

static const unsigned int UC_AUX_TABLE_37[] = {
	0x1F6D,
	0x399
};

static const unsigned int UC_AUX_TABLE_38[] = {
	0x1F6E,
	0x399
};

static const unsigned int UC_AUX_TABLE_39[] = {
	0x1F6F,
	0x399
};

static const unsigned int UC_AUX_TABLE_40[] = {
	0x1FBA,
	0x399
};

static const unsigned int UC_AUX_TABLE_41[] = {
	0x391,
	0x399
};

static const unsigned int UC_AUX_TABLE_42[] = {
	0x386,
	0x399
};

static const unsigned int UC_AUX_TABLE_43[] = {
	0x391,
	0x342
};

static const unsigned int UC_AUX_TABLE_44[] = {
	0x391,
	0x342,
	0x399
};

static const unsigned int UC_AUX_TABLE_45[] = {
	0x1FCA,
	0x399
};

static const unsigned int UC_AUX_TABLE_46[] = {
	0x397,
	0x399
};

static const unsigned int UC_AUX_TABLE_47[] = {
	0x389,
	0x399
};

static const unsigned int UC_AUX_TABLE_48[] = {
	0x397,
	0x342
};

static const unsigned int UC_AUX_TABLE_49[] = {
	0x397,
	0x342,
	0x399
};

static const unsigned int UC_AUX_TABLE_50[] = {
	0x399,
	0x308,
	0x300
};

static const unsigned int UC_AUX_TABLE_51[] = {
	0x399,
	0x342
};

static const unsigned int UC_AUX_TABLE_52[] = {
	0x399,
	0x308,
	0x342
};

static const unsigned int UC_AUX_TABLE_53[] = {
	0x3A5,
	0x308,
	0x300
};

static const unsigned int UC_AUX_TABLE_54[] = {
	0x3A1,
	0x313
};

static const unsigned int UC_AUX_TABLE_55[] = {
	0x3A5,
	0x342
};

static const unsigned int UC_AUX_TABLE_56[] = {
	0x3A5,
	0x308,
	0x342
};

static const unsigned int UC_AUX_TABLE_57[] = {
	0x1FFA,
	0x399
};

static const unsigned int UC_AUX_TABLE_58[] = {
	0x3A9,
	0x399
};

static const unsigned int UC_AUX_TABLE_59[] = {
	0x38F,
	0x399
};

static const unsigned int UC_AUX_TABLE_60[] = {
	0x3A9,
	0x342
};

static const unsigned int UC_AUX_TABLE_61[] = {
	0x3A9,
	0x342,
	0x399
};

static const unsigned int UC_AUX_TABLE_62[] = {
	0xC6,
	0xC6
};

static const unsigned int UC_AUX_TABLE_63[] = {
	0xC6,
	0xC9
};

static const unsigned int UC_AUX_TABLE_64[] = {
	0xC6,
	0xD3
};

static const unsigned int UC_AUX_TABLE_65[] = {
	0xC6,
	0xC6,
	0xC9
};

static const unsigned int UC_AUX_TABLE_66[] = {
	0xC6,
	0xC6,
	0xD3
};

static const unsigned int UC_AUX_TABLE_67[] = {
	0xE2,
	0xE3
};

static const unsigned int UC_AUX_TABLE_68[] = {
	0x544,
	0x546
};

static const unsigned int UC_AUX_TABLE_69[] = {
	0x544,
	0x535
};

static const unsigned int UC_AUX_TABLE_70[] = {
	0x544,
	0x53B
};

static const unsigned int UC_AUX_TABLE_71[] = {
	0x54E,
	0x546
};

static const unsigned int UC_AUX_TABLE_72[] = {
	0x544,
	0x53D
};

static const unsigned int * const UC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	UC_AUX_TABLE_1,
	UC_AUX_TABLE_2,
	UC_AUX_TABLE_3,
	UC_AUX_TABLE_4,
	UC_AUX_TABLE_5,
	UC_AUX_TABLE_6,
	UC_AUX_TABLE_7,
	UC_AUX_TABLE_8,
	UC_AUX_TABLE_9,
	UC_AUX_TABLE_10,
	UC_AUX_TABLE_11,
	UC_AUX_TABLE_12,
	UC_AUX_TABLE_13,
	UC_AUX_TABLE_14,
	UC_AUX_TABLE_15,
	UC_AUX_TABLE_16,
	UC_AUX_TABLE_17,
	UC_AUX_TABLE_18,
	UC_AUX_TABLE_19,
	UC_AUX_TABLE_20,
	UC_AUX_TABLE_21,
	UC_AUX_TABLE_22,
	UC_AUX_TABLE_23,
	UC_AUX_TABLE_24,
	UC_AUX_TABLE_25,
	UC_AUX_TABLE_26,
	UC_AUX_TABLE_27,
	UC_AUX_TABLE_28,
	UC_AUX_TABLE_29,
	UC_AUX_TABLE_30,
	UC_AUX_TABLE_31,
	UC_AUX_TABLE_32,
	UC_AUX_TABLE_33,
	UC_AUX_TABLE_34,
	UC_AUX_TABLE_35,
	UC_AUX_TABLE_36,
	UC_AUX_TABLE_37,
	UC_AUX_TABLE_38,
	UC_AUX_TABLE_39,
	UC_AUX_TABLE_40,
	UC_AUX_TABLE_41,
	UC_AUX_TABLE_42,
	UC_AUX_TABLE_43,
	UC_AUX_TABLE_44,
	UC_AUX_TABLE_45,
	UC_AUX_TABLE_46,
	UC_AUX_TABLE_47,
	UC_AUX_TABLE_48,
	UC_AUX_TABLE_49,
	UC_AUX_TABLE_50,
	UC_AUX_TABLE_51,
	UC_AUX_TABLE_52,
	UC_AUX_TABLE_53,
	UC_AUX_TABLE_54,
	UC_AUX_TABLE_55,
	UC_AUX_TABLE_56,
	UC_AUX_TABLE_57,
	UC_AUX_TABLE_58,
	UC_AUX_TABLE_59,
	UC_AUX_TABLE_60,
	UC_AUX_TABLE_61,
	UC_AUX_TABLE_62,
	UC_AUX_TABLE_63,
	UC_AUX_TABLE_64,
	UC_AUX_TABLE_65,
	UC_AUX_TABLE_66,
	UC_AUX_TABLE_67,
	UC_AUX_TABLE_68,
	UC_AUX_TABLE_69,
	UC_AUX_TABLE_70,
	UC_AUX_TABLE_71,
	UC_AUX_TABLE_72
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 UC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* UC_AUX_TABLE_1 */,
	2	/* UC_AUX_TABLE_2 */,
	2	/* UC_AUX_TABLE_3 */,
	3	/* UC_AUX_TABLE_4 */,
	3	/* UC_AUX_TABLE_5 */,
	2	/* UC_AUX_TABLE_6 */,
	2	/* UC_AUX_TABLE_7 */,
	2	/* UC_AUX_TABLE_8 */,
	2	/* UC_AUX_TABLE_9 */,
	2	/* UC_AUX_TABLE_10 */,
	2	/* UC_AUX_TABLE_11 */,
	2	/* UC_AUX_TABLE_12 */,
	3	/* UC_AUX_TABLE_13 */,
	3	/* UC_AUX_TABLE_14 */,
	3	/* UC_AUX_TABLE_15 */,
	2	/* UC_AUX_TABLE_16 */,
	2	/* UC_AUX_TABLE_17 */,
	2	/* UC_AUX_TABLE_18 */,
	2	/* UC_AUX_TABLE_19 */,
	2	/* UC_AUX_TABLE_20 */,
	2	/* UC_AUX_TABLE_21 */,
	2	/* UC_AUX_TABLE_22 */,
	2	/* UC_AUX_TABLE_23 */,
	2	/* UC_AUX_TABLE_24 */,
	2	/* UC_AUX_TABLE_25 */,
	2	/* UC_AUX_TABLE_26 */,
	2	/* UC_AUX_TABLE_27 */,
	2	/* UC_AUX_TABLE_28 */,
	2	/* UC_AUX_TABLE_29 */,
	2	/* UC_AUX_TABLE_30 */,
	2	/* UC_AUX_TABLE_31 */,
	2	/* UC_AUX_TABLE_32 */,
	2	/* UC_AUX_TABLE_33 */,
	2	/* UC_AUX_TABLE_34 */,
	2	/* UC_AUX_TABLE_35 */,
	2	/* UC_AUX_TABLE_36 */,
	2	/* UC_AUX_TABLE_37 */,
	2	/* UC_AUX_TABLE_38 */,
	2	/* UC_AUX_TABLE_39 */,
	2	/* UC_AUX_TABLE_40 */,
	2	/* UC_AUX_TABLE_41 */,
	2	/* UC_AUX_TABLE_42 */,
	2	/* UC_AUX_TABLE_43 */,
	3	/* UC_AUX_TABLE_44 */,
	2	/* UC_AUX_TABLE_45 */,
	2	/* UC_AUX_TABLE_46 */,
	2	/* UC_AUX_TABLE_47 */,
	2	/* UC_AUX_TABLE_48 */,
	3	/* UC_AUX_TABLE_49 */,
	3	/* UC_AUX_TABLE_50 */,
	2	/* UC_AUX_TABLE_51 */,
	3	/* UC_AUX_TABLE_52 */,
	3	/* UC_AUX_TABLE_53 */,
	2	/* UC_AUX_TABLE_54 */,
	2	/* UC_AUX_TABLE_55 */,
	3	/* UC_AUX_TABLE_56 */,
	2	/* UC_AUX_TABLE_57 */,
	2	/* UC_AUX_TABLE_58 */,
	2	/* UC_AUX_TABLE_59 */,
	2	/* UC_AUX_TABLE_60 */,
	3	/* UC_AUX_TABLE_61 */,
	2	/* UC_AUX_TABLE_62 */,
	2	/* UC_AUX_TABLE_63 */,
	2	/* UC_AUX_TABLE_64 */,
	3	/* UC_AUX_TABLE_65 */,
	3	/* UC_AUX_TABLE_66 */,
	2	/* UC_AUX_TABLE_67 */,
	2	/* UC_AUX_TABLE_68 */,
	2	/* UC_AUX_TABLE_69 */,
	2	/* UC_AUX_TABLE_70 */,
	2	/* UC_AUX_TABLE_71 */,
	2	/* UC_AUX_TABLE_72 */
};

static const int Uppercase_Mapping_invmap[] = { /* for EBCDIC 1047 */
	0,
	0x62,
	0,
	0x71,
	UC_use_AUX_TABLE_1,
	0,
	0x80,
	0,
	0xC1,
	0,
	0xAC,
	0xBA,
	0xAE,
	0,
	0xD1,
	0,
	0x9E,
	0,
	0x39C,
	0,
	0xE2,
	0,
	0xEB,
	0,
	0xFB,
	0x178,
	0,
	0x100,
	0,
	0x102,
	0,
	0x104,
	0,
	0x106,
	0,
	0x108,
	0,
	0x10A,
	0,
	0x10C,
	0,
	0x10E,
	0,
	0x110,
	0,
	0x112,
	0,
	0x114,
	0,
	0x116,
	0,
	0x118,
	0,
	0x11A,
	0,
	0x11C,
	0,
	0x11E,
	0,
	0x120,
	0,
	0x122,
	0,
	0x124,
	0,
	0x126,
	0,
	0x128,
	0,
	0x12A,
	0,
	0x12C,
	0,
	0x12E,
	0,
	0xC9,
	0,
	0x132,
	0,
	0x134,
	0,
	0x136,
	0,
	0x139,
	0,
	0x13B,
	0,
	0x13D,
	0,
	0x13F,
	0,
	0x141,
	0,
	0x143,
	0,
	0x145,
	0,
	0x147,
	UC_use_AUX_TABLE_2,
	0,
	0x14A,
	0,
	0x14C,
	0,
	0x14E,
	0,
	0x150,
	0,
	0x152,
	0,
	0x154,
	0,
	0x156,
	0,
	0x158,
	0,
	0x15A,
	0,
	0x15C,
	0,
	0x15E,
	0,
	0x160,
	0,
	0x162,
	0,
	0x164,
	0,
	0x166,
	0,
	0x168,
	0,
	0x16A,
	0,
	0x16C,
	0,
	0x16E,
	0,
	0x170,
	0,
	0x172,
	0,
	0x174,
	0,
	0x176,
	0,
	0x179,
	0,
	0x17B,
	0,
	0x17D,
	0xE2,
	0x243,
	0,
	0x182,
	0,
	0x184,
	0,
	0x187,
	0,
	0x18B,
	0,
	0x191,
	0,
	0x1F6,
	0,
	0x198,
	0x23D,
	0,
	0x220,
	0,
	0x1A0,
	0,
	0x1A2,
	0,
	0x1A4,
	0,
	0x1A7,
	0,
	0x1AC,
	0,
	0x1AF,
	0,
	0x1B3,
	0,
	0x1B5,
	0,
	0x1B8,
	0,
	0x1BC,
	0,
	0x1F7,
	0,
	0x1C4,
	0x1C4,
	0,
	0x1C7,
	0x1C7,
	0,
	0x1CA,
	0x1CA,
	0,
	0x1CD,
	0,
	0x1CF,
	0,
	0x1D1,
	0,
	0x1D3,
	0,
	0x1D5,
	0,
	0x1D7,
	0,
	0x1D9,
	0,
	0x1DB,
	0x18E,
	0,
	0x1DE,
	0,
	0x1E0,
	0,
	0x1E2,
	0,
	0x1E4,
	0,
	0x1E6,
	0,
	0x1E8,
	0,
	0x1EA,
	0,
	0x1EC,
	0,
	0x1EE,
	UC_use_AUX_TABLE_3,
	0,
	0x1F1,
	0x1F1,
	0,
	0x1F4,
	0,
	0x1F8,
	0,
	0x1FA,
	0,
	0x1FC,
	0,
	0x1FE,
	0,
	0x200,
	0,
	0x202,
	0,
	0x204,
	0,
	0x206,
	0,
	0x208,
	0,
	0x20A,
	0,
	0x20C,
	0,
	0x20E,
	0,
	0x210,
	0,
	0x212,
	0,
	0x214,
	0,
	0x216,
	0,
	0x218,
	0,
	0x21A,
	0,
	0x21C,
	0,
	0x21E,
	0,
	0x222,
	0,
	0x224,
	0,
	0x226,
	0,
	0x228,
	0,
	0x22A,
	0,
	0x22C,
	0,
	0x22E,
	0,
	0x230,
	0,
	0x232,
	0,
	0x23B,
	0,
	0x2C7E,
	0,
	0x241,
	0,
	0x246,
	0,
	0x248,
	0,
	0x24A,
	0,
	0x24C,
	0,
	0x24E,
	0x2C6F,
	0x2C6D,
	0x2C70,
	0x181,
	0x186,
	0,
	0x189,
	0,
	0x18F,
	0,
	0x190,
	0xA7AB,
	0,
	0x193,
	0xA7AC,
	0,
	0x194,
	0,
	0xA78D,
	0xA7AA,
	0,
	0x197,
	0x196,
	0xA7AE,
	0x2C62,
	0xA7AD,
	0,
	0x19C,
	0,
	0x2C6E,
	0x19D,
	0,
	0x19F,
	0,
	0x2C64,
	0,
	0x1A6,
	0,
	0x1A9,
	0,
	0xA7B1,
	0x1AE,
	0x244,
	0x1B1,
	0x245,
	0,
	0x1B7,
	0,
	0xA7B2,
	0xA7B0,
	0,
	0x399,
	0,
	0x370,
	0,
	0x372,
	0,
	0x376,
	0,
	0x3FD,
	0,
	UC_use_AUX_TABLE_4,
	0,
	0x386,
	0x388,
	UC_use_AUX_TABLE_5,
	0x391,
	0x3A3,
	0x3A3,
	0x38C,
	0x38E,
	0,
	0x392,
	0x398,
	0,
	0x3A6,
	0x3A0,
	0x3CF,
	0,
	0x3D8,
	0,
	0x3DA,
	0,
	0x3DC,
	0,
	0x3DE,
	0,
	0x3E0,
	0,
	0x3E2,
	0,
	0x3E4,
	0,
	0x3E6,
	0,
	0x3E8,
	0,
	0x3EA,
	0,
	0x3EC,
	0,
	0x3EE,
	0x39A,
	0x3A1,
	0x3F9,
	0x37F,
	0,
	0x395,
	0,
	0x3F7,
	0,
	0x3FA,
	0,
	0x410,
	0x400,
	0,
	0x460,
	0,
	0x462,
	0,
	0x464,
	0,
	0x466,
	0,
	0x468,
	0,
	0x46A,
	0,
	0x46C,
	0,
	0x46E,
	0,
	0x470,
	0,
	0x472,
	0,
	0x474,
	0,
	0x476,
	0,
	0x478,
	0,
	0x47A,
	0,
	0x47C,
	0,
	0x47E,
	0,
	0x480,
	0,
	0x48A,
	0,
	0x48C,
	0,
	0x48E,
	0,
	0x490,
	0,
	0x492,
	0,
	0x494,
	0,
	0x496,
	0,
	0x498,
	0,
	0x49A,
	0,
	0x49C,
	0,
	0x49E,
	0,
	0x4A0,
	0,
	0x4A2,
	0,
	0x4A4,
	0,
	0x4A6,
	0,
	0x4A8,
	0,
	0x4AA,
	0,
	0x4AC,
	0,
	0x4AE,
	0,
	0x4B0,
	0,
	0x4B2,
	0,
	0x4B4,
	0,
	0x4B6,
	0,
	0x4B8,
	0,
	0x4BA,
	0,
	0x4BC,
	0,
	0x4BE,
	0,
	0x4C1,
	0,
	0x4C3,
	0,
	0x4C5,
	0,
	0x4C7,
	0,
	0x4C9,
	0,
	0x4CB,
	0,
	0x4CD,
	0x4C0,
	0,
	0x4D0,
	0,
	0x4D2,
	0,
	0x4D4,
	0,
	0x4D6,
	0,
	0x4D8,
	0,
	0x4DA,
	0,
	0x4DC,
	0,
	0x4DE,
	0,
	0x4E0,
	0,
	0x4E2,
	0,
	0x4E4,
	0,
	0x4E6,
	0,
	0x4E8,
	0,
	0x4EA,
	0,
	0x4EC,
	0,
	0x4EE,
	0,
	0x4F0,
	0,
	0x4F2,
	0,
	0x4F4,
	0,
	0x4F6,
	0,
	0x4F8,
	0,
	0x4FA,
	0,
	0x4FC,
	0,
	0x4FE,
	0,
	0x500,
	0,
	0x502,
	0,
	0x504,
	0,
	0x506,
	0,
	0x508,
	0,
	0x50A,
	0,
	0x50C,
	0,
	0x50E,
	0,
	0x510,
	0,
	0x512,
	0,
	0x514,
	0,
	0x516,
	0,
	0x518,
	0,
	0x51A,
	0,
	0x51C,
	0,
	0x51E,
	0,
	0x520,
	0,
	0x522,
	0,
	0x524,
	0,
	0x526,
	0,
	0x528,
	0,
	0x52A,
	0,
	0x52C,
	0,
	0x52E,
	0,
	0x531,
	UC_use_AUX_TABLE_6,
	0,
	0x13F0,
	0,
	0x412,
	0x414,
	0x41E,
	0x421,
	0x422,
	0x42A,
	0x462,
	0xA64A,
	0,
	0xA77D,
	0,
	0x2C63,
	0,
	0x1E00,
	0,
	0x1E02,
	0,
	0x1E04,
	0,
	0x1E06,
	0,
	0x1E08,
	0,
	0x1E0A,
	0,
	0x1E0C,
	0,
	0x1E0E,
	0,
	0x1E10,
	0,
	0x1E12,
	0,
	0x1E14,
	0,
	0x1E16,
	0,
	0x1E18,
	0,
	0x1E1A,
	0,
	0x1E1C,
	0,
	0x1E1E,
	0,
	0x1E20,
	0,
	0x1E22,
	0,
	0x1E24,
	0,
	0x1E26,
	0,
	0x1E28,
	0,
	0x1E2A,
	0,
	0x1E2C,
	0,
	0x1E2E,
	0,
	0x1E30,
	0,
	0x1E32,
	0,
	0x1E34,
	0,
	0x1E36,
	0,
	0x1E38,
	0,
	0x1E3A,
	0,
	0x1E3C,
	0,
	0x1E3E,
	0,
	0x1E40,
	0,
	0x1E42,
	0,
	0x1E44,
	0,
	0x1E46,
	0,
	0x1E48,
	0,
	0x1E4A,
	0,
	0x1E4C,
	0,
	0x1E4E,
	0,
	0x1E50,
	0,
	0x1E52,
	0,
	0x1E54,
	0,
	0x1E56,
	0,
	0x1E58,
	0,
	0x1E5A,
	0,
	0x1E5C,
	0,
	0x1E5E,
	0,
	0x1E60,
	0,
	0x1E62,
	0,
	0x1E64,
	0,
	0x1E66,
	0,
	0x1E68,
	0,
	0x1E6A,
	0,
	0x1E6C,
	0,
	0x1E6E,
	0,
	0x1E70,
	0,
	0x1E72,
	0,
	0x1E74,
	0,
	0x1E76,
	0,
	0x1E78,
	0,
	0x1E7A,
	0,
	0x1E7C,
	0,
	0x1E7E,
	0,
	0x1E80,
	0,
	0x1E82,
	0,
	0x1E84,
	0,
	0x1E86,
	0,
	0x1E88,
	0,
	0x1E8A,
	0,
	0x1E8C,
	0,
	0x1E8E,
	0,
	0x1E90,
	0,
	0x1E92,
	0,
	0x1E94,
	UC_use_AUX_TABLE_7,
	UC_use_AUX_TABLE_8,
	UC_use_AUX_TABLE_9,
	UC_use_AUX_TABLE_10,
	UC_use_AUX_TABLE_11,
	0x1E60,
	0,
	0x1EA0,
	0,
	0x1EA2,
	0,
	0x1EA4,
	0,
	0x1EA6,
	0,
	0x1EA8,
	0,
	0x1EAA,
	0,
	0x1EAC,
	0,
	0x1EAE,
	0,
	0x1EB0,
	0,
	0x1EB2,
	0,
	0x1EB4,
	0,
	0x1EB6,
	0,
	0x1EB8,
	0,
	0x1EBA,
	0,
	0x1EBC,
	0,
	0x1EBE,
	0,
	0x1EC0,
	0,
	0x1EC2,
	0,
	0x1EC4,
	0,
	0x1EC6,
	0,
	0x1EC8,
	0,
	0x1ECA,
	0,
	0x1ECC,
	0,
	0x1ECE,
	0,
	0x1ED0,
	0,
	0x1ED2,
	0,
	0x1ED4,
	0,
	0x1ED6,
	0,
	0x1ED8,
	0,
	0x1EDA,
	0,
	0x1EDC,
	0,
	0x1EDE,
	0,
	0x1EE0,
	0,
	0x1EE2,
	0,
	0x1EE4,
	0,
	0x1EE6,
	0,
	0x1EE8,
	0,
	0x1EEA,
	0,
	0x1EEC,
	0,
	0x1EEE,
	0,
	0x1EF0,
	0,
	0x1EF2,
	0,
	0x1EF4,
	0,
	0x1EF6,
	0,
	0x1EF8,
	0,
	0x1EFA,
	0,
	0x1EFC,
	0,
	0x1EFE,
	0x1F08,
	0,
	0x1F18,
	0,
	0x1F28,
	0,
	0x1F38,
	0,
	0x1F48,
	0,
	UC_use_AUX_TABLE_12,
	0x1F59,
	UC_use_AUX_TABLE_13,
	0x1F5B,
	UC_use_AUX_TABLE_14,
	0x1F5D,
	UC_use_AUX_TABLE_15,
	0x1F5F,
	0,
	0x1F68,
	0,
	0x1FBA,
	0x1FC8,
	0x1FDA,
	0x1FF8,
	0x1FEA,
	0x1FFA,
	0,
	UC_use_AUX_TABLE_16,
	UC_use_AUX_TABLE_17,
	UC_use_AUX_TABLE_18,
	UC_use_AUX_TABLE_19,
	UC_use_AUX_TABLE_20,
	UC_use_AUX_TABLE_21,
	UC_use_AUX_TABLE_22,
	UC_use_AUX_TABLE_23,
	UC_use_AUX_TABLE_16,
	UC_use_AUX_TABLE_17,
	UC_use_AUX_TABLE_18,
	UC_use_AUX_TABLE_19,
	UC_use_AUX_TABLE_20,
	UC_use_AUX_TABLE_21,
	UC_use_AUX_TABLE_22,
	UC_use_AUX_TABLE_23,
	UC_use_AUX_TABLE_24,
	UC_use_AUX_TABLE_25,
	UC_use_AUX_TABLE_26,
	UC_use_AUX_TABLE_27,
	UC_use_AUX_TABLE_28,
	UC_use_AUX_TABLE_29,
	UC_use_AUX_TABLE_30,
	UC_use_AUX_TABLE_31,
	UC_use_AUX_TABLE_24,
	UC_use_AUX_TABLE_25,
	UC_use_AUX_TABLE_26,
	UC_use_AUX_TABLE_27,
	UC_use_AUX_TABLE_28,
	UC_use_AUX_TABLE_29,
	UC_use_AUX_TABLE_30,
	UC_use_AUX_TABLE_31,
	UC_use_AUX_TABLE_32,
	UC_use_AUX_TABLE_33,
	UC_use_AUX_TABLE_34,
	UC_use_AUX_TABLE_35,
	UC_use_AUX_TABLE_36,
	UC_use_AUX_TABLE_37,
	UC_use_AUX_TABLE_38,
	UC_use_AUX_TABLE_39,
	UC_use_AUX_TABLE_32,
	UC_use_AUX_TABLE_33,
	UC_use_AUX_TABLE_34,
	UC_use_AUX_TABLE_35,
	UC_use_AUX_TABLE_36,
	UC_use_AUX_TABLE_37,
	UC_use_AUX_TABLE_38,
	UC_use_AUX_TABLE_39,
	0x1FB8,
	UC_use_AUX_TABLE_40,
	UC_use_AUX_TABLE_41,
	UC_use_AUX_TABLE_42,
	0,
	UC_use_AUX_TABLE_43,
	UC_use_AUX_TABLE_44,
	0,
	UC_use_AUX_TABLE_41,
	0,
	0x399,
	0,
	UC_use_AUX_TABLE_45,
	UC_use_AUX_TABLE_46,
	UC_use_AUX_TABLE_47,
	0,
	UC_use_AUX_TABLE_48,
	UC_use_AUX_TABLE_49,
	0,
	UC_use_AUX_TABLE_46,
	0,
	0x1FD8,
	UC_use_AUX_TABLE_50,
	UC_use_AUX_TABLE_4,
	0,
	UC_use_AUX_TABLE_51,
	UC_use_AUX_TABLE_52,
	0,
	0x1FE8,
	UC_use_AUX_TABLE_53,
	UC_use_AUX_TABLE_5,
	UC_use_AUX_TABLE_54,
	0x1FEC,
	UC_use_AUX_TABLE_55,
	UC_use_AUX_TABLE_56,
	0,
	UC_use_AUX_TABLE_57,
	UC_use_AUX_TABLE_58,
	UC_use_AUX_TABLE_59,
	0,
	UC_use_AUX_TABLE_60,
	UC_use_AUX_TABLE_61,
	0,
	UC_use_AUX_TABLE_58,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	0xA64A,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B3,
	0,
	0x13A0,
	0,
	UC_use_AUX_TABLE_62,
	UC_use_AUX_TABLE_63,
	UC_use_AUX_TABLE_64,
	UC_use_AUX_TABLE_65,
	UC_use_AUX_TABLE_66,
	UC_use_AUX_TABLE_67,
	0,
	UC_use_AUX_TABLE_68,
	UC_use_AUX_TABLE_69,
	UC_use_AUX_TABLE_70,
	UC_use_AUX_TABLE_71,
	UC_use_AUX_TABLE_72,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x1E900,
	0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV Uppercase_Mapping_invlist[] = { /* for EBCDIC 037 */
	1379,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x59,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xDF,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19A,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C5,
	0x1C6,
	0x1C7,
	0x1C8,
	0x1C9,
	0x1CA,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F0,
	0x1F1,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x250,
	0x251,
	0x252,
	0x253,
	0x254,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25C,
	0x25D,
	0x260,
	0x261,
	0x262,
	0x263,
	0x264,
	0x265,
	0x266,
	0x267,
	0x268,
	0x269,
	0x26A,
	0x26B,
	0x26C,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x272,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x288,
	0x289,
	0x28A,
	0x28C,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29E,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3AD,
	0x3B0,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CC,
	0x3CD,
	0x3CF,
	0x3D0,
	0x3D1,
	0x3D2,
	0x3D5,
	0x3D6,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F1,
	0x3F2,
	0x3F3,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x450,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4CF,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x587,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C81,
	0x1C82,
	0x1C83,
	0x1C85,
	0x1C86,
	0x1C87,
	0x1C88,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E96,
	0x1E97,
	0x1E98,
	0x1E99,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F00,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F72,
	0x1F76,
	0x1F78,
	0x1F7A,
	0x1F7C,
	0x1F7E,
	0x1F80,
	0x1F81,
	0x1F82,
	0x1F83,
	0x1F84,
	0x1F85,
	0x1F86,
	0x1F87,
	0x1F88,
	0x1F89,
	0x1F8A,
	0x1F8B,
	0x1F8C,
	0x1F8D,
	0x1F8E,
	0x1F8F,
	0x1F90,
	0x1F91,
	0x1F92,
	0x1F93,
	0x1F94,
	0x1F95,
	0x1F96,
	0x1F97,
	0x1F98,
	0x1F99,
	0x1F9A,
	0x1F9B,
	0x1F9C,
	0x1F9D,
	0x1F9E,
	0x1F9F,
	0x1FA0,
	0x1FA1,
	0x1FA2,
	0x1FA3,
	0x1FA4,
	0x1FA5,
	0x1FA6,
	0x1FA7,
	0x1FA8,
	0x1FA9,
	0x1FAA,
	0x1FAB,
	0x1FAC,
	0x1FAD,
	0x1FAE,
	0x1FAF,
	0x1FB0,
	0x1FB2,
	0x1FB3,
	0x1FB4,
	0x1FB5,
	0x1FB6,
	0x1FB7,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC3,
	0x1FC4,
	0x1FC5,
	0x1FC6,
	0x1FC7,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD2,
	0x1FD3,
	0x1FD4,
	0x1FD6,
	0x1FD7,
	0x1FD8,
	0x1FE0,
	0x1FE2,
	0x1FE3,
	0x1FE4,
	0x1FE5,
	0x1FE6,
	0x1FE7,
	0x1FE8,
	0x1FF2,
	0x1FF3,
	0x1FF4,
	0x1FF5,
	0x1FF6,
	0x1FF7,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C66,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB01,
	0xFB02,
	0xFB03,
	0xFB04,
	0xFB05,
	0xFB07,
	0xFB13,
	0xFB14,
	0xFB15,
	0xFB16,
	0xFB17,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	UC_0 = 0,
	UC_use_AUX_TABLE_1 = -1,
	UC_use_AUX_TABLE_2 = -2,
	UC_use_AUX_TABLE_3 = -3,
	UC_use_AUX_TABLE_4 = -4,
	UC_use_AUX_TABLE_5 = -5,
	UC_use_AUX_TABLE_6 = -6,
	UC_use_AUX_TABLE_7 = -7,
	UC_use_AUX_TABLE_8 = -8,
	UC_use_AUX_TABLE_9 = -9,
	UC_use_AUX_TABLE_10 = -10,
	UC_use_AUX_TABLE_11 = -11,
	UC_use_AUX_TABLE_12 = -12,
	UC_use_AUX_TABLE_13 = -13,
	UC_use_AUX_TABLE_14 = -14,
	UC_use_AUX_TABLE_15 = -15,
	UC_use_AUX_TABLE_16 = -16,
	UC_use_AUX_TABLE_17 = -17,
	UC_use_AUX_TABLE_18 = -18,
	UC_use_AUX_TABLE_19 = -19,
	UC_use_AUX_TABLE_20 = -20,
	UC_use_AUX_TABLE_21 = -21,
	UC_use_AUX_TABLE_22 = -22,
	UC_use_AUX_TABLE_23 = -23,
	UC_use_AUX_TABLE_24 = -24,
	UC_use_AUX_TABLE_25 = -25,
	UC_use_AUX_TABLE_26 = -26,
	UC_use_AUX_TABLE_27 = -27,
	UC_use_AUX_TABLE_28 = -28,
	UC_use_AUX_TABLE_29 = -29,
	UC_use_AUX_TABLE_30 = -30,
	UC_use_AUX_TABLE_31 = -31,
	UC_use_AUX_TABLE_32 = -32,
	UC_use_AUX_TABLE_33 = -33,
	UC_use_AUX_TABLE_34 = -34,
	UC_use_AUX_TABLE_35 = -35,
	UC_use_AUX_TABLE_36 = -36,
	UC_use_AUX_TABLE_37 = -37,
	UC_use_AUX_TABLE_38 = -38,
	UC_use_AUX_TABLE_39 = -39,
	UC_use_AUX_TABLE_40 = -40,
	UC_use_AUX_TABLE_41 = -41,
	UC_use_AUX_TABLE_42 = -42,
	UC_use_AUX_TABLE_43 = -43,
	UC_use_AUX_TABLE_44 = -44,
	UC_use_AUX_TABLE_45 = -45,
	UC_use_AUX_TABLE_46 = -46,
	UC_use_AUX_TABLE_47 = -47,
	UC_use_AUX_TABLE_48 = -48,
	UC_use_AUX_TABLE_49 = -49,
	UC_use_AUX_TABLE_50 = -50,
	UC_use_AUX_TABLE_51 = -51,
	UC_use_AUX_TABLE_52 = -52,
	UC_use_AUX_TABLE_53 = -53,
	UC_use_AUX_TABLE_54 = -54,
	UC_use_AUX_TABLE_55 = -55,
	UC_use_AUX_TABLE_56 = -56,
	UC_use_AUX_TABLE_57 = -57,
	UC_use_AUX_TABLE_58 = -58,
	UC_use_AUX_TABLE_59 = -59,
	UC_use_AUX_TABLE_60 = -60,
	UC_use_AUX_TABLE_61 = -61,
	UC_use_AUX_TABLE_62 = -62,
	UC_use_AUX_TABLE_63 = -63,
	UC_use_AUX_TABLE_64 = -64,
	UC_use_AUX_TABLE_65 = -65,
	UC_use_AUX_TABLE_66 = -66,
	UC_use_AUX_TABLE_67 = -67,
	UC_use_AUX_TABLE_68 = -68,
	UC_use_AUX_TABLE_69 = -69,
	UC_use_AUX_TABLE_70 = -70,
	UC_use_AUX_TABLE_71 = -71,
	UC_use_AUX_TABLE_72 = -72
} UC_enum;

#   endif	/* EBCDIC 037 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

#define HAS_UC_AUX_TABLES

static const unsigned int UC_AUX_TABLE_1[] = {
	0xE2,
	0xE2
};

static const unsigned int UC_AUX_TABLE_2[] = {
	0x2BC,
	0xD5
};

static const unsigned int UC_AUX_TABLE_3[] = {
	0xD1,
	0x30C
};

static const unsigned int UC_AUX_TABLE_4[] = {
	0x399,
	0x308,
	0x301
};

static const unsigned int UC_AUX_TABLE_5[] = {
	0x3A5,
	0x308,
	0x301
};

static const unsigned int UC_AUX_TABLE_6[] = {
	0x535,
	0x552
};

static const unsigned int UC_AUX_TABLE_7[] = {
	0xC8,
	0x331
};

static const unsigned int UC_AUX_TABLE_8[] = {
	0xE3,
	0x308
};

static const unsigned int UC_AUX_TABLE_9[] = {
	0xE6,
	0x30A
};

static const unsigned int UC_AUX_TABLE_10[] = {
	0xE8,
	0x30A
};

static const unsigned int UC_AUX_TABLE_11[] = {
	0xC1,
	0x2BE
};

static const unsigned int UC_AUX_TABLE_12[] = {
	0x3A5,
	0x313
};

static const unsigned int UC_AUX_TABLE_13[] = {
	0x3A5,
	0x313,
	0x300
};

static const unsigned int UC_AUX_TABLE_14[] = {
	0x3A5,
	0x313,
	0x301
};

static const unsigned int UC_AUX_TABLE_15[] = {
	0x3A5,
	0x313,
	0x342
};

static const unsigned int UC_AUX_TABLE_16[] = {
	0x1F08,
	0x399
};

static const unsigned int UC_AUX_TABLE_17[] = {
	0x1F09,
	0x399
};

static const unsigned int UC_AUX_TABLE_18[] = {
	0x1F0A,
	0x399
};

static const unsigned int UC_AUX_TABLE_19[] = {
	0x1F0B,
	0x399
};

static const unsigned int UC_AUX_TABLE_20[] = {
	0x1F0C,
	0x399
};

static const unsigned int UC_AUX_TABLE_21[] = {
	0x1F0D,
	0x399
};

static const unsigned int UC_AUX_TABLE_22[] = {
	0x1F0E,
	0x399
};

static const unsigned int UC_AUX_TABLE_23[] = {
	0x1F0F,
	0x399
};

static const unsigned int UC_AUX_TABLE_24[] = {
	0x1F28,
	0x399
};

static const unsigned int UC_AUX_TABLE_25[] = {
	0x1F29,
	0x399
};

static const unsigned int UC_AUX_TABLE_26[] = {
	0x1F2A,
	0x399
};

static const unsigned int UC_AUX_TABLE_27[] = {
	0x1F2B,
	0x399
};

static const unsigned int UC_AUX_TABLE_28[] = {
	0x1F2C,
	0x399
};

static const unsigned int UC_AUX_TABLE_29[] = {
	0x1F2D,
	0x399
};

static const unsigned int UC_AUX_TABLE_30[] = {
	0x1F2E,
	0x399
};

static const unsigned int UC_AUX_TABLE_31[] = {
	0x1F2F,
	0x399
};

static const unsigned int UC_AUX_TABLE_32[] = {
	0x1F68,
	0x399
};

static const unsigned int UC_AUX_TABLE_33[] = {
	0x1F69,
	0x399
};

static const unsigned int UC_AUX_TABLE_34[] = {
	0x1F6A,
	0x399
};

static const unsigned int UC_AUX_TABLE_35[] = {
	0x1F6B,
	0x399
};

static const unsigned int UC_AUX_TABLE_36[] = {
	0x1F6C,
	0x399
};

static const unsigned int UC_AUX_TABLE_37[] = {
	0x1F6D,
	0x399
};

static const unsigned int UC_AUX_TABLE_38[] = {
	0x1F6E,
	0x399
};

static const unsigned int UC_AUX_TABLE_39[] = {
	0x1F6F,
	0x399
};

static const unsigned int UC_AUX_TABLE_40[] = {
	0x1FBA,
	0x399
};

static const unsigned int UC_AUX_TABLE_41[] = {
	0x391,
	0x399
};

static const unsigned int UC_AUX_TABLE_42[] = {
	0x386,
	0x399
};

static const unsigned int UC_AUX_TABLE_43[] = {
	0x391,
	0x342
};

static const unsigned int UC_AUX_TABLE_44[] = {
	0x391,
	0x342,
	0x399
};

static const unsigned int UC_AUX_TABLE_45[] = {
	0x1FCA,
	0x399
};

static const unsigned int UC_AUX_TABLE_46[] = {
	0x397,
	0x399
};

static const unsigned int UC_AUX_TABLE_47[] = {
	0x389,
	0x399
};

static const unsigned int UC_AUX_TABLE_48[] = {
	0x397,
	0x342
};

static const unsigned int UC_AUX_TABLE_49[] = {
	0x397,
	0x342,
	0x399
};

static const unsigned int UC_AUX_TABLE_50[] = {
	0x399,
	0x308,
	0x300
};

static const unsigned int UC_AUX_TABLE_51[] = {
	0x399,
	0x342
};

static const unsigned int UC_AUX_TABLE_52[] = {
	0x399,
	0x308,
	0x342
};

static const unsigned int UC_AUX_TABLE_53[] = {
	0x3A5,
	0x308,
	0x300
};

static const unsigned int UC_AUX_TABLE_54[] = {
	0x3A1,
	0x313
};

static const unsigned int UC_AUX_TABLE_55[] = {
	0x3A5,
	0x342
};

static const unsigned int UC_AUX_TABLE_56[] = {
	0x3A5,
	0x308,
	0x342
};

static const unsigned int UC_AUX_TABLE_57[] = {
	0x1FFA,
	0x399
};

static const unsigned int UC_AUX_TABLE_58[] = {
	0x3A9,
	0x399
};

static const unsigned int UC_AUX_TABLE_59[] = {
	0x38F,
	0x399
};

static const unsigned int UC_AUX_TABLE_60[] = {
	0x3A9,
	0x342
};

static const unsigned int UC_AUX_TABLE_61[] = {
	0x3A9,
	0x342,
	0x399
};

static const unsigned int UC_AUX_TABLE_62[] = {
	0xC6,
	0xC6
};

static const unsigned int UC_AUX_TABLE_63[] = {
	0xC6,
	0xC9
};

static const unsigned int UC_AUX_TABLE_64[] = {
	0xC6,
	0xD3
};

static const unsigned int UC_AUX_TABLE_65[] = {
	0xC6,
	0xC6,
	0xC9
};

static const unsigned int UC_AUX_TABLE_66[] = {
	0xC6,
	0xC6,
	0xD3
};

static const unsigned int UC_AUX_TABLE_67[] = {
	0xE2,
	0xE3
};

static const unsigned int UC_AUX_TABLE_68[] = {
	0x544,
	0x546
};

static const unsigned int UC_AUX_TABLE_69[] = {
	0x544,
	0x535
};

static const unsigned int UC_AUX_TABLE_70[] = {
	0x544,
	0x53B
};

static const unsigned int UC_AUX_TABLE_71[] = {
	0x54E,
	0x546
};

static const unsigned int UC_AUX_TABLE_72[] = {
	0x544,
	0x53D
};

static const unsigned int * const UC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	UC_AUX_TABLE_1,
	UC_AUX_TABLE_2,
	UC_AUX_TABLE_3,
	UC_AUX_TABLE_4,
	UC_AUX_TABLE_5,
	UC_AUX_TABLE_6,
	UC_AUX_TABLE_7,
	UC_AUX_TABLE_8,
	UC_AUX_TABLE_9,
	UC_AUX_TABLE_10,
	UC_AUX_TABLE_11,
	UC_AUX_TABLE_12,
	UC_AUX_TABLE_13,
	UC_AUX_TABLE_14,
	UC_AUX_TABLE_15,
	UC_AUX_TABLE_16,
	UC_AUX_TABLE_17,
	UC_AUX_TABLE_18,
	UC_AUX_TABLE_19,
	UC_AUX_TABLE_20,
	UC_AUX_TABLE_21,
	UC_AUX_TABLE_22,
	UC_AUX_TABLE_23,
	UC_AUX_TABLE_24,
	UC_AUX_TABLE_25,
	UC_AUX_TABLE_26,
	UC_AUX_TABLE_27,
	UC_AUX_TABLE_28,
	UC_AUX_TABLE_29,
	UC_AUX_TABLE_30,
	UC_AUX_TABLE_31,
	UC_AUX_TABLE_32,
	UC_AUX_TABLE_33,
	UC_AUX_TABLE_34,
	UC_AUX_TABLE_35,
	UC_AUX_TABLE_36,
	UC_AUX_TABLE_37,
	UC_AUX_TABLE_38,
	UC_AUX_TABLE_39,
	UC_AUX_TABLE_40,
	UC_AUX_TABLE_41,
	UC_AUX_TABLE_42,
	UC_AUX_TABLE_43,
	UC_AUX_TABLE_44,
	UC_AUX_TABLE_45,
	UC_AUX_TABLE_46,
	UC_AUX_TABLE_47,
	UC_AUX_TABLE_48,
	UC_AUX_TABLE_49,
	UC_AUX_TABLE_50,
	UC_AUX_TABLE_51,
	UC_AUX_TABLE_52,
	UC_AUX_TABLE_53,
	UC_AUX_TABLE_54,
	UC_AUX_TABLE_55,
	UC_AUX_TABLE_56,
	UC_AUX_TABLE_57,
	UC_AUX_TABLE_58,
	UC_AUX_TABLE_59,
	UC_AUX_TABLE_60,
	UC_AUX_TABLE_61,
	UC_AUX_TABLE_62,
	UC_AUX_TABLE_63,
	UC_AUX_TABLE_64,
	UC_AUX_TABLE_65,
	UC_AUX_TABLE_66,
	UC_AUX_TABLE_67,
	UC_AUX_TABLE_68,
	UC_AUX_TABLE_69,
	UC_AUX_TABLE_70,
	UC_AUX_TABLE_71,
	UC_AUX_TABLE_72
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */
static const U8 UC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* UC_AUX_TABLE_1 */,
	2	/* UC_AUX_TABLE_2 */,
	2	/* UC_AUX_TABLE_3 */,
	3	/* UC_AUX_TABLE_4 */,
	3	/* UC_AUX_TABLE_5 */,
	2	/* UC_AUX_TABLE_6 */,
	2	/* UC_AUX_TABLE_7 */,
	2	/* UC_AUX_TABLE_8 */,
	2	/* UC_AUX_TABLE_9 */,
	2	/* UC_AUX_TABLE_10 */,
	2	/* UC_AUX_TABLE_11 */,
	2	/* UC_AUX_TABLE_12 */,
	3	/* UC_AUX_TABLE_13 */,
	3	/* UC_AUX_TABLE_14 */,
	3	/* UC_AUX_TABLE_15 */,
	2	/* UC_AUX_TABLE_16 */,
	2	/* UC_AUX_TABLE_17 */,
	2	/* UC_AUX_TABLE_18 */,
	2	/* UC_AUX_TABLE_19 */,
	2	/* UC_AUX_TABLE_20 */,
	2	/* UC_AUX_TABLE_21 */,
	2	/* UC_AUX_TABLE_22 */,
	2	/* UC_AUX_TABLE_23 */,
	2	/* UC_AUX_TABLE_24 */,
	2	/* UC_AUX_TABLE_25 */,
	2	/* UC_AUX_TABLE_26 */,
	2	/* UC_AUX_TABLE_27 */,
	2	/* UC_AUX_TABLE_28 */,
	2	/* UC_AUX_TABLE_29 */,
	2	/* UC_AUX_TABLE_30 */,
	2	/* UC_AUX_TABLE_31 */,
	2	/* UC_AUX_TABLE_32 */,
	2	/* UC_AUX_TABLE_33 */,
	2	/* UC_AUX_TABLE_34 */,
	2	/* UC_AUX_TABLE_35 */,
	2	/* UC_AUX_TABLE_36 */,
	2	/* UC_AUX_TABLE_37 */,
	2	/* UC_AUX_TABLE_38 */,
	2	/* UC_AUX_TABLE_39 */,
	2	/* UC_AUX_TABLE_40 */,
	2	/* UC_AUX_TABLE_41 */,
	2	/* UC_AUX_TABLE_42 */,
	2	/* UC_AUX_TABLE_43 */,
	3	/* UC_AUX_TABLE_44 */,
	2	/* UC_AUX_TABLE_45 */,
	2	/* UC_AUX_TABLE_46 */,
	2	/* UC_AUX_TABLE_47 */,
	2	/* UC_AUX_TABLE_48 */,
	3	/* UC_AUX_TABLE_49 */,
	3	/* UC_AUX_TABLE_50 */,
	2	/* UC_AUX_TABLE_51 */,
	3	/* UC_AUX_TABLE_52 */,
	3	/* UC_AUX_TABLE_53 */,
	2	/* UC_AUX_TABLE_54 */,
	2	/* UC_AUX_TABLE_55 */,
	3	/* UC_AUX_TABLE_56 */,
	2	/* UC_AUX_TABLE_57 */,
	2	/* UC_AUX_TABLE_58 */,
	2	/* UC_AUX_TABLE_59 */,
	2	/* UC_AUX_TABLE_60 */,
	3	/* UC_AUX_TABLE_61 */,
	2	/* UC_AUX_TABLE_62 */,
	2	/* UC_AUX_TABLE_63 */,
	2	/* UC_AUX_TABLE_64 */,
	3	/* UC_AUX_TABLE_65 */,
	3	/* UC_AUX_TABLE_66 */,
	2	/* UC_AUX_TABLE_67 */,
	2	/* UC_AUX_TABLE_68 */,
	2	/* UC_AUX_TABLE_69 */,
	2	/* UC_AUX_TABLE_70 */,
	2	/* UC_AUX_TABLE_71 */,
	2	/* UC_AUX_TABLE_72 */
};

static const int Uppercase_Mapping_invmap[] = { /* for EBCDIC 037 */
	0,
	0x62,
	0,
	0x71,
	UC_use_AUX_TABLE_1,
	0,
	0x80,
	0,
	0xC1,
	0,
	0xAC,
	0,
	0xD1,
	0,
	0x9E,
	0,
	0x39C,
	0,
	0xE2,
	0,
	0xEB,
	0,
	0xFB,
	0x178,
	0,
	0x100,
	0,
	0x102,
	0,
	0x104,
	0,
	0x106,
	0,
	0x108,
	0,
	0x10A,
	0,
	0x10C,
	0,
	0x10E,
	0,
	0x110,
	0,
	0x112,
	0,
	0x114,
	0,
	0x116,
	0,
	0x118,
	0,
	0x11A,
	0,
	0x11C,
	0,
	0x11E,
	0,
	0x120,
	0,
	0x122,
	0,
	0x124,
	0,
	0x126,
	0,
	0x128,
	0,
	0x12A,
	0,
	0x12C,
	0,
	0x12E,
	0,
	0xC9,
	0,
	0x132,
	0,
	0x134,
	0,
	0x136,
	0,
	0x139,
	0,
	0x13B,
	0,
	0x13D,
	0,
	0x13F,
	0,
	0x141,
	0,
	0x143,
	0,
	0x145,
	0,
	0x147,
	UC_use_AUX_TABLE_2,
	0,
	0x14A,
	0,
	0x14C,
	0,
	0x14E,
	0,
	0x150,
	0,
	0x152,
	0,
	0x154,
	0,
	0x156,
	0,
	0x158,
	0,
	0x15A,
	0,
	0x15C,
	0,
	0x15E,
	0,
	0x160,
	0,
	0x162,
	0,
	0x164,
	0,
	0x166,
	0,
	0x168,
	0,
	0x16A,
	0,
	0x16C,
	0,
	0x16E,
	0,
	0x170,
	0,
	0x172,
	0,
	0x174,
	0,
	0x176,
	0,
	0x179,
	0,
	0x17B,
	0,
	0x17D,
	0xE2,
	0x243,
	0,
	0x182,
	0,
	0x184,
	0,
	0x187,
	0,
	0x18B,
	0,
	0x191,
	0,
	0x1F6,
	0,
	0x198,
	0x23D,
	0,
	0x220,
	0,
	0x1A0,
	0,
	0x1A2,
	0,
	0x1A4,
	0,
	0x1A7,
	0,
	0x1AC,
	0,
	0x1AF,
	0,
	0x1B3,
	0,
	0x1B5,
	0,
	0x1B8,
	0,
	0x1BC,
	0,
	0x1F7,
	0,
	0x1C4,
	0x1C4,
	0,
	0x1C7,
	0x1C7,
	0,
	0x1CA,
	0x1CA,
	0,
	0x1CD,
	0,
	0x1CF,
	0,
	0x1D1,
	0,
	0x1D3,
	0,
	0x1D5,
	0,
	0x1D7,
	0,
	0x1D9,
	0,
	0x1DB,
	0x18E,
	0,
	0x1DE,
	0,
	0x1E0,
	0,
	0x1E2,
	0,
	0x1E4,
	0,
	0x1E6,
	0,
	0x1E8,
	0,
	0x1EA,
	0,
	0x1EC,
	0,
	0x1EE,
	UC_use_AUX_TABLE_3,
	0,
	0x1F1,
	0x1F1,
	0,
	0x1F4,
	0,
	0x1F8,
	0,
	0x1FA,
	0,
	0x1FC,
	0,
	0x1FE,
	0,
	0x200,
	0,
	0x202,
	0,
	0x204,
	0,
	0x206,
	0,
	0x208,
	0,
	0x20A,
	0,
	0x20C,
	0,
	0x20E,
	0,
	0x210,
	0,
	0x212,
	0,
	0x214,
	0,
	0x216,
	0,
	0x218,
	0,
	0x21A,
	0,
	0x21C,
	0,
	0x21E,
	0,
	0x222,
	0,
	0x224,
	0,
	0x226,
	0,
	0x228,
	0,
	0x22A,
	0,
	0x22C,
	0,
	0x22E,
	0,
	0x230,
	0,
	0x232,
	0,
	0x23B,
	0,
	0x2C7E,
	0,
	0x241,
	0,
	0x246,
	0,
	0x248,
	0,
	0x24A,
	0,
	0x24C,
	0,
	0x24E,
	0x2C6F,
	0x2C6D,
	0x2C70,
	0x181,
	0x186,
	0,
	0x189,
	0,
	0x18F,
	0,
	0x190,
	0xA7AB,
	0,
	0x193,
	0xA7AC,
	0,
	0x194,
	0,
	0xA78D,
	0xA7AA,
	0,
	0x197,
	0x196,
	0xA7AE,
	0x2C62,
	0xA7AD,
	0,
	0x19C,
	0,
	0x2C6E,
	0x19D,
	0,
	0x19F,
	0,
	0x2C64,
	0,
	0x1A6,
	0,
	0x1A9,
	0,
	0xA7B1,
	0x1AE,
	0x244,
	0x1B1,
	0x245,
	0,
	0x1B7,
	0,
	0xA7B2,
	0xA7B0,
	0,
	0x399,
	0,
	0x370,
	0,
	0x372,
	0,
	0x376,
	0,
	0x3FD,
	0,
	UC_use_AUX_TABLE_4,
	0,
	0x386,
	0x388,
	UC_use_AUX_TABLE_5,
	0x391,
	0x3A3,
	0x3A3,
	0x38C,
	0x38E,
	0,
	0x392,
	0x398,
	0,
	0x3A6,
	0x3A0,
	0x3CF,
	0,
	0x3D8,
	0,
	0x3DA,
	0,
	0x3DC,
	0,
	0x3DE,
	0,
	0x3E0,
	0,
	0x3E2,
	0,
	0x3E4,
	0,
	0x3E6,
	0,
	0x3E8,
	0,
	0x3EA,
	0,
	0x3EC,
	0,
	0x3EE,
	0x39A,
	0x3A1,
	0x3F9,
	0x37F,
	0,
	0x395,
	0,
	0x3F7,
	0,
	0x3FA,
	0,
	0x410,
	0x400,
	0,
	0x460,
	0,
	0x462,
	0,
	0x464,
	0,
	0x466,
	0,
	0x468,
	0,
	0x46A,
	0,
	0x46C,
	0,
	0x46E,
	0,
	0x470,
	0,
	0x472,
	0,
	0x474,
	0,
	0x476,
	0,
	0x478,
	0,
	0x47A,
	0,
	0x47C,
	0,
	0x47E,
	0,
	0x480,
	0,
	0x48A,
	0,
	0x48C,
	0,
	0x48E,
	0,
	0x490,
	0,
	0x492,
	0,
	0x494,
	0,
	0x496,
	0,
	0x498,
	0,
	0x49A,
	0,
	0x49C,
	0,
	0x49E,
	0,
	0x4A0,
	0,
	0x4A2,
	0,
	0x4A4,
	0,
	0x4A6,
	0,
	0x4A8,
	0,
	0x4AA,
	0,
	0x4AC,
	0,
	0x4AE,
	0,
	0x4B0,
	0,
	0x4B2,
	0,
	0x4B4,
	0,
	0x4B6,
	0,
	0x4B8,
	0,
	0x4BA,
	0,
	0x4BC,
	0,
	0x4BE,
	0,
	0x4C1,
	0,
	0x4C3,
	0,
	0x4C5,
	0,
	0x4C7,
	0,
	0x4C9,
	0,
	0x4CB,
	0,
	0x4CD,
	0x4C0,
	0,
	0x4D0,
	0,
	0x4D2,
	0,
	0x4D4,
	0,
	0x4D6,
	0,
	0x4D8,
	0,
	0x4DA,
	0,
	0x4DC,
	0,
	0x4DE,
	0,
	0x4E0,
	0,
	0x4E2,
	0,
	0x4E4,
	0,
	0x4E6,
	0,
	0x4E8,
	0,
	0x4EA,
	0,
	0x4EC,
	0,
	0x4EE,
	0,
	0x4F0,
	0,
	0x4F2,
	0,
	0x4F4,
	0,
	0x4F6,
	0,
	0x4F8,
	0,
	0x4FA,
	0,
	0x4FC,
	0,
	0x4FE,
	0,
	0x500,
	0,
	0x502,
	0,
	0x504,
	0,
	0x506,
	0,
	0x508,
	0,
	0x50A,
	0,
	0x50C,
	0,
	0x50E,
	0,
	0x510,
	0,
	0x512,
	0,
	0x514,
	0,
	0x516,
	0,
	0x518,
	0,
	0x51A,
	0,
	0x51C,
	0,
	0x51E,
	0,
	0x520,
	0,
	0x522,
	0,
	0x524,
	0,
	0x526,
	0,
	0x528,
	0,
	0x52A,
	0,
	0x52C,
	0,
	0x52E,
	0,
	0x531,
	UC_use_AUX_TABLE_6,
	0,
	0x13F0,
	0,
	0x412,
	0x414,
	0x41E,
	0x421,
	0x422,
	0x42A,
	0x462,
	0xA64A,
	0,
	0xA77D,
	0,
	0x2C63,
	0,
	0x1E00,
	0,
	0x1E02,
	0,
	0x1E04,
	0,
	0x1E06,
	0,
	0x1E08,
	0,
	0x1E0A,
	0,
	0x1E0C,
	0,
	0x1E0E,
	0,
	0x1E10,
	0,
	0x1E12,
	0,
	0x1E14,
	0,
	0x1E16,
	0,
	0x1E18,
	0,
	0x1E1A,
	0,
	0x1E1C,
	0,
	0x1E1E,
	0,
	0x1E20,
	0,
	0x1E22,
	0,
	0x1E24,
	0,
	0x1E26,
	0,
	0x1E28,
	0,
	0x1E2A,
	0,
	0x1E2C,
	0,
	0x1E2E,
	0,
	0x1E30,
	0,
	0x1E32,
	0,
	0x1E34,
	0,
	0x1E36,
	0,
	0x1E38,
	0,
	0x1E3A,
	0,
	0x1E3C,
	0,
	0x1E3E,
	0,
	0x1E40,
	0,
	0x1E42,
	0,
	0x1E44,
	0,
	0x1E46,
	0,
	0x1E48,
	0,
	0x1E4A,
	0,
	0x1E4C,
	0,
	0x1E4E,
	0,
	0x1E50,
	0,
	0x1E52,
	0,
	0x1E54,
	0,
	0x1E56,
	0,
	0x1E58,
	0,
	0x1E5A,
	0,
	0x1E5C,
	0,
	0x1E5E,
	0,
	0x1E60,
	0,
	0x1E62,
	0,
	0x1E64,
	0,
	0x1E66,
	0,
	0x1E68,
	0,
	0x1E6A,
	0,
	0x1E6C,
	0,
	0x1E6E,
	0,
	0x1E70,
	0,
	0x1E72,
	0,
	0x1E74,
	0,
	0x1E76,
	0,
	0x1E78,
	0,
	0x1E7A,
	0,
	0x1E7C,
	0,
	0x1E7E,
	0,
	0x1E80,
	0,
	0x1E82,
	0,
	0x1E84,
	0,
	0x1E86,
	0,
	0x1E88,
	0,
	0x1E8A,
	0,
	0x1E8C,
	0,
	0x1E8E,
	0,
	0x1E90,
	0,
	0x1E92,
	0,
	0x1E94,
	UC_use_AUX_TABLE_7,
	UC_use_AUX_TABLE_8,
	UC_use_AUX_TABLE_9,
	UC_use_AUX_TABLE_10,
	UC_use_AUX_TABLE_11,
	0x1E60,
	0,
	0x1EA0,
	0,
	0x1EA2,
	0,
	0x1EA4,
	0,
	0x1EA6,
	0,
	0x1EA8,
	0,
	0x1EAA,
	0,
	0x1EAC,
	0,
	0x1EAE,
	0,
	0x1EB0,
	0,
	0x1EB2,
	0,
	0x1EB4,
	0,
	0x1EB6,
	0,
	0x1EB8,
	0,
	0x1EBA,
	0,
	0x1EBC,
	0,
	0x1EBE,
	0,
	0x1EC0,
	0,
	0x1EC2,
	0,
	0x1EC4,
	0,
	0x1EC6,
	0,
	0x1EC8,
	0,
	0x1ECA,
	0,
	0x1ECC,
	0,
	0x1ECE,
	0,
	0x1ED0,
	0,
	0x1ED2,
	0,
	0x1ED4,
	0,
	0x1ED6,
	0,
	0x1ED8,
	0,
	0x1EDA,
	0,
	0x1EDC,
	0,
	0x1EDE,
	0,
	0x1EE0,
	0,
	0x1EE2,
	0,
	0x1EE4,
	0,
	0x1EE6,
	0,
	0x1EE8,
	0,
	0x1EEA,
	0,
	0x1EEC,
	0,
	0x1EEE,
	0,
	0x1EF0,
	0,
	0x1EF2,
	0,
	0x1EF4,
	0,
	0x1EF6,
	0,
	0x1EF8,
	0,
	0x1EFA,
	0,
	0x1EFC,
	0,
	0x1EFE,
	0x1F08,
	0,
	0x1F18,
	0,
	0x1F28,
	0,
	0x1F38,
	0,
	0x1F48,
	0,
	UC_use_AUX_TABLE_12,
	0x1F59,
	UC_use_AUX_TABLE_13,
	0x1F5B,
	UC_use_AUX_TABLE_14,
	0x1F5D,
	UC_use_AUX_TABLE_15,
	0x1F5F,
	0,
	0x1F68,
	0,
	0x1FBA,
	0x1FC8,
	0x1FDA,
	0x1FF8,
	0x1FEA,
	0x1FFA,
	0,
	UC_use_AUX_TABLE_16,
	UC_use_AUX_TABLE_17,
	UC_use_AUX_TABLE_18,
	UC_use_AUX_TABLE_19,
	UC_use_AUX_TABLE_20,
	UC_use_AUX_TABLE_21,
	UC_use_AUX_TABLE_22,
	UC_use_AUX_TABLE_23,
	UC_use_AUX_TABLE_16,
	UC_use_AUX_TABLE_17,
	UC_use_AUX_TABLE_18,
	UC_use_AUX_TABLE_19,
	UC_use_AUX_TABLE_20,
	UC_use_AUX_TABLE_21,
	UC_use_AUX_TABLE_22,
	UC_use_AUX_TABLE_23,
	UC_use_AUX_TABLE_24,
	UC_use_AUX_TABLE_25,
	UC_use_AUX_TABLE_26,
	UC_use_AUX_TABLE_27,
	UC_use_AUX_TABLE_28,
	UC_use_AUX_TABLE_29,
	UC_use_AUX_TABLE_30,
	UC_use_AUX_TABLE_31,
	UC_use_AUX_TABLE_24,
	UC_use_AUX_TABLE_25,
	UC_use_AUX_TABLE_26,
	UC_use_AUX_TABLE_27,
	UC_use_AUX_TABLE_28,
	UC_use_AUX_TABLE_29,
	UC_use_AUX_TABLE_30,
	UC_use_AUX_TABLE_31,
	UC_use_AUX_TABLE_32,
	UC_use_AUX_TABLE_33,
	UC_use_AUX_TABLE_34,
	UC_use_AUX_TABLE_35,
	UC_use_AUX_TABLE_36,
	UC_use_AUX_TABLE_37,
	UC_use_AUX_TABLE_38,
	UC_use_AUX_TABLE_39,
	UC_use_AUX_TABLE_32,
	UC_use_AUX_TABLE_33,
	UC_use_AUX_TABLE_34,
	UC_use_AUX_TABLE_35,
	UC_use_AUX_TABLE_36,
	UC_use_AUX_TABLE_37,
	UC_use_AUX_TABLE_38,
	UC_use_AUX_TABLE_39,
	0x1FB8,
	UC_use_AUX_TABLE_40,
	UC_use_AUX_TABLE_41,
	UC_use_AUX_TABLE_42,
	0,
	UC_use_AUX_TABLE_43,
	UC_use_AUX_TABLE_44,
	0,
	UC_use_AUX_TABLE_41,
	0,
	0x399,
	0,
	UC_use_AUX_TABLE_45,
	UC_use_AUX_TABLE_46,
	UC_use_AUX_TABLE_47,
	0,
	UC_use_AUX_TABLE_48,
	UC_use_AUX_TABLE_49,
	0,
	UC_use_AUX_TABLE_46,
	0,
	0x1FD8,
	UC_use_AUX_TABLE_50,
	UC_use_AUX_TABLE_4,
	0,
	UC_use_AUX_TABLE_51,
	UC_use_AUX_TABLE_52,
	0,
	0x1FE8,
	UC_use_AUX_TABLE_53,
	UC_use_AUX_TABLE_5,
	UC_use_AUX_TABLE_54,
	0x1FEC,
	UC_use_AUX_TABLE_55,
	UC_use_AUX_TABLE_56,
	0,
	UC_use_AUX_TABLE_57,
	UC_use_AUX_TABLE_58,
	UC_use_AUX_TABLE_59,
	0,
	UC_use_AUX_TABLE_60,
	UC_use_AUX_TABLE_61,
	0,
	UC_use_AUX_TABLE_58,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	0xA64A,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B3,
	0,
	0x13A0,
	0,
	UC_use_AUX_TABLE_62,
	UC_use_AUX_TABLE_63,
	UC_use_AUX_TABLE_64,
	UC_use_AUX_TABLE_65,
	UC_use_AUX_TABLE_66,
	UC_use_AUX_TABLE_67,
	0,
	UC_use_AUX_TABLE_68,
	UC_use_AUX_TABLE_69,
	UC_use_AUX_TABLE_70,
	UC_use_AUX_TABLE_71,
	UC_use_AUX_TABLE_72,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x1E900,
	0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV UpperLatin1_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x80,
	0x100
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV UpperLatin1_invlist[] = { /* for EBCDIC 1047 */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV UpperLatin1_invlist[] = { /* for EBCDIC 037 */
	57,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_ASCII_invlist[] = { /* for ASCII/Latin1 */
	2,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x80
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_ASCII_invlist[] = { /* for EBCDIC 1047 */
	54,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_ASCII_invlist[] = { /* for EBCDIC 037 */
	56,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 037 */

static const UV PL_ASSIGNED_invlist[] = { /* for all charsets */
	1298,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_CASED_invlist[] = { /* for ASCII/Latin1 */
	271,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69E,
	0xA722,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E900,
	0x1E944,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CASED_invlist[] = { /* for EBCDIC 1047 */
	297,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69E,
	0xA722,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E900,
	0x1E944,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CASED_invlist[] = { /* for EBCDIC 037 */
	293,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69E,
	0xA722,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E900,
	0x1E944,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXALNUM_invlist[] = { /* for ASCII/Latin1 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x61,
	0x7B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXALNUM_invlist[] = { /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXALNUM_invlist[] = { /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXALPHA_invlist[] = { /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXALPHA_invlist[] = { /* for EBCDIC 1047 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXALPHA_invlist[] = { /* for EBCDIC 037 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXBLANK_invlist[] = { /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0x20,
	0x21
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXBLANK_invlist[] = { /* for EBCDIC 1047 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x40,
	0x41
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXBLANK_invlist[] = { /* for EBCDIC 037 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x40,
	0x41
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXCNTRL_invlist[] = { /* for ASCII/Latin1 */
	4,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0x80
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXCNTRL_invlist[] = { /* for EBCDIC 1047 */
	26,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x40
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXCNTRL_invlist[] = { /* for EBCDIC 037 */
	26,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x40
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXDIGIT_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXDIGIT_invlist[] = { /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXDIGIT_invlist[] = { /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXGRAPH_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x7F
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXGRAPH_invlist[] = { /* for EBCDIC 1047 */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXGRAPH_invlist[] = { /* for EBCDIC 037 */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXLOWER_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x7B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXLOWER_invlist[] = { /* for EBCDIC 1047 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXLOWER_invlist[] = { /* for EBCDIC 037 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXPRINT_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXPRINT_invlist[] = { /* for EBCDIC 1047 */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXPRINT_invlist[] = { /* for EBCDIC 037 */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXPUNCT_invlist[] = { /* for ASCII/Latin1 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0x7F
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXPUNCT_invlist[] = { /* for EBCDIC 1047 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0xA1,
	0xA2,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE1
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXPUNCT_invlist[] = { /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0xA1,
	0xA2,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE1
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXSPACE_invlist[] = { /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xE,
	0x20,
	0x21
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXSPACE_invlist[] = { /* for EBCDIC 1047 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x40,
	0x41
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXSPACE_invlist[] = { /* for EBCDIC 037 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x25,
	0x26,
	0x40,
	0x41
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXUPPER_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXUPPER_invlist[] = { /* for EBCDIC 1047 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXUPPER_invlist[] = { /* for EBCDIC 037 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXWORD_invlist[] = { /* for ASCII/Latin1 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXWORD_invlist[] = { /* for EBCDIC 1047 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D,
	0x6E,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXWORD_invlist[] = { /* for EBCDIC 037 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D,
	0x6E,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_POSIXXDIGIT_invlist[] = { /* for ASCII/Latin1 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x47,
	0x61,
	0x67
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXXDIGIT_invlist[] = { /* for EBCDIC 1047 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x87,
	0xC1,
	0xC7,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_POSIXXDIGIT_invlist[] = { /* for EBCDIC 037 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x87,
	0xC1,
	0xC7,
	0xF0,
	0xFA
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_VERTSPACE_invlist[] = { /* for ASCII/Latin1 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xE,
	0x85,
	0x86,
	0x2028,
	0x202A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_VERTSPACE_invlist[] = { /* for EBCDIC 1047 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_VERTSPACE_invlist[] = { /* for EBCDIC 037 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXALNUM_invlist[] = { /* for ASCII/Latin1 */
	1391,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E0,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFD,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF20,
	0xF2A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x104A,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8C5,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11066,
	0x11070,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11133,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11400,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B6,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A33,
	0x11A35,
	0x11A3F,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A98,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C3F,
	0x11C40,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1E947,
	0x1E948,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXALNUM_invlist[] = { /* for EBCDIC 1047 */
	1415,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E0,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFD,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF20,
	0xF2A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x104A,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8C5,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11066,
	0x11070,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11133,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11400,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B6,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A33,
	0x11A35,
	0x11A3F,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A98,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C3F,
	0x11C40,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1E947,
	0x1E948,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXALNUM_invlist[] = { /* for EBCDIC 037 */
	1411,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E0,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xAFD,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF20,
	0xF2A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x104A,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8C5,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11066,
	0x11070,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11133,
	0x11136,
	0x11140,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11400,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B6,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A33,
	0x11A35,
	0x11A3F,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A98,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C3F,
	0x11C40,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1E947,
	0x1E948,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXALPHA_invlist[] = { /* for ASCII/Latin1 */
	1321,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x660,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E0,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA70,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAF9,
	0xAFD,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1040,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8C5,
	0xA8C6,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x11100,
	0x11133,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11400,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x1144B,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11680,
	0x116B6,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A33,
	0x11A35,
	0x11A3F,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A98,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C3F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x11D48,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1E947,
	0x1E948,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXALPHA_invlist[] = { /* for EBCDIC 1047 */
	1347,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x660,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E0,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA70,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAF9,
	0xAFD,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1040,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8C5,
	0xA8C6,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x11100,
	0x11133,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11400,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x1144B,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11680,
	0x116B6,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A33,
	0x11A35,
	0x11A3F,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A98,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C3F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x11D48,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1E947,
	0x1E948,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXALPHA_invlist[] = { /* for EBCDIC 037 */
	1343,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x345,
	0x346,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5B0,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x658,
	0x659,
	0x660,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6E1,
	0x6E9,
	0x6ED,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x740,
	0x74D,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x818,
	0x81A,
	0x82D,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E0,
	0x8E3,
	0x8EA,
	0x8F0,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x964,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA70,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAF9,
	0xAFD,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE47,
	0xE4D,
	0xE4E,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xECD,
	0xECE,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF82,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0x1000,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1040,
	0x1050,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x109C,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1714,
	0x1720,
	0x1734,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17C9,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x1939,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A61,
	0x1A75,
	0x1AA7,
	0x1AA8,
	0x1B00,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B4C,
	0x1B80,
	0x1BAA,
	0x1BAC,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1C00,
	0x1C36,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1DE7,
	0x1DF5,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA674,
	0xA67C,
	0xA67F,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C4,
	0xA8C5,
	0xA8C6,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA92B,
	0xA930,
	0xA953,
	0xA960,
	0xA97D,
	0xA980,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11046,
	0x11082,
	0x110B9,
	0x110D0,
	0x110E9,
	0x11100,
	0x11133,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11180,
	0x111C0,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11235,
	0x11237,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112E9,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11400,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x1144B,
	0x11480,
	0x114C2,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115B6,
	0x115B8,
	0x115BF,
	0x115D8,
	0x115DE,
	0x11600,
	0x1163F,
	0x11640,
	0x11641,
	0x11644,
	0x11645,
	0x11680,
	0x116B6,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172B,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A33,
	0x11A35,
	0x11A3F,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A98,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C3F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x11D48,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9E,
	0x1BC9F,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1E947,
	0x1E948,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXBLANK_invlist[] = { /* for ASCII/Latin1 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0x20,
	0x21,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXBLANK_invlist[] = { /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXBLANK_invlist[] = { /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXCNTRL_invlist[] = { /* for ASCII/Latin1 */
	4,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXCNTRL_invlist[] = { /* for EBCDIC 1047 */
	4,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xFF,
	0x100
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXCNTRL_invlist[] = { /* for EBCDIC 037 */
	4,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xFF,
	0x100
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXDIGIT_invlist[] = { /* for ASCII/Latin1 */
	111,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E950,
	0x1E95A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXDIGIT_invlist[] = { /* for EBCDIC 1047 */
	111,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E950,
	0x1E95A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXDIGIT_invlist[] = { /* for EBCDIC 037 */
	111,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E950,
	0x1E95A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXGRAPH_invlist[] = { /* for ASCII/Latin1 */
	1309,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x7F,
	0xA1,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x1680,
	0x1681,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXGRAPH_invlist[] = { /* for EBCDIC 1047 */
	1309,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x1680,
	0x1681,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXGRAPH_invlist[] = { /* for EBCDIC 037 */
	1309,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x1680,
	0x1681,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXLOWER_invlist[] = { /* for ASCII/Latin1 */
	1281,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xDF,
	0xF7,
	0xF8,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1DC0,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1E922,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXLOWER_invlist[] = { /* for EBCDIC 1047 */
	1289,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1DC0,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXLOWER_invlist[] = { /* for EBCDIC 037 */
	1289,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1DC0,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXPRINT_invlist[] = { /* for ASCII/Latin1 */
	1303,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2028,
	0x202A,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXPRINT_invlist[] = { /* for EBCDIC 1047 */
	1303,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2028,
	0x202A,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXPRINT_invlist[] = { /* for EBCDIC 037 */
	1303,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2028,
	0x202A,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xE000,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXPUNCT_invlist[] = { /* for ASCII/Latin1 */
	335,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0x7F,
	0xA1,
	0xA2,
	0xA7,
	0xA8,
	0xAB,
	0xAC,
	0xB6,
	0xB8,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58B,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166D,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E4A,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x1173C,
	0x1173F,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXPUNCT_invlist[] = { /* for EBCDIC 1047 */
	343,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB3,
	0xB4,
	0xB5,
	0xB7,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58B,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166D,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E4A,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x1173C,
	0x1173F,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXPUNCT_invlist[] = { /* for EBCDIC 037 */
	345,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xB0,
	0xB1,
	0xB3,
	0xB4,
	0xB5,
	0xB7,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58B,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166D,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E4A,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x1173C,
	0x1173F,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXSPACE_invlist[] = { /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xE,
	0x20,
	0x21,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXSPACE_invlist[] = { /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXSPACE_invlist[] = { /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXUPPER_invlist[] = { /* for ASCII/Latin1 */
	1265,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1FB8,
	0x1FBC,
	0x1FC8,
	0x1FCC,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFC,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1E900,
	0x1E922,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXUPPER_invlist[] = { /* for EBCDIC 1047 */
	1283,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1FB8,
	0x1FBC,
	0x1FC8,
	0x1FCC,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFC,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1E900,
	0x1E922,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXUPPER_invlist[] = { /* for EBCDIC 037 */
	1279,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1FB8,
	0x1FBC,
	0x1FC8,
	0x1FCC,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFC,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1E900,
	0x1E922,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXWORD_invlist[] = { /* for ASCII/Latin1 */
	1387,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x200C,
	0x200E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXWORD_invlist[] = { /* for EBCDIC 1047 */
	1411,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x200C,
	0x200E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXWORD_invlist[] = { /* for EBCDIC 037 */
	1407,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x200C,
	0x200E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XPOSIXXDIGIT_invlist[] = { /* for ASCII/Latin1 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x47,
	0x61,
	0x67,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF27,
	0xFF41,
	0xFF47
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXXDIGIT_invlist[] = { /* for EBCDIC 1047 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x87,
	0xC1,
	0xC7,
	0xF0,
	0xFA,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF27,
	0xFF41,
	0xFF47
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XPOSIXXDIGIT_invlist[] = { /* for EBCDIC 037 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x87,
	0xC1,
	0xC7,
	0xF0,
	0xFA,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF27,
	0xFF41,
	0xFF47
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL__PERL_ANY_FOLDS_invlist[] = { /* for ASCII/Latin1 */
	253,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xB5,
	0xB6,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x131,
	0x132,
	0x138,
	0x139,
	0x18D,
	0x18E,
	0x19B,
	0x19C,
	0x1AA,
	0x1AC,
	0x1BA,
	0x1BC,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x221,
	0x222,
	0x234,
	0x23A,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x2BC,
	0x2BD,
	0x2BE,
	0x2BF,
	0x300,
	0x302,
	0x307,
	0x309,
	0x30A,
	0x30B,
	0x30C,
	0x30D,
	0x313,
	0x314,
	0x331,
	0x332,
	0x342,
	0x343,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3D2,
	0x3D5,
	0x3F6,
	0x3F7,
	0x3FC,
	0x3FD,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E00,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C71,
	0x2C72,
	0x2C74,
	0x2C75,
	0x2C77,
	0x2C7E,
	0x2CE4,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA730,
	0xA732,
	0xA770,
	0xA779,
	0xA788,
	0xA78B,
	0xA78E,
	0xA790,
	0xA794,
	0xA796,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1E900,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_ANY_FOLDS_invlist[] = { /* for EBCDIC 1047 */
	285,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x131,
	0x132,
	0x138,
	0x139,
	0x18D,
	0x18E,
	0x19B,
	0x19C,
	0x1AA,
	0x1AC,
	0x1BA,
	0x1BC,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x221,
	0x222,
	0x234,
	0x23A,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x2BC,
	0x2BD,
	0x2BE,
	0x2BF,
	0x300,
	0x302,
	0x307,
	0x309,
	0x30A,
	0x30B,
	0x30C,
	0x30D,
	0x313,
	0x314,
	0x331,
	0x332,
	0x342,
	0x343,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3D2,
	0x3D5,
	0x3F6,
	0x3F7,
	0x3FC,
	0x3FD,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E00,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C71,
	0x2C72,
	0x2C74,
	0x2C75,
	0x2C77,
	0x2C7E,
	0x2CE4,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA730,
	0xA732,
	0xA770,
	0xA779,
	0xA788,
	0xA78B,
	0xA78E,
	0xA790,
	0xA794,
	0xA796,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1E900,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_ANY_FOLDS_invlist[] = { /* for EBCDIC 037 */
	281,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x131,
	0x132,
	0x138,
	0x139,
	0x18D,
	0x18E,
	0x19B,
	0x19C,
	0x1AA,
	0x1AC,
	0x1BA,
	0x1BC,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x221,
	0x222,
	0x234,
	0x23A,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x2BC,
	0x2BD,
	0x2BE,
	0x2BF,
	0x300,
	0x302,
	0x307,
	0x309,
	0x30A,
	0x30B,
	0x30C,
	0x30D,
	0x313,
	0x314,
	0x331,
	0x332,
	0x342,
	0x343,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3D2,
	0x3D5,
	0x3F6,
	0x3F7,
	0x3FC,
	0x3FD,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E00,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C71,
	0x2C72,
	0x2C74,
	0x2C75,
	0x2C77,
	0x2C7E,
	0x2CE4,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA730,
	0xA732,
	0xA770,
	0xA779,
	0xA788,
	0xA78B,
	0xA78E,
	0xA790,
	0xA794,
	0xA796,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1E900,
	0x1E944
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL__PERL_CHARNAME_BEGIN_invlist[] = { /* for ASCII/Latin1 */
	1185,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16F1,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2183,
	0x2185,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3007,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6E6,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x10341,
	0x10342,
	0x1034A,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_CHARNAME_BEGIN_invlist[] = { /* for EBCDIC 1047 */
	1211,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16F1,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2183,
	0x2185,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3007,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6E6,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x10341,
	0x10342,
	0x1034A,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_CHARNAME_BEGIN_invlist[] = { /* for EBCDIC 037 */
	1207,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16F1,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2183,
	0x2185,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3007,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6E6,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x10341,
	0x10342,
	0x1034A,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL__PERL_CHARNAME_CONTINUE_invlist[] = { /* for ASCII/Latin1 */
	1403,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x21,
	0x28,
	0x2A,
	0x2D,
	0x2E,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFA0,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_CHARNAME_CONTINUE_invlist[] = { /* for EBCDIC 1047 */
	1429,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x42,
	0x4A,
	0x4D,
	0x4E,
	0x51,
	0x5A,
	0x5D,
	0x5E,
	0x60,
	0x61,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFA0,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_CHARNAME_CONTINUE_invlist[] = { /* for EBCDIC 037 */
	1425,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x42,
	0x4A,
	0x4D,
	0x4E,
	0x51,
	0x5A,
	0x5D,
	0x5E,
	0x60,
	0x61,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFA0,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL__PERL_FOLDS_TO_MULTI_CHAR_invlist[] = { /* for ASCII/Latin1 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDF,
	0xE0,
	0x130,
	0x131,
	0x149,
	0x14A,
	0x1F0,
	0x1F1,
	0x390,
	0x391,
	0x3B0,
	0x3B1,
	0x587,
	0x588,
	0x1E96,
	0x1E9B,
	0x1E9E,
	0x1E9F,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD2,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE2,
	0x1FE5,
	0x1FE6,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_FOLDS_TO_MULTI_CHAR_invlist[] = { /* for EBCDIC 1047 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59,
	0x5A,
	0x130,
	0x131,
	0x149,
	0x14A,
	0x1F0,
	0x1F1,
	0x390,
	0x391,
	0x3B0,
	0x3B1,
	0x587,
	0x588,
	0x1E96,
	0x1E9B,
	0x1E9E,
	0x1E9F,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD2,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE2,
	0x1FE5,
	0x1FE6,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_FOLDS_TO_MULTI_CHAR_invlist[] = { /* for EBCDIC 037 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59,
	0x5A,
	0x130,
	0x131,
	0x149,
	0x14A,
	0x1F0,
	0x1F1,
	0x390,
	0x391,
	0x3B0,
	0x3B1,
	0x587,
	0x588,
	0x1E96,
	0x1E9B,
	0x1E9E,
	0x1E9F,
	0x1F50,
	0x1F51,
	0x1F52,
	0x1F53,
	0x1F54,
	0x1F55,
	0x1F56,
	0x1F57,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD2,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE2,
	0x1FE5,
	0x1FE6,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL__PERL_IDCONT_invlist[] = { /* for ASCII/Latin1 */
	1397,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFA0,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_IDCONT_invlist[] = { /* for EBCDIC 1047 */
	1421,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFA0,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_IDCONT_invlist[] = { /* for EBCDIC 037 */
	1417,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFA0,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL__PERL_IDSTART_invlist[] = { /* for ASCII/Latin1 */
	1191,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_IDSTART_invlist[] = { /* for EBCDIC 1047 */
	1217,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_IDSTART_invlist[] = { /* for EBCDIC 037 */
	1213,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x3164,
	0x3165,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA1,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

static const UV PL__PERL_PROBLEMATIC_LOCALE_FOLDEDS_START_invlist[] = { /* for all charsets */
	26,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100,
	0x130,
	0x131,
	0x149,
	0x14A,
	0x178,
	0x179,
	0x17F,
	0x180,
	0x1F0,
	0x1F1,
	0x2BC,
	0x2BD,
	0x39C,
	0x39D,
	0x3BC,
	0x3BD,
	0x1E96,
	0x1E9B,
	0x1E9E,
	0x1E9F,
	0x212A,
	0x212C,
	0xFB00,
	0xFB07
};

static const UV PL__PERL_PROBLEMATIC_LOCALE_FOLDS_invlist[] = { /* for all charsets */
	24,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100,
	0x130,
	0x131,
	0x149,
	0x14A,
	0x178,
	0x179,
	0x17F,
	0x180,
	0x1F0,
	0x1F1,
	0x39C,
	0x39D,
	0x3BC,
	0x3BD,
	0x1E96,
	0x1E9B,
	0x1E9E,
	0x1E9F,
	0x212A,
	0x212C,
	0xFB00,
	0xFB07
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL__PERL_QUOTEMETA_invlist[] = { /* for ASCII/Latin1 */
	78,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xA8,
	0xA9,
	0xAA,
	0xAB,
	0xAF,
	0xB0,
	0xB2,
	0xB6,
	0xB7,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x1680,
	0x1681,
	0x17B4,
	0x17B6,
	0x180B,
	0x180F,
	0x2000,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2070,
	0x2190,
	0x2460,
	0x2500,
	0x2776,
	0x2794,
	0x2C00,
	0x2E00,
	0x2E80,
	0x3000,
	0x3004,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3164,
	0x3165,
	0xFD3E,
	0xFD40,
	0xFE00,
	0xFE10,
	0xFE45,
	0xFE47,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0xFFF0,
	0xFFF9,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE1000
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_QUOTEMETA_invlist[] = { /* for EBCDIC 1047 */
	92,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB3,
	0xB4,
	0xB7,
	0xBD,
	0xBE,
	0xBF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xE0,
	0xE2,
	0xFF,
	0x100,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x1680,
	0x1681,
	0x17B4,
	0x17B6,
	0x180B,
	0x180F,
	0x2000,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2070,
	0x2190,
	0x2460,
	0x2500,
	0x2776,
	0x2794,
	0x2C00,
	0x2E00,
	0x2E80,
	0x3000,
	0x3004,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3164,
	0x3165,
	0xFD3E,
	0xFD40,
	0xFE00,
	0xFE10,
	0xFE45,
	0xFE47,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0xFFF0,
	0xFFF9,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE1000
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL__PERL_QUOTEMETA_invlist[] = { /* for EBCDIC 037 */
	90,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB3,
	0xB4,
	0xB7,
	0xBA,
	0xBC,
	0xBF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xE0,
	0xE2,
	0xFF,
	0x100,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x1680,
	0x1681,
	0x17B4,
	0x17B6,
	0x180B,
	0x180F,
	0x2000,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2070,
	0x2190,
	0x2460,
	0x2500,
	0x2776,
	0x2794,
	0x2C00,
	0x2E00,
	0x2E80,
	0x3000,
	0x3004,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3164,
	0x3165,
	0xFD3E,
	0xFD40,
	0xFE00,
	0xFE10,
	0xFE45,
	0xFE47,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0xFFF0,
	0xFFF9,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE1000
};

#   endif	/* EBCDIC 037 */

static const UV PL_ADLM_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x640,
	0x641,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960
};

static const UV PL_AEGEANNUMBERS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10100,
	0x10140
};

static const UV PL_AGE__10_invlist[] = { /* for all charsets */
	81,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x860,
	0x86B,
	0x9FC,
	0x9FE,
	0xAFA,
	0xB00,
	0xD00,
	0xD01,
	0xD3B,
	0xD3D,
	0x1CF7,
	0x1CF8,
	0x1DF6,
	0x1DFA,
	0x20BF,
	0x20C0,
	0x23FF,
	0x2400,
	0x2BD2,
	0x2BD3,
	0x2E45,
	0x2E4A,
	0x312E,
	0x312F,
	0x9FD6,
	0x9FEB,
	0x1032D,
	0x10330,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x16FE1,
	0x16FE2,
	0x1B002,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1F260,
	0x1F266,
	0x1F6D3,
	0x1F6D5,
	0x1F6F7,
	0x1F6F9,
	0x1F900,
	0x1F90C,
	0x1F91F,
	0x1F920,
	0x1F928,
	0x1F930,
	0x1F931,
	0x1F933,
	0x1F94C,
	0x1F94D,
	0x1F95F,
	0x1F96C,
	0x1F992,
	0x1F998,
	0x1F9D0,
	0x1F9E7,
	0x2CEB0,
	0x2EBE1
};

static const UV PL_AGE__2_invlist[] = { /* for all charsets */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x591,
	0x5A2,
	0x5A3,
	0x5B0,
	0x5C4,
	0x5C5,
	0xF00,
	0xF48,
	0xF49,
	0xF6A,
	0xF71,
	0xF8C,
	0xF90,
	0xF96,
	0xF97,
	0xF98,
	0xF99,
	0xFAE,
	0xFB1,
	0xFB8,
	0xFB9,
	0xFBA,
	0x1E9B,
	0x1E9C,
	0x20AB,
	0x20AC,
	0xAC00,
	0xD7A4,
	0xD800,
	0xE000,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xEFFFE,
	0x110000
};

static const UV PL_AGE__2_DOT_1_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20AC,
	0x20AD,
	0xFFFC,
	0xFFFD
};

static const UV PL_AGE__3_invlist[] = { /* for all charsets */
	243,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F6,
	0x1FA,
	0x218,
	0x220,
	0x222,
	0x234,
	0x2A9,
	0x2AE,
	0x2DF,
	0x2E0,
	0x2EA,
	0x2EF,
	0x346,
	0x34F,
	0x362,
	0x363,
	0x3D7,
	0x3D8,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x400,
	0x401,
	0x40D,
	0x40E,
	0x450,
	0x451,
	0x45D,
	0x45E,
	0x488,
	0x48A,
	0x48C,
	0x490,
	0x4EC,
	0x4EE,
	0x58A,
	0x58B,
	0x653,
	0x656,
	0x6B8,
	0x6BA,
	0x6BF,
	0x6C0,
	0x6CF,
	0x6D0,
	0x6FA,
	0x6FF,
	0x700,
	0x70E,
	0x70F,
	0x72D,
	0x730,
	0x74B,
	0x780,
	0x7B1,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xF6A,
	0xF6B,
	0xF96,
	0xF97,
	0xFAE,
	0xFB1,
	0xFB8,
	0xFB9,
	0xFBA,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCF,
	0xFD0,
	0x1000,
	0x1022,
	0x1023,
	0x1028,
	0x1029,
	0x102B,
	0x102C,
	0x1033,
	0x1036,
	0x103A,
	0x1040,
	0x105A,
	0x1200,
	0x1207,
	0x1208,
	0x1247,
	0x1248,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1287,
	0x1288,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12AF,
	0x12B0,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12CF,
	0x12D0,
	0x12D7,
	0x12D8,
	0x12EF,
	0x12F0,
	0x130F,
	0x1310,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x131F,
	0x1320,
	0x1347,
	0x1348,
	0x135B,
	0x1361,
	0x137D,
	0x13A0,
	0x13F5,
	0x1401,
	0x1677,
	0x1680,
	0x169D,
	0x16A0,
	0x16F1,
	0x1780,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AA,
	0x202F,
	0x2030,
	0x2048,
	0x204E,
	0x20AD,
	0x20B0,
	0x20E2,
	0x20E4,
	0x2139,
	0x213B,
	0x2183,
	0x2184,
	0x21EB,
	0x21F4,
	0x2301,
	0x2302,
	0x237B,
	0x237C,
	0x237D,
	0x239B,
	0x2425,
	0x2427,
	0x25F0,
	0x25F8,
	0x2619,
	0x261A,
	0x2670,
	0x2672,
	0x2800,
	0x2900,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3038,
	0x303B,
	0x303E,
	0x303F,
	0x31A0,
	0x31B8,
	0x3400,
	0x4DB6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4A2,
	0xA4A4,
	0xA4B4,
	0xA4B5,
	0xA4C1,
	0xA4C2,
	0xA4C5,
	0xA4C6,
	0xA4C7,
	0xFB1D,
	0xFB1E,
	0xFFF9,
	0xFFFC
};

static const UV PL_AGE__3_DOT_1_invlist[] = { /* for all charsets */
	73,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3F4,
	0x3F6,
	0xFDD0,
	0xFDF0,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10400,
	0x10426,
	0x10428,
	0x1044E,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D12A,
	0x1D1DE,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C1,
	0x1D4C2,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A4,
	0x1D6A8,
	0x1D7CA,
	0x1D7CE,
	0x1D800,
	0x20000,
	0x2A6D7,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

static const UV PL_AGE__3_DOT_2_invlist[] = { /* for all charsets */
	119,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x220,
	0x221,
	0x34F,
	0x350,
	0x363,
	0x370,
	0x3D8,
	0x3DA,
	0x3F6,
	0x3F7,
	0x48A,
	0x48C,
	0x4C5,
	0x4C7,
	0x4C9,
	0x4CB,
	0x4CD,
	0x4CF,
	0x500,
	0x510,
	0x66E,
	0x670,
	0x7B1,
	0x7B2,
	0x10F7,
	0x10F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x2047,
	0x2048,
	0x204E,
	0x2053,
	0x2057,
	0x2058,
	0x205F,
	0x2064,
	0x2071,
	0x2072,
	0x20B0,
	0x20B2,
	0x20E4,
	0x20EB,
	0x213D,
	0x214C,
	0x21F4,
	0x2200,
	0x22F2,
	0x2300,
	0x237C,
	0x237D,
	0x239B,
	0x23CF,
	0x24EB,
	0x24FF,
	0x2596,
	0x25A0,
	0x25F8,
	0x2600,
	0x2616,
	0x2618,
	0x2672,
	0x267E,
	0x2680,
	0x268A,
	0x2768,
	0x2776,
	0x27D0,
	0x27EC,
	0x27F0,
	0x2800,
	0x2900,
	0x2B00,
	0x303B,
	0x303E,
	0x3095,
	0x3097,
	0x309F,
	0x30A1,
	0x30FF,
	0x3100,
	0x31F0,
	0x3200,
	0x3251,
	0x3260,
	0x32B1,
	0x32C0,
	0xA4A2,
	0xA4A4,
	0xA4B4,
	0xA4B5,
	0xA4C1,
	0xA4C2,
	0xA4C5,
	0xA4C6,
	0xFA30,
	0xFA6B,
	0xFDFC,
	0xFDFD,
	0xFE00,
	0xFE10,
	0xFE45,
	0xFE47,
	0xFE73,
	0xFE74,
	0xFF5F,
	0xFF61
};

static const UV PL_AGE__4_invlist[] = { /* for all charsets */
	155,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x221,
	0x222,
	0x234,
	0x237,
	0x2AE,
	0x2B0,
	0x2EF,
	0x300,
	0x350,
	0x358,
	0x35D,
	0x360,
	0x3F7,
	0x3FC,
	0x600,
	0x604,
	0x60D,
	0x616,
	0x656,
	0x659,
	0x6EE,
	0x6F0,
	0x6FF,
	0x700,
	0x72D,
	0x730,
	0x74D,
	0x750,
	0x904,
	0x905,
	0x9BD,
	0x9BE,
	0xA01,
	0xA02,
	0xA03,
	0xA04,
	0xA8C,
	0xA8D,
	0xAE1,
	0xAE4,
	0xAF1,
	0xAF2,
	0xB35,
	0xB36,
	0xB71,
	0xB72,
	0xBF3,
	0xBFB,
	0xCBC,
	0xCBE,
	0x17DD,
	0x17DE,
	0x17F0,
	0x17FA,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x19E0,
	0x1A00,
	0x1D00,
	0x1D6C,
	0x2053,
	0x2055,
	0x213B,
	0x213C,
	0x23CF,
	0x23D1,
	0x24FF,
	0x2500,
	0x2614,
	0x2616,
	0x268A,
	0x2692,
	0x26A0,
	0x26A2,
	0x2B00,
	0x2B0E,
	0x321D,
	0x321F,
	0x3250,
	0x3251,
	0x327C,
	0x327E,
	0x32CC,
	0x32D0,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xFDFD,
	0xFDFE,
	0xFE47,
	0xFE49,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x10380,
	0x1039E,
	0x1039F,
	0x103A0,
	0x10426,
	0x10428,
	0x1044E,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840,
	0x1D300,
	0x1D357,
	0x1D4C1,
	0x1D4C2,
	0xE0100,
	0xE01F0
};

static const UV PL_AGE__4_DOT_1_invlist[] = { /* for all charsets */
	173,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x237,
	0x242,
	0x358,
	0x35D,
	0x3FC,
	0x400,
	0x4F6,
	0x4F8,
	0x5A2,
	0x5A3,
	0x5C5,
	0x5C8,
	0x60B,
	0x60C,
	0x61E,
	0x61F,
	0x659,
	0x65F,
	0x750,
	0x76E,
	0x97D,
	0x97E,
	0x9CE,
	0x9CF,
	0xBB6,
	0xBB7,
	0xBE6,
	0xBE7,
	0xFD0,
	0xFD2,
	0x10F9,
	0x10FB,
	0x10FC,
	0x10FD,
	0x1207,
	0x1208,
	0x1247,
	0x1248,
	0x1287,
	0x1288,
	0x12AF,
	0x12B0,
	0x12CF,
	0x12D0,
	0x12EF,
	0x12F0,
	0x130F,
	0x1310,
	0x131F,
	0x1320,
	0x1347,
	0x1348,
	0x135F,
	0x1361,
	0x1380,
	0x139A,
	0x1980,
	0x19AA,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x19DE,
	0x19E0,
	0x1A00,
	0x1A1C,
	0x1A1E,
	0x1A20,
	0x1D6C,
	0x1DC4,
	0x2055,
	0x2057,
	0x2058,
	0x205F,
	0x2090,
	0x2095,
	0x20B2,
	0x20B6,
	0x20EB,
	0x20EC,
	0x213C,
	0x213D,
	0x214C,
	0x214D,
	0x23D1,
	0x23DC,
	0x2618,
	0x2619,
	0x267E,
	0x2680,
	0x2692,
	0x269D,
	0x26A2,
	0x26B2,
	0x27C0,
	0x27C7,
	0x2B0E,
	0x2B14,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C80,
	0x2CEB,
	0x2CF9,
	0x2D26,
	0x2D30,
	0x2D66,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E00,
	0x2E18,
	0x2E1C,
	0x2E1E,
	0x31C0,
	0x31D0,
	0x327E,
	0x327F,
	0x9FA6,
	0x9FBC,
	0xA700,
	0xA717,
	0xA800,
	0xA82C,
	0xFA70,
	0xFADA,
	0xFE10,
	0xFE1A,
	0x10140,
	0x1018B,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x1D200,
	0x1D246,
	0x1D6A4,
	0x1D6A6
};

static const UV PL_AGE__5_invlist[] = { /* for all charsets */
	71,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x242,
	0x250,
	0x37B,
	0x37E,
	0x4CF,
	0x4D0,
	0x4FA,
	0x500,
	0x510,
	0x514,
	0x5BA,
	0x5BB,
	0x7C0,
	0x7FB,
	0x97B,
	0x97D,
	0x97E,
	0x980,
	0xCE2,
	0xCE4,
	0xCF1,
	0xCF3,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1DC4,
	0x1DCB,
	0x1DFE,
	0x1E00,
	0x20EC,
	0x20F0,
	0x214D,
	0x214F,
	0x2184,
	0x2185,
	0x23DC,
	0x23E8,
	0x26B2,
	0x26B3,
	0x27C7,
	0x27CB,
	0x2B14,
	0x2B1B,
	0x2B20,
	0x2B24,
	0x2C60,
	0x2C6D,
	0x2C74,
	0x2C78,
	0xA717,
	0xA71B,
	0xA720,
	0xA722,
	0xA840,
	0xA878,
	0x10900,
	0x1091A,
	0x1091F,
	0x10920,
	0x12000,
	0x1236F,
	0x12400,
	0x12463,
	0x12470,
	0x12474,
	0x1D360,
	0x1D372,
	0x1D7CA,
	0x1D7CC
};

static const UV PL_AGE__5_DOT_1_invlist[] = { /* for all charsets */
	179,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x370,
	0x374,
	0x376,
	0x378,
	0x3CF,
	0x3D0,
	0x487,
	0x488,
	0x514,
	0x524,
	0x606,
	0x60B,
	0x616,
	0x61B,
	0x63B,
	0x640,
	0x76E,
	0x780,
	0x971,
	0x973,
	0xA51,
	0xA52,
	0xA75,
	0xA76,
	0xB44,
	0xB45,
	0xB62,
	0xB64,
	0xBD0,
	0xBD1,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5A,
	0xC62,
	0xC64,
	0xC78,
	0xC80,
	0xD3D,
	0xD3E,
	0xD44,
	0xD45,
	0xD62,
	0xD64,
	0xD70,
	0xD76,
	0xD79,
	0xD80,
	0xF6B,
	0xF6D,
	0xFCE,
	0xFCF,
	0xFD2,
	0xFD5,
	0x1022,
	0x1023,
	0x1028,
	0x1029,
	0x102B,
	0x102C,
	0x1033,
	0x1036,
	0x103A,
	0x1040,
	0x105A,
	0x109A,
	0x109E,
	0x10A0,
	0x18AA,
	0x18AB,
	0x1B80,
	0x1BAB,
	0x1BAE,
	0x1BBA,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1DCB,
	0x1DE7,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x2064,
	0x2065,
	0x20F0,
	0x20F1,
	0x214F,
	0x2150,
	0x2185,
	0x2189,
	0x269D,
	0x269E,
	0x26B3,
	0x26BD,
	0x26C0,
	0x26C4,
	0x27CC,
	0x27CD,
	0x27EC,
	0x27F0,
	0x2B1B,
	0x2B20,
	0x2B24,
	0x2B4D,
	0x2B50,
	0x2B55,
	0x2C6D,
	0x2C70,
	0x2C71,
	0x2C74,
	0x2C78,
	0x2C7E,
	0x2DE0,
	0x2E00,
	0x2E18,
	0x2E1C,
	0x2E1E,
	0x2E31,
	0x312D,
	0x312E,
	0x31D0,
	0x31E4,
	0x9FBC,
	0x9FC4,
	0xA500,
	0xA62C,
	0xA640,
	0xA660,
	0xA662,
	0xA674,
	0xA67C,
	0xA698,
	0xA71B,
	0xA720,
	0xA722,
	0xA78D,
	0xA7FB,
	0xA800,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA900,
	0xA954,
	0xA95F,
	0xA960,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA60,
	0xFE24,
	0xFE27,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10920,
	0x1093A,
	0x1093F,
	0x10940,
	0x1D129,
	0x1D12A,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094
};

static const UV PL_AGE__5_DOT_2_invlist[] = { /* for all charsets */
	181,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x524,
	0x526,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x900,
	0x901,
	0x94E,
	0x94F,
	0x955,
	0x956,
	0x979,
	0x97B,
	0x9FB,
	0x9FC,
	0xFD5,
	0xFD9,
	0x109A,
	0x109E,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1200,
	0x1400,
	0x1401,
	0x1677,
	0x1680,
	0x18B0,
	0x18F6,
	0x19AA,
	0x19AC,
	0x19DA,
	0x19DB,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1CD0,
	0x1CF3,
	0x1DFD,
	0x1DFE,
	0x20B6,
	0x20B9,
	0x2150,
	0x2153,
	0x2189,
	0x218A,
	0x23E8,
	0x23E9,
	0x269E,
	0x26A0,
	0x26BD,
	0x26C0,
	0x26C4,
	0x26CE,
	0x26CF,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2700,
	0x2757,
	0x2758,
	0x2B55,
	0x2B5A,
	0x2C70,
	0x2C71,
	0x2C7E,
	0x2C80,
	0x2CEB,
	0x2CF2,
	0x2E31,
	0x2E32,
	0x3244,
	0x3250,
	0x9FC4,
	0x9FCC,
	0xA4D0,
	0xA500,
	0xA6A0,
	0xA6F8,
	0xA830,
	0xA83A,
	0xA8E0,
	0xA8FC,
	0xA960,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xAA60,
	0xAA7C,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAE0,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFA6B,
	0xFA6E,
	0x10840,
	0x10856,
	0x10857,
	0x10860,
	0x1091A,
	0x1091C,
	0x10A60,
	0x10A80,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10C00,
	0x10C49,
	0x10E60,
	0x10E7F,
	0x11080,
	0x110C2,
	0x13000,
	0x1342F,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F131,
	0x1F132,
	0x1F13D,
	0x1F13E,
	0x1F13F,
	0x1F140,
	0x1F142,
	0x1F143,
	0x1F146,
	0x1F147,
	0x1F14A,
	0x1F14F,
	0x1F157,
	0x1F158,
	0x1F15F,
	0x1F160,
	0x1F179,
	0x1F17A,
	0x1F17B,
	0x1F17D,
	0x1F17F,
	0x1F180,
	0x1F18A,
	0x1F18E,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F201,
	0x1F210,
	0x1F232,
	0x1F240,
	0x1F249,
	0x2A700,
	0x2B735
};

static const UV PL_AGE__6_invlist[] = { /* for all charsets */
	213,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x526,
	0x528,
	0x620,
	0x621,
	0x65F,
	0x660,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x93A,
	0x93C,
	0x94F,
	0x950,
	0x956,
	0x958,
	0x973,
	0x978,
	0xB72,
	0xB78,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3B,
	0xD4E,
	0xD4F,
	0xF8C,
	0xF90,
	0xFD9,
	0xFDB,
	0x135D,
	0x135F,
	0x1BC0,
	0x1BF4,
	0x1BFC,
	0x1C00,
	0x1DFC,
	0x1DFD,
	0x2095,
	0x209D,
	0x20B9,
	0x20BA,
	0x23E9,
	0x23F4,
	0x26CE,
	0x26CF,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x275F,
	0x2761,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x27CE,
	0x27D0,
	0x2D70,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x31B8,
	0x31BB,
	0xA660,
	0xA662,
	0xA78D,
	0xA78F,
	0xA790,
	0xA792,
	0xA7A0,
	0xA7AA,
	0xA7FA,
	0xA7FB,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xFBB2,
	0xFBC2,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x16800,
	0x16A39,
	0x1B000,
	0x1B002,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0BF,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0E0,
	0x1F130,
	0x1F131,
	0x1F132,
	0x1F13D,
	0x1F13E,
	0x1F13F,
	0x1F140,
	0x1F142,
	0x1F143,
	0x1F146,
	0x1F147,
	0x1F14A,
	0x1F14F,
	0x1F157,
	0x1F158,
	0x1F15F,
	0x1F160,
	0x1F16A,
	0x1F170,
	0x1F179,
	0x1F17A,
	0x1F17B,
	0x1F17D,
	0x1F17F,
	0x1F180,
	0x1F18A,
	0x1F18E,
	0x1F190,
	0x1F191,
	0x1F19B,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F232,
	0x1F23B,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F321,
	0x1F330,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F380,
	0x1F394,
	0x1F3A0,
	0x1F3C5,
	0x1F3C6,
	0x1F3CB,
	0x1F3E0,
	0x1F3F1,
	0x1F400,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4F8,
	0x1F4F9,
	0x1F4FD,
	0x1F500,
	0x1F53E,
	0x1F550,
	0x1F568,
	0x1F5FB,
	0x1F600,
	0x1F601,
	0x1F611,
	0x1F612,
	0x1F615,
	0x1F616,
	0x1F617,
	0x1F618,
	0x1F619,
	0x1F61A,
	0x1F61B,
	0x1F61C,
	0x1F61F,
	0x1F620,
	0x1F626,
	0x1F628,
	0x1F62C,
	0x1F62D,
	0x1F62E,
	0x1F630,
	0x1F634,
	0x1F635,
	0x1F641,
	0x1F645,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F700,
	0x1F774,
	0x2B740,
	0x2B81E
};

static const UV PL_AGE__6_DOT_1_invlist[] = { /* for all charsets */
	179,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x58F,
	0x590,
	0x604,
	0x605,
	0x8A0,
	0x8A1,
	0x8A2,
	0x8AD,
	0x8E4,
	0x8FF,
	0xAF0,
	0xAF1,
	0xEDE,
	0xEE0,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10FD,
	0x1100,
	0x1BAB,
	0x1BAE,
	0x1BBA,
	0x1BC0,
	0x1CC0,
	0x1CC8,
	0x1CF3,
	0x1CF7,
	0x27CB,
	0x27CC,
	0x27CD,
	0x27CE,
	0x2CF2,
	0x2CF4,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D66,
	0x2D68,
	0x2E32,
	0x2E3C,
	0x9FCC,
	0x9FCD,
	0xA674,
	0xA67C,
	0xA69F,
	0xA6A0,
	0xA792,
	0xA794,
	0xA7AA,
	0xA7AB,
	0xA7F8,
	0xA7FA,
	0xAAE0,
	0xAAF7,
	0xFA2E,
	0xFA30,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11180,
	0x111C9,
	0x111D0,
	0x111DA,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F16A,
	0x1F16C,
	0x1F540,
	0x1F544,
	0x1F600,
	0x1F601,
	0x1F611,
	0x1F612,
	0x1F615,
	0x1F616,
	0x1F617,
	0x1F618,
	0x1F619,
	0x1F61A,
	0x1F61B,
	0x1F61C,
	0x1F61F,
	0x1F620,
	0x1F626,
	0x1F628,
	0x1F62C,
	0x1F62D,
	0x1F62E,
	0x1F630,
	0x1F634,
	0x1F635
};

static const UV PL_AGE__6_DOT_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20BA,
	0x20BB
};

static const UV PL_AGE__6_DOT_3_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61C,
	0x61D,
	0x2066,
	0x206A
};

static const UV PL_AGE__7_invlist[] = { /* for all charsets */
	283,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x37F,
	0x380,
	0x528,
	0x530,
	0x58D,
	0x58F,
	0x605,
	0x606,
	0x8A1,
	0x8A2,
	0x8AD,
	0x8B3,
	0x8FF,
	0x900,
	0x978,
	0x979,
	0x980,
	0x981,
	0xC00,
	0xC01,
	0xC34,
	0xC35,
	0xC81,
	0xC82,
	0xD01,
	0xD02,
	0xDE6,
	0xDF0,
	0x16F1,
	0x16F9,
	0x191D,
	0x191F,
	0x1AB0,
	0x1ABF,
	0x1CF8,
	0x1CFA,
	0x1DE7,
	0x1DF6,
	0x20BB,
	0x20BE,
	0x23F4,
	0x23FB,
	0x2700,
	0x2701,
	0x2B4D,
	0x2B50,
	0x2B5A,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2E3C,
	0x2E43,
	0xA698,
	0xA69E,
	0xA794,
	0xA7A0,
	0xA7AB,
	0xA7AE,
	0xA7B0,
	0xA7B2,
	0xA7F7,
	0xA7F8,
	0xA9E0,
	0xA9FF,
	0xAA7C,
	0xAA80,
	0xAB30,
	0xAB60,
	0xAB64,
	0xAB66,
	0xFE27,
	0xFE2E,
	0x1018B,
	0x1018D,
	0x101A0,
	0x101A1,
	0x102E0,
	0x102FC,
	0x1031F,
	0x10320,
	0x10350,
	0x1037B,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10860,
	0x1089F,
	0x108A7,
	0x108B0,
	0x10A80,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B80,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x1107F,
	0x11080,
	0x11150,
	0x11177,
	0x111CD,
	0x111CE,
	0x111DA,
	0x111DB,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123E,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11301,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115CA,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x1236F,
	0x12399,
	0x12463,
	0x1246F,
	0x12474,
	0x12475,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1F0BF,
	0x1F0C0,
	0x1F0E0,
	0x1F0F6,
	0x1F10B,
	0x1F10D,
	0x1F321,
	0x1F32D,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F37E,
	0x1F394,
	0x1F3A0,
	0x1F3C5,
	0x1F3C6,
	0x1F3CB,
	0x1F3CF,
	0x1F3D4,
	0x1F3E0,
	0x1F3F1,
	0x1F3F8,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4F8,
	0x1F4F9,
	0x1F4FD,
	0x1F4FF,
	0x1F53E,
	0x1F540,
	0x1F544,
	0x1F54B,
	0x1F568,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F5FB,
	0x1F641,
	0x1F643,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F6D0,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE
};

static const UV PL_AGE__8_invlist[] = { /* for all charsets */
	119,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8B3,
	0x8B5,
	0x8E3,
	0x8E4,
	0xAF9,
	0xAFA,
	0xC5A,
	0xC5B,
	0xD5F,
	0xD60,
	0x13F5,
	0x13F6,
	0x13F8,
	0x13FE,
	0x20BE,
	0x20BF,
	0x218A,
	0x218C,
	0x2BEC,
	0x2BF0,
	0x9FCD,
	0x9FD6,
	0xA69E,
	0xA69F,
	0xA78F,
	0xA790,
	0xA7B2,
	0xA7B8,
	0xA8FC,
	0xA8FE,
	0xAB60,
	0xAB64,
	0xAB70,
	0xABC0,
	0xFE2E,
	0xFE30,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x10900,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x111C9,
	0x111CD,
	0x111DB,
	0x111E0,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x11300,
	0x11301,
	0x11350,
	0x11351,
	0x115CA,
	0x115DE,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x12399,
	0x1239A,
	0x12480,
	0x12544,
	0x14400,
	0x14647,
	0x1D1DE,
	0x1D1E9,
	0x1D800,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1F32D,
	0x1F330,
	0x1F37E,
	0x1F380,
	0x1F3CF,
	0x1F3D4,
	0x1F3F8,
	0x1F400,
	0x1F4FF,
	0x1F500,
	0x1F54B,
	0x1F550,
	0x1F643,
	0x1F645,
	0x1F6D0,
	0x1F6D1,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x2B820,
	0x2CEA2
};

static const UV PL_AGE__9_invlist[] = { /* for all charsets */
	105,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E3,
	0xC80,
	0xC81,
	0xD4F,
	0xD50,
	0xD54,
	0xD57,
	0xD58,
	0xD5F,
	0xD76,
	0xD79,
	0x1C80,
	0x1C89,
	0x1DFB,
	0x1DFC,
	0x23FB,
	0x23FF,
	0x2E43,
	0x2E45,
	0xA7AE,
	0xA7AF,
	0xA8C5,
	0xA8C6,
	0x1018D,
	0x1018F,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x1123E,
	0x1123F,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11660,
	0x1166D,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x16FE0,
	0x16FE1,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1F19B,
	0x1F1AD,
	0x1F23B,
	0x1F23C,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F6D1,
	0x1F6D3,
	0x1F6F4,
	0x1F6F7,
	0x1F919,
	0x1F91F,
	0x1F920,
	0x1F928,
	0x1F930,
	0x1F931,
	0x1F933,
	0x1F93F,
	0x1F940,
	0x1F94C,
	0x1F950,
	0x1F95F,
	0x1F985,
	0x1F992
};

static const UV PL_AGE__NA_invlist[] = { /* for all charsets */
	1318,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_AGHB_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10530,
	0x10564,
	0x1056F,
	0x10570
};

static const UV PL_AHOM_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740
};

static const UV PL_ALCHEMICAL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F700,
	0x1F780
};

static const UV PL_ALL_invlist[] = { /* for all charsets */
	1,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0
};

static const UV PL_ALPHABETICPF_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFB00,
	0xFB50
};

static const UV PL_ANCIENTGREEKMUSIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D200,
	0x1D250
};

static const UV PL_ANCIENTGREEKNUMBERS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10140,
	0x10190
};

static const UV PL_ANCIENTSYMBOLS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10190,
	0x101D0
};

static const UV PL_ANY_invlist[] = { /* for all charsets */
	2,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x110000
};

static const UV PL_ARAB_invlist[] = { /* for all charsets */
	105,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x600,
	0x605,
	0x606,
	0x61D,
	0x61E,
	0x6DD,
	0x6DE,
	0x700,
	0x750,
	0x780,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x900,
	0xFB50,
	0xFBC2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0x102E0,
	0x102FC,
	0x10E60,
	0x10E7F,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2
};

static const UV PL_ARABICEXTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8A0,
	0x900
};

static const UV PL_ARABICMATH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1EE00,
	0x1EF00
};

static const UV PL_ARABICPFA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFB50,
	0xFE00
};

static const UV PL_ARABICPFB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE70,
	0xFF00
};

static const UV PL_ARABICSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x750,
	0x780
};

static const UV PL_ARMI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10840,
	0x10856,
	0x10857,
	0x10860
};

static const UV PL_ARMN_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0xFB13,
	0xFB18
};

static const UV PL_ARROWS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2190,
	0x2200
};

static const UV PL_AVST_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B40
};

static const UV PL_BALI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D
};

static const UV PL_BAMU_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA6A0,
	0xA6F8,
	0x16800,
	0x16A39
};

static const UV PL_BAMUMSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16800,
	0x16A40
};

static const UV PL_BASS_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6
};

static const UV PL_BATK_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BC0,
	0x1BF4,
	0x1BFC,
	0x1C00
};

static const UV PL_BC__AL_invlist[] = { /* for all charsets */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x608,
	0x609,
	0x60B,
	0x60C,
	0x60D,
	0x60E,
	0x61B,
	0x64B,
	0x66D,
	0x670,
	0x671,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7C0,
	0x860,
	0x870,
	0x8A0,
	0x8D4,
	0xFB50,
	0xFD3E,
	0xFD40,
	0xFDD0,
	0xFDF0,
	0xFDFD,
	0xFDFE,
	0xFE00,
	0xFE70,
	0xFEFF,
	0x1EE00,
	0x1EEF0,
	0x1EEF2,
	0x1EF00
};

static const UV PL_BC__AN_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x600,
	0x606,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x6DD,
	0x6DE,
	0x8E2,
	0x8E3,
	0x10E60,
	0x10E7F
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__B_invlist[] = { /* for ASCII/Latin1 */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xB,
	0xD,
	0xE,
	0x1C,
	0x1F,
	0x85,
	0x86,
	0x2029,
	0x202A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__B_invlist[] = { /* for EBCDIC 1047 */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x15,
	0x16,
	0x1C,
	0x1F,
	0x25,
	0x26,
	0x2029,
	0x202A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__B_invlist[] = { /* for EBCDIC 037 */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x15,
	0x16,
	0x1C,
	0x1F,
	0x25,
	0x26,
	0x2029,
	0x202A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__BN_invlist[] = { /* for ASCII/Latin1 */
	64,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xE,
	0x1C,
	0x7F,
	0x85,
	0x86,
	0xA0,
	0xAD,
	0xAE,
	0x180E,
	0x180F,
	0x200B,
	0x200E,
	0x2060,
	0x2066,
	0x206A,
	0x2070,
	0xFDD0,
	0xFDF0,
	0xFEFF,
	0xFF00,
	0xFFF0,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0100,
	0xE01F0,
	0xE1000,
	0xEFFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE,
	0x110000
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__BN_invlist[] = { /* for EBCDIC 1047 */
	70,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x1C,
	0x20,
	0x25,
	0x26,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x180E,
	0x180F,
	0x200B,
	0x200E,
	0x2060,
	0x2066,
	0x206A,
	0x2070,
	0xFDD0,
	0xFDF0,
	0xFEFF,
	0xFF00,
	0xFFF0,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0100,
	0xE01F0,
	0xE1000,
	0xEFFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE,
	0x110000
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__BN_invlist[] = { /* for EBCDIC 037 */
	70,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x1C,
	0x20,
	0x25,
	0x26,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x180E,
	0x180F,
	0x200B,
	0x200E,
	0x2060,
	0x2066,
	0x206A,
	0x2070,
	0xFDD0,
	0xFDF0,
	0xFEFF,
	0xFF00,
	0xFFF0,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0100,
	0xE01F0,
	0xE1000,
	0xEFFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE,
	0x110000
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__CS_invlist[] = { /* for ASCII/Latin1 */
	27,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C,
	0x2D,
	0x2E,
	0x30,
	0x3A,
	0x3B,
	0xA0,
	0xA1,
	0x60C,
	0x60D,
	0x202F,
	0x2030,
	0x2044,
	0x2045,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF10,
	0xFF1A,
	0xFF1B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__CS_invlist[] = { /* for EBCDIC 1047 */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x4B,
	0x4C,
	0x61,
	0x62,
	0x6B,
	0x6C,
	0x7A,
	0x7B,
	0x60C,
	0x60D,
	0x202F,
	0x2030,
	0x2044,
	0x2045,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF10,
	0xFF1A,
	0xFF1B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__CS_invlist[] = { /* for EBCDIC 037 */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x4B,
	0x4C,
	0x61,
	0x62,
	0x6B,
	0x6C,
	0x7A,
	0x7B,
	0x60C,
	0x60D,
	0x202F,
	0x2030,
	0x2044,
	0x2045,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF10,
	0xFF1A,
	0xFF1B
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__EN_invlist[] = { /* for ASCII/Latin1 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0xB2,
	0xB4,
	0xB9,
	0xBA,
	0x6F0,
	0x6FA,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2488,
	0x249C,
	0xFF10,
	0xFF1A,
	0x102E1,
	0x102FC,
	0x1D7CE,
	0x1D800,
	0x1F100,
	0x1F10B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__EN_invlist[] = { /* for EBCDIC 1047 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0x6F0,
	0x6FA,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2488,
	0x249C,
	0xFF10,
	0xFF1A,
	0x102E1,
	0x102FC,
	0x1D7CE,
	0x1D800,
	0x1F100,
	0x1F10B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__EN_invlist[] = { /* for EBCDIC 037 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0x6F0,
	0x6FA,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2488,
	0x249C,
	0xFF10,
	0xFF1A,
	0x102E1,
	0x102FC,
	0x1D7CE,
	0x1D800,
	0x1F100,
	0x1F10B
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__ES_invlist[] = { /* for ASCII/Latin1 */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2B,
	0x2C,
	0x2D,
	0x2E,
	0x207A,
	0x207C,
	0x208A,
	0x208C,
	0x2212,
	0x2213,
	0xFB29,
	0xFB2A,
	0xFE62,
	0xFE64,
	0xFF0B,
	0xFF0C,
	0xFF0D,
	0xFF0E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__ES_invlist[] = { /* for EBCDIC 1047 */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4E,
	0x4F,
	0x60,
	0x61,
	0x207A,
	0x207C,
	0x208A,
	0x208C,
	0x2212,
	0x2213,
	0xFB29,
	0xFB2A,
	0xFE62,
	0xFE64,
	0xFF0B,
	0xFF0C,
	0xFF0D,
	0xFF0E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__ES_invlist[] = { /* for EBCDIC 037 */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4E,
	0x4F,
	0x60,
	0x61,
	0x207A,
	0x207C,
	0x208A,
	0x208C,
	0x2212,
	0x2213,
	0xFB29,
	0xFB2A,
	0xFE62,
	0xFE64,
	0xFF0B,
	0xFF0C,
	0xFF0D,
	0xFF0E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__ET_invlist[] = { /* for ASCII/Latin1 */
	45,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x23,
	0x26,
	0xA2,
	0xA6,
	0xB0,
	0xB2,
	0x58F,
	0x590,
	0x609,
	0x60B,
	0x66A,
	0x66B,
	0x9F2,
	0x9F4,
	0x9FB,
	0x9FC,
	0xAF1,
	0xAF2,
	0xBF9,
	0xBFA,
	0xE3F,
	0xE40,
	0x17DB,
	0x17DC,
	0x2030,
	0x2035,
	0x20A0,
	0x20D0,
	0x212E,
	0x212F,
	0x2213,
	0x2214,
	0xA838,
	0xA83A,
	0xFE5F,
	0xFE60,
	0xFE69,
	0xFE6B,
	0xFF03,
	0xFF06,
	0xFFE0,
	0xFFE2,
	0xFFE5,
	0xFFE7
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__ET_invlist[] = { /* for EBCDIC 1047 */
	53,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x4B,
	0x5B,
	0x5C,
	0x6C,
	0x6D,
	0x7B,
	0x7C,
	0x8F,
	0x91,
	0x9F,
	0xA0,
	0xB1,
	0xB3,
	0x58F,
	0x590,
	0x609,
	0x60B,
	0x66A,
	0x66B,
	0x9F2,
	0x9F4,
	0x9FB,
	0x9FC,
	0xAF1,
	0xAF2,
	0xBF9,
	0xBFA,
	0xE3F,
	0xE40,
	0x17DB,
	0x17DC,
	0x2030,
	0x2035,
	0x20A0,
	0x20D0,
	0x212E,
	0x212F,
	0x2213,
	0x2214,
	0xA838,
	0xA83A,
	0xFE5F,
	0xFE60,
	0xFE69,
	0xFE6B,
	0xFF03,
	0xFF06,
	0xFFE0,
	0xFFE2,
	0xFFE5,
	0xFFE7
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__ET_invlist[] = { /* for EBCDIC 037 */
	53,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x4B,
	0x5B,
	0x5C,
	0x6C,
	0x6D,
	0x7B,
	0x7C,
	0x8F,
	0x91,
	0x9F,
	0xA0,
	0xB1,
	0xB3,
	0x58F,
	0x590,
	0x609,
	0x60B,
	0x66A,
	0x66B,
	0x9F2,
	0x9F4,
	0x9FB,
	0x9FC,
	0xAF1,
	0xAF2,
	0xBF9,
	0xBFA,
	0xE3F,
	0xE40,
	0x17DB,
	0x17DC,
	0x2030,
	0x2035,
	0x20A0,
	0x20D0,
	0x212E,
	0x212F,
	0x2213,
	0x2214,
	0xA838,
	0xA83A,
	0xFE5F,
	0xFE60,
	0xFE69,
	0xFE6B,
	0xFF03,
	0xFF06,
	0xFFE0,
	0xFFE2,
	0xFFE5,
	0xFFE7
};

#   endif	/* EBCDIC 037 */

static const UV PL_BC__FSI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2068,
	0x2069
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__L_invlist[] = { /* for ASCII/Latin1 */
	860,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2B9,
	0x2BB,
	0x2C2,
	0x2D0,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EE,
	0x2EF,
	0x370,
	0x374,
	0x376,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3F6,
	0x3F7,
	0x483,
	0x48A,
	0x58A,
	0x58B,
	0x58D,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0x9F2,
	0x9F4,
	0x9FB,
	0x9FC,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAF1,
	0xAF2,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xBF3,
	0xBFB,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC78,
	0xC7F,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE3F,
	0xE40,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3E,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1390,
	0x139A,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x169D,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DB,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x1946,
	0x19DE,
	0x1A00,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2000,
	0x200E,
	0x200F,
	0x2071,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x20A0,
	0x20F1,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x2150,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2336,
	0x237B,
	0x2395,
	0x2396,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x249C,
	0x24EA,
	0x26AC,
	0x26AD,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF9,
	0x2D00,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x302E,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3040,
	0x3099,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x31C0,
	0x31E4,
	0x321D,
	0x321F,
	0x3250,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA60D,
	0xA610,
	0xA66F,
	0xA680,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA700,
	0xA722,
	0xA788,
	0xA789,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA828,
	0xA82C,
	0xA838,
	0xA83A,
	0xA874,
	0xA878,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1D,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF0,
	0x10000,
	0x10101,
	0x10102,
	0x10140,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102FC,
	0x10376,
	0x1037B,
	0x10800,
	0x11000,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x11052,
	0x11066,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x11660,
	0x1166D,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F16A,
	0x1F16C,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE1000,
	0xEFFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE,
	0x110000
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__L_invlist[] = { /* for EBCDIC 1047 */
	886,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2BB,
	0x2C2,
	0x2D0,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EE,
	0x2EF,
	0x370,
	0x374,
	0x376,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3F6,
	0x3F7,
	0x483,
	0x48A,
	0x58A,
	0x58B,
	0x58D,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0x9F2,
	0x9F4,
	0x9FB,
	0x9FC,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAF1,
	0xAF2,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xBF3,
	0xBFB,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC78,
	0xC7F,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE3F,
	0xE40,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3E,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1390,
	0x139A,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x169D,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DB,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x1946,
	0x19DE,
	0x1A00,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2000,
	0x200E,
	0x200F,
	0x2071,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x20A0,
	0x20F1,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x2150,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2336,
	0x237B,
	0x2395,
	0x2396,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x249C,
	0x24EA,
	0x26AC,
	0x26AD,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF9,
	0x2D00,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x302E,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3040,
	0x3099,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x31C0,
	0x31E4,
	0x321D,
	0x321F,
	0x3250,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA60D,
	0xA610,
	0xA66F,
	0xA680,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA700,
	0xA722,
	0xA788,
	0xA789,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA828,
	0xA82C,
	0xA838,
	0xA83A,
	0xA874,
	0xA878,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1D,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF0,
	0x10000,
	0x10101,
	0x10102,
	0x10140,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102FC,
	0x10376,
	0x1037B,
	0x10800,
	0x11000,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x11052,
	0x11066,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x11660,
	0x1166D,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F16A,
	0x1F16C,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE1000,
	0xEFFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE,
	0x110000
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__L_invlist[] = { /* for EBCDIC 037 */
	882,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2BB,
	0x2C2,
	0x2D0,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EE,
	0x2EF,
	0x370,
	0x374,
	0x376,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3F6,
	0x3F7,
	0x483,
	0x48A,
	0x58A,
	0x58B,
	0x58D,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0x9F2,
	0x9F4,
	0x9FB,
	0x9FC,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAF1,
	0xAF2,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xBF3,
	0xBFB,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC78,
	0xC7F,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE3F,
	0xE40,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3E,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1390,
	0x139A,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x169D,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DB,
	0x17DC,
	0x17DD,
	0x17DE,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x1946,
	0x19DE,
	0x1A00,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2000,
	0x200E,
	0x200F,
	0x2071,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x20A0,
	0x20F1,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x2150,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2336,
	0x237B,
	0x2395,
	0x2396,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x249C,
	0x24EA,
	0x26AC,
	0x26AD,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF9,
	0x2D00,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x302E,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3040,
	0x3099,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x31C0,
	0x31E4,
	0x321D,
	0x321F,
	0x3250,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA60D,
	0xA610,
	0xA66F,
	0xA680,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA700,
	0xA722,
	0xA788,
	0xA789,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA828,
	0xA82C,
	0xA838,
	0xA83A,
	0xA874,
	0xA878,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1D,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF0,
	0x10000,
	0x10101,
	0x10102,
	0x10140,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102FC,
	0x10376,
	0x1037B,
	0x10800,
	0x11000,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x11052,
	0x11066,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x11660,
	0x1166D,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F16A,
	0x1F16C,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE1000,
	0xEFFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE,
	0x110000
};

#   endif	/* EBCDIC 037 */

static const UV PL_BC__LRE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x202A,
	0x202B
};

static const UV PL_BC__LRI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2066,
	0x2067
};

static const UV PL_BC__LRO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x202D,
	0x202E
};

static const UV PL_BC__NSM_invlist[] = { /* for all charsets */
	593,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0100,
	0xE01F0
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__ON_invlist[] = { /* for ASCII/Latin1 */
	355,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x23,
	0x26,
	0x2B,
	0x3B,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0x7F,
	0xA1,
	0xA2,
	0xA6,
	0xAA,
	0xAB,
	0xAD,
	0xAE,
	0xB0,
	0xB4,
	0xB5,
	0xB6,
	0xB9,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2B9,
	0x2BB,
	0x2C2,
	0x2D0,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EE,
	0x2EF,
	0x300,
	0x374,
	0x376,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3F6,
	0x3F7,
	0x58A,
	0x58B,
	0x58D,
	0x58F,
	0x606,
	0x608,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x7F6,
	0x7FA,
	0xBF3,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC78,
	0xC7F,
	0xF3A,
	0xF3E,
	0x1390,
	0x139A,
	0x1400,
	0x1401,
	0x169B,
	0x169D,
	0x17F0,
	0x17FA,
	0x1800,
	0x180B,
	0x1940,
	0x1941,
	0x1944,
	0x1946,
	0x19DE,
	0x1A00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2010,
	0x2028,
	0x2035,
	0x2044,
	0x2045,
	0x205F,
	0x207C,
	0x207F,
	0x208C,
	0x208F,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x2150,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2212,
	0x2214,
	0x2336,
	0x237B,
	0x2395,
	0x2396,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2488,
	0x24EA,
	0x26AC,
	0x26AD,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2CF9,
	0x2D00,
	0x2E00,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3040,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x31C0,
	0x31E4,
	0x321D,
	0x321F,
	0x3250,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA680,
	0xA700,
	0xA722,
	0xA788,
	0xA789,
	0xA828,
	0xA82C,
	0xA874,
	0xA878,
	0xFD3E,
	0xFD40,
	0xFDFD,
	0xFDFE,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE5F,
	0xFE60,
	0xFE62,
	0xFE64,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6B,
	0xFE6C,
	0xFF01,
	0xFF03,
	0xFF06,
	0xFF0B,
	0xFF1B,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFE2,
	0xFFE5,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10101,
	0x10102,
	0x10140,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x1091F,
	0x10920,
	0x10B39,
	0x10B40,
	0x11052,
	0x11066,
	0x11660,
	0x1166D,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10B,
	0x1F10D,
	0x1F16A,
	0x1F16C,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__ON_invlist[] = { /* for EBCDIC 1047 */
	363,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4E,
	0x4F,
	0x51,
	0x5A,
	0x5B,
	0x5C,
	0x60,
	0x6A,
	0x6B,
	0x6D,
	0x70,
	0x79,
	0x7A,
	0x7C,
	0x80,
	0x8A,
	0x8C,
	0x9D,
	0x9E,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB1,
	0xB3,
	0xBA,
	0xBB,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE2,
	0x2B9,
	0x2BB,
	0x2C2,
	0x2D0,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EE,
	0x2EF,
	0x300,
	0x374,
	0x376,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3F6,
	0x3F7,
	0x58A,
	0x58B,
	0x58D,
	0x58F,
	0x606,
	0x608,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x7F6,
	0x7FA,
	0xBF3,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC78,
	0xC7F,
	0xF3A,
	0xF3E,
	0x1390,
	0x139A,
	0x1400,
	0x1401,
	0x169B,
	0x169D,
	0x17F0,
	0x17FA,
	0x1800,
	0x180B,
	0x1940,
	0x1941,
	0x1944,
	0x1946,
	0x19DE,
	0x1A00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2010,
	0x2028,
	0x2035,
	0x2044,
	0x2045,
	0x205F,
	0x207C,
	0x207F,
	0x208C,
	0x208F,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x2150,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2212,
	0x2214,
	0x2336,
	0x237B,
	0x2395,
	0x2396,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2488,
	0x24EA,
	0x26AC,
	0x26AD,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2CF9,
	0x2D00,
	0x2E00,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3040,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x31C0,
	0x31E4,
	0x321D,
	0x321F,
	0x3250,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA680,
	0xA700,
	0xA722,
	0xA788,
	0xA789,
	0xA828,
	0xA82C,
	0xA874,
	0xA878,
	0xFD3E,
	0xFD40,
	0xFDFD,
	0xFDFE,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE5F,
	0xFE60,
	0xFE62,
	0xFE64,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6B,
	0xFE6C,
	0xFF01,
	0xFF03,
	0xFF06,
	0xFF0B,
	0xFF1B,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFE2,
	0xFFE5,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10101,
	0x10102,
	0x10140,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x1091F,
	0x10920,
	0x10B39,
	0x10B40,
	0x11052,
	0x11066,
	0x11660,
	0x1166D,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10B,
	0x1F10D,
	0x1F16A,
	0x1F16C,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__ON_invlist[] = { /* for EBCDIC 037 */
	359,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4E,
	0x4F,
	0x51,
	0x5A,
	0x5B,
	0x5C,
	0x60,
	0x6A,
	0x6B,
	0x6D,
	0x70,
	0x79,
	0x7A,
	0x7C,
	0x80,
	0x8A,
	0x8C,
	0x9D,
	0x9E,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB1,
	0xB3,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE2,
	0x2B9,
	0x2BB,
	0x2C2,
	0x2D0,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EE,
	0x2EF,
	0x300,
	0x374,
	0x376,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3F6,
	0x3F7,
	0x58A,
	0x58B,
	0x58D,
	0x58F,
	0x606,
	0x608,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x7F6,
	0x7FA,
	0xBF3,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC78,
	0xC7F,
	0xF3A,
	0xF3E,
	0x1390,
	0x139A,
	0x1400,
	0x1401,
	0x169B,
	0x169D,
	0x17F0,
	0x17FA,
	0x1800,
	0x180B,
	0x1940,
	0x1941,
	0x1944,
	0x1946,
	0x19DE,
	0x1A00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2010,
	0x2028,
	0x2035,
	0x2044,
	0x2045,
	0x205F,
	0x207C,
	0x207F,
	0x208C,
	0x208F,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x2150,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2212,
	0x2214,
	0x2336,
	0x237B,
	0x2395,
	0x2396,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2488,
	0x24EA,
	0x26AC,
	0x26AD,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2CF9,
	0x2D00,
	0x2E00,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3040,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x31C0,
	0x31E4,
	0x321D,
	0x321F,
	0x3250,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA680,
	0xA700,
	0xA722,
	0xA788,
	0xA789,
	0xA828,
	0xA82C,
	0xA874,
	0xA878,
	0xFD3E,
	0xFD40,
	0xFDFD,
	0xFDFE,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE5F,
	0xFE60,
	0xFE62,
	0xFE64,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6B,
	0xFE6C,
	0xFF01,
	0xFF03,
	0xFF06,
	0xFF0B,
	0xFF1B,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFE2,
	0xFFE5,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10101,
	0x10102,
	0x10140,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x1091F,
	0x10920,
	0x10B39,
	0x10B40,
	0x11052,
	0x11066,
	0x11660,
	0x1166D,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10B,
	0x1F10D,
	0x1F16A,
	0x1F16C,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7
};

#   endif	/* EBCDIC 037 */

static const UV PL_BC__PDF_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x202C,
	0x202D
};

static const UV PL_BC__PDI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2069,
	0x206A
};

static const UV PL_BC__R_invlist[] = { /* for all charsets */
	67,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x590,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x860,
	0x870,
	0x8A0,
	0x200F,
	0x2010,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB50,
	0x10800,
	0x1091F,
	0x10920,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x10B39,
	0x10B40,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1E800,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1EE00,
	0x1EF00,
	0x1F000
};

static const UV PL_BC__RLE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x202B,
	0x202C
};

static const UV PL_BC__RLI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2067,
	0x2068
};

static const UV PL_BC__RLO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x202E,
	0x202F
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__S_invlist[] = { /* for ASCII/Latin1 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xC,
	0x1F,
	0x20
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__S_invlist[] = { /* for EBCDIC 1047 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xC,
	0x1F,
	0x20
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__S_invlist[] = { /* for EBCDIC 037 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xC,
	0x1F,
	0x20
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BC__WS_invlist[] = { /* for ASCII/Latin1 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC,
	0xD,
	0x20,
	0x21,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x2029,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__WS_invlist[] = { /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC,
	0xD,
	0x40,
	0x41,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x2029,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BC__WS_invlist[] = { /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC,
	0xD,
	0x40,
	0x41,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x2029,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 037 */

static const UV PL_BENG_invlist[] = { /* for all charsets */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0x980,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0x1CF7,
	0x1CF8,
	0xA8F1,
	0xA8F2
};

static const UV PL_BHKS_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D
};

static const UV PL_BIDIC_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61C,
	0x61D,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2066,
	0x206A
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BIDIM_invlist[] = { /* for ASCII/Latin1 */
	223,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x28,
	0x2A,
	0x3C,
	0x3D,
	0x3E,
	0x3F,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0xAB,
	0xAC,
	0xBB,
	0xBC,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2140,
	0x2141,
	0x2201,
	0x2205,
	0x2208,
	0x220E,
	0x2211,
	0x2212,
	0x2215,
	0x2217,
	0x221A,
	0x221E,
	0x221F,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222B,
	0x2234,
	0x2239,
	0x223A,
	0x223B,
	0x224D,
	0x2252,
	0x2256,
	0x225F,
	0x2261,
	0x2262,
	0x2263,
	0x2264,
	0x226C,
	0x226E,
	0x228D,
	0x228F,
	0x2293,
	0x2298,
	0x2299,
	0x22A2,
	0x22A4,
	0x22A6,
	0x22B9,
	0x22BE,
	0x22C0,
	0x22C9,
	0x22CE,
	0x22D0,
	0x22D2,
	0x22D6,
	0x22EE,
	0x22F0,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C0,
	0x27C1,
	0x27C3,
	0x27C7,
	0x27C8,
	0x27CA,
	0x27CB,
	0x27CE,
	0x27D3,
	0x27D7,
	0x27DC,
	0x27DF,
	0x27E2,
	0x27F0,
	0x2983,
	0x2999,
	0x299B,
	0x29B0,
	0x29B8,
	0x29B9,
	0x29C0,
	0x29C6,
	0x29C9,
	0x29CA,
	0x29CE,
	0x29D3,
	0x29D4,
	0x29D6,
	0x29D8,
	0x29DD,
	0x29E1,
	0x29E2,
	0x29E3,
	0x29E6,
	0x29E8,
	0x29EA,
	0x29F4,
	0x29FA,
	0x29FC,
	0x29FE,
	0x2A0A,
	0x2A1D,
	0x2A1E,
	0x2A22,
	0x2A24,
	0x2A25,
	0x2A26,
	0x2A27,
	0x2A29,
	0x2A2A,
	0x2A2B,
	0x2A2F,
	0x2A34,
	0x2A36,
	0x2A3C,
	0x2A3F,
	0x2A57,
	0x2A59,
	0x2A64,
	0x2A66,
	0x2A6A,
	0x2A6E,
	0x2A6F,
	0x2A71,
	0x2A73,
	0x2A75,
	0x2A79,
	0x2AA4,
	0x2AA6,
	0x2AAE,
	0x2AAF,
	0x2AD7,
	0x2ADC,
	0x2ADD,
	0x2ADE,
	0x2ADF,
	0x2AE2,
	0x2AE7,
	0x2AEC,
	0x2AEF,
	0x2AF3,
	0x2AF4,
	0x2AF7,
	0x2AFC,
	0x2AFD,
	0x2AFE,
	0x2E02,
	0x2E06,
	0x2E09,
	0x2E0B,
	0x2E0C,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0xFE59,
	0xFE5F,
	0xFE64,
	0xFE66,
	0xFF08,
	0xFF0A,
	0xFF1C,
	0xFF1D,
	0xFF1E,
	0xFF1F,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BIDIM_invlist[] = { /* for EBCDIC 1047 */
	221,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4E,
	0x5D,
	0x5E,
	0x6E,
	0x6F,
	0x8A,
	0x8C,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2140,
	0x2141,
	0x2201,
	0x2205,
	0x2208,
	0x220E,
	0x2211,
	0x2212,
	0x2215,
	0x2217,
	0x221A,
	0x221E,
	0x221F,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222B,
	0x2234,
	0x2239,
	0x223A,
	0x223B,
	0x224D,
	0x2252,
	0x2256,
	0x225F,
	0x2261,
	0x2262,
	0x2263,
	0x2264,
	0x226C,
	0x226E,
	0x228D,
	0x228F,
	0x2293,
	0x2298,
	0x2299,
	0x22A2,
	0x22A4,
	0x22A6,
	0x22B9,
	0x22BE,
	0x22C0,
	0x22C9,
	0x22CE,
	0x22D0,
	0x22D2,
	0x22D6,
	0x22EE,
	0x22F0,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C0,
	0x27C1,
	0x27C3,
	0x27C7,
	0x27C8,
	0x27CA,
	0x27CB,
	0x27CE,
	0x27D3,
	0x27D7,
	0x27DC,
	0x27DF,
	0x27E2,
	0x27F0,
	0x2983,
	0x2999,
	0x299B,
	0x29B0,
	0x29B8,
	0x29B9,
	0x29C0,
	0x29C6,
	0x29C9,
	0x29CA,
	0x29CE,
	0x29D3,
	0x29D4,
	0x29D6,
	0x29D8,
	0x29DD,
	0x29E1,
	0x29E2,
	0x29E3,
	0x29E6,
	0x29E8,
	0x29EA,
	0x29F4,
	0x29FA,
	0x29FC,
	0x29FE,
	0x2A0A,
	0x2A1D,
	0x2A1E,
	0x2A22,
	0x2A24,
	0x2A25,
	0x2A26,
	0x2A27,
	0x2A29,
	0x2A2A,
	0x2A2B,
	0x2A2F,
	0x2A34,
	0x2A36,
	0x2A3C,
	0x2A3F,
	0x2A57,
	0x2A59,
	0x2A64,
	0x2A66,
	0x2A6A,
	0x2A6E,
	0x2A6F,
	0x2A71,
	0x2A73,
	0x2A75,
	0x2A79,
	0x2AA4,
	0x2AA6,
	0x2AAE,
	0x2AAF,
	0x2AD7,
	0x2ADC,
	0x2ADD,
	0x2ADE,
	0x2ADF,
	0x2AE2,
	0x2AE7,
	0x2AEC,
	0x2AEF,
	0x2AF3,
	0x2AF4,
	0x2AF7,
	0x2AFC,
	0x2AFD,
	0x2AFE,
	0x2E02,
	0x2E06,
	0x2E09,
	0x2E0B,
	0x2E0C,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0xFE59,
	0xFE5F,
	0xFE64,
	0xFE66,
	0xFF08,
	0xFF0A,
	0xFF1C,
	0xFF1D,
	0xFF1E,
	0xFF1F,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BIDIM_invlist[] = { /* for EBCDIC 037 */
	219,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4E,
	0x5D,
	0x5E,
	0x6E,
	0x6F,
	0x8A,
	0x8C,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2140,
	0x2141,
	0x2201,
	0x2205,
	0x2208,
	0x220E,
	0x2211,
	0x2212,
	0x2215,
	0x2217,
	0x221A,
	0x221E,
	0x221F,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222B,
	0x2234,
	0x2239,
	0x223A,
	0x223B,
	0x224D,
	0x2252,
	0x2256,
	0x225F,
	0x2261,
	0x2262,
	0x2263,
	0x2264,
	0x226C,
	0x226E,
	0x228D,
	0x228F,
	0x2293,
	0x2298,
	0x2299,
	0x22A2,
	0x22A4,
	0x22A6,
	0x22B9,
	0x22BE,
	0x22C0,
	0x22C9,
	0x22CE,
	0x22D0,
	0x22D2,
	0x22D6,
	0x22EE,
	0x22F0,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C0,
	0x27C1,
	0x27C3,
	0x27C7,
	0x27C8,
	0x27CA,
	0x27CB,
	0x27CE,
	0x27D3,
	0x27D7,
	0x27DC,
	0x27DF,
	0x27E2,
	0x27F0,
	0x2983,
	0x2999,
	0x299B,
	0x29B0,
	0x29B8,
	0x29B9,
	0x29C0,
	0x29C6,
	0x29C9,
	0x29CA,
	0x29CE,
	0x29D3,
	0x29D4,
	0x29D6,
	0x29D8,
	0x29DD,
	0x29E1,
	0x29E2,
	0x29E3,
	0x29E6,
	0x29E8,
	0x29EA,
	0x29F4,
	0x29FA,
	0x29FC,
	0x29FE,
	0x2A0A,
	0x2A1D,
	0x2A1E,
	0x2A22,
	0x2A24,
	0x2A25,
	0x2A26,
	0x2A27,
	0x2A29,
	0x2A2A,
	0x2A2B,
	0x2A2F,
	0x2A34,
	0x2A36,
	0x2A3C,
	0x2A3F,
	0x2A57,
	0x2A59,
	0x2A64,
	0x2A66,
	0x2A6A,
	0x2A6E,
	0x2A6F,
	0x2A71,
	0x2A73,
	0x2A75,
	0x2A79,
	0x2AA4,
	0x2AA6,
	0x2AAE,
	0x2AAF,
	0x2AD7,
	0x2ADC,
	0x2ADD,
	0x2ADE,
	0x2ADF,
	0x2AE2,
	0x2AE7,
	0x2AEC,
	0x2AEF,
	0x2AF3,
	0x2AF4,
	0x2AF7,
	0x2AFC,
	0x2AFD,
	0x2AFE,
	0x2E02,
	0x2E06,
	0x2E09,
	0x2E0B,
	0x2E0C,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0xFE59,
	0xFE5F,
	0xFE64,
	0xFE66,
	0xFF08,
	0xFF0A,
	0xFF1C,
	0xFF1D,
	0xFF1E,
	0xFF1F,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4
};

#   endif	/* EBCDIC 037 */

static const UV PL_BLOCKELEMENTS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2580,
	0x25A0
};

static const UV PL_BOPO_invlist[] = { /* for all charsets */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2EA,
	0x2EC,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3013,
	0x3020,
	0x302A,
	0x302E,
	0x3030,
	0x3031,
	0x3037,
	0x3038,
	0x30FB,
	0x30FC,
	0x3105,
	0x312F,
	0x31A0,
	0x31BB,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66
};

static const UV PL_BOPOMOFOEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x31A0,
	0x31C0
};

static const UV PL_BOXDRAWING_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2500,
	0x2580
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BPT__C_invlist[] = { /* for ASCII/Latin1 */
	121,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x29,
	0x2A,
	0x5D,
	0x5E,
	0x7D,
	0x7E,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF61,
	0xFF63,
	0xFF64
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BPT__C_invlist[] = { /* for EBCDIC 1047 */
	121,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5D,
	0x5E,
	0xBD,
	0xBE,
	0xD0,
	0xD1,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF61,
	0xFF63,
	0xFF64
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BPT__C_invlist[] = { /* for EBCDIC 037 */
	121,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5D,
	0x5E,
	0xBB,
	0xBC,
	0xD0,
	0xD1,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF61,
	0xFF63,
	0xFF64
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BPT__N_invlist[] = { /* for ASCII/Latin1 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x28,
	0x2A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E22,
	0x2E2A,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BPT__N_invlist[] = { /* for EBCDIC 1047 */
	61,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0x5D,
	0x5E,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E22,
	0x2E2A,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BPT__N_invlist[] = { /* for EBCDIC 037 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0x5D,
	0x5E,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E22,
	0x2E2A,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_BPT__O_invlist[] = { /* for ASCII/Latin1 */
	121,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x28,
	0x29,
	0x5B,
	0x5C,
	0x7B,
	0x7C,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BPT__O_invlist[] = { /* for EBCDIC 1047 */
	121,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0xAD,
	0xAE,
	0xC0,
	0xC1,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_BPT__O_invlist[] = { /* for EBCDIC 037 */
	121,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0xBA,
	0xBB,
	0xC0,
	0xC1,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63
};

#   endif	/* EBCDIC 037 */

static const UV PL_BRAH_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x11080
};

static const UV PL_BRAI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2800,
	0x2900
};

static const UV PL_BUGI_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1A00,
	0x1A1C,
	0x1A1E,
	0x1A20,
	0xA9CF,
	0xA9D0
};

static const UV PL_BUHD_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1735,
	0x1737,
	0x1740,
	0x1754
};

static const UV PL_BYZANTINEMUSIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D000,
	0x1D100
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_C_invlist[] = { /* for ASCII/Latin1 */
	1305,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA0,
	0xAD,
	0xAE,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x606,
	0x61C,
	0x61E,
	0x6DD,
	0x6DE,
	0x70E,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA0,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D173,
	0x1D17B,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_C_invlist[] = { /* for EBCDIC 1047 */
	1305,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x606,
	0x61C,
	0x61E,
	0x6DD,
	0x6DE,
	0x70E,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA0,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D173,
	0x1D17B,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_C_invlist[] = { /* for EBCDIC 037 */
	1305,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x606,
	0x61C,
	0x61E,
	0x6DD,
	0x6DE,
	0x70E,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA0,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D173,
	0x1D17B,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

static const UV PL_CAKM_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9E6,
	0x9F0,
	0x1040,
	0x104A,
	0x11100,
	0x11135,
	0x11136,
	0x11144
};

static const UV PL_CANS_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1400,
	0x1680,
	0x18B0,
	0x18F6
};

static const UV PL_CARI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x102A0,
	0x102D1
};

static const UV PL_CCC__0_invlist[] = { /* for all charsets */
	337,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x34F,
	0x350,
	0x370,
	0x483,
	0x488,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x900,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x9BC,
	0x9BD,
	0x9CD,
	0x9CE,
	0xA3C,
	0xA3D,
	0xA4D,
	0xA4E,
	0xABC,
	0xABD,
	0xACD,
	0xACE,
	0xB3C,
	0xB3D,
	0xB4D,
	0xB4E,
	0xBCD,
	0xBCE,
	0xC4D,
	0xC4E,
	0xC55,
	0xC57,
	0xCBC,
	0xCBD,
	0xCCD,
	0xCCE,
	0xD3B,
	0xD3D,
	0xD4D,
	0xD4E,
	0xDCA,
	0xDCB,
	0xE38,
	0xE3B,
	0xE48,
	0xE4C,
	0xEB8,
	0xEBA,
	0xEC8,
	0xECC,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF7E,
	0xF80,
	0xF81,
	0xF82,
	0xF85,
	0xF86,
	0xF88,
	0xFC6,
	0xFC7,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x108D,
	0x108E,
	0x135D,
	0x1360,
	0x1714,
	0x1715,
	0x1734,
	0x1735,
	0x17D2,
	0x17D3,
	0x17DD,
	0x17DE,
	0x18A9,
	0x18AA,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A60,
	0x1A61,
	0x1A75,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABE,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1BAA,
	0x1BAC,
	0x1BE6,
	0x1BE7,
	0x1BF2,
	0x1BF4,
	0x1C37,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA670,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA806,
	0xA807,
	0xA8C4,
	0xA8C5,
	0xA8E0,
	0xA8F2,
	0xA92B,
	0xA92E,
	0xA953,
	0xA954,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9C1,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAF6,
	0xAAF7,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE20,
	0xFE30,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A0D,
	0x10A0E,
	0x10A0F,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11046,
	0x11047,
	0x1107F,
	0x11080,
	0x110B9,
	0x110BB,
	0x11100,
	0x11103,
	0x11133,
	0x11135,
	0x11173,
	0x11174,
	0x111C0,
	0x111C1,
	0x111CA,
	0x111CB,
	0x11235,
	0x11237,
	0x112E9,
	0x112EB,
	0x1133C,
	0x1133D,
	0x1134D,
	0x1134E,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x114C2,
	0x114C4,
	0x115BF,
	0x115C1,
	0x1163F,
	0x11640,
	0x116B6,
	0x116B8,
	0x1172B,
	0x1172C,
	0x11A34,
	0x11A35,
	0x11A47,
	0x11A48,
	0x11A99,
	0x11A9A,
	0x11C3F,
	0x11C40,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x1BC9E,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B
};

static const UV PL_CCC__1_invlist[] = { /* for all charsets */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x334,
	0x339,
	0x1CD4,
	0x1CD5,
	0x1CE2,
	0x1CE9,
	0x20D2,
	0x20D4,
	0x20D8,
	0x20DB,
	0x20E5,
	0x20E7,
	0x20EA,
	0x20EC,
	0x10A39,
	0x10A3A,
	0x16AF0,
	0x16AF5,
	0x1BC9E,
	0x1BC9F,
	0x1D167,
	0x1D16A
};

static const UV PL_CCC__10_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B0,
	0x5B1
};

static const UV PL_CCC__103_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE38,
	0xE3A
};

static const UV PL_CCC__107_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE48,
	0xE4C
};

static const UV PL_CCC__11_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B1,
	0x5B2
};

static const UV PL_CCC__118_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xEB8,
	0xEBA
};

static const UV PL_CCC__12_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B2,
	0x5B3
};

static const UV PL_CCC__122_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xEC8,
	0xECC
};

static const UV PL_CCC__129_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF71,
	0xF72
};

static const UV PL_CCC__13_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B3,
	0x5B4
};

static const UV PL_CCC__130_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF72,
	0xF73,
	0xF7A,
	0xF7E,
	0xF80,
	0xF81
};

static const UV PL_CCC__132_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF74,
	0xF75
};

static const UV PL_CCC__133_invlist[] = { /* for ASCII/Latin1 */
	0,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
};

static const UV PL_CCC__14_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B4,
	0x5B5
};

static const UV PL_CCC__15_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B5,
	0x5B6
};

static const UV PL_CCC__16_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B6,
	0x5B7
};

static const UV PL_CCC__17_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B7,
	0x5B8
};

static const UV PL_CCC__18_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B8,
	0x5B9,
	0x5C7,
	0x5C8
};

static const UV PL_CCC__19_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5B9,
	0x5BB
};

static const UV PL_CCC__20_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5BB,
	0x5BC
};

static const UV PL_CCC__202_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x321,
	0x323,
	0x327,
	0x329,
	0x1DD0,
	0x1DD1
};

static const UV PL_CCC__21_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5BC,
	0x5BD
};

static const UV PL_CCC__214_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1DCE,
	0x1DCF
};

static const UV PL_CCC__216_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x31B,
	0x31C,
	0xF39,
	0xF3A,
	0x1D165,
	0x1D167,
	0x1D16E,
	0x1D173
};

static const UV PL_CCC__22_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5BD,
	0x5BE
};

static const UV PL_CCC__23_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5BF,
	0x5C0
};

static const UV PL_CCC__24_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5C1,
	0x5C2
};

static const UV PL_CCC__25_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5C2,
	0x5C3
};

static const UV PL_CCC__26_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFB1E,
	0xFB1F
};

static const UV PL_CCC__27_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x64B,
	0x64C,
	0x8F0,
	0x8F1
};

static const UV PL_CCC__28_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x64C,
	0x64D,
	0x8F1,
	0x8F2
};

static const UV PL_CCC__29_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x64D,
	0x64E,
	0x8F2,
	0x8F3
};

static const UV PL_CCC__30_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x618,
	0x619,
	0x64E,
	0x64F
};

static const UV PL_CCC__31_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x619,
	0x61A,
	0x64F,
	0x650
};

static const UV PL_CCC__32_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61A,
	0x61B,
	0x650,
	0x651
};

static const UV PL_CCC__33_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x651,
	0x652
};

static const UV PL_CCC__34_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x652,
	0x653
};

static const UV PL_CCC__35_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x670,
	0x671
};

static const UV PL_CCC__36_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x711,
	0x712
};

static const UV PL_CCC__7_invlist[] = { /* for all charsets */
	47,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93C,
	0x93D,
	0x9BC,
	0x9BD,
	0xA3C,
	0xA3D,
	0xABC,
	0xABD,
	0xB3C,
	0xB3D,
	0xCBC,
	0xCBD,
	0x1037,
	0x1038,
	0x1B34,
	0x1B35,
	0x1BE6,
	0x1BE7,
	0x1C37,
	0x1C38,
	0xA9B3,
	0xA9B4,
	0x110BA,
	0x110BB,
	0x11173,
	0x11174,
	0x111CA,
	0x111CB,
	0x11236,
	0x11237,
	0x112E9,
	0x112EA,
	0x1133C,
	0x1133D,
	0x11446,
	0x11447,
	0x114C3,
	0x114C4,
	0x115C0,
	0x115C1,
	0x116B7,
	0x116B8,
	0x11D42,
	0x11D43,
	0x1E94A,
	0x1E94B
};

static const UV PL_CCC__8_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3099,
	0x309B
};

static const UV PL_CCC__84_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC55,
	0xC56
};

static const UV PL_CCC__9_invlist[] = { /* for all charsets */
	97,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x94D,
	0x94E,
	0x9CD,
	0x9CE,
	0xA4D,
	0xA4E,
	0xACD,
	0xACE,
	0xB4D,
	0xB4E,
	0xBCD,
	0xBCE,
	0xC4D,
	0xC4E,
	0xCCD,
	0xCCE,
	0xD3B,
	0xD3D,
	0xD4D,
	0xD4E,
	0xDCA,
	0xDCB,
	0xE3A,
	0xE3B,
	0xF84,
	0xF85,
	0x1039,
	0x103B,
	0x1714,
	0x1715,
	0x1734,
	0x1735,
	0x17D2,
	0x17D3,
	0x1A60,
	0x1A61,
	0x1B44,
	0x1B45,
	0x1BAA,
	0x1BAC,
	0x1BF2,
	0x1BF4,
	0x2D7F,
	0x2D80,
	0xA806,
	0xA807,
	0xA8C4,
	0xA8C5,
	0xA953,
	0xA954,
	0xA9C0,
	0xA9C1,
	0xAAF6,
	0xAAF7,
	0xABED,
	0xABEE,
	0x10A3F,
	0x10A40,
	0x11046,
	0x11047,
	0x1107F,
	0x11080,
	0x110B9,
	0x110BA,
	0x11133,
	0x11135,
	0x111C0,
	0x111C1,
	0x11235,
	0x11236,
	0x112EA,
	0x112EB,
	0x1134D,
	0x1134E,
	0x11442,
	0x11443,
	0x114C2,
	0x114C3,
	0x115BF,
	0x115C0,
	0x1163F,
	0x11640,
	0x116B6,
	0x116B7,
	0x1172B,
	0x1172C,
	0x11A34,
	0x11A35,
	0x11A47,
	0x11A48,
	0x11A99,
	0x11A9A,
	0x11C3F,
	0x11C40,
	0x11D44,
	0x11D46
};

static const UV PL_CCC__91_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC56,
	0xC57
};

static const UV PL_CCC__A_invlist[] = { /* for all charsets */
	221,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x315,
	0x33D,
	0x345,
	0x346,
	0x347,
	0x34A,
	0x34D,
	0x350,
	0x353,
	0x357,
	0x358,
	0x35B,
	0x35C,
	0x363,
	0x370,
	0x483,
	0x488,
	0x592,
	0x596,
	0x597,
	0x59A,
	0x59C,
	0x5A2,
	0x5A8,
	0x5AA,
	0x5AB,
	0x5AD,
	0x5AF,
	0x5B0,
	0x5C4,
	0x5C5,
	0x610,
	0x618,
	0x653,
	0x655,
	0x657,
	0x65C,
	0x65D,
	0x65F,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E3,
	0x6E4,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EB,
	0x6ED,
	0x730,
	0x731,
	0x732,
	0x734,
	0x735,
	0x737,
	0x73A,
	0x73B,
	0x73D,
	0x73E,
	0x73F,
	0x742,
	0x743,
	0x744,
	0x745,
	0x746,
	0x747,
	0x748,
	0x749,
	0x74B,
	0x7EB,
	0x7F2,
	0x7F3,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x8D4,
	0x8E2,
	0x8E4,
	0x8E6,
	0x8E7,
	0x8E9,
	0x8EA,
	0x8ED,
	0x8F3,
	0x8F6,
	0x8F7,
	0x8F9,
	0x8FB,
	0x900,
	0x951,
	0x952,
	0x953,
	0x955,
	0xF82,
	0xF84,
	0xF86,
	0xF88,
	0x135D,
	0x1360,
	0x17DD,
	0x17DE,
	0x193A,
	0x193B,
	0x1A17,
	0x1A18,
	0x1A75,
	0x1A7D,
	0x1AB0,
	0x1AB5,
	0x1ABB,
	0x1ABD,
	0x1B6B,
	0x1B6C,
	0x1B6D,
	0x1B74,
	0x1CD0,
	0x1CD3,
	0x1CDA,
	0x1CDC,
	0x1CE0,
	0x1CE1,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DC2,
	0x1DC3,
	0x1DCA,
	0x1DCB,
	0x1DCD,
	0x1DD1,
	0x1DF6,
	0x1DFB,
	0x1DFC,
	0x1DFE,
	0x1DFF,
	0x20D0,
	0x20D2,
	0x20D4,
	0x20D8,
	0x20DB,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E7,
	0x20E8,
	0x20E9,
	0x20EA,
	0x20F0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2DE0,
	0x2E00,
	0xA66F,
	0xA670,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA8E0,
	0xA8F2,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB4,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xFE20,
	0xFE27,
	0xFE2E,
	0xFE30,
	0x10376,
	0x1037B,
	0x10A0F,
	0x10A10,
	0x10A38,
	0x10A39,
	0x10AE5,
	0x10AE6,
	0x11100,
	0x11103,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x16B30,
	0x16B37,
	0x1D185,
	0x1D18A,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E944,
	0x1E94A
};

static const UV PL_CCC__AL_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5AE,
	0x5AF,
	0x18A9,
	0x18AA,
	0x1DF7,
	0x1DF9,
	0x302B,
	0x302C
};

static const UV PL_CCC__AR_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x315,
	0x316,
	0x31A,
	0x31B,
	0x358,
	0x359,
	0x1DF6,
	0x1DF7,
	0x302C,
	0x302D
};

static const UV PL_CCC__B_invlist[] = { /* for all charsets */
	145,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x316,
	0x31A,
	0x31C,
	0x321,
	0x323,
	0x327,
	0x329,
	0x334,
	0x339,
	0x33D,
	0x347,
	0x34A,
	0x34D,
	0x34F,
	0x353,
	0x357,
	0x359,
	0x35B,
	0x591,
	0x592,
	0x596,
	0x597,
	0x59B,
	0x59C,
	0x5A2,
	0x5A8,
	0x5AA,
	0x5AB,
	0x5C5,
	0x5C6,
	0x655,
	0x657,
	0x65C,
	0x65D,
	0x65F,
	0x660,
	0x6E3,
	0x6E4,
	0x6EA,
	0x6EB,
	0x6ED,
	0x6EE,
	0x731,
	0x732,
	0x734,
	0x735,
	0x737,
	0x73A,
	0x73B,
	0x73D,
	0x73E,
	0x73F,
	0x742,
	0x743,
	0x744,
	0x745,
	0x746,
	0x747,
	0x748,
	0x749,
	0x7F2,
	0x7F3,
	0x859,
	0x85C,
	0x8E3,
	0x8E4,
	0x8E6,
	0x8E7,
	0x8E9,
	0x8EA,
	0x8ED,
	0x8F0,
	0x8F6,
	0x8F7,
	0x8F9,
	0x8FB,
	0x952,
	0x953,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xFC6,
	0xFC7,
	0x108D,
	0x108E,
	0x193B,
	0x193C,
	0x1A18,
	0x1A19,
	0x1A7F,
	0x1A80,
	0x1AB5,
	0x1ABB,
	0x1ABD,
	0x1ABE,
	0x1B6C,
	0x1B6D,
	0x1CD5,
	0x1CDA,
	0x1CDC,
	0x1CE0,
	0x1CED,
	0x1CEE,
	0x1DC2,
	0x1DC3,
	0x1DCA,
	0x1DCB,
	0x1DCF,
	0x1DD0,
	0x1DF9,
	0x1DFA,
	0x1DFD,
	0x1DFE,
	0x1DFF,
	0x1E00,
	0x20E8,
	0x20E9,
	0x20EC,
	0x20F0,
	0xA92B,
	0xA92E,
	0xAAB4,
	0xAAB5,
	0xFE27,
	0xFE2E,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10A0D,
	0x10A0E,
	0x10A3A,
	0x10A3B,
	0x10AE6,
	0x10AE7,
	0x1D17B,
	0x1D183,
	0x1D18A,
	0x1D18C,
	0x1E8D0,
	0x1E8D7
};

static const UV PL_CCC__BL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x302A,
	0x302B
};

static const UV PL_CCC__BR_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59A,
	0x59B,
	0x5AD,
	0x5AE,
	0x1939,
	0x193A,
	0x302D,
	0x302E
};

static const UV PL_CCC__DA_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x35D,
	0x35F,
	0x360,
	0x362,
	0x1DCD,
	0x1DCE
};

static const UV PL_CCC__DB_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x35C,
	0x35D,
	0x35F,
	0x360,
	0x362,
	0x363,
	0x1DFC,
	0x1DFD
};

static const UV PL_CCC__IS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x345,
	0x346
};

static const UV PL_CCC__L_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x302E,
	0x3030
};

static const UV PL_CCC__R_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D16D,
	0x1D16E
};

static const UV PL_CE_invlist[] = { /* for all charsets */
	67,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x958,
	0x960,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB5C,
	0xB5E,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF76,
	0xF77,
	0xF78,
	0xF79,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x2ADC,
	0x2ADD,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_CF_invlist[] = { /* for ASCII/Latin1 */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CF_invlist[] = { /* for EBCDIC 1047 */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CF_invlist[] = { /* for EBCDIC 037 */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#   endif	/* EBCDIC 037 */

static const UV PL_CHAM_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA60
};

static const UV PL_CHER_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0xAB70,
	0xABC0
};

static const UV PL_CHEROKEESUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAB70,
	0xABC0
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_CI_invlist[] = { /* for ASCII/Latin1 */
	763,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x27,
	0x28,
	0x2E,
	0x2F,
	0x3A,
	0x3B,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0xA8,
	0xA9,
	0xAD,
	0xAE,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0xB7,
	0xB9,
	0x2B0,
	0x370,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x384,
	0x386,
	0x387,
	0x388,
	0x483,
	0x48A,
	0x559,
	0x55A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x640,
	0x641,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F6,
	0x7FA,
	0x7FB,
	0x816,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x971,
	0x972,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE46,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x10FC,
	0x10FD,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DD,
	0x17DE,
	0x180B,
	0x180F,
	0x1843,
	0x1844,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1C78,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x200B,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2C7C,
	0x2C7E,
	0x2CEF,
	0x2CF2,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x302A,
	0x302E,
	0x3031,
	0x3036,
	0x303B,
	0x303C,
	0x3099,
	0x309F,
	0x30FC,
	0x30FF,
	0xA015,
	0xA016,
	0xA4F8,
	0xA4FE,
	0xA60C,
	0xA60D,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA69C,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA700,
	0xA722,
	0xA770,
	0xA771,
	0xA788,
	0xA78B,
	0xA7F8,
	0xA7FA,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9CF,
	0xA9D0,
	0xA9E5,
	0xA9E7,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA70,
	0xAA71,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAADD,
	0xAADE,
	0xAAEC,
	0xAAEE,
	0xAAF3,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xAB5B,
	0xAB60,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFBB2,
	0xFBC2,
	0xFE00,
	0xFE10,
	0xFE13,
	0xFE14,
	0xFE20,
	0xFE30,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE3,
	0xFFE4,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F3FB,
	0x1F400,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CI_invlist[] = { /* for EBCDIC 1047 */
	761,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5F,
	0x60,
	0x79,
	0x7B,
	0x7D,
	0x7E,
	0x9D,
	0x9E,
	0xB3,
	0xB4,
	0xBB,
	0xBD,
	0xBE,
	0xBF,
	0xCA,
	0xCB,
	0x2B0,
	0x370,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x384,
	0x386,
	0x387,
	0x388,
	0x483,
	0x48A,
	0x559,
	0x55A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x640,
	0x641,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F6,
	0x7FA,
	0x7FB,
	0x816,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x971,
	0x972,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE46,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x10FC,
	0x10FD,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DD,
	0x17DE,
	0x180B,
	0x180F,
	0x1843,
	0x1844,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1C78,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x200B,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2C7C,
	0x2C7E,
	0x2CEF,
	0x2CF2,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x302A,
	0x302E,
	0x3031,
	0x3036,
	0x303B,
	0x303C,
	0x3099,
	0x309F,
	0x30FC,
	0x30FF,
	0xA015,
	0xA016,
	0xA4F8,
	0xA4FE,
	0xA60C,
	0xA60D,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA69C,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA700,
	0xA722,
	0xA770,
	0xA771,
	0xA788,
	0xA78B,
	0xA7F8,
	0xA7FA,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9CF,
	0xA9D0,
	0xA9E5,
	0xA9E7,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA70,
	0xAA71,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAADD,
	0xAADE,
	0xAAEC,
	0xAAEE,
	0xAAF3,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xAB5B,
	0xAB60,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFBB2,
	0xFBC2,
	0xFE00,
	0xFE10,
	0xFE13,
	0xFE14,
	0xFE20,
	0xFE30,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE3,
	0xFFE4,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F3FB,
	0x1F400,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CI_invlist[] = { /* for EBCDIC 037 */
	759,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x79,
	0x7B,
	0x7D,
	0x7E,
	0x9D,
	0x9E,
	0xB0,
	0xB1,
	0xB3,
	0xB4,
	0xBC,
	0xBF,
	0xCA,
	0xCB,
	0x2B0,
	0x370,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x384,
	0x386,
	0x387,
	0x388,
	0x483,
	0x48A,
	0x559,
	0x55A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x640,
	0x641,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F6,
	0x7FA,
	0x7FB,
	0x816,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x971,
	0x972,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE46,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x10FC,
	0x10FD,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DD,
	0x17DE,
	0x180B,
	0x180F,
	0x1843,
	0x1844,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1C78,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x200B,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2C7C,
	0x2C7E,
	0x2CEF,
	0x2CF2,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x302A,
	0x302E,
	0x3031,
	0x3036,
	0x303B,
	0x303C,
	0x3099,
	0x309F,
	0x30FC,
	0x30FF,
	0xA015,
	0xA016,
	0xA4F8,
	0xA4FE,
	0xA60C,
	0xA60D,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA69C,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA700,
	0xA722,
	0xA770,
	0xA771,
	0xA788,
	0xA78B,
	0xA7F8,
	0xA7FA,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9CF,
	0xA9D0,
	0xA9E5,
	0xA9E7,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA70,
	0xAA71,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAADD,
	0xAADE,
	0xAAEC,
	0xAAEE,
	0xAAF3,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xAB5B,
	0xAB60,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFBB2,
	0xFBC2,
	0xFE00,
	0xFE10,
	0xFE13,
	0xFE14,
	0xFE20,
	0xFE30,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE3,
	0xFFE4,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F3FB,
	0x1F400,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

static const UV PL_CJK_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4E00,
	0xA000
};

static const UV PL_CJKCOMPAT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3300,
	0x3400
};

static const UV PL_CJKCOMPATFORMS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE30,
	0xFE50
};

static const UV PL_CJKCOMPATIDEOGRAPHS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF900,
	0xFB00
};

static const UV PL_CJKCOMPATIDEOGRAPHSSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2F800,
	0x2FA20
};

static const UV PL_CJKEXTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3400,
	0x4DC0
};

static const UV PL_CJKEXTB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20000,
	0x2A6E0
};

static const UV PL_CJKEXTC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2A700,
	0x2B740
};

static const UV PL_CJKEXTD_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2B740,
	0x2B820
};

static const UV PL_CJKEXTE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2B820,
	0x2CEB0
};

static const UV PL_CJKEXTF_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2CEB0,
	0x2EBF0
};

static const UV PL_CJKRADICALSSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E80,
	0x2F00
};

static const UV PL_CJKSTROKES_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x31C0,
	0x31F0
};

static const UV PL_CJKSYMBOLS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3000,
	0x3040
};

static const UV PL_CN_invlist[] = { /* for all charsets */
	1298,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

static const UV PL_CO_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE000,
	0xF900,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

static const UV PL_COMPATJAMO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3130,
	0x3190
};

static const UV PL_COMPEX_invlist[] = { /* for all charsets */
	147,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x958,
	0x960,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB5C,
	0xB5E,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1FBB,
	0x1FBC,
	0x1FBE,
	0x1FBF,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FD3,
	0x1FD4,
	0x1FDB,
	0x1FDC,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FEE,
	0x1FF0,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

static const UV PL_CONTROLPICTURES_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2400,
	0x2440
};

static const UV PL_COPT_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3E2,
	0x3F0,
	0x2C80,
	0x2CF4,
	0x2CF9,
	0x2D00,
	0x102E0,
	0x102FC
};

static const UV PL_COPTICEPACTNUMBERS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x102E0,
	0x10300
};

static const UV PL_COUNTINGROD_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D360,
	0x1D380
};

static const UV PL_CPRT_invlist[] = { /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840
};

static const UV PL_CS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD800,
	0xE000
};

static const UV PL_CUNEIFORMNUMBERS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x12400,
	0x12480
};

static const UV PL_CURRENCYSYMBOLS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20A0,
	0x20D0
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_CWCF_invlist[] = { /* for ASCII/Latin1 */
	1207,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xB5,
	0xB6,
	0xC0,
	0xD7,
	0xD8,
	0xE0,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x345,
	0x346,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D2,
	0x3D5,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F2,
	0x3F4,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x587,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9A,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB7,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC7,
	0x1FCD,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF7,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWCF_invlist[] = { /* for EBCDIC 1047 */
	1227,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59,
	0x5A,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x345,
	0x346,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D2,
	0x3D5,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F2,
	0x3F4,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x587,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9A,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB7,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC7,
	0x1FCD,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF7,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWCF_invlist[] = { /* for EBCDIC 037 */
	1223,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59,
	0x5A,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x345,
	0x346,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D2,
	0x3D5,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F2,
	0x3F4,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x587,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9A,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB7,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC7,
	0x1FCD,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF7,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_CWCM_invlist[] = { /* for ASCII/Latin1 */
	233,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xB5,
	0xB6,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x138,
	0x139,
	0x18D,
	0x18E,
	0x19B,
	0x19C,
	0x1AA,
	0x1AC,
	0x1BA,
	0x1BC,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x221,
	0x222,
	0x234,
	0x23A,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3D2,
	0x3D5,
	0x3F6,
	0x3F7,
	0x3FC,
	0x3FD,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E00,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C71,
	0x2C72,
	0x2C74,
	0x2C75,
	0x2C77,
	0x2C7E,
	0x2CE4,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA730,
	0xA732,
	0xA770,
	0xA779,
	0xA788,
	0xA78B,
	0xA78E,
	0xA790,
	0xA794,
	0xA796,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1E900,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWCM_invlist[] = { /* for EBCDIC 1047 */
	265,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x138,
	0x139,
	0x18D,
	0x18E,
	0x19B,
	0x19C,
	0x1AA,
	0x1AC,
	0x1BA,
	0x1BC,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x221,
	0x222,
	0x234,
	0x23A,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3D2,
	0x3D5,
	0x3F6,
	0x3F7,
	0x3FC,
	0x3FD,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E00,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C71,
	0x2C72,
	0x2C74,
	0x2C75,
	0x2C77,
	0x2C7E,
	0x2CE4,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA730,
	0xA732,
	0xA770,
	0xA779,
	0xA788,
	0xA78B,
	0xA78E,
	0xA790,
	0xA794,
	0xA796,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1E900,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWCM_invlist[] = { /* for EBCDIC 037 */
	261,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x138,
	0x139,
	0x18D,
	0x18E,
	0x19B,
	0x19C,
	0x1AA,
	0x1AC,
	0x1BA,
	0x1BC,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x221,
	0x222,
	0x234,
	0x23A,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3D2,
	0x3D5,
	0x3F6,
	0x3F7,
	0x3FC,
	0x3FD,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E00,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C71,
	0x2C72,
	0x2C74,
	0x2C75,
	0x2C77,
	0x2C7E,
	0x2CE4,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA730,
	0xA732,
	0xA770,
	0xA779,
	0xA788,
	0xA78B,
	0xA78E,
	0xA790,
	0xA794,
	0xA796,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1E900,
	0x1E944
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_CWKCF_invlist[] = { /* for ASCII/Latin1 */
	1631,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xA0,
	0xA1,
	0xA8,
	0xA9,
	0xAA,
	0xAB,
	0xAD,
	0xAE,
	0xAF,
	0xB0,
	0xB2,
	0xB6,
	0xB8,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0xD7,
	0xD8,
	0xE0,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x346,
	0x34F,
	0x350,
	0x370,
	0x371,
	0x372,
	0x373,
	0x374,
	0x375,
	0x376,
	0x377,
	0x37A,
	0x37B,
	0x37E,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x587,
	0x588,
	0x61C,
	0x61D,
	0x675,
	0x679,
	0x958,
	0x960,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB5C,
	0xB5E,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10FC,
	0x10FD,
	0x115F,
	0x1161,
	0x13F8,
	0x13FE,
	0x17B4,
	0x17B6,
	0x180B,
	0x180F,
	0x1C80,
	0x1C89,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9A,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB7,
	0x1FC5,
	0x1FC7,
	0x1FD0,
	0x1FD3,
	0x1FD4,
	0x1FD8,
	0x1FDC,
	0x1FDD,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FE8,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF7,
	0x1FFF,
	0x2000,
	0x2010,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202A,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2183,
	0x2184,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7C,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA69E,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA771,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAB70,
	0xABC0,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE00,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF0,
	0xFFF9,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1BCA0,
	0x1BCA4,
	0x1D15E,
	0x1D165,
	0x1D173,
	0x1D17B,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E900,
	0x1E922,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E,
	0xE0000,
	0xE1000
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWKCF_invlist[] = { /* for EBCDIC 1047 */
	1641,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x59,
	0x5A,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9A,
	0x9C,
	0x9D,
	0x9F,
	0xA0,
	0xA1,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB7,
	0xBD,
	0xBE,
	0xBF,
	0xC1,
	0xCB,
	0xD1,
	0xDB,
	0xE2,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x346,
	0x34F,
	0x350,
	0x370,
	0x371,
	0x372,
	0x373,
	0x374,
	0x375,
	0x376,
	0x377,
	0x37A,
	0x37B,
	0x37E,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x587,
	0x588,
	0x61C,
	0x61D,
	0x675,
	0x679,
	0x958,
	0x960,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB5C,
	0xB5E,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10FC,
	0x10FD,
	0x115F,
	0x1161,
	0x13F8,
	0x13FE,
	0x17B4,
	0x17B6,
	0x180B,
	0x180F,
	0x1C80,
	0x1C89,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9A,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB7,
	0x1FC5,
	0x1FC7,
	0x1FD0,
	0x1FD3,
	0x1FD4,
	0x1FD8,
	0x1FDC,
	0x1FDD,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FE8,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF7,
	0x1FFF,
	0x2000,
	0x2010,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202A,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2183,
	0x2184,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7C,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA69E,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA771,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAB70,
	0xABC0,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE00,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF0,
	0xFFF9,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1BCA0,
	0x1BCA4,
	0x1D15E,
	0x1D165,
	0x1D173,
	0x1D17B,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E900,
	0x1E922,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E,
	0xE0000,
	0xE1000
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWKCF_invlist[] = { /* for EBCDIC 037 */
	1639,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x59,
	0x5A,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9A,
	0x9C,
	0x9D,
	0x9F,
	0xA0,
	0xA1,
	0xAC,
	0xAF,
	0xB7,
	0xBA,
	0xBC,
	0xBF,
	0xC1,
	0xCB,
	0xD1,
	0xDB,
	0xE2,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x149,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x17F,
	0x180,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x346,
	0x34F,
	0x350,
	0x370,
	0x371,
	0x372,
	0x373,
	0x374,
	0x375,
	0x376,
	0x377,
	0x37A,
	0x37B,
	0x37E,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3C2,
	0x3C3,
	0x3CF,
	0x3D7,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x587,
	0x588,
	0x61C,
	0x61D,
	0x675,
	0x679,
	0x958,
	0x960,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB5C,
	0xB5E,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10FC,
	0x10FD,
	0x115F,
	0x1161,
	0x13F8,
	0x13FE,
	0x17B4,
	0x17B6,
	0x180B,
	0x180F,
	0x1C80,
	0x1C89,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9A,
	0x1E9C,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1F80,
	0x1FB0,
	0x1FB2,
	0x1FB5,
	0x1FB7,
	0x1FC5,
	0x1FC7,
	0x1FD0,
	0x1FD3,
	0x1FD4,
	0x1FD8,
	0x1FDC,
	0x1FDD,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FE8,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF7,
	0x1FFF,
	0x2000,
	0x2010,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202A,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2183,
	0x2184,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7C,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA69E,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA771,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAB70,
	0xABC0,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE00,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF0,
	0xFFF9,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1BCA0,
	0x1BCA4,
	0x1D15E,
	0x1D165,
	0x1D173,
	0x1D17B,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E900,
	0x1E922,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E,
	0xE0000,
	0xE1000
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_CWL_invlist[] = { /* for ASCII/Latin1 */
	1181,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBD,
	0x1FC8,
	0x1FCD,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWL_invlist[] = { /* for EBCDIC 1047 */
	1199,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBD,
	0x1FC8,
	0x1FCD,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWL_invlist[] = { /* for EBCDIC 037 */
	1195,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBD,
	0x1FC8,
	0x1FCD,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFD,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_CWT_invlist[] = { /* for ASCII/Latin1 */
	1217,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x7B,
	0xB5,
	0xB6,
	0xDF,
	0xF7,
	0xF8,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C8,
	0x1C9,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWT_invlist[] = { /* for EBCDIC 1047 */
	1231,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C8,
	0x1C9,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWT_invlist[] = { /* for EBCDIC 037 */
	1231,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C4,
	0x1C5,
	0x1C6,
	0x1C8,
	0x1C9,
	0x1CB,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F2,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_CWU_invlist[] = { /* for ASCII/Latin1 */
	1215,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x7B,
	0xB5,
	0xB6,
	0xDF,
	0xF7,
	0xF8,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWU_invlist[] = { /* for EBCDIC 1047 */
	1229,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_CWU_invlist[] = { /* for EBCDIC 037 */
	1229,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x138,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18D,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19B,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BA,
	0x1BD,
	0x1BE,
	0x1BF,
	0x1C0,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x234,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x255,
	0x256,
	0x258,
	0x259,
	0x25A,
	0x25B,
	0x25D,
	0x260,
	0x262,
	0x263,
	0x264,
	0x265,
	0x267,
	0x268,
	0x26D,
	0x26F,
	0x270,
	0x271,
	0x273,
	0x275,
	0x276,
	0x27D,
	0x27E,
	0x280,
	0x281,
	0x283,
	0x284,
	0x287,
	0x28D,
	0x292,
	0x293,
	0x29D,
	0x29F,
	0x345,
	0x346,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FC,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D79,
	0x1D7A,
	0x1D7D,
	0x1D7E,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9C,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBC,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x1FFC,
	0x1FFD,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C73,
	0x2C74,
	0x2C76,
	0x2C77,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE4,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA730,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA794,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 037 */

static const UV PL_CYPRIOTSYLLABARY_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10800,
	0x10840
};

static const UV PL_CYRILLICEXTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2DE0,
	0x2E00
};

static const UV PL_CYRILLICEXTB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA640,
	0xA6A0
};

static const UV PL_CYRILLICEXTC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1C80,
	0x1C90
};

static const UV PL_CYRILLICSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x500,
	0x530
};

static const UV PL_CYRL_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x400,
	0x530,
	0x1C80,
	0x1C89,
	0x1D2B,
	0x1D2C,
	0x1D78,
	0x1D79,
	0x2DE0,
	0x2E00,
	0x2E43,
	0x2E44,
	0xA640,
	0xA6A0,
	0xFE2E,
	0xFE30
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DASH_invlist[] = { /* for ASCII/Latin1 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2053,
	0x2054,
	0x207B,
	0x207C,
	0x208B,
	0x208C,
	0x2212,
	0x2213,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DASH_invlist[] = { /* for EBCDIC 1047 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2053,
	0x2054,
	0x207B,
	0x207C,
	0x208B,
	0x208C,
	0x2212,
	0x2213,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DASH_invlist[] = { /* for EBCDIC 037 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2053,
	0x2054,
	0x207B,
	0x207C,
	0x208B,
	0x208C,
	0x2212,
	0x2213,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E
};

#   endif	/* EBCDIC 037 */

static const UV PL_DEP_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x149,
	0x14A,
	0x673,
	0x674,
	0xF77,
	0xF78,
	0xF79,
	0xF7A,
	0x17A3,
	0x17A5,
	0x206A,
	0x2070,
	0x2329,
	0x232B,
	0xE0001,
	0xE0002
};

static const UV PL_DEVA_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x900,
	0x980,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x20F0,
	0x20F1,
	0xA830,
	0xA83A,
	0xA8E0,
	0xA8FE
};

static const UV PL_DEVANAGARIEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA8E0,
	0xA900
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DI_invlist[] = { /* for ASCII/Latin1 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x17B4,
	0x17B6,
	0x180B,
	0x180F,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2070,
	0x3164,
	0x3165,
	0xFE00,
	0xFE10,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0xFFF0,
	0xFFF9,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE1000
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DI_invlist[] = { /* for EBCDIC 1047 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x17B4,
	0x17B6,
	0x180B,
	0x180F,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2070,
	0x3164,
	0x3165,
	0xFE00,
	0xFE10,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0xFFF0,
	0xFFF9,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE1000
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DI_invlist[] = { /* for EBCDIC 037 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x17B4,
	0x17B6,
	0x180B,
	0x180F,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2070,
	0x3164,
	0x3165,
	0xFE00,
	0xFE10,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0xFFF0,
	0xFFF9,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE1000
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DIA_invlist[] = { /* for ASCII/Latin1 */
	319,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0xA8,
	0xA9,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0xB7,
	0xB9,
	0x2B0,
	0x34F,
	0x350,
	0x358,
	0x35D,
	0x363,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x384,
	0x386,
	0x483,
	0x488,
	0x559,
	0x55A,
	0x591,
	0x5A2,
	0x5A3,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C5,
	0x64B,
	0x653,
	0x657,
	0x659,
	0x6DF,
	0x6E1,
	0x6E5,
	0x6E7,
	0x6EA,
	0x6ED,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F6,
	0x818,
	0x81A,
	0x8E3,
	0x8FF,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x971,
	0x972,
	0x9BC,
	0x9BD,
	0x9CD,
	0x9CE,
	0xA3C,
	0xA3D,
	0xA4D,
	0xA4E,
	0xABC,
	0xABD,
	0xACD,
	0xACE,
	0xAFD,
	0xB00,
	0xB3C,
	0xB3D,
	0xB4D,
	0xB4E,
	0xBCD,
	0xBCE,
	0xC4D,
	0xC4E,
	0xCBC,
	0xCBD,
	0xCCD,
	0xCCE,
	0xD3B,
	0xD3D,
	0xD4D,
	0xD4E,
	0xDCA,
	0xDCB,
	0xE47,
	0xE4D,
	0xE4E,
	0xE4F,
	0xEC8,
	0xECD,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF82,
	0xF85,
	0xF86,
	0xF88,
	0xFC6,
	0xFC7,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1939,
	0x193C,
	0x1A75,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABE,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1BAA,
	0x1BAC,
	0x1C36,
	0x1C38,
	0x1C78,
	0x1C7E,
	0x1CD0,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D2C,
	0x1D6B,
	0x1DC4,
	0x1DD0,
	0x1DF5,
	0x1DFA,
	0x1DFD,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2CEF,
	0x2CF2,
	0x2E2F,
	0x2E30,
	0x302A,
	0x3030,
	0x3099,
	0x309D,
	0x30FC,
	0x30FD,
	0xA66F,
	0xA670,
	0xA67C,
	0xA67E,
	0xA67F,
	0xA680,
	0xA69C,
	0xA69E,
	0xA6F0,
	0xA6F2,
	0xA717,
	0xA722,
	0xA788,
	0xA789,
	0xA7F8,
	0xA7FA,
	0xA8C4,
	0xA8C5,
	0xA8E0,
	0xA8F2,
	0xA92B,
	0xA92F,
	0xA953,
	0xA954,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC3,
	0xAAF6,
	0xAAF7,
	0xAB5B,
	0xAB60,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE20,
	0xFE30,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE3,
	0xFFE4,
	0x102E0,
	0x102E1,
	0x10AE5,
	0x10AE7,
	0x110B9,
	0x110BB,
	0x11133,
	0x11135,
	0x11173,
	0x11174,
	0x111C0,
	0x111C1,
	0x111CA,
	0x111CD,
	0x11235,
	0x11237,
	0x112E9,
	0x112EB,
	0x1133C,
	0x1133D,
	0x1134D,
	0x1134E,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x114C2,
	0x114C4,
	0x115BF,
	0x115C1,
	0x1163F,
	0x11640,
	0x116B6,
	0x116B8,
	0x1172B,
	0x1172C,
	0x11A34,
	0x11A35,
	0x11A47,
	0x11A48,
	0x11A99,
	0x11A9A,
	0x11C3F,
	0x11C40,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x16AF0,
	0x16AF5,
	0x16F8F,
	0x16FA0,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E947,
	0x1E948,
	0x1E94B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DIA_invlist[] = { /* for EBCDIC 1047 */
	319,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5F,
	0x60,
	0x79,
	0x7A,
	0x9D,
	0x9E,
	0xB3,
	0xB4,
	0xBB,
	0xBD,
	0xBE,
	0xBF,
	0x2B0,
	0x34F,
	0x350,
	0x358,
	0x35D,
	0x363,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x384,
	0x386,
	0x483,
	0x488,
	0x559,
	0x55A,
	0x591,
	0x5A2,
	0x5A3,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C5,
	0x64B,
	0x653,
	0x657,
	0x659,
	0x6DF,
	0x6E1,
	0x6E5,
	0x6E7,
	0x6EA,
	0x6ED,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F6,
	0x818,
	0x81A,
	0x8E3,
	0x8FF,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x971,
	0x972,
	0x9BC,
	0x9BD,
	0x9CD,
	0x9CE,
	0xA3C,
	0xA3D,
	0xA4D,
	0xA4E,
	0xABC,
	0xABD,
	0xACD,
	0xACE,
	0xAFD,
	0xB00,
	0xB3C,
	0xB3D,
	0xB4D,
	0xB4E,
	0xBCD,
	0xBCE,
	0xC4D,
	0xC4E,
	0xCBC,
	0xCBD,
	0xCCD,
	0xCCE,
	0xD3B,
	0xD3D,
	0xD4D,
	0xD4E,
	0xDCA,
	0xDCB,
	0xE47,
	0xE4D,
	0xE4E,
	0xE4F,
	0xEC8,
	0xECD,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF82,
	0xF85,
	0xF86,
	0xF88,
	0xFC6,
	0xFC7,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1939,
	0x193C,
	0x1A75,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABE,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1BAA,
	0x1BAC,
	0x1C36,
	0x1C38,
	0x1C78,
	0x1C7E,
	0x1CD0,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D2C,
	0x1D6B,
	0x1DC4,
	0x1DD0,
	0x1DF5,
	0x1DFA,
	0x1DFD,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2CEF,
	0x2CF2,
	0x2E2F,
	0x2E30,
	0x302A,
	0x3030,
	0x3099,
	0x309D,
	0x30FC,
	0x30FD,
	0xA66F,
	0xA670,
	0xA67C,
	0xA67E,
	0xA67F,
	0xA680,
	0xA69C,
	0xA69E,
	0xA6F0,
	0xA6F2,
	0xA717,
	0xA722,
	0xA788,
	0xA789,
	0xA7F8,
	0xA7FA,
	0xA8C4,
	0xA8C5,
	0xA8E0,
	0xA8F2,
	0xA92B,
	0xA92F,
	0xA953,
	0xA954,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC3,
	0xAAF6,
	0xAAF7,
	0xAB5B,
	0xAB60,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE20,
	0xFE30,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE3,
	0xFFE4,
	0x102E0,
	0x102E1,
	0x10AE5,
	0x10AE7,
	0x110B9,
	0x110BB,
	0x11133,
	0x11135,
	0x11173,
	0x11174,
	0x111C0,
	0x111C1,
	0x111CA,
	0x111CD,
	0x11235,
	0x11237,
	0x112E9,
	0x112EB,
	0x1133C,
	0x1133D,
	0x1134D,
	0x1134E,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x114C2,
	0x114C4,
	0x115BF,
	0x115C1,
	0x1163F,
	0x11640,
	0x116B6,
	0x116B8,
	0x1172B,
	0x1172C,
	0x11A34,
	0x11A35,
	0x11A47,
	0x11A48,
	0x11A99,
	0x11A9A,
	0x11C3F,
	0x11C40,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x16AF0,
	0x16AF5,
	0x16F8F,
	0x16FA0,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E947,
	0x1E948,
	0x1E94B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DIA_invlist[] = { /* for EBCDIC 037 */
	317,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x79,
	0x7A,
	0x9D,
	0x9E,
	0xB0,
	0xB1,
	0xB3,
	0xB4,
	0xBC,
	0xBF,
	0x2B0,
	0x34F,
	0x350,
	0x358,
	0x35D,
	0x363,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x384,
	0x386,
	0x483,
	0x488,
	0x559,
	0x55A,
	0x591,
	0x5A2,
	0x5A3,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C5,
	0x64B,
	0x653,
	0x657,
	0x659,
	0x6DF,
	0x6E1,
	0x6E5,
	0x6E7,
	0x6EA,
	0x6ED,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F6,
	0x818,
	0x81A,
	0x8E3,
	0x8FF,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x971,
	0x972,
	0x9BC,
	0x9BD,
	0x9CD,
	0x9CE,
	0xA3C,
	0xA3D,
	0xA4D,
	0xA4E,
	0xABC,
	0xABD,
	0xACD,
	0xACE,
	0xAFD,
	0xB00,
	0xB3C,
	0xB3D,
	0xB4D,
	0xB4E,
	0xBCD,
	0xBCE,
	0xC4D,
	0xC4E,
	0xCBC,
	0xCBD,
	0xCCD,
	0xCCE,
	0xD3B,
	0xD3D,
	0xD4D,
	0xD4E,
	0xDCA,
	0xDCB,
	0xE47,
	0xE4D,
	0xE4E,
	0xE4F,
	0xEC8,
	0xECD,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF82,
	0xF85,
	0xF86,
	0xF88,
	0xFC6,
	0xFC7,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1939,
	0x193C,
	0x1A75,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABE,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1BAA,
	0x1BAC,
	0x1C36,
	0x1C38,
	0x1C78,
	0x1C7E,
	0x1CD0,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D2C,
	0x1D6B,
	0x1DC4,
	0x1DD0,
	0x1DF5,
	0x1DFA,
	0x1DFD,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2CEF,
	0x2CF2,
	0x2E2F,
	0x2E30,
	0x302A,
	0x3030,
	0x3099,
	0x309D,
	0x30FC,
	0x30FD,
	0xA66F,
	0xA670,
	0xA67C,
	0xA67E,
	0xA67F,
	0xA680,
	0xA69C,
	0xA69E,
	0xA6F0,
	0xA6F2,
	0xA717,
	0xA722,
	0xA788,
	0xA789,
	0xA7F8,
	0xA7FA,
	0xA8C4,
	0xA8C5,
	0xA8E0,
	0xA8F2,
	0xA92B,
	0xA92F,
	0xA953,
	0xA954,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC3,
	0xAAF6,
	0xAAF7,
	0xAB5B,
	0xAB60,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE20,
	0xFE30,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE3,
	0xFFE4,
	0x102E0,
	0x102E1,
	0x10AE5,
	0x10AE7,
	0x110B9,
	0x110BB,
	0x11133,
	0x11135,
	0x11173,
	0x11174,
	0x111C0,
	0x111C1,
	0x111CA,
	0x111CD,
	0x11235,
	0x11237,
	0x112E9,
	0x112EB,
	0x1133C,
	0x1133D,
	0x1134D,
	0x1134E,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x114C2,
	0x114C4,
	0x115BF,
	0x115C1,
	0x1163F,
	0x11640,
	0x116B6,
	0x116B8,
	0x1172B,
	0x1172C,
	0x11A34,
	0x11A35,
	0x11A47,
	0x11A48,
	0x11A99,
	0x11A9A,
	0x11C3F,
	0x11C40,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x16AF0,
	0x16AF5,
	0x16F8F,
	0x16FA0,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E947,
	0x1E948,
	0x1E94B
};

#   endif	/* EBCDIC 037 */

static const UV PL_DIACRITICALS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370
};

static const UV PL_DIACRITICALSEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1AB0,
	0x1B00
};

static const UV PL_DIACRITICALSFORSYMBOLS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20D0,
	0x2100
};

static const UV PL_DIACRITICALSSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1DC0,
	0x1E00
};

static const UV PL_DINGBATS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2700,
	0x27C0
};

static const UV PL_DOMINO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F030,
	0x1F0A0
};

static const UV PL_DSRT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10400,
	0x10450
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DT__CAN_invlist[] = { /* for ASCII/Latin1 */
	463,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC0,
	0xC6,
	0xC7,
	0xD0,
	0xD1,
	0xD7,
	0xD9,
	0xDE,
	0xE0,
	0xE6,
	0xE7,
	0xF0,
	0xF1,
	0xF7,
	0xF9,
	0xFE,
	0xFF,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x149,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x17F,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1CD,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F1,
	0x1F4,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D3,
	0x3D5,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x622,
	0x627,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1E00,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309E,
	0x309F,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x30FF,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__CAN_invlist[] = { /* for EBCDIC 1047 */
	467,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x59,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8D,
	0x8E,
	0xBA,
	0xBB,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x149,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x17F,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1CD,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F1,
	0x1F4,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D3,
	0x3D5,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x622,
	0x627,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1E00,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309E,
	0x309F,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x30FF,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__CAN_invlist[] = { /* for EBCDIC 037 */
	467,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x59,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8D,
	0x8E,
	0xAD,
	0xAE,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x149,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x17F,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1CD,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F1,
	0x1F4,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D3,
	0x3D5,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x622,
	0x627,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1E00,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309E,
	0x309F,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x30FF,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DT__COM_invlist[] = { /* for ASCII/Latin1 */
	149,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA8,
	0xA9,
	0xAF,
	0xB0,
	0xB4,
	0xB6,
	0xB8,
	0xB9,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2D8,
	0x2DE,
	0x37A,
	0x37B,
	0x384,
	0x385,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x675,
	0x679,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF77,
	0xF78,
	0xF79,
	0xF7A,
	0x1E9A,
	0x1E9B,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FFE,
	0x1FFF,
	0x2002,
	0x2007,
	0x2008,
	0x200B,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x20A8,
	0x20A9,
	0x2100,
	0x2102,
	0x2103,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x210A,
	0x2116,
	0x2117,
	0x2121,
	0x2122,
	0x2135,
	0x2139,
	0x213B,
	0x213C,
	0x2160,
	0x2180,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2474,
	0x24B6,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x3131,
	0x318F,
	0x3200,
	0x321F,
	0x3220,
	0x3244,
	0x32C0,
	0x32CC,
	0x3358,
	0x3371,
	0x33E0,
	0x33FF,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB4F,
	0xFB50,
	0xFE49,
	0xFE50,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12B,
	0x1F240,
	0x1F249
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__COM_invlist[] = { /* for EBCDIC 1047 */
	149,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xBB,
	0xBD,
	0xBE,
	0xBF,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2D8,
	0x2DE,
	0x37A,
	0x37B,
	0x384,
	0x385,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x675,
	0x679,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF77,
	0xF78,
	0xF79,
	0xF7A,
	0x1E9A,
	0x1E9B,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FFE,
	0x1FFF,
	0x2002,
	0x2007,
	0x2008,
	0x200B,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x20A8,
	0x20A9,
	0x2100,
	0x2102,
	0x2103,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x210A,
	0x2116,
	0x2117,
	0x2121,
	0x2122,
	0x2135,
	0x2139,
	0x213B,
	0x213C,
	0x2160,
	0x2180,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2474,
	0x24B6,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x3131,
	0x318F,
	0x3200,
	0x321F,
	0x3220,
	0x3244,
	0x32C0,
	0x32CC,
	0x3358,
	0x3371,
	0x33E0,
	0x33FF,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB4F,
	0xFB50,
	0xFE49,
	0xFE50,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12B,
	0x1F240,
	0x1F249
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__COM_invlist[] = { /* for EBCDIC 037 */
	147,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xBC,
	0xBF,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2D8,
	0x2DE,
	0x37A,
	0x37B,
	0x384,
	0x385,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x675,
	0x679,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF77,
	0xF78,
	0xF79,
	0xF7A,
	0x1E9A,
	0x1E9B,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FFE,
	0x1FFF,
	0x2002,
	0x2007,
	0x2008,
	0x200B,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x20A8,
	0x20A9,
	0x2100,
	0x2102,
	0x2103,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x210A,
	0x2116,
	0x2117,
	0x2121,
	0x2122,
	0x2135,
	0x2139,
	0x213B,
	0x213C,
	0x2160,
	0x2180,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2474,
	0x24B6,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x3131,
	0x318F,
	0x3200,
	0x321F,
	0x3220,
	0x3244,
	0x32C0,
	0x32CC,
	0x3358,
	0x3371,
	0x33E0,
	0x33FF,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB4F,
	0xFB50,
	0xFE49,
	0xFE50,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12B,
	0x1F240,
	0x1F249
};

#   endif	/* EBCDIC 037 */

static const UV PL_DT__ENC_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2460,
	0x2474,
	0x24B6,
	0x24EB,
	0x3244,
	0x3248,
	0x3251,
	0x327F,
	0x3280,
	0x32C0,
	0x32D0,
	0x32FF,
	0x1F12B,
	0x1F12F,
	0x1F250,
	0x1F252
};

static const UV PL_DT__FIN_invlist[] = { /* for all charsets */
	227,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFB51,
	0xFB52,
	0xFB53,
	0xFB54,
	0xFB57,
	0xFB58,
	0xFB5B,
	0xFB5C,
	0xFB5F,
	0xFB60,
	0xFB63,
	0xFB64,
	0xFB67,
	0xFB68,
	0xFB6B,
	0xFB6C,
	0xFB6F,
	0xFB70,
	0xFB73,
	0xFB74,
	0xFB77,
	0xFB78,
	0xFB7B,
	0xFB7C,
	0xFB7F,
	0xFB80,
	0xFB83,
	0xFB84,
	0xFB85,
	0xFB86,
	0xFB87,
	0xFB88,
	0xFB89,
	0xFB8A,
	0xFB8B,
	0xFB8C,
	0xFB8D,
	0xFB8E,
	0xFB8F,
	0xFB90,
	0xFB93,
	0xFB94,
	0xFB97,
	0xFB98,
	0xFB9B,
	0xFB9C,
	0xFB9F,
	0xFBA0,
	0xFBA1,
	0xFBA2,
	0xFBA5,
	0xFBA6,
	0xFBA7,
	0xFBA8,
	0xFBAB,
	0xFBAC,
	0xFBAF,
	0xFBB0,
	0xFBB1,
	0xFBB2,
	0xFBD4,
	0xFBD5,
	0xFBD8,
	0xFBD9,
	0xFBDA,
	0xFBDB,
	0xFBDC,
	0xFBDD,
	0xFBDF,
	0xFBE0,
	0xFBE1,
	0xFBE2,
	0xFBE3,
	0xFBE4,
	0xFBE5,
	0xFBE6,
	0xFBEB,
	0xFBEC,
	0xFBED,
	0xFBEE,
	0xFBEF,
	0xFBF0,
	0xFBF1,
	0xFBF2,
	0xFBF3,
	0xFBF4,
	0xFBF5,
	0xFBF6,
	0xFBF7,
	0xFBF8,
	0xFBFA,
	0xFBFB,
	0xFBFD,
	0xFBFE,
	0xFC64,
	0xFC97,
	0xFD11,
	0xFD2D,
	0xFD3C,
	0xFD3D,
	0xFD51,
	0xFD52,
	0xFD58,
	0xFD59,
	0xFD5A,
	0xFD5C,
	0xFD5E,
	0xFD60,
	0xFD62,
	0xFD63,
	0xFD64,
	0xFD65,
	0xFD66,
	0xFD68,
	0xFD69,
	0xFD6B,
	0xFD6C,
	0xFD6D,
	0xFD6E,
	0xFD70,
	0xFD71,
	0xFD72,
	0xFD74,
	0xFD77,
	0xFD78,
	0xFD7D,
	0xFD7E,
	0xFD83,
	0xFD84,
	0xFD86,
	0xFD87,
	0xFD88,
	0xFD8B,
	0xFD8C,
	0xFD96,
	0xFD98,
	0xFD99,
	0xFD9D,
	0xFD9E,
	0xFDB4,
	0xFDB6,
	0xFDB8,
	0xFDB9,
	0xFDBA,
	0xFDBB,
	0xFDC3,
	0xFDC6,
	0xFDC8,
	0xFE82,
	0xFE83,
	0xFE84,
	0xFE85,
	0xFE86,
	0xFE87,
	0xFE88,
	0xFE89,
	0xFE8A,
	0xFE8B,
	0xFE8E,
	0xFE8F,
	0xFE90,
	0xFE91,
	0xFE94,
	0xFE95,
	0xFE96,
	0xFE97,
	0xFE9A,
	0xFE9B,
	0xFE9E,
	0xFE9F,
	0xFEA2,
	0xFEA3,
	0xFEA6,
	0xFEA7,
	0xFEAA,
	0xFEAB,
	0xFEAC,
	0xFEAD,
	0xFEAE,
	0xFEAF,
	0xFEB0,
	0xFEB1,
	0xFEB2,
	0xFEB3,
	0xFEB6,
	0xFEB7,
	0xFEBA,
	0xFEBB,
	0xFEBE,
	0xFEBF,
	0xFEC2,
	0xFEC3,
	0xFEC6,
	0xFEC7,
	0xFECA,
	0xFECB,
	0xFECE,
	0xFECF,
	0xFED2,
	0xFED3,
	0xFED6,
	0xFED7,
	0xFEDA,
	0xFEDB,
	0xFEDE,
	0xFEDF,
	0xFEE2,
	0xFEE3,
	0xFEE6,
	0xFEE7,
	0xFEEA,
	0xFEEB,
	0xFEEE,
	0xFEEF,
	0xFEF0,
	0xFEF1,
	0xFEF2,
	0xFEF3,
	0xFEF6,
	0xFEF7,
	0xFEF8,
	0xFEF9,
	0xFEFA,
	0xFEFB,
	0xFEFC,
	0xFEFD
};

static const UV PL_DT__FONT_invlist[] = { /* for all charsets */
	135,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2102,
	0x2103,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2128,
	0x2129,
	0x212C,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2141,
	0x2145,
	0x214A,
	0xFB20,
	0xFB2A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DT__FRA_invlist[] = { /* for ASCII/Latin1 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBC,
	0xBF,
	0x2150,
	0x2160,
	0x2189,
	0x218A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__FRA_invlist[] = { /* for EBCDIC 1047 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0x2150,
	0x2160,
	0x2189,
	0x218A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__FRA_invlist[] = { /* for EBCDIC 037 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0x2150,
	0x2160,
	0x2189,
	0x218A
};

#   endif	/* EBCDIC 037 */

static const UV PL_DT__INIT_invlist[] = { /* for all charsets */
	151,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFB54,
	0xFB55,
	0xFB58,
	0xFB59,
	0xFB5C,
	0xFB5D,
	0xFB60,
	0xFB61,
	0xFB64,
	0xFB65,
	0xFB68,
	0xFB69,
	0xFB6C,
	0xFB6D,
	0xFB70,
	0xFB71,
	0xFB74,
	0xFB75,
	0xFB78,
	0xFB79,
	0xFB7C,
	0xFB7D,
	0xFB80,
	0xFB81,
	0xFB90,
	0xFB91,
	0xFB94,
	0xFB95,
	0xFB98,
	0xFB99,
	0xFB9C,
	0xFB9D,
	0xFBA2,
	0xFBA3,
	0xFBA8,
	0xFBA9,
	0xFBAC,
	0xFBAD,
	0xFBD5,
	0xFBD6,
	0xFBE6,
	0xFBE7,
	0xFBE8,
	0xFBE9,
	0xFBF8,
	0xFBF9,
	0xFBFB,
	0xFBFC,
	0xFBFE,
	0xFBFF,
	0xFC97,
	0xFCDF,
	0xFD2D,
	0xFD34,
	0xFD50,
	0xFD51,
	0xFD52,
	0xFD58,
	0xFD59,
	0xFD5A,
	0xFD5C,
	0xFD5E,
	0xFD60,
	0xFD62,
	0xFD63,
	0xFD64,
	0xFD65,
	0xFD66,
	0xFD68,
	0xFD69,
	0xFD6B,
	0xFD6C,
	0xFD6D,
	0xFD6E,
	0xFD70,
	0xFD71,
	0xFD72,
	0xFD74,
	0xFD77,
	0xFD78,
	0xFD7D,
	0xFD7E,
	0xFD83,
	0xFD84,
	0xFD86,
	0xFD87,
	0xFD88,
	0xFD8B,
	0xFD8C,
	0xFD90,
	0xFD92,
	0xFD96,
	0xFD98,
	0xFD99,
	0xFD9D,
	0xFD9E,
	0xFDB4,
	0xFDB6,
	0xFDB8,
	0xFDB9,
	0xFDBA,
	0xFDBB,
	0xFDC3,
	0xFDC6,
	0xFE8B,
	0xFE8C,
	0xFE91,
	0xFE92,
	0xFE97,
	0xFE98,
	0xFE9B,
	0xFE9C,
	0xFE9F,
	0xFEA0,
	0xFEA3,
	0xFEA4,
	0xFEA7,
	0xFEA8,
	0xFEB3,
	0xFEB4,
	0xFEB7,
	0xFEB8,
	0xFEBB,
	0xFEBC,
	0xFEBF,
	0xFEC0,
	0xFEC3,
	0xFEC4,
	0xFEC7,
	0xFEC8,
	0xFECB,
	0xFECC,
	0xFECF,
	0xFED0,
	0xFED3,
	0xFED4,
	0xFED7,
	0xFED8,
	0xFEDB,
	0xFEDC,
	0xFEDF,
	0xFEE0,
	0xFEE3,
	0xFEE4,
	0xFEE7,
	0xFEE8,
	0xFEEB,
	0xFEEC,
	0xFEF3,
	0xFEF4
};

static const UV PL_DT__ISO_invlist[] = { /* for all charsets */
	197,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFB50,
	0xFB51,
	0xFB52,
	0xFB53,
	0xFB56,
	0xFB57,
	0xFB5A,
	0xFB5B,
	0xFB5E,
	0xFB5F,
	0xFB62,
	0xFB63,
	0xFB66,
	0xFB67,
	0xFB6A,
	0xFB6B,
	0xFB6E,
	0xFB6F,
	0xFB72,
	0xFB73,
	0xFB76,
	0xFB77,
	0xFB7A,
	0xFB7B,
	0xFB7E,
	0xFB7F,
	0xFB82,
	0xFB83,
	0xFB84,
	0xFB85,
	0xFB86,
	0xFB87,
	0xFB88,
	0xFB89,
	0xFB8A,
	0xFB8B,
	0xFB8C,
	0xFB8D,
	0xFB8E,
	0xFB8F,
	0xFB92,
	0xFB93,
	0xFB96,
	0xFB97,
	0xFB9A,
	0xFB9B,
	0xFB9E,
	0xFB9F,
	0xFBA0,
	0xFBA1,
	0xFBA4,
	0xFBA5,
	0xFBA6,
	0xFBA7,
	0xFBAA,
	0xFBAB,
	0xFBAE,
	0xFBAF,
	0xFBB0,
	0xFBB1,
	0xFBD3,
	0xFBD4,
	0xFBD7,
	0xFBD8,
	0xFBD9,
	0xFBDA,
	0xFBDB,
	0xFBDC,
	0xFBDD,
	0xFBDF,
	0xFBE0,
	0xFBE1,
	0xFBE2,
	0xFBE3,
	0xFBE4,
	0xFBE5,
	0xFBEA,
	0xFBEB,
	0xFBEC,
	0xFBED,
	0xFBEE,
	0xFBEF,
	0xFBF0,
	0xFBF1,
	0xFBF2,
	0xFBF3,
	0xFBF4,
	0xFBF5,
	0xFBF6,
	0xFBF7,
	0xFBF9,
	0xFBFA,
	0xFBFC,
	0xFBFD,
	0xFC00,
	0xFC64,
	0xFCF5,
	0xFD11,
	0xFD3D,
	0xFD3E,
	0xFDF0,
	0xFDFD,
	0xFE70,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFE80,
	0xFE82,
	0xFE83,
	0xFE84,
	0xFE85,
	0xFE86,
	0xFE87,
	0xFE88,
	0xFE89,
	0xFE8A,
	0xFE8D,
	0xFE8E,
	0xFE8F,
	0xFE90,
	0xFE93,
	0xFE94,
	0xFE95,
	0xFE96,
	0xFE99,
	0xFE9A,
	0xFE9D,
	0xFE9E,
	0xFEA1,
	0xFEA2,
	0xFEA5,
	0xFEA6,
	0xFEA9,
	0xFEAA,
	0xFEAB,
	0xFEAC,
	0xFEAD,
	0xFEAE,
	0xFEAF,
	0xFEB0,
	0xFEB1,
	0xFEB2,
	0xFEB5,
	0xFEB6,
	0xFEB9,
	0xFEBA,
	0xFEBD,
	0xFEBE,
	0xFEC1,
	0xFEC2,
	0xFEC5,
	0xFEC6,
	0xFEC9,
	0xFECA,
	0xFECD,
	0xFECE,
	0xFED1,
	0xFED2,
	0xFED5,
	0xFED6,
	0xFED9,
	0xFEDA,
	0xFEDD,
	0xFEDE,
	0xFEE1,
	0xFEE2,
	0xFEE5,
	0xFEE6,
	0xFEE9,
	0xFEEA,
	0xFEED,
	0xFEEE,
	0xFEEF,
	0xFEF0,
	0xFEF1,
	0xFEF2,
	0xFEF5,
	0xFEF6,
	0xFEF7,
	0xFEF8,
	0xFEF9,
	0xFEFA,
	0xFEFB,
	0xFEFC
};

static const UV PL_DT__MED_invlist[] = { /* for all charsets */
	109,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFB55,
	0xFB56,
	0xFB59,
	0xFB5A,
	0xFB5D,
	0xFB5E,
	0xFB61,
	0xFB62,
	0xFB65,
	0xFB66,
	0xFB69,
	0xFB6A,
	0xFB6D,
	0xFB6E,
	0xFB71,
	0xFB72,
	0xFB75,
	0xFB76,
	0xFB79,
	0xFB7A,
	0xFB7D,
	0xFB7E,
	0xFB81,
	0xFB82,
	0xFB91,
	0xFB92,
	0xFB95,
	0xFB96,
	0xFB99,
	0xFB9A,
	0xFB9D,
	0xFB9E,
	0xFBA3,
	0xFBA4,
	0xFBA9,
	0xFBAA,
	0xFBAD,
	0xFBAE,
	0xFBD6,
	0xFBD7,
	0xFBE7,
	0xFBE8,
	0xFBE9,
	0xFBEA,
	0xFBFF,
	0xFC00,
	0xFCDF,
	0xFCF5,
	0xFD34,
	0xFD3C,
	0xFE71,
	0xFE72,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFE80,
	0xFE8C,
	0xFE8D,
	0xFE92,
	0xFE93,
	0xFE98,
	0xFE99,
	0xFE9C,
	0xFE9D,
	0xFEA0,
	0xFEA1,
	0xFEA4,
	0xFEA5,
	0xFEA8,
	0xFEA9,
	0xFEB4,
	0xFEB5,
	0xFEB8,
	0xFEB9,
	0xFEBC,
	0xFEBD,
	0xFEC0,
	0xFEC1,
	0xFEC4,
	0xFEC5,
	0xFEC8,
	0xFEC9,
	0xFECC,
	0xFECD,
	0xFED0,
	0xFED1,
	0xFED4,
	0xFED5,
	0xFED8,
	0xFED9,
	0xFEDC,
	0xFEDD,
	0xFEE0,
	0xFEE1,
	0xFEE4,
	0xFEE5,
	0xFEE8,
	0xFEE9,
	0xFEEC,
	0xFEED,
	0xFEF4,
	0xFEF5
};

static const UV PL_DT__NAR_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFF61,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE8,
	0xFFEF
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DT__NB_invlist[] = { /* for ASCII/Latin1 */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA0,
	0xA1,
	0xF0C,
	0xF0D,
	0x2007,
	0x2008,
	0x2011,
	0x2012,
	0x202F,
	0x2030
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__NB_invlist[] = { /* for EBCDIC 1047 */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0xF0C,
	0xF0D,
	0x2007,
	0x2008,
	0x2011,
	0x2012,
	0x202F,
	0x2030
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__NB_invlist[] = { /* for EBCDIC 037 */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0xF0C,
	0xF0D,
	0x2007,
	0x2008,
	0x2011,
	0x2012,
	0x202F,
	0x2030
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DT__NONCANON_invlist[] = { /* for ASCII/Latin1 */
	373,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA0,
	0xA1,
	0xA8,
	0xA9,
	0xAA,
	0xAB,
	0xAF,
	0xB0,
	0xB2,
	0xB6,
	0xB8,
	0xBB,
	0xBC,
	0xBF,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x37A,
	0x37B,
	0x384,
	0x385,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x675,
	0x679,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF77,
	0xF78,
	0xF79,
	0xF7A,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E9A,
	0x1E9B,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FFE,
	0x1FFF,
	0x2002,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2128,
	0x2129,
	0x212C,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB20,
	0xFB2A,
	0xFB4F,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__NONCANON_invlist[] = { /* for EBCDIC 1047 */
	379,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xB7,
	0xBA,
	0xBB,
	0xBD,
	0xBE,
	0xBF,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x37A,
	0x37B,
	0x384,
	0x385,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x675,
	0x679,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF77,
	0xF78,
	0xF79,
	0xF7A,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E9A,
	0x1E9B,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FFE,
	0x1FFF,
	0x2002,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2128,
	0x2129,
	0x212C,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB20,
	0xFB2A,
	0xFB4F,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__NONCANON_invlist[] = { /* for EBCDIC 037 */
	377,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xB7,
	0xBA,
	0xBC,
	0xBF,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x37A,
	0x37B,
	0x384,
	0x385,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x675,
	0x679,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF77,
	0xF78,
	0xF79,
	0xF7A,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E9A,
	0x1E9B,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FFE,
	0x1FFF,
	0x2002,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2128,
	0x2129,
	0x212C,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB20,
	0xFB2A,
	0xFB4F,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DT__NONE_invlist[] = { /* for ASCII/Latin1 */
	781,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA0,
	0xA1,
	0xA8,
	0xA9,
	0xAA,
	0xAB,
	0xAF,
	0xB0,
	0xB2,
	0xB6,
	0xB8,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0xC6,
	0xC7,
	0xD0,
	0xD1,
	0xD7,
	0xD9,
	0xDE,
	0xE0,
	0xE6,
	0xE7,
	0xF0,
	0xF1,
	0xF7,
	0xF9,
	0xFE,
	0xFF,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x132,
	0x138,
	0x139,
	0x141,
	0x143,
	0x14A,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x180,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1C4,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x587,
	0x588,
	0x622,
	0x627,
	0x675,
	0x679,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x10FC,
	0x10FD,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309B,
	0x309D,
	0x309E,
	0x30A0,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__NONE_invlist[] = { /* for EBCDIC 1047 */
	779,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x4A,
	0x51,
	0x59,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8D,
	0x8E,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xB7,
	0xBD,
	0xBE,
	0xBF,
	0xCB,
	0xD0,
	0xDA,
	0xE0,
	0xEA,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x132,
	0x138,
	0x139,
	0x141,
	0x143,
	0x14A,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x180,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1C4,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x587,
	0x588,
	0x622,
	0x627,
	0x675,
	0x679,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x10FC,
	0x10FD,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309B,
	0x309D,
	0x309E,
	0x30A0,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__NONE_invlist[] = { /* for EBCDIC 037 */
	781,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x4A,
	0x51,
	0x59,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8D,
	0x8E,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xAD,
	0xAE,
	0xB7,
	0xBA,
	0xBC,
	0xBF,
	0xCB,
	0xD0,
	0xDA,
	0xE0,
	0xEA,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x132,
	0x138,
	0x139,
	0x141,
	0x143,
	0x14A,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x180,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1C4,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x587,
	0x588,
	0x622,
	0x627,
	0x675,
	0x679,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x10FC,
	0x10FD,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309B,
	0x309D,
	0x309E,
	0x30A0,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

static const UV PL_DT__SML_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C
};

static const UV PL_DT__SQR_invlist[] = { /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3250,
	0x3251,
	0x32CC,
	0x32D0,
	0x3300,
	0x3358,
	0x3371,
	0x33E0,
	0x33FF,
	0x3400,
	0x1F130,
	0x1F150,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C
};

static const UV PL_DT__SUB_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D62,
	0x1D6B,
	0x2080,
	0x208F,
	0x2090,
	0x209D,
	0x2C7C,
	0x2C7D
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_DT__SUP_invlist[] = { /* for ASCII/Latin1 */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA,
	0xAB,
	0xB2,
	0xB4,
	0xB9,
	0xBB,
	0x2B0,
	0x2B9,
	0x2E0,
	0x2E5,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D62,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x2070,
	0x2072,
	0x2074,
	0x2080,
	0x2120,
	0x2121,
	0x2122,
	0x2123,
	0x2C7D,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x3192,
	0x31A0,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0x1F16A,
	0x1F16C
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__SUP_invlist[] = { /* for EBCDIC 1047 */
	51,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9A,
	0x9C,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x2B0,
	0x2B9,
	0x2E0,
	0x2E5,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D62,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x2070,
	0x2072,
	0x2074,
	0x2080,
	0x2120,
	0x2121,
	0x2122,
	0x2123,
	0x2C7D,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x3192,
	0x31A0,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0x1F16A,
	0x1F16C
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_DT__SUP_invlist[] = { /* for EBCDIC 037 */
	51,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9A,
	0x9C,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x2B0,
	0x2B9,
	0x2E0,
	0x2E5,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D62,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x2070,
	0x2072,
	0x2074,
	0x2080,
	0x2120,
	0x2121,
	0x2122,
	0x2123,
	0x2C7D,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x3192,
	0x31A0,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0x1F16A,
	0x1F16C
};

#   endif	/* EBCDIC 037 */

static const UV PL_DT__VERT_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE49
};

static const UV PL_DUPL_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_EA__A_invlist[] = { /* for ASCII/Latin1 */
	359,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA1,
	0xA2,
	0xA4,
	0xA5,
	0xA7,
	0xA9,
	0xAA,
	0xAB,
	0xAD,
	0xAF,
	0xB0,
	0xB5,
	0xB6,
	0xBB,
	0xBC,
	0xC0,
	0xC6,
	0xC7,
	0xD0,
	0xD1,
	0xD7,
	0xD9,
	0xDE,
	0xE2,
	0xE6,
	0xE7,
	0xE8,
	0xEB,
	0xEC,
	0xEE,
	0xF0,
	0xF1,
	0xF2,
	0xF4,
	0xF7,
	0xFB,
	0xFC,
	0xFD,
	0xFE,
	0xFF,
	0x101,
	0x102,
	0x111,
	0x112,
	0x113,
	0x114,
	0x11B,
	0x11C,
	0x126,
	0x128,
	0x12B,
	0x12C,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x144,
	0x145,
	0x148,
	0x14C,
	0x14D,
	0x14E,
	0x152,
	0x154,
	0x166,
	0x168,
	0x16B,
	0x16C,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x251,
	0x252,
	0x261,
	0x262,
	0x2C4,
	0x2C5,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x391,
	0x3A2,
	0x3A3,
	0x3AA,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CA,
	0x401,
	0x402,
	0x410,
	0x450,
	0x451,
	0x452,
	0x2010,
	0x2011,
	0x2013,
	0x2017,
	0x2018,
	0x201A,
	0x201C,
	0x201E,
	0x2020,
	0x2023,
	0x2024,
	0x2028,
	0x2030,
	0x2031,
	0x2032,
	0x2034,
	0x2035,
	0x2036,
	0x203B,
	0x203C,
	0x203E,
	0x203F,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
	0x2081,
	0x2085,
	0x20AC,
	0x20AD,
	0x2103,
	0x2104,
	0x2105,
	0x2106,
	0x2109,
	0x210A,
	0x2113,
	0x2114,
	0x2116,
	0x2117,
	0x2121,
	0x2123,
	0x2126,
	0x2127,
	0x212B,
	0x212C,
	0x2153,
	0x2155,
	0x215B,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x2190,
	0x219A,
	0x21B8,
	0x21BA,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21E7,
	0x21E8,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2212,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x2312,
	0x2313,
	0x2460,
	0x24EA,
	0x24EB,
	0x254C,
	0x2550,
	0x2574,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x261C,
	0x261D,
	0x261E,
	0x261F,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x269E,
	0x26A0,
	0x26BF,
	0x26C0,
	0x26C6,
	0x26CE,
	0x26CF,
	0x26D4,
	0x26D5,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x26EA,
	0x26EB,
	0x26F2,
	0x26F4,
	0x26F5,
	0x26F6,
	0x26FA,
	0x26FB,
	0x26FD,
	0x26FE,
	0x2700,
	0x273D,
	0x273E,
	0x2776,
	0x2780,
	0x2B56,
	0x2B5A,
	0x3248,
	0x3250,
	0xE000,
	0xF900,
	0xFE00,
	0xFE10,
	0xFFFD,
	0xFFFE,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12E,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F18E,
	0x1F18F,
	0x1F191,
	0x1F19B,
	0x1F1AD,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_EA__A_invlist[] = { /* for EBCDIC 1047 */
	363,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x44,
	0x46,
	0x51,
	0x53,
	0x54,
	0x56,
	0x58,
	0x5A,
	0x70,
	0x71,
	0x80,
	0x81,
	0x8C,
	0x8D,
	0x8E,
	0x91,
	0x9A,
	0xA0,
	0xAA,
	0xAD,
	0xAE,
	0xB0,
	0xB3,
	0xB4,
	0xB5,
	0xBA,
	0xBB,
	0xBC,
	0xBE,
	0xC0,
	0xCA,
	0xCB,
	0xCD,
	0xCF,
	0xDA,
	0xDB,
	0xDC,
	0xDF,
	0xE1,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x101,
	0x102,
	0x111,
	0x112,
	0x113,
	0x114,
	0x11B,
	0x11C,
	0x126,
	0x128,
	0x12B,
	0x12C,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x144,
	0x145,
	0x148,
	0x14C,
	0x14D,
	0x14E,
	0x152,
	0x154,
	0x166,
	0x168,
	0x16B,
	0x16C,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x251,
	0x252,
	0x261,
	0x262,
	0x2C4,
	0x2C5,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x391,
	0x3A2,
	0x3A3,
	0x3AA,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CA,
	0x401,
	0x402,
	0x410,
	0x450,
	0x451,
	0x452,
	0x2010,
	0x2011,
	0x2013,
	0x2017,
	0x2018,
	0x201A,
	0x201C,
	0x201E,
	0x2020,
	0x2023,
	0x2024,
	0x2028,
	0x2030,
	0x2031,
	0x2032,
	0x2034,
	0x2035,
	0x2036,
	0x203B,
	0x203C,
	0x203E,
	0x203F,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
	0x2081,
	0x2085,
	0x20AC,
	0x20AD,
	0x2103,
	0x2104,
	0x2105,
	0x2106,
	0x2109,
	0x210A,
	0x2113,
	0x2114,
	0x2116,
	0x2117,
	0x2121,
	0x2123,
	0x2126,
	0x2127,
	0x212B,
	0x212C,
	0x2153,
	0x2155,
	0x215B,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x2190,
	0x219A,
	0x21B8,
	0x21BA,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21E7,
	0x21E8,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2212,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x2312,
	0x2313,
	0x2460,
	0x24EA,
	0x24EB,
	0x254C,
	0x2550,
	0x2574,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x261C,
	0x261D,
	0x261E,
	0x261F,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x269E,
	0x26A0,
	0x26BF,
	0x26C0,
	0x26C6,
	0x26CE,
	0x26CF,
	0x26D4,
	0x26D5,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x26EA,
	0x26EB,
	0x26F2,
	0x26F4,
	0x26F5,
	0x26F6,
	0x26FA,
	0x26FB,
	0x26FD,
	0x26FE,
	0x2700,
	0x273D,
	0x273E,
	0x2776,
	0x2780,
	0x2B56,
	0x2B5A,
	0x3248,
	0x3250,
	0xE000,
	0xF900,
	0xFE00,
	0xFE10,
	0xFFFD,
	0xFFFE,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12E,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F18E,
	0x1F18F,
	0x1F191,
	0x1F19B,
	0x1F1AD,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_EA__A_invlist[] = { /* for EBCDIC 037 */
	361,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x44,
	0x46,
	0x51,
	0x53,
	0x54,
	0x56,
	0x58,
	0x5A,
	0x70,
	0x71,
	0x80,
	0x81,
	0x8C,
	0x8D,
	0x8E,
	0x91,
	0x9A,
	0xA0,
	0xAA,
	0xAD,
	0xAE,
	0xB0,
	0xB3,
	0xB4,
	0xB5,
	0xBA,
	0xBD,
	0xC0,
	0xCA,
	0xCB,
	0xCD,
	0xCF,
	0xDA,
	0xDB,
	0xDC,
	0xDF,
	0xE1,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x101,
	0x102,
	0x111,
	0x112,
	0x113,
	0x114,
	0x11B,
	0x11C,
	0x126,
	0x128,
	0x12B,
	0x12C,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x144,
	0x145,
	0x148,
	0x14C,
	0x14D,
	0x14E,
	0x152,
	0x154,
	0x166,
	0x168,
	0x16B,
	0x16C,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x251,
	0x252,
	0x261,
	0x262,
	0x2C4,
	0x2C5,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x391,
	0x3A2,
	0x3A3,
	0x3AA,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CA,
	0x401,
	0x402,
	0x410,
	0x450,
	0x451,
	0x452,
	0x2010,
	0x2011,
	0x2013,
	0x2017,
	0x2018,
	0x201A,
	0x201C,
	0x201E,
	0x2020,
	0x2023,
	0x2024,
	0x2028,
	0x2030,
	0x2031,
	0x2032,
	0x2034,
	0x2035,
	0x2036,
	0x203B,
	0x203C,
	0x203E,
	0x203F,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
	0x2081,
	0x2085,
	0x20AC,
	0x20AD,
	0x2103,
	0x2104,
	0x2105,
	0x2106,
	0x2109,
	0x210A,
	0x2113,
	0x2114,
	0x2116,
	0x2117,
	0x2121,
	0x2123,
	0x2126,
	0x2127,
	0x212B,
	0x212C,
	0x2153,
	0x2155,
	0x215B,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x2190,
	0x219A,
	0x21B8,
	0x21BA,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21E7,
	0x21E8,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2212,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x2312,
	0x2313,
	0x2460,
	0x24EA,
	0x24EB,
	0x254C,
	0x2550,
	0x2574,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x261C,
	0x261D,
	0x261E,
	0x261F,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x269E,
	0x26A0,
	0x26BF,
	0x26C0,
	0x26C6,
	0x26CE,
	0x26CF,
	0x26D4,
	0x26D5,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x26EA,
	0x26EB,
	0x26F2,
	0x26F4,
	0x26F5,
	0x26F6,
	0x26FA,
	0x26FB,
	0x26FD,
	0x26FE,
	0x2700,
	0x273D,
	0x273E,
	0x2776,
	0x2780,
	0x2B56,
	0x2B5A,
	0x3248,
	0x3250,
	0xE000,
	0xF900,
	0xFE00,
	0xFE10,
	0xFFFD,
	0xFFFE,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12E,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F18E,
	0x1F18F,
	0x1F191,
	0x1F19B,
	0x1F1AD,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 037 */

static const UV PL_EA__F_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3000,
	0x3001,
	0xFF01,
	0xFF61,
	0xFFE0,
	0xFFE7
};

static const UV PL_EA__H_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20A9,
	0x20AA,
	0xFF61,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE8,
	0xFFEF
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_EA__N_invlist[] = { /* for ASCII/Latin1 */
	533,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA1,
	0xA9,
	0xAA,
	0xAB,
	0xAC,
	0xB5,
	0xB6,
	0xBB,
	0xBC,
	0xC0,
	0xC6,
	0xC7,
	0xD0,
	0xD1,
	0xD7,
	0xD9,
	0xDE,
	0xE2,
	0xE6,
	0xE7,
	0xE8,
	0xEB,
	0xEC,
	0xEE,
	0xF0,
	0xF1,
	0xF2,
	0xF4,
	0xF7,
	0xFB,
	0xFC,
	0xFD,
	0xFE,
	0xFF,
	0x101,
	0x102,
	0x111,
	0x112,
	0x113,
	0x114,
	0x11B,
	0x11C,
	0x126,
	0x128,
	0x12B,
	0x12C,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x144,
	0x145,
	0x148,
	0x14C,
	0x14D,
	0x14E,
	0x152,
	0x154,
	0x166,
	0x168,
	0x16B,
	0x16C,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x251,
	0x252,
	0x261,
	0x262,
	0x2C4,
	0x2C5,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x391,
	0x3A2,
	0x3A3,
	0x3AA,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CA,
	0x401,
	0x402,
	0x410,
	0x450,
	0x451,
	0x452,
	0x1100,
	0x1160,
	0x2010,
	0x2011,
	0x2013,
	0x2017,
	0x2018,
	0x201A,
	0x201C,
	0x201E,
	0x2020,
	0x2023,
	0x2024,
	0x2028,
	0x2030,
	0x2031,
	0x2032,
	0x2034,
	0x2035,
	0x2036,
	0x203B,
	0x203C,
	0x203E,
	0x203F,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
	0x2081,
	0x2085,
	0x20A9,
	0x20AA,
	0x20AC,
	0x20AD,
	0x2103,
	0x2104,
	0x2105,
	0x2106,
	0x2109,
	0x210A,
	0x2113,
	0x2114,
	0x2116,
	0x2117,
	0x2121,
	0x2123,
	0x2126,
	0x2127,
	0x212B,
	0x212C,
	0x2153,
	0x2155,
	0x215B,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x2190,
	0x219A,
	0x21B8,
	0x21BA,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21E7,
	0x21E8,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2212,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x2312,
	0x2313,
	0x231A,
	0x231C,
	0x2329,
	0x232B,
	0x23E9,
	0x23ED,
	0x23F0,
	0x23F1,
	0x23F3,
	0x23F4,
	0x2460,
	0x24EA,
	0x24EB,
	0x254C,
	0x2550,
	0x2574,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x25FD,
	0x25FF,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x2614,
	0x2616,
	0x261C,
	0x261D,
	0x261E,
	0x261F,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2648,
	0x2654,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x267F,
	0x2680,
	0x2693,
	0x2694,
	0x269E,
	0x26A0,
	0x26A1,
	0x26A2,
	0x26AA,
	0x26AC,
	0x26BD,
	0x26C0,
	0x26C4,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2700,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x273D,
	0x273E,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x2776,
	0x2780,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x27E6,
	0x27EE,
	0x2985,
	0x2987,
	0x2B1B,
	0x2B1D,
	0x2B50,
	0x2B51,
	0x2B55,
	0x2B5A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x303F,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xE000,
	0xFB00,
	0xFE00,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFD,
	0xFFFE,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1F004,
	0x1F005,
	0x1F0CF,
	0x1F0D0,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12E,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F1AD,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F321,
	0x1F32D,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F37E,
	0x1F394,
	0x1F3A0,
	0x1F3CB,
	0x1F3CF,
	0x1F3D4,
	0x1F3E0,
	0x1F3F1,
	0x1F3F4,
	0x1F3F5,
	0x1F3F8,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4FD,
	0x1F4FF,
	0x1F53E,
	0x1F54B,
	0x1F54F,
	0x1F550,
	0x1F568,
	0x1F57A,
	0x1F57B,
	0x1F595,
	0x1F597,
	0x1F5A4,
	0x1F5A5,
	0x1F5FB,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F6CC,
	0x1F6CD,
	0x1F6D0,
	0x1F6D3,
	0x1F6EB,
	0x1F6ED,
	0x1F6F4,
	0x1F6F9,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_EA__N_invlist[] = { /* for EBCDIC 1047 */
	531,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x44,
	0x46,
	0x4A,
	0x53,
	0x54,
	0x56,
	0x58,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8A,
	0x8C,
	0x8D,
	0x8E,
	0xA0,
	0xA1,
	0xB4,
	0xB5,
	0xBA,
	0xBB,
	0xCB,
	0xCD,
	0xCF,
	0xD0,
	0xDB,
	0xDC,
	0xDF,
	0xE0,
	0xEB,
	0xF0,
	0xFB,
	0x101,
	0x102,
	0x111,
	0x112,
	0x113,
	0x114,
	0x11B,
	0x11C,
	0x126,
	0x128,
	0x12B,
	0x12C,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x144,
	0x145,
	0x148,
	0x14C,
	0x14D,
	0x14E,
	0x152,
	0x154,
	0x166,
	0x168,
	0x16B,
	0x16C,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x251,
	0x252,
	0x261,
	0x262,
	0x2C4,
	0x2C5,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x391,
	0x3A2,
	0x3A3,
	0x3AA,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CA,
	0x401,
	0x402,
	0x410,
	0x450,
	0x451,
	0x452,
	0x1100,
	0x1160,
	0x2010,
	0x2011,
	0x2013,
	0x2017,
	0x2018,
	0x201A,
	0x201C,
	0x201E,
	0x2020,
	0x2023,
	0x2024,
	0x2028,
	0x2030,
	0x2031,
	0x2032,
	0x2034,
	0x2035,
	0x2036,
	0x203B,
	0x203C,
	0x203E,
	0x203F,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
	0x2081,
	0x2085,
	0x20A9,
	0x20AA,
	0x20AC,
	0x20AD,
	0x2103,
	0x2104,
	0x2105,
	0x2106,
	0x2109,
	0x210A,
	0x2113,
	0x2114,
	0x2116,
	0x2117,
	0x2121,
	0x2123,
	0x2126,
	0x2127,
	0x212B,
	0x212C,
	0x2153,
	0x2155,
	0x215B,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x2190,
	0x219A,
	0x21B8,
	0x21BA,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21E7,
	0x21E8,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2212,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x2312,
	0x2313,
	0x231A,
	0x231C,
	0x2329,
	0x232B,
	0x23E9,
	0x23ED,
	0x23F0,
	0x23F1,
	0x23F3,
	0x23F4,
	0x2460,
	0x24EA,
	0x24EB,
	0x254C,
	0x2550,
	0x2574,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x25FD,
	0x25FF,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x2614,
	0x2616,
	0x261C,
	0x261D,
	0x261E,
	0x261F,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2648,
	0x2654,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x267F,
	0x2680,
	0x2693,
	0x2694,
	0x269E,
	0x26A0,
	0x26A1,
	0x26A2,
	0x26AA,
	0x26AC,
	0x26BD,
	0x26C0,
	0x26C4,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2700,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x273D,
	0x273E,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x2776,
	0x2780,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x27E6,
	0x27EE,
	0x2985,
	0x2987,
	0x2B1B,
	0x2B1D,
	0x2B50,
	0x2B51,
	0x2B55,
	0x2B5A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x303F,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xE000,
	0xFB00,
	0xFE00,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFD,
	0xFFFE,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1F004,
	0x1F005,
	0x1F0CF,
	0x1F0D0,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12E,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F1AD,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F321,
	0x1F32D,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F37E,
	0x1F394,
	0x1F3A0,
	0x1F3CB,
	0x1F3CF,
	0x1F3D4,
	0x1F3E0,
	0x1F3F1,
	0x1F3F4,
	0x1F3F5,
	0x1F3F8,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4FD,
	0x1F4FF,
	0x1F53E,
	0x1F54B,
	0x1F54F,
	0x1F550,
	0x1F568,
	0x1F57A,
	0x1F57B,
	0x1F595,
	0x1F597,
	0x1F5A4,
	0x1F5A5,
	0x1F5FB,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F6CC,
	0x1F6CD,
	0x1F6D0,
	0x1F6D3,
	0x1F6EB,
	0x1F6ED,
	0x1F6F4,
	0x1F6F9,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_EA__N_invlist[] = { /* for EBCDIC 037 */
	531,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x44,
	0x46,
	0x4A,
	0x53,
	0x54,
	0x56,
	0x58,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8A,
	0x8C,
	0x8D,
	0x8E,
	0xA0,
	0xA1,
	0xAD,
	0xAE,
	0xB4,
	0xB5,
	0xCB,
	0xCD,
	0xCF,
	0xD0,
	0xDB,
	0xDC,
	0xDF,
	0xE0,
	0xEB,
	0xF0,
	0xFB,
	0x101,
	0x102,
	0x111,
	0x112,
	0x113,
	0x114,
	0x11B,
	0x11C,
	0x126,
	0x128,
	0x12B,
	0x12C,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x144,
	0x145,
	0x148,
	0x14C,
	0x14D,
	0x14E,
	0x152,
	0x154,
	0x166,
	0x168,
	0x16B,
	0x16C,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x251,
	0x252,
	0x261,
	0x262,
	0x2C4,
	0x2C5,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x391,
	0x3A2,
	0x3A3,
	0x3AA,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CA,
	0x401,
	0x402,
	0x410,
	0x450,
	0x451,
	0x452,
	0x1100,
	0x1160,
	0x2010,
	0x2011,
	0x2013,
	0x2017,
	0x2018,
	0x201A,
	0x201C,
	0x201E,
	0x2020,
	0x2023,
	0x2024,
	0x2028,
	0x2030,
	0x2031,
	0x2032,
	0x2034,
	0x2035,
	0x2036,
	0x203B,
	0x203C,
	0x203E,
	0x203F,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
	0x2081,
	0x2085,
	0x20A9,
	0x20AA,
	0x20AC,
	0x20AD,
	0x2103,
	0x2104,
	0x2105,
	0x2106,
	0x2109,
	0x210A,
	0x2113,
	0x2114,
	0x2116,
	0x2117,
	0x2121,
	0x2123,
	0x2126,
	0x2127,
	0x212B,
	0x212C,
	0x2153,
	0x2155,
	0x215B,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x2190,
	0x219A,
	0x21B8,
	0x21BA,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21E7,
	0x21E8,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2212,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x2312,
	0x2313,
	0x231A,
	0x231C,
	0x2329,
	0x232B,
	0x23E9,
	0x23ED,
	0x23F0,
	0x23F1,
	0x23F3,
	0x23F4,
	0x2460,
	0x24EA,
	0x24EB,
	0x254C,
	0x2550,
	0x2574,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x25FD,
	0x25FF,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x2614,
	0x2616,
	0x261C,
	0x261D,
	0x261E,
	0x261F,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2648,
	0x2654,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x267F,
	0x2680,
	0x2693,
	0x2694,
	0x269E,
	0x26A0,
	0x26A1,
	0x26A2,
	0x26AA,
	0x26AC,
	0x26BD,
	0x26C0,
	0x26C4,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2700,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x273D,
	0x273E,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x2776,
	0x2780,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x27E6,
	0x27EE,
	0x2985,
	0x2987,
	0x2B1B,
	0x2B1D,
	0x2B50,
	0x2B51,
	0x2B55,
	0x2B5A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x303F,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xE000,
	0xFB00,
	0xFE00,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFD,
	0xFFFE,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1F004,
	0x1F005,
	0x1F0CF,
	0x1F0D0,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12E,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F1AD,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F321,
	0x1F32D,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F37E,
	0x1F394,
	0x1F3A0,
	0x1F3CB,
	0x1F3CF,
	0x1F3D4,
	0x1F3E0,
	0x1F3F1,
	0x1F3F4,
	0x1F3F5,
	0x1F3F8,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4FD,
	0x1F4FF,
	0x1F53E,
	0x1F54B,
	0x1F54F,
	0x1F550,
	0x1F568,
	0x1F57A,
	0x1F57B,
	0x1F595,
	0x1F597,
	0x1F5A4,
	0x1F5A5,
	0x1F5FB,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F6CC,
	0x1F6CD,
	0x1F6D0,
	0x1F6D3,
	0x1F6EB,
	0x1F6ED,
	0x1F6F4,
	0x1F6F9,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_EA__NA_invlist[] = { /* for ASCII/Latin1 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA2,
	0xA4,
	0xA5,
	0xA7,
	0xAC,
	0xAD,
	0xAF,
	0xB0,
	0x27E6,
	0x27EE,
	0x2985,
	0x2987
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_EA__NA_invlist[] = { /* for EBCDIC 1047 */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xB0,
	0xB3,
	0xBC,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x27E6,
	0x27EE,
	0x2985,
	0x2987
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_EA__NA_invlist[] = { /* for EBCDIC 037 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB3,
	0xBA,
	0xBD,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x27E6,
	0x27EE,
	0x2985,
	0x2987
};

#   endif	/* EBCDIC 037 */

static const UV PL_EA__W_invlist[] = { /* for all charsets */
	209,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1160,
	0x231A,
	0x231C,
	0x2329,
	0x232B,
	0x23E9,
	0x23ED,
	0x23F0,
	0x23F1,
	0x23F3,
	0x23F4,
	0x25FD,
	0x25FF,
	0x2614,
	0x2616,
	0x2648,
	0x2654,
	0x267F,
	0x2680,
	0x2693,
	0x2694,
	0x26A1,
	0x26A2,
	0x26AA,
	0x26AC,
	0x26BD,
	0x26BF,
	0x26C4,
	0x26C6,
	0x26CE,
	0x26CF,
	0x26D4,
	0x26D5,
	0x26EA,
	0x26EB,
	0x26F2,
	0x26F4,
	0x26F5,
	0x26F6,
	0x26FA,
	0x26FB,
	0x26FD,
	0x26FE,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x2B1B,
	0x2B1D,
	0x2B50,
	0x2B51,
	0x2B55,
	0x2B56,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x303F,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFB00,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1F004,
	0x1F005,
	0x1F0CF,
	0x1F0D0,
	0x1F18E,
	0x1F18F,
	0x1F191,
	0x1F19B,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F321,
	0x1F32D,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F37E,
	0x1F394,
	0x1F3A0,
	0x1F3CB,
	0x1F3CF,
	0x1F3D4,
	0x1F3E0,
	0x1F3F1,
	0x1F3F4,
	0x1F3F5,
	0x1F3F8,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4FD,
	0x1F4FF,
	0x1F53E,
	0x1F54B,
	0x1F54F,
	0x1F550,
	0x1F568,
	0x1F57A,
	0x1F57B,
	0x1F595,
	0x1F597,
	0x1F5A4,
	0x1F5A5,
	0x1F5FB,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F6CC,
	0x1F6CD,
	0x1F6D0,
	0x1F6D3,
	0x1F6EB,
	0x1F6ED,
	0x1F6F4,
	0x1F6F9,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE
};

static const UV PL_EARLYDYNASTICCUNEIFORM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x12480,
	0x12550
};

static const UV PL_EGYP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x13000,
	0x1342F
};

static const UV PL_ELBA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10500,
	0x10528
};

static const UV PL_EMOTICONS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F600,
	0x1F650
};

static const UV PL_ENCLOSEDALPHANUM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2460,
	0x2500
};

static const UV PL_ENCLOSEDALPHANUMSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F100,
	0x1F200
};

static const UV PL_ENCLOSEDCJK_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3200,
	0x3300
};

static const UV PL_ENCLOSEDIDEOGRAPHICSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F200,
	0x1F300
};

static const UV PL_ETHI_invlist[] = { /* for all charsets */
	65,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F
};

static const UV PL_ETHIOPICEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D80,
	0x2DE0
};

static const UV PL_ETHIOPICEXTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAB00,
	0xAB30
};

static const UV PL_ETHIOPICSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1380,
	0x13A0
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_EXT_invlist[] = { /* for ASCII/Latin1 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xB8,
	0x2D0,
	0x2D2,
	0x640,
	0x641,
	0x7FA,
	0x7FB,
	0xE46,
	0xE47,
	0xEC6,
	0xEC7,
	0x180A,
	0x180B,
	0x1843,
	0x1844,
	0x1AA7,
	0x1AA8,
	0x1C36,
	0x1C37,
	0x1C7B,
	0x1C7C,
	0x3005,
	0x3006,
	0x3031,
	0x3036,
	0x309D,
	0x309F,
	0x30FC,
	0x30FF,
	0xA015,
	0xA016,
	0xA60C,
	0xA60D,
	0xA9CF,
	0xA9D0,
	0xA9E6,
	0xA9E7,
	0xAA70,
	0xAA71,
	0xAADD,
	0xAADE,
	0xAAF3,
	0xAAF5,
	0xFF70,
	0xFF71,
	0x1135D,
	0x1135E,
	0x115C6,
	0x115C9,
	0x11A98,
	0x11A99,
	0x16B42,
	0x16B44,
	0x16FE0,
	0x16FE2,
	0x1E944,
	0x1E947
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_EXT_invlist[] = { /* for EBCDIC 1047 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB3,
	0xB4,
	0x2D0,
	0x2D2,
	0x640,
	0x641,
	0x7FA,
	0x7FB,
	0xE46,
	0xE47,
	0xEC6,
	0xEC7,
	0x180A,
	0x180B,
	0x1843,
	0x1844,
	0x1AA7,
	0x1AA8,
	0x1C36,
	0x1C37,
	0x1C7B,
	0x1C7C,
	0x3005,
	0x3006,
	0x3031,
	0x3036,
	0x309D,
	0x309F,
	0x30FC,
	0x30FF,
	0xA015,
	0xA016,
	0xA60C,
	0xA60D,
	0xA9CF,
	0xA9D0,
	0xA9E6,
	0xA9E7,
	0xAA70,
	0xAA71,
	0xAADD,
	0xAADE,
	0xAAF3,
	0xAAF5,
	0xFF70,
	0xFF71,
	0x1135D,
	0x1135E,
	0x115C6,
	0x115C9,
	0x11A98,
	0x11A99,
	0x16B42,
	0x16B44,
	0x16FE0,
	0x16FE2,
	0x1E944,
	0x1E947
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_EXT_invlist[] = { /* for EBCDIC 037 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB3,
	0xB4,
	0x2D0,
	0x2D2,
	0x640,
	0x641,
	0x7FA,
	0x7FB,
	0xE46,
	0xE47,
	0xEC6,
	0xEC7,
	0x180A,
	0x180B,
	0x1843,
	0x1844,
	0x1AA7,
	0x1AA8,
	0x1C36,
	0x1C37,
	0x1C7B,
	0x1C7C,
	0x3005,
	0x3006,
	0x3031,
	0x3036,
	0x309D,
	0x309F,
	0x30FC,
	0x30FF,
	0xA015,
	0xA016,
	0xA60C,
	0xA60D,
	0xA9CF,
	0xA9D0,
	0xA9E6,
	0xA9E7,
	0xAA70,
	0xAA71,
	0xAADD,
	0xAADE,
	0xAAF3,
	0xAAF5,
	0xFF70,
	0xFF71,
	0x1135D,
	0x1135E,
	0x115C6,
	0x115C9,
	0x11A98,
	0x11A99,
	0x16B42,
	0x16B44,
	0x16FE0,
	0x16FE2,
	0x1E944,
	0x1E947
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_GCB__CN_invlist[] = { /* for ASCII/Latin1 */
	38,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x7F,
	0xA0,
	0xAD,
	0xAE,
	0x61C,
	0x61D,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0xD800,
	0xE000,
	0xFEFF,
	0xFF00,
	0xFFF0,
	0xFFFC,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xE1000
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_GCB__CN_invlist[] = { /* for EBCDIC 1047 */
	38,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x15,
	0x16,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x61C,
	0x61D,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0xD800,
	0xE000,
	0xFEFF,
	0xFF00,
	0xFFF0,
	0xFFFC,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xE1000
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_GCB__CN_invlist[] = { /* for EBCDIC 037 */
	38,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x25,
	0x26,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x61C,
	0x61D,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0xD800,
	0xE000,
	0xFEFF,
	0xFF00,
	0xFFF0,
	0xFFFC,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xE1000
};

#   endif	/* EBCDIC 037 */

static const UV PL_GCB__L_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1160,
	0xA960,
	0xA97D
};

static const UV PL_GCB__PP_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x600,
	0x606,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0xD4E,
	0xD4F,
	0x110BD,
	0x110BE,
	0x111C2,
	0x111C4,
	0x11A3A,
	0x11A3B,
	0x11A86,
	0x11A8A,
	0x11D46,
	0x11D47
};

static const UV PL_GCB__SM_invlist[] = { /* for all charsets */
	291,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x903,
	0x904,
	0x93B,
	0x93C,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x982,
	0x984,
	0x9BF,
	0x9C1,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0xA03,
	0xA04,
	0xA3E,
	0xA41,
	0xA83,
	0xA84,
	0xABE,
	0xAC1,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xB02,
	0xB04,
	0xB40,
	0xB41,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xC01,
	0xC04,
	0xC41,
	0xC45,
	0xC82,
	0xC84,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD02,
	0xD04,
	0xD3F,
	0xD41,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD82,
	0xD84,
	0xDD0,
	0xDD2,
	0xDD8,
	0xDDF,
	0xDF2,
	0xDF4,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xF3E,
	0xF40,
	0xF7F,
	0xF80,
	0x1031,
	0x1032,
	0x103B,
	0x103D,
	0x1056,
	0x1058,
	0x1084,
	0x1085,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x1A19,
	0x1A1B,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A6D,
	0x1A73,
	0x1B04,
	0x1B05,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1CE1,
	0x1CE2,
	0x1CF2,
	0x1CF4,
	0x1CF7,
	0x1CF8,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA952,
	0xA954,
	0xA983,
	0xA984,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9C1,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA4D,
	0xAA4E,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x1112C,
	0x1112D,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x112E0,
	0x112E3,
	0x11302,
	0x11304,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11362,
	0x11364,
	0x11435,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x115B0,
	0x115B2,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x11A07,
	0x11A09,
	0x11A39,
	0x11A3A,
	0x11A57,
	0x11A59,
	0x11A97,
	0x11A98,
	0x11C2F,
	0x11C30,
	0x11C3E,
	0x11C3F,
	0x11CA9,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x16F51,
	0x16F7F,
	0x1D166,
	0x1D167,
	0x1D16D,
	0x1D16E
};

static const UV PL_GCB__T_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11A8,
	0x1200,
	0xD7CB,
	0xD7FC
};

static const UV PL_GCB__V_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1160,
	0x11A8,
	0xD7B0,
	0xD7C7
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_GCB__XX_invlist[] = { /* for ASCII/Latin1 */
	672,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA0,
	0xAD,
	0xAE,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1038,
	0x1039,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180F,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x20D0,
	0x20F1,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFF9E,
	0xFFA0,
	0xFFF0,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C2,
	0x111C4,
	0x111CA,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x1171D,
	0x1172C,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A86,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0000,
	0xE1000
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_GCB__XX_invlist[] = { /* for EBCDIC 1047 */
	672,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1038,
	0x1039,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180F,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x20D0,
	0x20F1,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFF9E,
	0xFFA0,
	0xFFF0,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C2,
	0x111C4,
	0x111CA,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x1171D,
	0x1172C,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A86,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0000,
	0xE1000
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_GCB__XX_invlist[] = { /* for EBCDIC 037 */
	672,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1038,
	0x1039,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180F,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x20D0,
	0x20F1,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFF9E,
	0xFFA0,
	0xFFF0,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C2,
	0x111C4,
	0x111CA,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x1171D,
	0x1172C,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A86,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0000,
	0xE1000
};

#   endif	/* EBCDIC 037 */

static const UV PL_GEOMETRICSHAPES_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x25A0,
	0x2600
};

static const UV PL_GEOMETRICSHAPESEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F780,
	0x1F800
};

static const UV PL_GEOR_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x589,
	0x58A,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1100,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E
};

static const UV PL_GEORGIANSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D00,
	0x2D30
};

static const UV PL_GLAG_invlist[] = { /* for all charsets */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x484,
	0x485,
	0x487,
	0x488,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2E43,
	0x2E44,
	0xA66F,
	0xA670,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B
};

static const UV PL_GLAGOLITICSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E000,
	0x1E030
};

static const UV PL_GONM_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A
};

static const UV PL_GOTH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10330,
	0x1034B
};

static const UV PL_GRAN_invlist[] = { /* for all charsets */
	51,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xBAA,
	0xBAB,
	0xBB5,
	0xBB6,
	0xBE6,
	0xBF3,
	0x1CD0,
	0x1CD1,
	0x1CD2,
	0x1CD4,
	0x1CF2,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x20F0,
	0x20F1,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_GRBASE_invlist[] = { /* for ASCII/Latin1 */
	1583,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA0,
	0xAD,
	0xAE,
	0x300,
	0x370,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61E,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70E,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x830,
	0x83F,
	0x840,
	0x859,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E6,
	0x9FE,
	0xA03,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA41,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA83,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC1,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB02,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB78,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC41,
	0xC45,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC78,
	0xC81,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD3F,
	0xD41,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD50,
	0xD54,
	0xD57,
	0xD58,
	0xD62,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDD0,
	0xDD2,
	0xDD8,
	0xDDF,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3F,
	0xE47,
	0xE4F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF48,
	0xF49,
	0xF6D,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1360,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1735,
	0x1737,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180B,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1E,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B4C,
	0x1B50,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1BFC,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E00,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x302A,
	0x3030,
	0x3040,
	0x3041,
	0x3097,
	0x309B,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C4,
	0xA8CE,
	0xA8DA,
	0xA8F2,
	0xA8FE,
	0xA900,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA954,
	0xA95F,
	0xA97D,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E5,
	0xA9E6,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E1,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A40,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE5,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1104E,
	0x11052,
	0x11070,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11136,
	0x11144,
	0x11150,
	0x11173,
	0x11174,
	0x11177,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112F0,
	0x112FA,
	0x11302,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x1135D,
	0x11364,
	0x11400,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x11600,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A50,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C30,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11CA9,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF5,
	0x16AF6,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16E,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA8C,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D0,
	0x1E900,
	0x1E944,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_GRBASE_invlist[] = { /* for EBCDIC 1047 */
	1583,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x300,
	0x370,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61E,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70E,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x830,
	0x83F,
	0x840,
	0x859,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E6,
	0x9FE,
	0xA03,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA41,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA83,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC1,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB02,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB78,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC41,
	0xC45,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC78,
	0xC81,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD3F,
	0xD41,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD50,
	0xD54,
	0xD57,
	0xD58,
	0xD62,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDD0,
	0xDD2,
	0xDD8,
	0xDDF,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3F,
	0xE47,
	0xE4F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF48,
	0xF49,
	0xF6D,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1360,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1735,
	0x1737,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180B,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1E,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B4C,
	0x1B50,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1BFC,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E00,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x302A,
	0x3030,
	0x3040,
	0x3041,
	0x3097,
	0x309B,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C4,
	0xA8CE,
	0xA8DA,
	0xA8F2,
	0xA8FE,
	0xA900,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA954,
	0xA95F,
	0xA97D,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E5,
	0xA9E6,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E1,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A40,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE5,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1104E,
	0x11052,
	0x11070,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11136,
	0x11144,
	0x11150,
	0x11173,
	0x11174,
	0x11177,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112F0,
	0x112FA,
	0x11302,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x1135D,
	0x11364,
	0x11400,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x11600,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A50,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C30,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11CA9,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF5,
	0x16AF6,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16E,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA8C,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D0,
	0x1E900,
	0x1E944,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_GRBASE_invlist[] = { /* for EBCDIC 037 */
	1583,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x300,
	0x370,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61E,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70E,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x830,
	0x83F,
	0x840,
	0x859,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E6,
	0x9FE,
	0xA03,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA41,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA83,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC1,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB02,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB78,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC41,
	0xC45,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC78,
	0xC81,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD3F,
	0xD41,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD50,
	0xD54,
	0xD57,
	0xD58,
	0xD62,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDD0,
	0xDD2,
	0xDD8,
	0xDDF,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3F,
	0xE47,
	0xE4F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF48,
	0xF49,
	0xF6D,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1360,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1735,
	0x1737,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180B,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1E,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B4C,
	0x1B50,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1BFC,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E00,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x302A,
	0x3030,
	0x3040,
	0x3041,
	0x3097,
	0x309B,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C4,
	0xA8CE,
	0xA8DA,
	0xA8F2,
	0xA8FE,
	0xA900,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA954,
	0xA95F,
	0xA97D,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E5,
	0xA9E6,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E1,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A40,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE5,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1104E,
	0x11052,
	0x11070,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11136,
	0x11144,
	0x11150,
	0x11173,
	0x11174,
	0x11177,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112F0,
	0x112FA,
	0x11302,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x1135D,
	0x11364,
	0x11400,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x11600,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A50,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C30,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11CA9,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF5,
	0x16AF6,
	0x16B00,
	0x16B30,
	0x16B37,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16E,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA8C,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D0,
	0x1E900,
	0x1E944,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

static const UV PL_GREEKEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F00,
	0x2000
};

static const UV PL_GREK_invlist[] = { /* for all charsets */
	77,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x342,
	0x343,
	0x345,
	0x346,
	0x370,
	0x374,
	0x375,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x384,
	0x385,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3E2,
	0x3F0,
	0x400,
	0x1D26,
	0x1D2B,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1DBF,
	0x1DC2,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2126,
	0x2127,
	0xAB65,
	0xAB66,
	0x10140,
	0x1018F,
	0x101A0,
	0x101A1,
	0x1D200,
	0x1D246
};

static const UV PL_GREXT_invlist[] = { /* for all charsets */
	639,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD3F,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDDF,
	0xDE0,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200C,
	0x200D,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFF9E,
	0xFFA0,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11357,
	0x11358,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16E,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

static const UV PL_GUJR_invlist[] = { /* for all charsets */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xA830,
	0xA83A
};

static const UV PL_GURU_invlist[] = { /* for all charsets */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA830,
	0xA83A
};

static const UV PL_HALFANDFULLFORMS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFF00,
	0xFFF0
};

static const UV PL_HALFMARKS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE20,
	0xFE30
};

static const UV PL_HAN_invlist[] = { /* for all charsets */
	65,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3001,
	0x3004,
	0x3005,
	0x3012,
	0x3013,
	0x3020,
	0x3021,
	0x302E,
	0x3030,
	0x3031,
	0x3037,
	0x3040,
	0x30FB,
	0x30FC,
	0x3190,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3220,
	0x3248,
	0x3280,
	0x32B1,
	0x32C0,
	0x32CC,
	0x3358,
	0x3371,
	0x337B,
	0x3380,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66,
	0x1D360,
	0x1D372,
	0x1F250,
	0x1F252,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

static const UV PL_HANG_invlist[] = { /* for all charsets */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1200,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3013,
	0x3020,
	0x302E,
	0x3031,
	0x3037,
	0x3038,
	0x30FB,
	0x30FC,
	0x3131,
	0x318F,
	0x3200,
	0x321F,
	0x3260,
	0x327F,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD
};

static const UV PL_HANO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1720,
	0x1737
};

static const UV PL_HATR_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x10900
};

static const UV PL_HEBR_invlist[] = { /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50
};

static const UV PL_HIGHPUSURROGATES_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDB80,
	0xDC00
};

static const UV PL_HIGHSURROGATES_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD800,
	0xDB80
};

static const UV PL_HIRA_invlist[] = { /* for all charsets */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3013,
	0x3020,
	0x3030,
	0x3036,
	0x3037,
	0x3038,
	0x303C,
	0x303E,
	0x3041,
	0x3097,
	0x3099,
	0x30A1,
	0x30FB,
	0x30FD,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0x1B001,
	0x1B11F,
	0x1F200,
	0x1F201
};

static const UV PL_HLUW_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x14400,
	0x14647
};

static const UV PL_HMNG_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90
};

static const UV PL_HST__NA_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1200,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC
};

static const UV PL_HUNG_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_HYPHEN_invlist[] = { /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0xAD,
	0xAE,
	0x58A,
	0x58B,
	0x1806,
	0x1807,
	0x2010,
	0x2012,
	0x2E17,
	0x2E18,
	0x30FB,
	0x30FC,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0xFF65,
	0xFF66
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_HYPHEN_invlist[] = { /* for EBCDIC 1047 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0xCA,
	0xCB,
	0x58A,
	0x58B,
	0x1806,
	0x1807,
	0x2010,
	0x2012,
	0x2E17,
	0x2E18,
	0x30FB,
	0x30FC,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0xFF65,
	0xFF66
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_HYPHEN_invlist[] = { /* for EBCDIC 037 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0xCA,
	0xCB,
	0x58A,
	0x58B,
	0x1806,
	0x1807,
	0x2010,
	0x2012,
	0x2E17,
	0x2E18,
	0x30FB,
	0x30FC,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0xFF65,
	0xFF66
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_IDC_invlist[] = { /* for ASCII/Latin1 */
	1379,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xB7,
	0xB8,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1369,
	0x1372,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_IDC_invlist[] = { /* for EBCDIC 1047 */
	1403,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB3,
	0xB4,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1369,
	0x1372,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_IDC_invlist[] = { /* for EBCDIC 037 */
	1399,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB3,
	0xB4,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1369,
	0x1372,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

static const UV PL_IDEO_invlist[] = { /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3006,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B170,
	0x1B2FC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

static const UV PL_IDEOGRAPHICSYMBOLS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16FE0,
	0x17000
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_IDS_invlist[] = { /* for ASCII/Latin1 */
	1171,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309B,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_IDS_invlist[] = { /* for EBCDIC 1047 */
	1197,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309B,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_IDS_invlist[] = { /* for EBCDIC 037 */
	1193,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309B,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

static const UV PL_IDSB_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2FF0,
	0x2FF2,
	0x2FF4,
	0x2FFC
};

static const UV PL_IDST_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2FF2,
	0x2FF4
};

static const UV PL_IN__1_DOT_1_invlist[] = { /* for all charsets */
	576,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F6,
	0x1FA,
	0x218,
	0x250,
	0x2A9,
	0x2B0,
	0x2DF,
	0x2E0,
	0x2EA,
	0x300,
	0x346,
	0x360,
	0x362,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3CF,
	0x3D0,
	0x3D7,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3F4,
	0x401,
	0x40D,
	0x40E,
	0x450,
	0x451,
	0x45D,
	0x45E,
	0x487,
	0x490,
	0x4C5,
	0x4C7,
	0x4C9,
	0x4CB,
	0x4CD,
	0x4D0,
	0x4EC,
	0x4EE,
	0x4F6,
	0x4F8,
	0x4FA,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x5B0,
	0x5BA,
	0x5BB,
	0x5C4,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x621,
	0x63B,
	0x640,
	0x653,
	0x660,
	0x66E,
	0x670,
	0x6B8,
	0x6BA,
	0x6BF,
	0x6C0,
	0x6CF,
	0x6D0,
	0x6EE,
	0x6F0,
	0x6FA,
	0x901,
	0x904,
	0x905,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA02,
	0xA03,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA75,
	0xA81,
	0xA84,
	0xA85,
	0xA8C,
	0xA8D,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE1,
	0xAE6,
	0xAF0,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB36,
	0xB3A,
	0xB3C,
	0xB44,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB71,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBB6,
	0xBB7,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE7,
	0xBF3,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3E,
	0xD44,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD62,
	0xD66,
	0xD70,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0x10A0,
	0x10C6,
	0x10D0,
	0x10F7,
	0x10FB,
	0x10FC,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1E00,
	0x1E9B,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x202F,
	0x2030,
	0x2047,
	0x206A,
	0x2071,
	0x2074,
	0x208F,
	0x20A0,
	0x20AB,
	0x20D0,
	0x20E2,
	0x2100,
	0x2139,
	0x2153,
	0x2183,
	0x2190,
	0x21EB,
	0x2200,
	0x22F2,
	0x2300,
	0x2301,
	0x2302,
	0x237B,
	0x2400,
	0x2425,
	0x2440,
	0x244B,
	0x2460,
	0x24EB,
	0x2500,
	0x2596,
	0x25A0,
	0x25F0,
	0x2600,
	0x2614,
	0x261A,
	0x2670,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2768,
	0x2776,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x3000,
	0x3038,
	0x303F,
	0x3040,
	0x3041,
	0x3095,
	0x3099,
	0x309F,
	0x30A1,
	0x30FF,
	0x3105,
	0x312D,
	0x3131,
	0x318F,
	0x3190,
	0x31A0,
	0x3200,
	0x321D,
	0x3220,
	0x3244,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3300,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x4E00,
	0x9FA6,
	0xE000,
	0xFA2E,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1E,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE20,
	0xFE24,
	0xFE30,
	0xFE45,
	0xFE49,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF5F,
	0xFF61,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFD,
	0x10000
};

static const UV PL_IN__10_invlist[] = { /* for all charsets */
	1318,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__2_invlist[] = { /* for all charsets */
	624,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F6,
	0x1FA,
	0x218,
	0x250,
	0x2A9,
	0x2B0,
	0x2DF,
	0x2E0,
	0x2EA,
	0x300,
	0x346,
	0x360,
	0x362,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3CF,
	0x3D0,
	0x3D7,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3F4,
	0x401,
	0x40D,
	0x40E,
	0x450,
	0x451,
	0x45D,
	0x45E,
	0x487,
	0x490,
	0x4C5,
	0x4C7,
	0x4C9,
	0x4CB,
	0x4CD,
	0x4D0,
	0x4EC,
	0x4EE,
	0x4F6,
	0x4F8,
	0x4FA,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5A2,
	0x5A3,
	0x5BA,
	0x5BB,
	0x5C5,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x621,
	0x63B,
	0x640,
	0x653,
	0x660,
	0x66E,
	0x670,
	0x6B8,
	0x6BA,
	0x6BF,
	0x6C0,
	0x6CF,
	0x6D0,
	0x6EE,
	0x6F0,
	0x6FA,
	0x901,
	0x904,
	0x905,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA02,
	0xA03,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA75,
	0xA81,
	0xA84,
	0xA85,
	0xA8C,
	0xA8D,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE1,
	0xAE6,
	0xAF0,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB36,
	0xB3A,
	0xB3C,
	0xB44,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB71,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBB6,
	0xBB7,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE7,
	0xBF3,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3E,
	0xD44,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD62,
	0xD66,
	0xD70,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6A,
	0xF71,
	0xF8C,
	0xF90,
	0xF96,
	0xF97,
	0xF98,
	0xF99,
	0xFAE,
	0xFB1,
	0xFB8,
	0xFB9,
	0xFBA,
	0x10A0,
	0x10C6,
	0x10D0,
	0x10F7,
	0x10FB,
	0x10FC,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x202F,
	0x2030,
	0x2047,
	0x206A,
	0x2071,
	0x2074,
	0x208F,
	0x20A0,
	0x20AC,
	0x20D0,
	0x20E2,
	0x2100,
	0x2139,
	0x2153,
	0x2183,
	0x2190,
	0x21EB,
	0x2200,
	0x22F2,
	0x2300,
	0x2301,
	0x2302,
	0x237B,
	0x2400,
	0x2425,
	0x2440,
	0x244B,
	0x2460,
	0x24EB,
	0x2500,
	0x2596,
	0x25A0,
	0x25F0,
	0x2600,
	0x2614,
	0x261A,
	0x2670,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2768,
	0x2776,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x3000,
	0x3038,
	0x303F,
	0x3040,
	0x3041,
	0x3095,
	0x3099,
	0x309F,
	0x30A1,
	0x30FF,
	0x3105,
	0x312D,
	0x3131,
	0x318F,
	0x3190,
	0x31A0,
	0x3200,
	0x321D,
	0x3220,
	0x3244,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3300,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x4E00,
	0x9FA6,
	0xAC00,
	0xD7A4,
	0xD800,
	0xFA2E,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1E,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE20,
	0xFE24,
	0xFE30,
	0xFE45,
	0xFE49,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF5F,
	0xFF61,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFD,
	0x10000,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__2_DOT_1_invlist[] = { /* for all charsets */
	624,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F6,
	0x1FA,
	0x218,
	0x250,
	0x2A9,
	0x2B0,
	0x2DF,
	0x2E0,
	0x2EA,
	0x300,
	0x346,
	0x360,
	0x362,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3CF,
	0x3D0,
	0x3D7,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3F4,
	0x401,
	0x40D,
	0x40E,
	0x450,
	0x451,
	0x45D,
	0x45E,
	0x487,
	0x490,
	0x4C5,
	0x4C7,
	0x4C9,
	0x4CB,
	0x4CD,
	0x4D0,
	0x4EC,
	0x4EE,
	0x4F6,
	0x4F8,
	0x4FA,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5A2,
	0x5A3,
	0x5BA,
	0x5BB,
	0x5C5,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x621,
	0x63B,
	0x640,
	0x653,
	0x660,
	0x66E,
	0x670,
	0x6B8,
	0x6BA,
	0x6BF,
	0x6C0,
	0x6CF,
	0x6D0,
	0x6EE,
	0x6F0,
	0x6FA,
	0x901,
	0x904,
	0x905,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA02,
	0xA03,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA75,
	0xA81,
	0xA84,
	0xA85,
	0xA8C,
	0xA8D,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE1,
	0xAE6,
	0xAF0,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB36,
	0xB3A,
	0xB3C,
	0xB44,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB71,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBB6,
	0xBB7,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE7,
	0xBF3,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3E,
	0xD44,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD62,
	0xD66,
	0xD70,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6A,
	0xF71,
	0xF8C,
	0xF90,
	0xF96,
	0xF97,
	0xF98,
	0xF99,
	0xFAE,
	0xFB1,
	0xFB8,
	0xFB9,
	0xFBA,
	0x10A0,
	0x10C6,
	0x10D0,
	0x10F7,
	0x10FB,
	0x10FC,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x202F,
	0x2030,
	0x2047,
	0x206A,
	0x2071,
	0x2074,
	0x208F,
	0x20A0,
	0x20AD,
	0x20D0,
	0x20E2,
	0x2100,
	0x2139,
	0x2153,
	0x2183,
	0x2190,
	0x21EB,
	0x2200,
	0x22F2,
	0x2300,
	0x2301,
	0x2302,
	0x237B,
	0x2400,
	0x2425,
	0x2440,
	0x244B,
	0x2460,
	0x24EB,
	0x2500,
	0x2596,
	0x25A0,
	0x25F0,
	0x2600,
	0x2614,
	0x261A,
	0x2670,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2768,
	0x2776,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x3000,
	0x3038,
	0x303F,
	0x3040,
	0x3041,
	0x3095,
	0x3099,
	0x309F,
	0x30A1,
	0x30FF,
	0x3105,
	0x312D,
	0x3131,
	0x318F,
	0x3190,
	0x31A0,
	0x3200,
	0x321D,
	0x3220,
	0x3244,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3300,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x4E00,
	0x9FA6,
	0xAC00,
	0xD7A4,
	0xD800,
	0xFA2E,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1E,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE20,
	0xFE24,
	0xFE30,
	0xFE45,
	0xFE49,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF5F,
	0xFF61,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0x10000,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__3_invlist[] = { /* for all charsets */
	738,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x220,
	0x222,
	0x234,
	0x250,
	0x2AE,
	0x2B0,
	0x2EF,
	0x300,
	0x34F,
	0x360,
	0x363,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3CF,
	0x3D0,
	0x3D8,
	0x3DA,
	0x3F4,
	0x400,
	0x487,
	0x488,
	0x48A,
	0x48C,
	0x4C5,
	0x4C7,
	0x4C9,
	0x4CB,
	0x4CD,
	0x4D0,
	0x4F6,
	0x4F8,
	0x4FA,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x591,
	0x5A2,
	0x5A3,
	0x5BA,
	0x5BB,
	0x5C5,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x621,
	0x63B,
	0x640,
	0x656,
	0x660,
	0x66E,
	0x670,
	0x6EE,
	0x6F0,
	0x6FF,
	0x700,
	0x70E,
	0x70F,
	0x72D,
	0x730,
	0x74B,
	0x780,
	0x7B1,
	0x901,
	0x904,
	0x905,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA02,
	0xA03,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA75,
	0xA81,
	0xA84,
	0xA85,
	0xA8C,
	0xA8D,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE1,
	0xAE6,
	0xAF0,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB36,
	0xB3A,
	0xB3C,
	0xB44,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB71,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBB6,
	0xBB7,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE7,
	0xBF3,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3E,
	0xD44,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD62,
	0xD66,
	0xD70,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6B,
	0xF71,
	0xF8C,
	0xF90,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCF,
	0xFD0,
	0x1000,
	0x1022,
	0x1023,
	0x1028,
	0x1029,
	0x102B,
	0x102C,
	0x1033,
	0x1036,
	0x103A,
	0x1040,
	0x105A,
	0x10A0,
	0x10C6,
	0x10D0,
	0x10F7,
	0x10FB,
	0x10FC,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1200,
	0x1207,
	0x1208,
	0x1247,
	0x1248,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1287,
	0x1288,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12AF,
	0x12B0,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12CF,
	0x12D0,
	0x12D7,
	0x12D8,
	0x12EF,
	0x12F0,
	0x130F,
	0x1310,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x131F,
	0x1320,
	0x1347,
	0x1348,
	0x135B,
	0x1361,
	0x137D,
	0x13A0,
	0x13F5,
	0x1401,
	0x1677,
	0x1680,
	0x169D,
	0x16A0,
	0x16F1,
	0x1780,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AA,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2047,
	0x2048,
	0x204E,
	0x206A,
	0x2071,
	0x2074,
	0x208F,
	0x20A0,
	0x20B0,
	0x20D0,
	0x20E4,
	0x2100,
	0x213B,
	0x2153,
	0x2184,
	0x2190,
	0x21F4,
	0x2200,
	0x22F2,
	0x2300,
	0x237C,
	0x237D,
	0x239B,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x24EB,
	0x2500,
	0x2596,
	0x25A0,
	0x25F8,
	0x2600,
	0x2614,
	0x2619,
	0x2672,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2768,
	0x2776,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x2800,
	0x2900,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x303B,
	0x303E,
	0x3040,
	0x3041,
	0x3095,
	0x3099,
	0x309F,
	0x30A1,
	0x30FF,
	0x3105,
	0x312D,
	0x3131,
	0x318F,
	0x3190,
	0x31B8,
	0x3200,
	0x321D,
	0x3220,
	0x3244,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3300,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FA6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4A2,
	0xA4A4,
	0xA4B4,
	0xA4B5,
	0xA4C1,
	0xA4C2,
	0xA4C5,
	0xA4C6,
	0xA4C7,
	0xAC00,
	0xD7A4,
	0xD800,
	0xFA2E,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE20,
	0xFE24,
	0xFE30,
	0xFE45,
	0xFE49,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF5F,
	0xFF61,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x10000,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__3_DOT_1_invlist[] = { /* for all charsets */
	804,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x220,
	0x222,
	0x234,
	0x250,
	0x2AE,
	0x2B0,
	0x2EF,
	0x300,
	0x34F,
	0x360,
	0x363,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3CF,
	0x3D0,
	0x3D8,
	0x3DA,
	0x3F6,
	0x400,
	0x487,
	0x488,
	0x48A,
	0x48C,
	0x4C5,
	0x4C7,
	0x4C9,
	0x4CB,
	0x4CD,
	0x4D0,
	0x4F6,
	0x4F8,
	0x4FA,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x591,
	0x5A2,
	0x5A3,
	0x5BA,
	0x5BB,
	0x5C5,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x621,
	0x63B,
	0x640,
	0x656,
	0x660,
	0x66E,
	0x670,
	0x6EE,
	0x6F0,
	0x6FF,
	0x700,
	0x70E,
	0x70F,
	0x72D,
	0x730,
	0x74B,
	0x780,
	0x7B1,
	0x901,
	0x904,
	0x905,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA02,
	0xA03,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA75,
	0xA81,
	0xA84,
	0xA85,
	0xA8C,
	0xA8D,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE1,
	0xAE6,
	0xAF0,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB36,
	0xB3A,
	0xB3C,
	0xB44,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB71,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBB6,
	0xBB7,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE7,
	0xBF3,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3E,
	0xD44,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD62,
	0xD66,
	0xD70,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6B,
	0xF71,
	0xF8C,
	0xF90,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCF,
	0xFD0,
	0x1000,
	0x1022,
	0x1023,
	0x1028,
	0x1029,
	0x102B,
	0x102C,
	0x1033,
	0x1036,
	0x103A,
	0x1040,
	0x105A,
	0x10A0,
	0x10C6,
	0x10D0,
	0x10F7,
	0x10FB,
	0x10FC,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1200,
	0x1207,
	0x1208,
	0x1247,
	0x1248,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1287,
	0x1288,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12AF,
	0x12B0,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12CF,
	0x12D0,
	0x12D7,
	0x12D8,
	0x12EF,
	0x12F0,
	0x130F,
	0x1310,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x131F,
	0x1320,
	0x1347,
	0x1348,
	0x135B,
	0x1361,
	0x137D,
	0x13A0,
	0x13F5,
	0x1401,
	0x1677,
	0x1680,
	0x169D,
	0x16A0,
	0x16F1,
	0x1780,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AA,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2047,
	0x2048,
	0x204E,
	0x206A,
	0x2071,
	0x2074,
	0x208F,
	0x20A0,
	0x20B0,
	0x20D0,
	0x20E4,
	0x2100,
	0x213B,
	0x2153,
	0x2184,
	0x2190,
	0x21F4,
	0x2200,
	0x22F2,
	0x2300,
	0x237C,
	0x237D,
	0x239B,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x24EB,
	0x2500,
	0x2596,
	0x25A0,
	0x25F8,
	0x2600,
	0x2614,
	0x2619,
	0x2672,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2768,
	0x2776,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x2800,
	0x2900,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x303B,
	0x303E,
	0x3040,
	0x3041,
	0x3095,
	0x3099,
	0x309F,
	0x30A1,
	0x30FF,
	0x3105,
	0x312D,
	0x3131,
	0x318F,
	0x3190,
	0x31B8,
	0x3200,
	0x321D,
	0x3220,
	0x3244,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3300,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FA6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4A2,
	0xA4A4,
	0xA4B4,
	0xA4B5,
	0xA4C1,
	0xA4C2,
	0xA4C5,
	0xA4C6,
	0xA4C7,
	0xAC00,
	0xD7A4,
	0xD800,
	0xFA2E,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFC,
	0xFE20,
	0xFE24,
	0xFE30,
	0xFE45,
	0xFE49,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF5F,
	0xFF61,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x10000,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10400,
	0x10426,
	0x10428,
	0x1044E,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D12A,
	0x1D1DE,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C1,
	0x1D4C2,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A4,
	0x1D6A8,
	0x1D7CA,
	0x1D7CE,
	0x1D800,
	0x1FFFE,
	0x2A6D7,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__3_DOT_2_invlist[] = { /* for all charsets */
	794,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x221,
	0x222,
	0x234,
	0x250,
	0x2AE,
	0x2B0,
	0x2EF,
	0x300,
	0x350,
	0x360,
	0x370,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3CF,
	0x3D0,
	0x3F7,
	0x400,
	0x487,
	0x488,
	0x4CF,
	0x4D0,
	0x4F6,
	0x4F8,
	0x4FA,
	0x500,
	0x510,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x591,
	0x5A2,
	0x5A3,
	0x5BA,
	0x5BB,
	0x5C5,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x621,
	0x63B,
	0x640,
	0x656,
	0x660,
	0x6EE,
	0x6F0,
	0x6FF,
	0x700,
	0x70E,
	0x70F,
	0x72D,
	0x730,
	0x74B,
	0x780,
	0x7B2,
	0x901,
	0x904,
	0x905,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA02,
	0xA03,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA75,
	0xA81,
	0xA84,
	0xA85,
	0xA8C,
	0xA8D,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE1,
	0xAE6,
	0xAF0,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB36,
	0xB3A,
	0xB3C,
	0xB44,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB71,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBB6,
	0xBB7,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE7,
	0xBF3,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3E,
	0xD44,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD62,
	0xD66,
	0xD70,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6B,
	0xF71,
	0xF8C,
	0xF90,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCF,
	0xFD0,
	0x1000,
	0x1022,
	0x1023,
	0x1028,
	0x1029,
	0x102B,
	0x102C,
	0x1033,
	0x1036,
	0x103A,
	0x1040,
	0x105A,
	0x10A0,
	0x10C6,
	0x10D0,
	0x10F9,
	0x10FB,
	0x10FC,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1200,
	0x1207,
	0x1208,
	0x1247,
	0x1248,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1287,
	0x1288,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12AF,
	0x12B0,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12CF,
	0x12D0,
	0x12D7,
	0x12D8,
	0x12EF,
	0x12F0,
	0x130F,
	0x1310,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x131F,
	0x1320,
	0x1347,
	0x1348,
	0x135B,
	0x1361,
	0x137D,
	0x13A0,
	0x13F5,
	0x1401,
	0x1677,
	0x1680,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AA,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2053,
	0x2057,
	0x2058,
	0x205F,
	0x2064,
	0x206A,
	0x2072,
	0x2074,
	0x208F,
	0x20A0,
	0x20B2,
	0x20D0,
	0x20EB,
	0x2100,
	0x213B,
	0x213D,
	0x214C,
	0x2153,
	0x2184,
	0x2190,
	0x23CF,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x24FF,
	0x2500,
	0x2614,
	0x2616,
	0x2618,
	0x2619,
	0x267E,
	0x2680,
	0x268A,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27D0,
	0x27EC,
	0x27F0,
	0x2B00,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312D,
	0x3131,
	0x318F,
	0x3190,
	0x31B8,
	0x31F0,
	0x321D,
	0x3220,
	0x3244,
	0x3251,
	0x327C,
	0x327F,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3300,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FA6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xAC00,
	0xD7A4,
	0xD800,
	0xFA2E,
	0xFA30,
	0xFA6B,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFD,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE24,
	0xFE30,
	0xFE47,
	0xFE49,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x10000,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10400,
	0x10426,
	0x10428,
	0x1044E,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D12A,
	0x1D1DE,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C1,
	0x1D4C2,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A4,
	0x1D6A8,
	0x1D7CA,
	0x1D7CE,
	0x1D800,
	0x1FFFE,
	0x2A6D7,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__4_invlist[] = { /* for all charsets */
	824,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x237,
	0x250,
	0x358,
	0x35D,
	0x370,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3CF,
	0x3D0,
	0x3FC,
	0x400,
	0x487,
	0x488,
	0x4CF,
	0x4D0,
	0x4F6,
	0x4F8,
	0x4FA,
	0x500,
	0x510,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x591,
	0x5A2,
	0x5A3,
	0x5BA,
	0x5BB,
	0x5C5,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x604,
	0x60C,
	0x616,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x621,
	0x63B,
	0x640,
	0x659,
	0x660,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x750,
	0x780,
	0x7B2,
	0x901,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x971,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA75,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB44,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBB6,
	0xBB7,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE7,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3E,
	0xD44,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD62,
	0xD66,
	0xD70,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6B,
	0xF71,
	0xF8C,
	0xF90,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCF,
	0xFD0,
	0x1000,
	0x1022,
	0x1023,
	0x1028,
	0x1029,
	0x102B,
	0x102C,
	0x1033,
	0x1036,
	0x103A,
	0x1040,
	0x105A,
	0x10A0,
	0x10C6,
	0x10D0,
	0x10F9,
	0x10FB,
	0x10FC,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1200,
	0x1207,
	0x1208,
	0x1247,
	0x1248,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1287,
	0x1288,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12AF,
	0x12B0,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12CF,
	0x12D0,
	0x12D7,
	0x12D8,
	0x12EF,
	0x12F0,
	0x130F,
	0x1310,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x131F,
	0x1320,
	0x1347,
	0x1348,
	0x135B,
	0x1361,
	0x137D,
	0x13A0,
	0x13F5,
	0x1401,
	0x1677,
	0x1680,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AA,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x19E0,
	0x1A00,
	0x1D00,
	0x1D6C,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2055,
	0x2057,
	0x2058,
	0x205F,
	0x2064,
	0x206A,
	0x2072,
	0x2074,
	0x208F,
	0x20A0,
	0x20B2,
	0x20D0,
	0x20EB,
	0x2100,
	0x213C,
	0x213D,
	0x214C,
	0x2153,
	0x2184,
	0x2190,
	0x23D1,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2618,
	0x2619,
	0x267E,
	0x2680,
	0x2692,
	0x26A0,
	0x26A2,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27D0,
	0x27EC,
	0x27F0,
	0x2B0E,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312D,
	0x3131,
	0x318F,
	0x3190,
	0x31B8,
	0x31F0,
	0x321F,
	0x3220,
	0x3244,
	0x3250,
	0x327E,
	0x327F,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FA6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xAC00,
	0xD7A4,
	0xD800,
	0xFA2E,
	0xFA30,
	0xFA6B,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE24,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103A0,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D12A,
	0x1D1DE,
	0x1D300,
	0x1D357,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A4,
	0x1D6A8,
	0x1D7CA,
	0x1D7CE,
	0x1D800,
	0x1FFFE,
	0x2A6D7,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__4_DOT_1_invlist[] = { /* for all charsets */
	860,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x242,
	0x250,
	0x370,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3CF,
	0x3D0,
	0x487,
	0x488,
	0x4CF,
	0x4D0,
	0x4FA,
	0x500,
	0x510,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x591,
	0x5BA,
	0x5BB,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x604,
	0x60B,
	0x616,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x621,
	0x63B,
	0x640,
	0x65F,
	0x660,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x76E,
	0x780,
	0x7B2,
	0x901,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x971,
	0x97D,
	0x97E,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA75,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB44,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3E,
	0xD44,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD62,
	0xD66,
	0xD70,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6B,
	0xF71,
	0xF8C,
	0xF90,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCF,
	0xFD2,
	0x1000,
	0x1022,
	0x1023,
	0x1028,
	0x1029,
	0x102B,
	0x102C,
	0x1033,
	0x1036,
	0x103A,
	0x1040,
	0x105A,
	0x10A0,
	0x10C6,
	0x10D0,
	0x10FD,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F5,
	0x1401,
	0x1677,
	0x1680,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AA,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AA,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A20,
	0x1D00,
	0x1DC4,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2064,
	0x206A,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x2095,
	0x20A0,
	0x20B6,
	0x20D0,
	0x20EC,
	0x2100,
	0x214D,
	0x2153,
	0x2184,
	0x2190,
	0x23DC,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x269D,
	0x26A0,
	0x26B2,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x27C7,
	0x27D0,
	0x27EC,
	0x27F0,
	0x2B14,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C80,
	0x2CEB,
	0x2CF9,
	0x2D26,
	0x2D30,
	0x2D66,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E00,
	0x2E18,
	0x2E1C,
	0x2E1E,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312D,
	0x3131,
	0x318F,
	0x3190,
	0x31B8,
	0x31C0,
	0x31D0,
	0x31F0,
	0x321F,
	0x3220,
	0x3244,
	0x3250,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FBC,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA700,
	0xA717,
	0xA800,
	0xA82C,
	0xAC00,
	0xD7A4,
	0xD800,
	0xFA2E,
	0xFA30,
	0xFA6B,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE24,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018B,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D12A,
	0x1D1DE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CA,
	0x1D7CE,
	0x1D800,
	0x1FFFE,
	0x2A6D7,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__5_invlist[] = { /* for all charsets */
	880,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x370,
	0x374,
	0x376,
	0x37A,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3CF,
	0x3D0,
	0x487,
	0x488,
	0x514,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x604,
	0x60B,
	0x616,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x621,
	0x63B,
	0x640,
	0x65F,
	0x660,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x76E,
	0x780,
	0x7B2,
	0x7C0,
	0x7FB,
	0x901,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x971,
	0x97B,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA75,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB44,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3E,
	0xD44,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD62,
	0xD66,
	0xD70,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6B,
	0xF71,
	0xF8C,
	0xF90,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCF,
	0xFD2,
	0x1000,
	0x1022,
	0x1023,
	0x1028,
	0x1029,
	0x102B,
	0x102C,
	0x1033,
	0x1036,
	0x103A,
	0x1040,
	0x105A,
	0x10A0,
	0x10C6,
	0x10D0,
	0x10FD,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F5,
	0x1401,
	0x1677,
	0x1680,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AA,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AA,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A20,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1D00,
	0x1DCB,
	0x1DFE,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2064,
	0x206A,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x2095,
	0x20A0,
	0x20B6,
	0x20D0,
	0x20F0,
	0x2100,
	0x214F,
	0x2153,
	0x2185,
	0x2190,
	0x23E8,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x269D,
	0x26A0,
	0x26B3,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x27CB,
	0x27D0,
	0x27EC,
	0x27F0,
	0x2B1B,
	0x2B20,
	0x2B24,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C6D,
	0x2C74,
	0x2C78,
	0x2C80,
	0x2CEB,
	0x2CF9,
	0x2D26,
	0x2D30,
	0x2D66,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E00,
	0x2E18,
	0x2E1C,
	0x2E1E,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312D,
	0x3131,
	0x318F,
	0x3190,
	0x31B8,
	0x31C0,
	0x31D0,
	0x31F0,
	0x321F,
	0x3220,
	0x3244,
	0x3250,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FBC,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA700,
	0xA71B,
	0xA720,
	0xA722,
	0xA800,
	0xA82C,
	0xA840,
	0xA878,
	0xAC00,
	0xD7A4,
	0xD800,
	0xFA2E,
	0xFA30,
	0xFA6B,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE24,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018B,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840,
	0x10900,
	0x1091A,
	0x1091F,
	0x10920,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x12000,
	0x1236F,
	0x12400,
	0x12463,
	0x12470,
	0x12474,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D12A,
	0x1D1DE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1FFFE,
	0x2A6D7,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__5_DOT_1_invlist[] = { /* for all charsets */
	910,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x524,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x604,
	0x606,
	0x61C,
	0x61E,
	0x620,
	0x621,
	0x65F,
	0x660,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x901,
	0x93A,
	0x93C,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x973,
	0x97B,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FB,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5A,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF8C,
	0xF90,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFD5,
	0x1000,
	0x109A,
	0x109E,
	0x10C6,
	0x10D0,
	0x10FD,
	0x1100,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F5,
	0x1401,
	0x1677,
	0x1680,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AA,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A20,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BAB,
	0x1BAE,
	0x1BBA,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1D00,
	0x1DE7,
	0x1DFE,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x206A,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x2095,
	0x20A0,
	0x20B6,
	0x20D0,
	0x20F1,
	0x2100,
	0x2150,
	0x2153,
	0x2189,
	0x2190,
	0x23E8,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x269E,
	0x26A0,
	0x26BD,
	0x26C0,
	0x26C4,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x275F,
	0x2761,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x27CB,
	0x27CC,
	0x27CD,
	0x27D0,
	0x2B4D,
	0x2B50,
	0x2B55,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C70,
	0x2C71,
	0x2C7E,
	0x2C80,
	0x2CEB,
	0x2CF9,
	0x2D26,
	0x2D30,
	0x2D66,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E31,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31B8,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x3244,
	0x3250,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FC4,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA500,
	0xA62C,
	0xA640,
	0xA660,
	0xA662,
	0xA674,
	0xA67C,
	0xA698,
	0xA700,
	0xA78D,
	0xA7FB,
	0xA82C,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA900,
	0xA954,
	0xA95F,
	0xA960,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA60,
	0xAC00,
	0xD7A4,
	0xD800,
	0xFA2E,
	0xFA30,
	0xFA6B,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE27,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018B,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840,
	0x10900,
	0x1091A,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x12000,
	0x1236F,
	0x12400,
	0x12463,
	0x12470,
	0x12474,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1DE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1FFFE,
	0x2A6D7,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__5_DOT_2_invlist[] = { /* for all charsets */
	990,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x526,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x604,
	0x606,
	0x61C,
	0x61E,
	0x620,
	0x621,
	0x65F,
	0x660,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x900,
	0x93A,
	0x93C,
	0x94F,
	0x950,
	0x956,
	0x958,
	0x973,
	0x979,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5A,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD60,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF8C,
	0xF90,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFD9,
	0x1000,
	0x10C6,
	0x10D0,
	0x10FD,
	0x1100,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135F,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F5,
	0x1400,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BAB,
	0x1BAE,
	0x1BBA,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CD0,
	0x1CF3,
	0x1D00,
	0x1DE7,
	0x1DFD,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x206A,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x2095,
	0x20A0,
	0x20B9,
	0x20D0,
	0x20F1,
	0x2100,
	0x218A,
	0x2190,
	0x23E9,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x26CE,
	0x26CF,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2700,
	0x2701,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x275F,
	0x2761,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x27CB,
	0x27CC,
	0x27CD,
	0x27D0,
	0x2B4D,
	0x2B50,
	0x2B5A,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF2,
	0x2CF9,
	0x2D26,
	0x2D30,
	0x2D66,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E32,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31B8,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FCC,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA660,
	0xA662,
	0xA674,
	0xA67C,
	0xA698,
	0xA6A0,
	0xA6F8,
	0xA700,
	0xA78D,
	0xA7FB,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FC,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA7C,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAE0,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA2E,
	0xFA30,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE27,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018B,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x10860,
	0x10900,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10A80,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10C00,
	0x10C49,
	0x10E60,
	0x10E7F,
	0x11080,
	0x110C2,
	0x12000,
	0x1236F,
	0x12400,
	0x12463,
	0x12470,
	0x12474,
	0x13000,
	0x1342F,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1DE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F131,
	0x1F132,
	0x1F13D,
	0x1F13E,
	0x1F13F,
	0x1F140,
	0x1F142,
	0x1F143,
	0x1F146,
	0x1F147,
	0x1F14A,
	0x1F14F,
	0x1F157,
	0x1F158,
	0x1F15F,
	0x1F160,
	0x1F179,
	0x1F17A,
	0x1F17B,
	0x1F17D,
	0x1F17F,
	0x1F180,
	0x1F18A,
	0x1F18E,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F201,
	0x1F210,
	0x1F232,
	0x1F240,
	0x1F249,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__6_invlist[] = { /* for all charsets */
	1022,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x528,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x604,
	0x606,
	0x61C,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x900,
	0x978,
	0x979,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF1,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5A,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD60,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEDE,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10D0,
	0x10FD,
	0x1100,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F5,
	0x1400,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BAB,
	0x1BAE,
	0x1BBA,
	0x1BC0,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CD0,
	0x1CF3,
	0x1D00,
	0x1DE7,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x206A,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BA,
	0x20D0,
	0x20F1,
	0x2100,
	0x218A,
	0x2190,
	0x23F4,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2700,
	0x2701,
	0x27CB,
	0x27CC,
	0x27CD,
	0x27CE,
	0x2B4D,
	0x2B50,
	0x2B5A,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF2,
	0x2CF9,
	0x2D26,
	0x2D30,
	0x2D66,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E32,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FCC,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA674,
	0xA67C,
	0xA698,
	0xA6A0,
	0xA6F8,
	0xA700,
	0xA78F,
	0xA790,
	0xA792,
	0xA7A0,
	0xA7AA,
	0xA7FA,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FC,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA7C,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAE0,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA2E,
	0xFA30,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE27,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018B,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x10860,
	0x10900,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10A80,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10C00,
	0x10C49,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x11080,
	0x110C2,
	0x12000,
	0x1236F,
	0x12400,
	0x12463,
	0x12470,
	0x12474,
	0x13000,
	0x1342F,
	0x16800,
	0x16A39,
	0x1B000,
	0x1B002,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1DE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0BF,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0E0,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F321,
	0x1F330,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F380,
	0x1F394,
	0x1F3A0,
	0x1F3C5,
	0x1F3C6,
	0x1F3CB,
	0x1F3E0,
	0x1F3F1,
	0x1F400,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4F8,
	0x1F4F9,
	0x1F4FD,
	0x1F500,
	0x1F53E,
	0x1F550,
	0x1F568,
	0x1F5FB,
	0x1F600,
	0x1F601,
	0x1F611,
	0x1F612,
	0x1F615,
	0x1F616,
	0x1F617,
	0x1F618,
	0x1F619,
	0x1F61A,
	0x1F61B,
	0x1F61C,
	0x1F61F,
	0x1F620,
	0x1F626,
	0x1F628,
	0x1F62C,
	0x1F62D,
	0x1F62E,
	0x1F630,
	0x1F634,
	0x1F635,
	0x1F641,
	0x1F645,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F700,
	0x1F774,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__6_DOT_1_invlist[] = { /* for all charsets */
	1098,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x528,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58F,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x605,
	0x606,
	0x61C,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8A1,
	0x8A2,
	0x8AD,
	0x8E4,
	0x8FF,
	0x900,
	0x978,
	0x979,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5A,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD60,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F5,
	0x1400,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1D00,
	0x1DE7,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x206A,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BA,
	0x20D0,
	0x20F1,
	0x2100,
	0x218A,
	0x2190,
	0x23F4,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2700,
	0x2701,
	0x2B4D,
	0x2B50,
	0x2B5A,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E3C,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FCD,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA698,
	0xA69F,
	0xA6F8,
	0xA700,
	0xA78F,
	0xA790,
	0xA794,
	0xA7A0,
	0xA7AB,
	0xA7F8,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FC,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA7C,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE27,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018B,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x10860,
	0x10900,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10A80,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10C00,
	0x10C49,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x11080,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11180,
	0x111C9,
	0x111D0,
	0x111DA,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x12000,
	0x1236F,
	0x12400,
	0x12463,
	0x12470,
	0x12474,
	0x13000,
	0x1342F,
	0x16800,
	0x16A39,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1DE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0BF,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0E0,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F321,
	0x1F330,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F380,
	0x1F394,
	0x1F3A0,
	0x1F3C5,
	0x1F3C6,
	0x1F3CB,
	0x1F3E0,
	0x1F3F1,
	0x1F400,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4F8,
	0x1F4F9,
	0x1F4FD,
	0x1F500,
	0x1F53E,
	0x1F540,
	0x1F544,
	0x1F550,
	0x1F568,
	0x1F5FB,
	0x1F641,
	0x1F645,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F700,
	0x1F774,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__6_DOT_2_invlist[] = { /* for all charsets */
	1098,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x528,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58F,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x605,
	0x606,
	0x61C,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8A1,
	0x8A2,
	0x8AD,
	0x8E4,
	0x8FF,
	0x900,
	0x978,
	0x979,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5A,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD60,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F5,
	0x1400,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1D00,
	0x1DE7,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x206A,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BB,
	0x20D0,
	0x20F1,
	0x2100,
	0x218A,
	0x2190,
	0x23F4,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2700,
	0x2701,
	0x2B4D,
	0x2B50,
	0x2B5A,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E3C,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FCD,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA698,
	0xA69F,
	0xA6F8,
	0xA700,
	0xA78F,
	0xA790,
	0xA794,
	0xA7A0,
	0xA7AB,
	0xA7F8,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FC,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA7C,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE27,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018B,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x10860,
	0x10900,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10A80,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10C00,
	0x10C49,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x11080,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11180,
	0x111C9,
	0x111D0,
	0x111DA,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x12000,
	0x1236F,
	0x12400,
	0x12463,
	0x12470,
	0x12474,
	0x13000,
	0x1342F,
	0x16800,
	0x16A39,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1DE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0BF,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0E0,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F321,
	0x1F330,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F380,
	0x1F394,
	0x1F3A0,
	0x1F3C5,
	0x1F3C6,
	0x1F3CB,
	0x1F3E0,
	0x1F3F1,
	0x1F400,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4F8,
	0x1F4F9,
	0x1F4FD,
	0x1F500,
	0x1F53E,
	0x1F540,
	0x1F544,
	0x1F550,
	0x1F568,
	0x1F5FB,
	0x1F641,
	0x1F645,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F700,
	0x1F774,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__6_DOT_3_invlist[] = { /* for all charsets */
	1098,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x528,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58F,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x605,
	0x606,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8A1,
	0x8A2,
	0x8AD,
	0x8E4,
	0x8FF,
	0x900,
	0x978,
	0x979,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC34,
	0xC35,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5A,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC82,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD60,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F5,
	0x1400,
	0x169D,
	0x16A0,
	0x16F1,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191D,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1D00,
	0x1DE7,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BB,
	0x20D0,
	0x20F1,
	0x2100,
	0x218A,
	0x2190,
	0x23F4,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2700,
	0x2701,
	0x2B4D,
	0x2B50,
	0x2B5A,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E3C,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FCD,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA698,
	0xA69F,
	0xA6F8,
	0xA700,
	0xA78F,
	0xA790,
	0xA794,
	0xA7A0,
	0xA7AB,
	0xA7F8,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FC,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA7C,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE27,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018B,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x1031F,
	0x10320,
	0x10324,
	0x10330,
	0x1034B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x10860,
	0x10900,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10A80,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10C00,
	0x10C49,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x11080,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11180,
	0x111C9,
	0x111D0,
	0x111DA,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x12000,
	0x1236F,
	0x12400,
	0x12463,
	0x12470,
	0x12474,
	0x13000,
	0x1342F,
	0x16800,
	0x16A39,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1DE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0BF,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0E0,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F321,
	0x1F330,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F380,
	0x1F394,
	0x1F3A0,
	0x1F3C5,
	0x1F3C6,
	0x1F3CB,
	0x1F3E0,
	0x1F3F1,
	0x1F400,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4F8,
	0x1F4F9,
	0x1F4FD,
	0x1F500,
	0x1F53E,
	0x1F540,
	0x1F544,
	0x1F550,
	0x1F568,
	0x1F5FB,
	0x1F641,
	0x1F645,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F700,
	0x1F774,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__7_invlist[] = { /* for all charsets */
	1220,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8B3,
	0x8E4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5A,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD60,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F5,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BE,
	0x20D0,
	0x20F1,
	0x2100,
	0x218A,
	0x2190,
	0x23FB,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FCD,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA69E,
	0xA69F,
	0xA6F8,
	0xA700,
	0xA78F,
	0xA790,
	0xA7AE,
	0xA7B0,
	0xA7B2,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FC,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB60,
	0xAB64,
	0xAB66,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE2E,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x10900,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111C9,
	0x111CD,
	0x111CE,
	0x111D0,
	0x111DB,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123E,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11301,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115CA,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x12399,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x13000,
	0x1342F,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1DE,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F32D,
	0x1F330,
	0x1F37E,
	0x1F380,
	0x1F3CF,
	0x1F3D4,
	0x1F3F8,
	0x1F400,
	0x1F4FF,
	0x1F500,
	0x1F54B,
	0x1F550,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F643,
	0x1F645,
	0x1F6D0,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__8_invlist[] = { /* for all charsets */
	1246,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8B5,
	0x8E3,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD76,
	0xD79,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFC,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x23FB,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E43,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AE,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018D,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F19B,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23B,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F57A,
	0x1F57B,
	0x1F5A4,
	0x1F5A5,
	0x1F6D1,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F4,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F910,
	0x1F919,
	0x1F980,
	0x1F985,
	0x1F9C0,
	0x1F9C1,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_IN__9_invlist[] = { /* for all charsets */
	1296,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FC,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD01,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x1D00,
	0x1DF6,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20BF,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x23FF,
	0x2400,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E45,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312E,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FD6,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDD0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x10330,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE1,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B002,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F6D3,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F7,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F910,
	0x1F91F,
	0x1F920,
	0x1F928,
	0x1F930,
	0x1F931,
	0x1F933,
	0x1F93F,
	0x1F940,
	0x1F94C,
	0x1F950,
	0x1F95F,
	0x1F980,
	0x1F992,
	0x1F9C0,
	0x1F9C1,
	0x1FFFE,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2F800,
	0x2FA1E,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xEFFFE,
	0x110000
};

static const UV PL_INADLAM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E900,
	0x1E960
};

static const UV PL_INAHOM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11700,
	0x11740
};

static const UV PL_INANATOLIANHIEROGLYPHS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x14400,
	0x14680
};

static const UV PL_INARABIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x600,
	0x700
};

static const UV PL_INARMENIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x530,
	0x590
};

static const UV PL_INAVESTAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B00,
	0x10B40
};

static const UV PL_INBALINESE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B00,
	0x1B80
};

static const UV PL_INBAMUM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA6A0,
	0xA700
};

static const UV PL_INBASSAVAH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16AD0,
	0x16B00
};

static const UV PL_INBATAK_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BC0,
	0x1C00
};

static const UV PL_INBENGALI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x980,
	0xA00
};

static const UV PL_INBHAIKSUKI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11C00,
	0x11C70
};

static const UV PL_INBOPOMOFO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3100,
	0x3130
};

static const UV PL_INBRAHMI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11000,
	0x11080
};

static const UV PL_INBUGINESE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1A00,
	0x1A20
};

static const UV PL_INBUHID_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1740,
	0x1760
};

static const UV PL_INCARIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x102A0,
	0x102E0
};

static const UV PL_INCAUCASIANALBANIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10530,
	0x10570
};

static const UV PL_INCHAKMA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11100,
	0x11150
};

static const UV PL_INCHAM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA00,
	0xAA60
};

static const UV PL_INCHEROKEE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x13A0,
	0x1400
};

static const UV PL_INCOPTIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C80,
	0x2D00
};

static const UV PL_INCUNEIFORM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x12000,
	0x12400
};

static const UV PL_INCYRILLIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x400,
	0x500
};

static const UV PL_INDEVANAGARI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x900,
	0x980
};

static const UV PL_INDICNUMBERFORMS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA830,
	0xA840
};

static const UV PL_INDUPLOYAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BC00,
	0x1BCA0
};

static const UV PL_INEGYPTIANHIEROGLYPHS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x13000,
	0x13430
};

static const UV PL_INELBASAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10500,
	0x10530
};

static const UV PL_INETHIOPIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1200,
	0x1380
};

static const UV PL_INGEORGIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10A0,
	0x1100
};

static const UV PL_INGLAGOLITIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C00,
	0x2C60
};

static const UV PL_INGOTHIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10330,
	0x10350
};

static const UV PL_INGRANTHA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11300,
	0x11380
};

static const UV PL_INGREEK_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x370,
	0x400
};

static const UV PL_INGUJARATI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA80,
	0xB00
};

static const UV PL_INGURMUKHI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA00,
	0xA80
};

static const UV PL_INHANGUL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAC00,
	0xD7B0
};

static const UV PL_INHANUNOO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1720,
	0x1740
};

static const UV PL_INHATRAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x108E0,
	0x10900
};

static const UV PL_INHEBREW_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x590,
	0x600
};

static const UV PL_INHIRAGANA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3040,
	0x30A0
};

static const UV PL_INIDC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2FF0,
	0x3000
};

static const UV PL_INIMPERIALARAMAIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10840,
	0x10860
};

static const UV PL_ININSCRIPTIONALPAHLAVI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B60,
	0x10B80
};

static const UV PL_ININSCRIPTIONALPARTHIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B40,
	0x10B60
};

static const UV PL_INJAVANESE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA980,
	0xA9E0
};

static const UV PL_INKAITHI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11080,
	0x110D0
};

static const UV PL_INKANNADA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC80,
	0xD00
};

static const UV PL_INKATAKANA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30A0,
	0x3100
};

static const UV PL_INKHAROSHTHI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10A00,
	0x10A60
};

static const UV PL_INKHMER_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1780,
	0x1800
};

static const UV PL_INKHOJKI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11200,
	0x11250
};

static const UV PL_INKHUDAWADI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x112B0,
	0x11300
};

static const UV PL_INLAO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE80,
	0xF00
};

static const UV PL_INLEPCHA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1C00,
	0x1C50
};

static const UV PL_INLIMBU_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1900,
	0x1950
};

static const UV PL_INLINEARA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10600,
	0x10780
};

static const UV PL_INLYCIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10280,
	0x102A0
};

static const UV PL_INLYDIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10920,
	0x10940
};

static const UV PL_INMAHAJANI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11150,
	0x11180
};

static const UV PL_INMALAYALAM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD00,
	0xD80
};

static const UV PL_INMANDAIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x840,
	0x860
};

static const UV PL_INMANICHAEAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AC0,
	0x10B00
};

static const UV PL_INMARCHEN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11C70,
	0x11CC0
};

static const UV PL_INMASARAMGONDI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11D00,
	0x11D60
};

static const UV PL_INMEETEIMAYEK_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xABC0,
	0xAC00
};

static const UV PL_INMENDEKIKAKUI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E800,
	0x1E8E0
};

static const UV PL_INMEROITICCURSIVE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109A0,
	0x10A00
};

static const UV PL_INMIAO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16F00,
	0x16FA0
};

static const UV PL_INMODI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11600,
	0x11660
};

static const UV PL_INMONGOLIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1800,
	0x18B0
};

static const UV PL_INMRO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16A40,
	0x16A70
};

static const UV PL_INMULTANI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11280,
	0x112B0
};

static const UV PL_INMYANMAR_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1000,
	0x10A0
};

static const UV PL_INNABATAEAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10880,
	0x108B0
};

static const UV PL_INNEWA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11400,
	0x11480
};

static const UV PL_INNEWTAILUE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1980,
	0x19E0
};

static const UV PL_INNKO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7C0,
	0x800
};

static const UV PL_INNUSHU_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B170,
	0x1B300
};

static const UV PL_INOGHAM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1680,
	0x16A0
};

static const UV PL_INOLDHUNGARIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10C80,
	0x10D00
};

static const UV PL_INOLDITALIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10300,
	0x10330
};

static const UV PL_INOLDPERMIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10350,
	0x10380
};

static const UV PL_INOLDPERSIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x103A0,
	0x103E0
};

static const UV PL_INOLDTURKIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10C00,
	0x10C50
};

static const UV PL_INORIYA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB00,
	0xB80
};

static const UV PL_INOSAGE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x104B0,
	0x10500
};

static const UV PL_INOSMANYA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10480,
	0x104B0
};

static const UV PL_INPAHAWHHMONG_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16B00,
	0x16B90
};

static const UV PL_INPAUCINHAU_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11AC0,
	0x11B00
};

static const UV PL_INPC__BOTTOM_invlist[] = { /* for all charsets */
	265,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93C,
	0x93D,
	0x941,
	0x945,
	0x94D,
	0x94E,
	0x952,
	0x953,
	0x956,
	0x958,
	0x962,
	0x964,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA4D,
	0xA4E,
	0xA75,
	0xA76,
	0xABC,
	0xABD,
	0xAC1,
	0xAC5,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xB3C,
	0xB3D,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB62,
	0xB64,
	0xC56,
	0xC57,
	0xC62,
	0xC64,
	0xCBC,
	0xCBD,
	0xCE2,
	0xCE4,
	0xD43,
	0xD45,
	0xD62,
	0xD64,
	0xDD4,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE38,
	0xE3B,
	0xEB8,
	0xEBA,
	0xEBC,
	0xEBD,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF71,
	0xF72,
	0xF74,
	0xF76,
	0xF84,
	0xF85,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102F,
	0x1031,
	0x1037,
	0x1038,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1082,
	0x1083,
	0x108D,
	0x108E,
	0x1713,
	0x1715,
	0x1733,
	0x1735,
	0x1753,
	0x1754,
	0x1773,
	0x1774,
	0x17BB,
	0x17BE,
	0x1922,
	0x1923,
	0x1932,
	0x1933,
	0x1939,
	0x193A,
	0x193B,
	0x193C,
	0x1A18,
	0x1A19,
	0x1A56,
	0x1A57,
	0x1A5B,
	0x1A5F,
	0x1A69,
	0x1A6B,
	0x1A6C,
	0x1A6D,
	0x1A7F,
	0x1A80,
	0x1B38,
	0x1B3B,
	0x1B6C,
	0x1B6D,
	0x1BA2,
	0x1BA4,
	0x1BA5,
	0x1BA6,
	0x1BAC,
	0x1BAE,
	0x1C2C,
	0x1C2D,
	0x1C37,
	0x1C38,
	0x1CD5,
	0x1CDA,
	0x1CDC,
	0x1CE0,
	0x1CED,
	0x1CEE,
	0xA825,
	0xA826,
	0xA8C4,
	0xA8C5,
	0xA92B,
	0xA92E,
	0xA947,
	0xA94A,
	0xA94B,
	0xA94F,
	0xA9B8,
	0xA9BA,
	0xAA2D,
	0xAA2E,
	0xAA32,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAAB4,
	0xAAB5,
	0xAAEC,
	0xAAED,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0x10A02,
	0x10A04,
	0x10A0C,
	0x10A0F,
	0x10A39,
	0x10A3B,
	0x1103C,
	0x11042,
	0x110B3,
	0x110B5,
	0x110B9,
	0x110BB,
	0x1112A,
	0x1112C,
	0x11131,
	0x11133,
	0x11173,
	0x11174,
	0x111B6,
	0x111BC,
	0x111CC,
	0x111CD,
	0x1122F,
	0x11230,
	0x112E3,
	0x112E5,
	0x112E9,
	0x112EB,
	0x11438,
	0x1143E,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x11639,
	0x1163F,
	0x11640,
	0x116B0,
	0x116B2,
	0x116B7,
	0x116B8,
	0x1171D,
	0x1171E,
	0x11724,
	0x11726,
	0x11728,
	0x11729,
	0x11A02,
	0x11A04,
	0x11A0A,
	0x11A0B,
	0x11A33,
	0x11A35,
	0x11A3B,
	0x11A3F,
	0x11A52,
	0x11A54,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A96,
	0x11C32,
	0x11C37,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB3,
	0x11D36,
	0x11D37,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D45,
	0x11D47,
	0x11D48
};

static const UV PL_INPC__BOTTOMANDLEFT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA9BF,
	0xA9C0
};

static const UV PL_INPC__BOTTOMANDRIGHT_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B3B,
	0x1B3C,
	0xA9C0,
	0xA9C1
};

static const UV PL_INPC__LEFT_invlist[] = { /* for all charsets */
	81,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93F,
	0x940,
	0x94E,
	0x94F,
	0x9BF,
	0x9C0,
	0x9C7,
	0x9C9,
	0xA3F,
	0xA40,
	0xABF,
	0xAC0,
	0xB47,
	0xB48,
	0xBC6,
	0xBC9,
	0xD46,
	0xD49,
	0xDD9,
	0xDDA,
	0xDDB,
	0xDDC,
	0xF3F,
	0xF40,
	0x1031,
	0x1032,
	0x1084,
	0x1085,
	0x17C1,
	0x17C4,
	0x1A19,
	0x1A1A,
	0x1A55,
	0x1A56,
	0x1A6E,
	0x1A73,
	0x1B3E,
	0x1B40,
	0x1BA6,
	0x1BA7,
	0x1C27,
	0x1C29,
	0x1C34,
	0x1C36,
	0xA9BA,
	0xA9BC,
	0xAA2F,
	0xAA31,
	0xAA34,
	0xAA35,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAEF,
	0x110B1,
	0x110B2,
	0x1112C,
	0x1112D,
	0x111B4,
	0x111B5,
	0x112E1,
	0x112E2,
	0x11347,
	0x11349,
	0x11436,
	0x11437,
	0x114B1,
	0x114B2,
	0x114B9,
	0x114BA,
	0x115B0,
	0x115B1,
	0x115B8,
	0x115B9,
	0x116AE,
	0x116AF,
	0x11726,
	0x11727,
	0x11CB1,
	0x11CB2
};

static const UV PL_INPC__LEFTANDRIGHT_invlist[] = { /* for all charsets */
	27,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9CB,
	0x9CD,
	0xB4B,
	0xB4C,
	0xBCA,
	0xBCD,
	0xD4A,
	0xD4D,
	0xDDC,
	0xDDD,
	0xDDE,
	0xDDF,
	0x17C0,
	0x17C1,
	0x17C4,
	0x17C6,
	0x1B40,
	0x1B42,
	0x1134B,
	0x1134D,
	0x114BC,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BB
};

static const UV PL_INPC__NA_invlist[] = { /* for all charsets */
	383,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x900,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE30,
	0xE3B,
	0xE40,
	0xE46,
	0xE47,
	0xE4F,
	0xEB0,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC0,
	0xEC5,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x1039,
	0x103A,
	0x103C,
	0x103D,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B6,
	0x17D2,
	0x17D3,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x19B0,
	0x19C1,
	0x19C8,
	0x19CA,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A61,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAB,
	0x1BAC,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CF8,
	0x1DFB,
	0x1DFC,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA92B,
	0xA92E,
	0xA947,
	0xA954,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11080,
	0x11083,
	0x110B0,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x11133,
	0x11134,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111CB,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11301,
	0x11304,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x1171D,
	0x1171E,
	0x1171F,
	0x1172C,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A99,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D45,
	0x11D47,
	0x11D48
};

static const UV PL_INPC__OVERSTRUCK_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1CD4,
	0x1CD5,
	0x1CE2,
	0x1CE9,
	0x10A01,
	0x10A02,
	0x10A06,
	0x10A07
};

static const UV PL_INPC__RIGHT_invlist[] = { /* for all charsets */
	301,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x903,
	0x904,
	0x93B,
	0x93C,
	0x93E,
	0x93F,
	0x940,
	0x941,
	0x949,
	0x94D,
	0x94F,
	0x950,
	0x982,
	0x984,
	0x9BE,
	0x9BF,
	0x9C0,
	0x9C1,
	0x9D7,
	0x9D8,
	0xA03,
	0xA04,
	0xA3E,
	0xA3F,
	0xA40,
	0xA41,
	0xA83,
	0xA84,
	0xABE,
	0xABF,
	0xAC0,
	0xAC1,
	0xACB,
	0xACD,
	0xB02,
	0xB04,
	0xB3E,
	0xB3F,
	0xB40,
	0xB41,
	0xBBE,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBD7,
	0xBD8,
	0xC01,
	0xC04,
	0xC41,
	0xC45,
	0xC82,
	0xC84,
	0xCBE,
	0xCBF,
	0xCC1,
	0xCC5,
	0xCD5,
	0xCD7,
	0xD02,
	0xD04,
	0xD3E,
	0xD43,
	0xD57,
	0xD58,
	0xD82,
	0xD84,
	0xDCF,
	0xDD2,
	0xDD8,
	0xDD9,
	0xDDF,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE30,
	0xE31,
	0xE32,
	0xE34,
	0xE45,
	0xE46,
	0xEB0,
	0xEB1,
	0xEB2,
	0xEB4,
	0xF3E,
	0xF3F,
	0xF7F,
	0xF80,
	0x102B,
	0x102D,
	0x1038,
	0x1039,
	0x103B,
	0x103C,
	0x1056,
	0x1058,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1083,
	0x1084,
	0x1087,
	0x108D,
	0x108F,
	0x1090,
	0x109A,
	0x109D,
	0x17B6,
	0x17B7,
	0x17C7,
	0x17C9,
	0x1923,
	0x1925,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x19B0,
	0x19B5,
	0x19B8,
	0x19BA,
	0x19BB,
	0x19C1,
	0x19C8,
	0x19CA,
	0x1A1A,
	0x1A1B,
	0x1A57,
	0x1A58,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A6E,
	0x1B04,
	0x1B05,
	0x1B35,
	0x1B36,
	0x1B44,
	0x1B45,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA7,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C27,
	0x1C2A,
	0x1C2C,
	0x1CE1,
	0x1CE2,
	0x1CF7,
	0x1CF8,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA952,
	0xA954,
	0xA983,
	0xA984,
	0xA9B4,
	0xA9B6,
	0xA9BD,
	0xA9BF,
	0xAA33,
	0xAA34,
	0xAA4D,
	0xAA4E,
	0xAA7B,
	0xAA7C,
	0xAA7D,
	0xAA7E,
	0xAAB1,
	0xAAB2,
	0xAABA,
	0xAABB,
	0xAABD,
	0xAABE,
	0xAAEF,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11082,
	0x11083,
	0x110B0,
	0x110B1,
	0x110B2,
	0x110B3,
	0x110B7,
	0x110B9,
	0x11182,
	0x11183,
	0x111B3,
	0x111B4,
	0x111B5,
	0x111B6,
	0x111C0,
	0x111C1,
	0x1122C,
	0x1122F,
	0x11235,
	0x11236,
	0x112E0,
	0x112E1,
	0x112E2,
	0x112E3,
	0x11302,
	0x11304,
	0x1133E,
	0x11340,
	0x11341,
	0x11345,
	0x1134D,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11435,
	0x11436,
	0x11437,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x114B0,
	0x114B1,
	0x114B2,
	0x114B3,
	0x114BD,
	0x114BE,
	0x114C1,
	0x114C2,
	0x115AF,
	0x115B0,
	0x115B1,
	0x115B2,
	0x115BE,
	0x115BF,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x116AC,
	0x116AD,
	0x116AF,
	0x116B0,
	0x116B6,
	0x116B7,
	0x11720,
	0x11722,
	0x11A39,
	0x11A3A,
	0x11A57,
	0x11A59,
	0x11A97,
	0x11A98,
	0x11C2F,
	0x11C30,
	0x11C3E,
	0x11C3F,
	0x11CA9,
	0x11CAA,
	0x11CB4,
	0x11CB5
};

static const UV PL_INPC__TOP_invlist[] = { /* for all charsets */
	349,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x900,
	0x903,
	0x93A,
	0x93B,
	0x945,
	0x949,
	0x951,
	0x952,
	0x953,
	0x956,
	0x981,
	0x982,
	0xA01,
	0xA03,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xA70,
	0xA72,
	0xA81,
	0xA83,
	0xAC5,
	0xAC6,
	0xAC7,
	0xAC9,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3F,
	0xB40,
	0xB56,
	0xB57,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC48,
	0xC4A,
	0xC4E,
	0xC55,
	0xC56,
	0xC81,
	0xC82,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD4D,
	0xD4E,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD4,
	0xE31,
	0xE32,
	0xE34,
	0xE38,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEB8,
	0xEBB,
	0xEBC,
	0xEC8,
	0xECE,
	0xF39,
	0xF3A,
	0xF72,
	0xF73,
	0xF7A,
	0xF7F,
	0xF80,
	0xF81,
	0xF82,
	0xF84,
	0xF86,
	0xF88,
	0x102D,
	0x102F,
	0x1032,
	0x1037,
	0x103A,
	0x103B,
	0x1071,
	0x1075,
	0x1085,
	0x1087,
	0x109D,
	0x109E,
	0x1712,
	0x1713,
	0x1732,
	0x1733,
	0x1752,
	0x1753,
	0x1772,
	0x1773,
	0x17B7,
	0x17BB,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D2,
	0x17D3,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1920,
	0x1922,
	0x1927,
	0x1929,
	0x193A,
	0x193B,
	0x1A17,
	0x1A18,
	0x1A1B,
	0x1A1C,
	0x1A58,
	0x1A5B,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A69,
	0x1A6B,
	0x1A6C,
	0x1A73,
	0x1A7D,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B38,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B6C,
	0x1B6D,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA4,
	0x1BA5,
	0x1BA8,
	0x1BAA,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2D,
	0x1C34,
	0x1C36,
	0x1C37,
	0x1CD0,
	0x1CD3,
	0x1CDA,
	0x1CDC,
	0x1CE0,
	0x1CE1,
	0x1CF4,
	0x1CF5,
	0x1DFB,
	0x1DFC,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA826,
	0xA827,
	0xA8C5,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA94A,
	0xA94B,
	0xA94F,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9B8,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2D,
	0xAA2E,
	0xAA2F,
	0xAA31,
	0xAA32,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB4,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAED,
	0xAAEE,
	0xABE5,
	0xABE6,
	0x10A05,
	0x10A06,
	0x10A0F,
	0x10A10,
	0x10A38,
	0x10A39,
	0x11001,
	0x11002,
	0x11038,
	0x1103C,
	0x11042,
	0x11047,
	0x11080,
	0x11082,
	0x110B5,
	0x110B7,
	0x11100,
	0x11103,
	0x11127,
	0x1112A,
	0x1112D,
	0x1112E,
	0x11130,
	0x11131,
	0x11134,
	0x11135,
	0x11180,
	0x11182,
	0x111BC,
	0x111BF,
	0x111CB,
	0x111CC,
	0x11230,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E5,
	0x112E9,
	0x11301,
	0x11302,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x1143E,
	0x11440,
	0x11443,
	0x11445,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x115BC,
	0x115BE,
	0x11639,
	0x1163B,
	0x1163D,
	0x1163E,
	0x11640,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B2,
	0x116B6,
	0x1171F,
	0x11720,
	0x11722,
	0x11724,
	0x11727,
	0x11728,
	0x11729,
	0x1172C,
	0x11A01,
	0x11A02,
	0x11A04,
	0x11A0A,
	0x11A35,
	0x11A39,
	0x11A51,
	0x11A52,
	0x11A54,
	0x11A57,
	0x11A96,
	0x11A97,
	0x11A98,
	0x11A99,
	0x11C30,
	0x11C32,
	0x11C38,
	0x11C3E,
	0x11CB3,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D36,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D42,
	0x11D43,
	0x11D44
};

static const UV PL_INPC__TOPANDBOTTOM_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC48,
	0xC49,
	0xF73,
	0xF74,
	0xF76,
	0xF7A,
	0xF81,
	0xF82,
	0x1B3C,
	0x1B3D,
	0x1112E,
	0x11130
};

static const UV PL_INPC__TOPANDBOTTOMANDRIGHT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B3D,
	0x1B3E
};

static const UV PL_INPC__TOPANDLEFT_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB48,
	0xB49,
	0xDDA,
	0xDDB,
	0x17BE,
	0x17BF,
	0x1C29,
	0x1C2A,
	0x114BB,
	0x114BC,
	0x115B9,
	0x115BA
};

static const UV PL_INPC__TOPANDLEFTANDRIGHT_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB4C,
	0xB4D,
	0xDDD,
	0xDDE,
	0x17BF,
	0x17C0,
	0x115BB,
	0x115BC
};

static const UV PL_INPC__TOPANDRIGHT_invlist[] = { /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAC9,
	0xACA,
	0xB57,
	0xB58,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0x1925,
	0x1927,
	0x1B43,
	0x1B44,
	0x111BF,
	0x111C0,
	0x11232,
	0x11234
};

static const UV PL_INPHAGSPA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA840,
	0xA880
};

static const UV PL_INPHOENICIAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10900,
	0x10920
};

static const UV PL_INPSALTERPAHLAVI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B80,
	0x10BB0
};

static const UV PL_INPUNCTUATION_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2000,
	0x2070
};

static const UV PL_INREJANG_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA930,
	0xA960
};

static const UV PL_INRUNIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16A0,
	0x1700
};

static const UV PL_INSAMARITAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x800,
	0x840
};

static const UV PL_INSAURASHTRA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA880,
	0xA8E0
};

static const UV PL_INSC__AVAGRAHA_invlist[] = { /* for all charsets */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93D,
	0x93E,
	0x9BD,
	0x9BE,
	0xABD,
	0xABE,
	0xB3D,
	0xB3E,
	0xC3D,
	0xC3E,
	0xCBD,
	0xCBE,
	0xD3D,
	0xD3E,
	0xF85,
	0xF86,
	0x17DC,
	0x17DD,
	0x1BBA,
	0x1BBB,
	0x111C1,
	0x111C2,
	0x1133D,
	0x1133E,
	0x11447,
	0x11448,
	0x114C4,
	0x114C5,
	0x11C40,
	0x11C41
};

static const UV PL_INSC__BINDU_invlist[] = { /* for all charsets */
	97,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x900,
	0x903,
	0x981,
	0x983,
	0x9FC,
	0x9FD,
	0xA01,
	0xA03,
	0xA70,
	0xA71,
	0xA81,
	0xA83,
	0xB01,
	0xB03,
	0xB82,
	0xB83,
	0xC00,
	0xC03,
	0xC81,
	0xC83,
	0xD00,
	0xD03,
	0xD82,
	0xD83,
	0xE4D,
	0xE4E,
	0xECD,
	0xECE,
	0xF7E,
	0xF7F,
	0xF82,
	0xF84,
	0x1036,
	0x1037,
	0x17C6,
	0x17C7,
	0x1932,
	0x1933,
	0x1A74,
	0x1A75,
	0x1B00,
	0x1B03,
	0x1B80,
	0x1B81,
	0x1C34,
	0x1C36,
	0xA80B,
	0xA80C,
	0xA873,
	0xA874,
	0xA880,
	0xA881,
	0xA8C5,
	0xA8C6,
	0xA8F2,
	0xA8F4,
	0xA980,
	0xA982,
	0x10A0E,
	0x10A0F,
	0x11000,
	0x11002,
	0x11080,
	0x11082,
	0x11100,
	0x11102,
	0x11180,
	0x11182,
	0x11234,
	0x11235,
	0x112DF,
	0x112E0,
	0x11300,
	0x11303,
	0x1135E,
	0x11360,
	0x11443,
	0x11445,
	0x114BF,
	0x114C1,
	0x115BC,
	0x115BE,
	0x1163D,
	0x1163E,
	0x116AB,
	0x116AC,
	0x11A35,
	0x11A39,
	0x11A96,
	0x11A97,
	0x11C3C,
	0x11C3E,
	0x11CB5,
	0x11CB7,
	0x11D40,
	0x11D41
};

static const UV PL_INSC__BRAHMIJOININGNUMBER_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11052,
	0x11066
};

static const UV PL_INSC__CANTILLATIONMARK_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0xAFA,
	0xAFD,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE2,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0xA8E0,
	0xA8F2,
	0x1123E,
	0x1123F,
	0x11366,
	0x1136D,
	0x11370,
	0x11375
};

static const UV PL_INSC__CONSONANT_invlist[] = { /* for all charsets */
	299,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x915,
	0x93A,
	0x958,
	0x960,
	0x978,
	0x980,
	0x995,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0x9F0,
	0x9F2,
	0xA15,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA95,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xAF9,
	0xAFA,
	0xB15,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB60,
	0xB71,
	0xB72,
	0xB95,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xC15,
	0xC29,
	0xC2A,
	0xC3A,
	0xC58,
	0xC5B,
	0xC95,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCDE,
	0xCDF,
	0xD15,
	0xD3B,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE2F,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEAF,
	0xEDC,
	0xEE0,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0x1000,
	0x1021,
	0x103F,
	0x1040,
	0x1050,
	0x1052,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1703,
	0x170D,
	0x170E,
	0x1712,
	0x1723,
	0x1732,
	0x1743,
	0x1752,
	0x1763,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17A3,
	0x1901,
	0x191F,
	0x1950,
	0x1963,
	0x1980,
	0x19AC,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A4D,
	0x1A53,
	0x1A55,
	0x1B13,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B8A,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBB,
	0x1BBE,
	0x1BC0,
	0x1BE4,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA85E,
	0xA862,
	0xA866,
	0xA869,
	0xA871,
	0xA872,
	0xA873,
	0xA892,
	0xA8B4,
	0xA90A,
	0xA922,
	0xA930,
	0xA947,
	0xA989,
	0xA98C,
	0xA98F,
	0xA9B3,
	0xA9E0,
	0xA9E5,
	0xA9E7,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA06,
	0xAA29,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA74,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAE2,
	0xAAEB,
	0xABC0,
	0xABCE,
	0xABD0,
	0xABD1,
	0xABD2,
	0xABDB,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x11013,
	0x11038,
	0x1108D,
	0x110B0,
	0x11107,
	0x11127,
	0x11155,
	0x11173,
	0x11191,
	0x111B3,
	0x11208,
	0x11212,
	0x11213,
	0x1122C,
	0x11284,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112BA,
	0x112DF,
	0x11315,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1140E,
	0x11435,
	0x1148F,
	0x114B0,
	0x1158E,
	0x115AF,
	0x1160E,
	0x11630,
	0x1168A,
	0x116AB,
	0x11700,
	0x1171A,
	0x11A0B,
	0x11A33,
	0x11A5C,
	0x11A84,
	0x11C0E,
	0x11C2F,
	0x11C72,
	0x11C90,
	0x11D0C,
	0x11D31
};

static const UV PL_INSC__CONSONANTDEAD_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9CE,
	0x9CF,
	0xD54,
	0xD57,
	0xD7A,
	0xD80
};

static const UV PL_INSC__CONSONANTFINAL_invlist[] = { /* for all charsets */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1930,
	0x1932,
	0x1933,
	0x193A,
	0x19C1,
	0x19C8,
	0x1A58,
	0x1A5A,
	0x1BBE,
	0x1BC0,
	0x1BF0,
	0x1BF2,
	0x1C2D,
	0x1C34,
	0xA8B4,
	0xA8B5,
	0xA94F,
	0xA953,
	0xAA40,
	0xAA4E,
	0xABDB,
	0xABE3,
	0x11A8A,
	0x11A96
};

static const UV PL_INSC__CONSONANTHEADLETTER_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF88,
	0xF8D
};

static const UV PL_INSC__CONSONANTKILLER_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE4C,
	0xE4D,
	0x17CD,
	0x17CE
};

static const UV PL_INSC__CONSONANTMEDIAL_invlist[] = { /* for all charsets */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA75,
	0xA76,
	0xEBC,
	0xEBE,
	0x103B,
	0x103F,
	0x105E,
	0x1061,
	0x1082,
	0x1083,
	0x1A55,
	0x1A57,
	0xA9BE,
	0xA9C0,
	0xAA33,
	0xAA37,
	0x1171D,
	0x11720,
	0x11A3B,
	0x11A3F,
	0x11D47,
	0x11D48
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_INSC__CONSONANTPLACEHOLDER_invlist[] = { /* for ASCII/Latin1 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0xA0,
	0xA1,
	0xD7,
	0xD8,
	0xA72,
	0xA74,
	0x104E,
	0x104F,
	0x1900,
	0x1901,
	0x2010,
	0x2015,
	0x25CC,
	0x25CD,
	0xAA74,
	0xAA77,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_INSC__CONSONANTPLACEHOLDER_invlist[] = { /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x60,
	0x61,
	0xBF,
	0xC0,
	0xA72,
	0xA74,
	0x104E,
	0x104F,
	0x1900,
	0x1901,
	0x2010,
	0x2015,
	0x25CC,
	0x25CD,
	0xAA74,
	0xAA77,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_INSC__CONSONANTPLACEHOLDER_invlist[] = { /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x60,
	0x61,
	0xBF,
	0xC0,
	0xA72,
	0xA74,
	0x104E,
	0x104F,
	0x1900,
	0x1901,
	0x2010,
	0x2015,
	0x25CC,
	0x25CD,
	0xAA74,
	0xAA77,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46
};

#   endif	/* EBCDIC 037 */

static const UV PL_INSC__CONSONANTPRECEDINGREPHA_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD4E,
	0xD4F,
	0x11D46,
	0x11D47
};

static const UV PL_INSC__CONSONANTPREFIXED_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x111C2,
	0x111C4,
	0x11A3A,
	0x11A3B,
	0x11A86,
	0x11A8A
};

static const UV PL_INSC__CONSONANTSUBJOINED_invlist[] = { /* for all charsets */
	27,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0x1929,
	0x192C,
	0x1A57,
	0x1A58,
	0x1A5B,
	0x1A5F,
	0x1BA1,
	0x1BA4,
	0x1BAC,
	0x1BAE,
	0x1C24,
	0x1C26,
	0xA867,
	0xA869,
	0xA871,
	0xA872,
	0xA9BD,
	0xA9BE,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB0
};

static const UV PL_INSC__CONSONANTSUCCEEDINGREPHA_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x17CC,
	0x17CD,
	0x1A5A,
	0x1A5B,
	0x1B03,
	0x1B04,
	0x1B81,
	0x1B82,
	0xA982,
	0xA983
};

static const UV PL_INSC__CONSONANTWITHSTACKER_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCF1,
	0xCF3,
	0x11003,
	0x11005
};

static const UV PL_INSC__GEMINATIONMARK_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA71,
	0xA72,
	0x11237,
	0x11238,
	0x11A98,
	0x11A99
};

static const UV PL_INSC__INVISIBLESTACKER_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1039,
	0x103A,
	0x17D2,
	0x17D3,
	0x1A60,
	0x1A61,
	0x1BAB,
	0x1BAC,
	0xAAF6,
	0xAAF7,
	0x10A3F,
	0x10A40,
	0x11133,
	0x11134,
	0x11A47,
	0x11A48,
	0x11A99,
	0x11A9A,
	0x11D45,
	0x11D46
};

static const UV PL_INSC__MODIFYINGLETTER_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB83,
	0xB84
};

static const UV PL_INSC__NONJOINER_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x200C,
	0x200D
};

static const UV PL_INSC__NUKTA_invlist[] = { /* for all charsets */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93C,
	0x93D,
	0x9BC,
	0x9BD,
	0xA3C,
	0xA3D,
	0xABC,
	0xABD,
	0xAFD,
	0xB00,
	0xB3C,
	0xB3D,
	0xCBC,
	0xCBD,
	0xF39,
	0xF3A,
	0x1B34,
	0x1B35,
	0x1BE6,
	0x1BE7,
	0x1C37,
	0x1C38,
	0xA9B3,
	0xA9B4,
	0x10A38,
	0x10A3B,
	0x110BA,
	0x110BB,
	0x11173,
	0x11174,
	0x111CA,
	0x111CB,
	0x11236,
	0x11237,
	0x112E9,
	0x112EA,
	0x1133C,
	0x1133D,
	0x11446,
	0x11447,
	0x114C3,
	0x114C4,
	0x115C0,
	0x115C1,
	0x116B7,
	0x116B8,
	0x11D42,
	0x11D43
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_INSC__NUMBER_invlist[] = { /* for ASCII/Latin1 */
	87,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x10A40,
	0x10A48,
	0x11066,
	0x11070,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_INSC__NUMBER_invlist[] = { /* for EBCDIC 1047 */
	87,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x10A40,
	0x10A48,
	0x11066,
	0x11070,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_INSC__NUMBER_invlist[] = { /* for EBCDIC 037 */
	87,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x10A40,
	0x10A48,
	0x11066,
	0x11070,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A
};

#   endif	/* EBCDIC 037 */

static const UV PL_INSC__NUMBERJOINER_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1107F,
	0x11080
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_INSC__OTHER_invlist[] = { /* for ASCII/Latin1 */
	613,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0x30,
	0x3A,
	0xA0,
	0xA1,
	0xB2,
	0xB4,
	0xD7,
	0xD8,
	0x900,
	0x950,
	0x951,
	0x953,
	0x955,
	0x964,
	0x966,
	0x970,
	0x972,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA74,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE2F,
	0xE30,
	0xE3B,
	0xE40,
	0xE46,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEAF,
	0xEB0,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC8,
	0xECC,
	0xECD,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF86,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x104E,
	0x104F,
	0x1050,
	0x109E,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17D4,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE2,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DFB,
	0x1DFC,
	0x200C,
	0x200E,
	0x2010,
	0x2015,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x25CC,
	0x25CD,
	0xA800,
	0xA802,
	0xA803,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F4,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA980,
	0xA9C1,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E6,
	0xA9E7,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAAE0,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABC0,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x11000,
	0x11047,
	0x11052,
	0x11070,
	0x1107F,
	0x110BB,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11180,
	0x111C4,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x1135E,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11448,
	0x11450,
	0x1145A,
	0x11481,
	0x114C5,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173C,
	0x11A00,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C6D,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_INSC__OTHER_invlist[] = { /* for EBCDIC 1047 */
	613,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x60,
	0x61,
	0xBF,
	0xC0,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0x900,
	0x950,
	0x951,
	0x953,
	0x955,
	0x964,
	0x966,
	0x970,
	0x972,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA74,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE2F,
	0xE30,
	0xE3B,
	0xE40,
	0xE46,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEAF,
	0xEB0,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC8,
	0xECC,
	0xECD,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF86,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x104E,
	0x104F,
	0x1050,
	0x109E,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17D4,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE2,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DFB,
	0x1DFC,
	0x200C,
	0x200E,
	0x2010,
	0x2015,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x25CC,
	0x25CD,
	0xA800,
	0xA802,
	0xA803,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F4,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA980,
	0xA9C1,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E6,
	0xA9E7,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAAE0,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABC0,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x11000,
	0x11047,
	0x11052,
	0x11070,
	0x1107F,
	0x110BB,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11180,
	0x111C4,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x1135E,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11448,
	0x11450,
	0x1145A,
	0x11481,
	0x114C5,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173C,
	0x11A00,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C6D,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_INSC__OTHER_invlist[] = { /* for EBCDIC 037 */
	613,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x60,
	0x61,
	0xBF,
	0xC0,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0x900,
	0x950,
	0x951,
	0x953,
	0x955,
	0x964,
	0x966,
	0x970,
	0x972,
	0x980,
	0x981,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA74,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC81,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE2F,
	0xE30,
	0xE3B,
	0xE40,
	0xE46,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEAF,
	0xEB0,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC8,
	0xECC,
	0xECD,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF86,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x104E,
	0x104F,
	0x1050,
	0x109E,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17D4,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE2,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DFB,
	0x1DFC,
	0x200C,
	0x200E,
	0x2010,
	0x2015,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x25CC,
	0x25CD,
	0xA800,
	0xA802,
	0xA803,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F4,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA980,
	0xA9C1,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E6,
	0xA9E7,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAAE0,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABC0,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x11000,
	0x11047,
	0x11052,
	0x11070,
	0x1107F,
	0x110BB,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11180,
	0x111C4,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x1135E,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11448,
	0x11450,
	0x1145A,
	0x11481,
	0x114C5,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173C,
	0x11A00,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C6D,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A
};

#   endif	/* EBCDIC 037 */

static const UV PL_INSC__PUREKILLER_invlist[] = { /* for all charsets */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD3B,
	0xD3D,
	0xE3A,
	0xE3B,
	0xE4E,
	0xE4F,
	0xF84,
	0xF85,
	0x103A,
	0x103B,
	0x1714,
	0x1715,
	0x1734,
	0x1735,
	0x17D1,
	0x17D2,
	0x1A7A,
	0x1A7B,
	0x1BAA,
	0x1BAB,
	0x1BF2,
	0x1BF4,
	0xA806,
	0xA807,
	0xA953,
	0xA954,
	0xABED,
	0xABEE,
	0x11134,
	0x11135,
	0x112EA,
	0x112EB,
	0x1172B,
	0x1172C,
	0x11A34,
	0x11A35,
	0x11D44,
	0x11D45
};

static const UV PL_INSC__REGISTERSHIFTER_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x17C9,
	0x17CB
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_INSC__SYLLABLEMODIFIER_invlist[] = { /* for ASCII/Latin1 */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB2,
	0xB4,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xFC6,
	0xFC7,
	0x17CB,
	0x17CC,
	0x17CE,
	0x17D1,
	0x17D3,
	0x17D4,
	0x17DD,
	0x17DE,
	0x193B,
	0x193C,
	0x1A7B,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1C36,
	0x1C37,
	0x1DFB,
	0x1DFC,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x11A33,
	0x11A34
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_INSC__SYLLABLEMODIFIER_invlist[] = { /* for EBCDIC 1047 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xFC6,
	0xFC7,
	0x17CB,
	0x17CC,
	0x17CE,
	0x17D1,
	0x17D3,
	0x17D4,
	0x17DD,
	0x17DE,
	0x193B,
	0x193C,
	0x1A7B,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1C36,
	0x1C37,
	0x1DFB,
	0x1DFC,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x11A33,
	0x11A34
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_INSC__SYLLABLEMODIFIER_invlist[] = { /* for EBCDIC 037 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xFC6,
	0xFC7,
	0x17CB,
	0x17CC,
	0x17CE,
	0x17D1,
	0x17D3,
	0x17D4,
	0x17DD,
	0x17DE,
	0x193B,
	0x193C,
	0x1A7B,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1C36,
	0x1C37,
	0x1DFB,
	0x1DFC,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x11A33,
	0x11A34
};

#   endif	/* EBCDIC 037 */

static const UV PL_INSC__TONELETTER_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1970,
	0x1975,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3
};

static const UV PL_INSC__TONEMARK_invlist[] = { /* for all charsets */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE48,
	0xE4C,
	0xEC8,
	0xECC,
	0x1037,
	0x1038,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x19C8,
	0x19CA,
	0x1A75,
	0x1A7A,
	0xA92B,
	0xA92E,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xABEC,
	0xABED
};

static const UV PL_INSC__VIRAMA_invlist[] = { /* for all charsets */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x94D,
	0x94E,
	0x9CD,
	0x9CE,
	0xA4D,
	0xA4E,
	0xACD,
	0xACE,
	0xB4D,
	0xB4E,
	0xBCD,
	0xBCE,
	0xC4D,
	0xC4E,
	0xCCD,
	0xCCE,
	0xD4D,
	0xD4E,
	0xDCA,
	0xDCB,
	0x1B44,
	0x1B45,
	0xA8C4,
	0xA8C5,
	0xA9C0,
	0xA9C1,
	0x11046,
	0x11047,
	0x110B9,
	0x110BA,
	0x111C0,
	0x111C1,
	0x11235,
	0x11236,
	0x1134D,
	0x1134E,
	0x11442,
	0x11443,
	0x114C2,
	0x114C3,
	0x115BF,
	0x115C0,
	0x1163F,
	0x11640,
	0x116B6,
	0x116B7,
	0x11C3F,
	0x11C40
};

static const UV PL_INSC__VISARGA_invlist[] = { /* for all charsets */
	67,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x903,
	0x904,
	0x983,
	0x984,
	0xA03,
	0xA04,
	0xA83,
	0xA84,
	0xB03,
	0xB04,
	0xC03,
	0xC04,
	0xC83,
	0xC84,
	0xD03,
	0xD04,
	0xD83,
	0xD84,
	0xF7F,
	0xF80,
	0x1038,
	0x1039,
	0x17C7,
	0x17C8,
	0x1B04,
	0x1B05,
	0x1B82,
	0x1B83,
	0x1CF2,
	0x1CF4,
	0xA881,
	0xA882,
	0xA983,
	0xA984,
	0xAAF5,
	0xAAF6,
	0x10A0F,
	0x10A10,
	0x11002,
	0x11003,
	0x11082,
	0x11083,
	0x11102,
	0x11103,
	0x11182,
	0x11183,
	0x11303,
	0x11304,
	0x11445,
	0x11446,
	0x114C1,
	0x114C2,
	0x115BE,
	0x115BF,
	0x1163E,
	0x1163F,
	0x116AC,
	0x116AD,
	0x11A39,
	0x11A3A,
	0x11A97,
	0x11A98,
	0x11C3E,
	0x11C3F,
	0x11D41,
	0x11D42
};

static const UV PL_INSC__VOWEL_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1963,
	0x196E,
	0xA85E,
	0xA862,
	0xA866,
	0xA867,
	0xA922,
	0xA92B,
	0x11150,
	0x11155
};

static const UV PL_INSC__VOWELDEPENDENT_invlist[] = { /* for all charsets */
	237,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93A,
	0x93C,
	0x93E,
	0x94D,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x962,
	0x964,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAE2,
	0xAE4,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD7,
	0xBD8,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCD,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE30,
	0xE3A,
	0xE40,
	0xE46,
	0xE47,
	0xE48,
	0xEB0,
	0xEBA,
	0xEBB,
	0xEBC,
	0xEC0,
	0xEC5,
	0xF71,
	0xF7E,
	0xF80,
	0xF82,
	0x102B,
	0x1036,
	0x1056,
	0x105A,
	0x1062,
	0x1063,
	0x1067,
	0x1069,
	0x1071,
	0x1075,
	0x1083,
	0x1087,
	0x109C,
	0x109E,
	0x1712,
	0x1714,
	0x1732,
	0x1734,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B6,
	0x17C6,
	0x17C8,
	0x17C9,
	0x1920,
	0x1929,
	0x193A,
	0x193B,
	0x19B0,
	0x19C1,
	0x1A17,
	0x1A1C,
	0x1A61,
	0x1A74,
	0x1B35,
	0x1B44,
	0x1BA4,
	0x1BAA,
	0x1BE7,
	0x1BF0,
	0x1C26,
	0x1C2D,
	0xA823,
	0xA828,
	0xA8B5,
	0xA8C4,
	0xA947,
	0xA94F,
	0xA9B4,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA33,
	0xAAB0,
	0xAABF,
	0xAAEB,
	0xAAF0,
	0xABE3,
	0xABEB,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A0E,
	0x11038,
	0x11046,
	0x110B0,
	0x110B9,
	0x11127,
	0x11133,
	0x111B3,
	0x111C0,
	0x111CB,
	0x111CD,
	0x1122C,
	0x11234,
	0x112E0,
	0x112E9,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134D,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11435,
	0x11442,
	0x114B0,
	0x114BF,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115BC,
	0x115DC,
	0x115DE,
	0x11630,
	0x1163D,
	0x11640,
	0x11641,
	0x116AD,
	0x116B6,
	0x11720,
	0x1172B,
	0x11A01,
	0x11A0B,
	0x11A51,
	0x11A5C,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C3C,
	0x11CB0,
	0x11CB5,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D40,
	0x11D43,
	0x11D44
};

static const UV PL_INSC__VOWELINDEPENDENT_invlist[] = { /* for all charsets */
	157,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x904,
	0x915,
	0x960,
	0x962,
	0x972,
	0x978,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x995,
	0x9E0,
	0x9E2,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA15,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xA95,
	0xAE0,
	0xAE2,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB15,
	0xB60,
	0xB62,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB95,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC15,
	0xC60,
	0xC62,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xC95,
	0xCE0,
	0xCE2,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD15,
	0xD5F,
	0xD62,
	0xD85,
	0xD97,
	0x1021,
	0x102B,
	0x1052,
	0x1056,
	0x1700,
	0x1703,
	0x1720,
	0x1723,
	0x1740,
	0x1743,
	0x1760,
	0x1763,
	0x17A3,
	0x17B4,
	0x1A4D,
	0x1A53,
	0x1B05,
	0x1B13,
	0x1B83,
	0x1B8A,
	0x1BE4,
	0x1BE6,
	0xA800,
	0xA802,
	0xA803,
	0xA806,
	0xA882,
	0xA892,
	0xA984,
	0xA989,
	0xA98C,
	0xA98F,
	0xAA00,
	0xAA06,
	0xAAE0,
	0xAAE2,
	0xABCE,
	0xABD0,
	0xABD1,
	0xABD2,
	0x11005,
	0x11013,
	0x11083,
	0x1108D,
	0x11103,
	0x11107,
	0x11183,
	0x11191,
	0x11200,
	0x11208,
	0x11280,
	0x11284,
	0x112B0,
	0x112BA,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11315,
	0x11360,
	0x11362,
	0x11400,
	0x1140E,
	0x11481,
	0x1148F,
	0x11580,
	0x1158E,
	0x115D8,
	0x115DC,
	0x11600,
	0x1160E,
	0x11680,
	0x1168A,
	0x11A00,
	0x11A01,
	0x11A50,
	0x11A51,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C0E,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D0C
};

static const UV PL_INSHARADA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11180,
	0x111E0
};

static const UV PL_INSIDDHAM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11580,
	0x11600
};

static const UV PL_INSINHALA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD80,
	0xE00
};

static const UV PL_INSORASOMPENG_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x110D0,
	0x11100
};

static const UV PL_INSOYOMBO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11A50,
	0x11AB0
};

static const UV PL_INSUNDANESE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B80,
	0x1BC0
};

static const UV PL_INSYLOTINAGRI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA800,
	0xA830
};

static const UV PL_INSYRIAC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x700,
	0x750
};

static const UV PL_INTAGALOG_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1700,
	0x1720
};

static const UV PL_INTAGBANWA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1760,
	0x1780
};

static const UV PL_INTAILE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1950,
	0x1980
};

static const UV PL_INTAITHAM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1A20,
	0x1AB0
};

static const UV PL_INTAIVIET_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA80,
	0xAAE0
};

static const UV PL_INTAKRI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11680,
	0x116D0
};

static const UV PL_INTAMIL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB80,
	0xC00
};

static const UV PL_INTANGUT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x17000,
	0x18800
};

static const UV PL_INTELUGU_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC00,
	0xC80
};

static const UV PL_INTHAANA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x780,
	0x7C0
};

static const UV PL_INTHAI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE00,
	0xE80
};

static const UV PL_INTIBETAN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF00,
	0x1000
};

static const UV PL_INTIFINAGH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D30,
	0x2D80
};

static const UV PL_INTIRHUTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11480,
	0x114E0
};

static const UV PL_INUGARITIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10380,
	0x103A0
};

static const UV PL_INVAI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA500,
	0xA640
};

static const UV PL_INVS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE00,
	0xFE10
};

static const UV PL_INWARANGCITI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x118A0,
	0x11900
};

static const UV PL_INZANABAZARSQUARE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11A00,
	0x11A50
};

static const UV PL_IPAEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x250,
	0x2B0
};

static const UV PL_ITAL_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10300,
	0x10324,
	0x1032D,
	0x10330
};

static const UV PL_JAMO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1200
};

static const UV PL_JAMOEXTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA960,
	0xA980
};

static const UV PL_JAMOEXTB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD7B0,
	0xD800
};

static const UV PL_JAVA_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E0
};

static const UV PL_JG__AFRICANFEH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8BB,
	0x8BC
};

static const UV PL_JG__AFRICANNOON_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8BD,
	0x8BE
};

static const UV PL_JG__AFRICANQAF_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8BC,
	0x8BD
};

static const UV PL_JG__AIN_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x639,
	0x63B,
	0x6A0,
	0x6A1,
	0x6FC,
	0x6FD,
	0x75D,
	0x760,
	0x8B3,
	0x8B4
};

static const UV PL_JG__ALAPH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x710,
	0x711
};

static const UV PL_JG__ALEF_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x622,
	0x624,
	0x625,
	0x626,
	0x627,
	0x628,
	0x671,
	0x674,
	0x675,
	0x676,
	0x773,
	0x775
};

static const UV PL_JG__BEH_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x628,
	0x629,
	0x62A,
	0x62C,
	0x66E,
	0x66F,
	0x679,
	0x681,
	0x750,
	0x757,
	0x8A0,
	0x8A2,
	0x8B6,
	0x8B9
};

static const UV PL_JG__BETH_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x712,
	0x713,
	0x72D,
	0x72E
};

static const UV PL_JG__BURUSHASKIYEHBARREE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x77A,
	0x77C
};

static const UV PL_JG__DAL_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62F,
	0x631,
	0x688,
	0x691,
	0x6EE,
	0x6EF,
	0x759,
	0x75B,
	0x8AE,
	0x8AF
};

static const UV PL_JG__DALATHRISH_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x715,
	0x717,
	0x72A,
	0x72B,
	0x72F,
	0x730
};

static const UV PL_JG__E_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x725,
	0x726
};

static const UV PL_JG__FARSIYEH_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x63D,
	0x640,
	0x6CC,
	0x6CD,
	0x6CE,
	0x6CF,
	0x775,
	0x777
};

static const UV PL_JG__FE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x74F,
	0x750
};

static const UV PL_JG__FEH_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x641,
	0x642,
	0x6A1,
	0x6A7,
	0x760,
	0x762,
	0x8A4,
	0x8A5
};

static const UV PL_JG__FINALSEMKATH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x724,
	0x725
};

static const UV PL_JG__GAF_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x63B,
	0x63D,
	0x6A9,
	0x6AA,
	0x6AB,
	0x6AC,
	0x6AF,
	0x6B5,
	0x762,
	0x765,
	0x8B0,
	0x8B1
};

static const UV PL_JG__GAMAL_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x713,
	0x715,
	0x72E,
	0x72F
};

static const UV PL_JG__HAH_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62C,
	0x62F,
	0x681,
	0x688,
	0x6BF,
	0x6C0,
	0x757,
	0x759,
	0x76E,
	0x770,
	0x772,
	0x773,
	0x77C,
	0x77D,
	0x8A2,
	0x8A3
};

static const UV PL_JG__HAMZAONHEHGOAL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6C3,
	0x6C4
};

static const UV PL_JG__HE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x717,
	0x718
};

static const UV PL_JG__HEH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x647,
	0x648
};

static const UV PL_JG__HEHGOAL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6C1,
	0x6C3
};

static const UV PL_JG__HETH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x71A,
	0x71B
};

static const UV PL_JG__KAF_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x643,
	0x644,
	0x6AC,
	0x6AF,
	0x77F,
	0x780,
	0x8B4,
	0x8B5
};

static const UV PL_JG__KAPH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x71F,
	0x720
};

static const UV PL_JG__KHAPH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x74E,
	0x74F
};

static const UV PL_JG__KNOTTEDHEH_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6BE,
	0x6BF,
	0x6FF,
	0x700
};

static const UV PL_JG__LAM_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x644,
	0x645,
	0x6B5,
	0x6B9,
	0x76A,
	0x76B,
	0x8A6,
	0x8A7
};

static const UV PL_JG__LAMADH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x720,
	0x721
};

static const UV PL_JG__MALAYALAMBHA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x866,
	0x867
};

static const UV PL_JG__MALAYALAMJA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x861,
	0x862
};

static const UV PL_JG__MALAYALAMLLA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x868,
	0x869
};

static const UV PL_JG__MALAYALAMLLLA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x869,
	0x86A
};

static const UV PL_JG__MALAYALAMNGA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x860,
	0x861
};

static const UV PL_JG__MALAYALAMNNA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x864,
	0x865
};

static const UV PL_JG__MALAYALAMNNNA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x865,
	0x866
};

static const UV PL_JG__MALAYALAMNYA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x862,
	0x863
};

static const UV PL_JG__MALAYALAMRA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x867,
	0x868
};

static const UV PL_JG__MALAYALAMSSA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x86A,
	0x86B
};

static const UV PL_JG__MALAYALAMTTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x863,
	0x864
};

static const UV PL_JG__MANICHAEANALEPH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AC0,
	0x10AC1
};

static const UV PL_JG__MANICHAEANAYIN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AD9,
	0x10ADB
};

static const UV PL_JG__MANICHAEANBETH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AC1,
	0x10AC3
};

static const UV PL_JG__MANICHAEANDALETH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AC5,
	0x10AC6
};

static const UV PL_JG__MANICHAEANDHAMEDH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AD4,
	0x10AD5
};

static const UV PL_JG__MANICHAEANFIVE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AEC,
	0x10AED
};

static const UV PL_JG__MANICHAEANGIMEL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AC3,
	0x10AC5
};

static const UV PL_JG__MANICHAEANHETH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10ACD,
	0x10ACE
};

static const UV PL_JG__MANICHAEANHUNDRED_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AEF,
	0x10AF0
};

static const UV PL_JG__MANICHAEANKAPH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AD0,
	0x10AD3
};

static const UV PL_JG__MANICHAEANLAMEDH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AD3,
	0x10AD4
};

static const UV PL_JG__MANICHAEANMEM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AD6,
	0x10AD7
};

static const UV PL_JG__MANICHAEANNUN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AD7,
	0x10AD8
};

static const UV PL_JG__MANICHAEANONE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AEB,
	0x10AEC
};

static const UV PL_JG__MANICHAEANPE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10ADB,
	0x10ADD
};

static const UV PL_JG__MANICHAEANQOPH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10ADE,
	0x10AE1
};

static const UV PL_JG__MANICHAEANRESH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AE1,
	0x10AE2
};

static const UV PL_JG__MANICHAEANSADHE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10ADD,
	0x10ADE
};

static const UV PL_JG__MANICHAEANSAMEKH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AD8,
	0x10AD9
};

static const UV PL_JG__MANICHAEANTAW_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AE4,
	0x10AE5
};

static const UV PL_JG__MANICHAEANTEN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AED,
	0x10AEE
};

static const UV PL_JG__MANICHAEANTETH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10ACE,
	0x10ACF
};

static const UV PL_JG__MANICHAEANTHAMEDH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AD5,
	0x10AD6
};

static const UV PL_JG__MANICHAEANTWENTY_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AEE,
	0x10AEF
};

static const UV PL_JG__MANICHAEANWAW_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AC7,
	0x10AC8
};

static const UV PL_JG__MANICHAEANYODH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10ACF,
	0x10AD0
};

static const UV PL_JG__MANICHAEANZAYIN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AC9,
	0x10ACB
};

static const UV PL_JG__MEEM_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x645,
	0x646,
	0x765,
	0x767,
	0x8A7,
	0x8A8
};

static const UV PL_JG__MIM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x721,
	0x722
};

static const UV PL_JG__NOJOININGGROUP_invlist[] = { /* for all charsets */
	47,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x620,
	0x621,
	0x622,
	0x640,
	0x641,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x674,
	0x675,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x780,
	0x860,
	0x86B,
	0x8A0,
	0x8AD,
	0x8AE,
	0x8B5,
	0x8B6,
	0x8BE,
	0x10AC0,
	0x10AC6,
	0x10AC7,
	0x10AC8,
	0x10AC9,
	0x10ACB,
	0x10ACD,
	0x10AE2,
	0x10AE4,
	0x10AE5,
	0x10AEB,
	0x10AF0
};

static const UV PL_JG__NOON_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x646,
	0x647,
	0x6B9,
	0x6BD,
	0x767,
	0x76A
};

static const UV PL_JG__NUN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x722,
	0x723
};

static const UV PL_JG__NYA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6BD,
	0x6BE
};

static const UV PL_JG__PE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x726,
	0x727
};

static const UV PL_JG__QAF_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x642,
	0x643,
	0x66F,
	0x670,
	0x6A7,
	0x6A9,
	0x8A5,
	0x8A6
};

static const UV PL_JG__QAPH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x729,
	0x72A
};

static const UV PL_JG__REH_invlist[] = { /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x631,
	0x633,
	0x691,
	0x69A,
	0x6EF,
	0x6F0,
	0x75B,
	0x75C,
	0x76B,
	0x76D,
	0x771,
	0x772,
	0x8AA,
	0x8AB,
	0x8B2,
	0x8B3,
	0x8B9,
	0x8BA
};

static const UV PL_JG__REVERSEDPE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x727,
	0x728
};

static const UV PL_JG__ROHINGYAYEH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8AC,
	0x8AD
};

static const UV PL_JG__SAD_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x635,
	0x637,
	0x69D,
	0x69F,
	0x6FB,
	0x6FC,
	0x8AF,
	0x8B0
};

static const UV PL_JG__SADHE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x728,
	0x729
};

static const UV PL_JG__SEEN_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x633,
	0x635,
	0x69A,
	0x69D,
	0x6FA,
	0x6FB,
	0x75C,
	0x75D,
	0x76D,
	0x76E,
	0x770,
	0x771,
	0x77D,
	0x77F
};

static const UV PL_JG__SEMKATH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x723,
	0x724
};

static const UV PL_JG__SHIN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x72B,
	0x72C
};

static const UV PL_JG__STRAIGHTWAW_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8B1,
	0x8B2
};

static const UV PL_JG__SWASHKAF_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6AA,
	0x6AB
};

static const UV PL_JG__SYRIACWAW_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x718,
	0x719
};

static const UV PL_JG__TAH_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x637,
	0x639,
	0x69F,
	0x6A0,
	0x8A3,
	0x8A4
};

static const UV PL_JG__TAW_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x72C,
	0x72D
};

static const UV PL_JG__TEHMARBUTA_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x629,
	0x62A,
	0x6C0,
	0x6C1,
	0x6D5,
	0x6D6
};

static const UV PL_JG__TETH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x71B,
	0x71D
};

static const UV PL_JG__WAW_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x624,
	0x625,
	0x648,
	0x649,
	0x676,
	0x678,
	0x6C4,
	0x6CC,
	0x6CF,
	0x6D0,
	0x778,
	0x77A,
	0x8AB,
	0x8AC
};

static const UV PL_JG__YEH_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x620,
	0x621,
	0x626,
	0x627,
	0x649,
	0x64B,
	0x678,
	0x679,
	0x6D0,
	0x6D2,
	0x777,
	0x778,
	0x8A8,
	0x8AA,
	0x8BA,
	0x8BB
};

static const UV PL_JG__YEHBARREE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D2,
	0x6D4
};

static const UV PL_JG__YEHWITHTAIL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6CD,
	0x6CE
};

static const UV PL_JG__YUDH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x71D,
	0x71E
};

static const UV PL_JG__YUDHHE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x71E,
	0x71F
};

static const UV PL_JG__ZAIN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x719,
	0x71A
};

static const UV PL_JG__ZHAIN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x74D,
	0x74E
};

static const UV PL_JOINC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x200C,
	0x200E
};

static const UV PL_JT__C_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x640,
	0x641,
	0x7FA,
	0x7FB,
	0x180A,
	0x180B,
	0x200D,
	0x200E
};

static const UV PL_JT__D_invlist[] = { /* for all charsets */
	119,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x620,
	0x621,
	0x626,
	0x627,
	0x628,
	0x629,
	0x62A,
	0x62F,
	0x633,
	0x640,
	0x641,
	0x648,
	0x649,
	0x64B,
	0x66E,
	0x670,
	0x678,
	0x688,
	0x69A,
	0x6C0,
	0x6C1,
	0x6C3,
	0x6CC,
	0x6CD,
	0x6CE,
	0x6CF,
	0x6D0,
	0x6D2,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x712,
	0x715,
	0x71A,
	0x71E,
	0x71F,
	0x728,
	0x729,
	0x72A,
	0x72B,
	0x72C,
	0x72D,
	0x72F,
	0x74E,
	0x759,
	0x75C,
	0x76B,
	0x76D,
	0x771,
	0x772,
	0x773,
	0x775,
	0x778,
	0x77A,
	0x780,
	0x7CA,
	0x7EB,
	0x841,
	0x846,
	0x848,
	0x849,
	0x84A,
	0x854,
	0x855,
	0x856,
	0x860,
	0x861,
	0x862,
	0x866,
	0x868,
	0x869,
	0x8A0,
	0x8AA,
	0x8AF,
	0x8B1,
	0x8B3,
	0x8B5,
	0x8B6,
	0x8B9,
	0x8BA,
	0x8BE,
	0x1807,
	0x1808,
	0x1820,
	0x1878,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0xA840,
	0xA872,
	0x10AC0,
	0x10AC5,
	0x10AD3,
	0x10AD7,
	0x10AD8,
	0x10ADD,
	0x10ADE,
	0x10AE1,
	0x10AEB,
	0x10AEF,
	0x10B80,
	0x10B81,
	0x10B82,
	0x10B83,
	0x10B86,
	0x10B89,
	0x10B8A,
	0x10B8C,
	0x10B8D,
	0x10B8E,
	0x10B90,
	0x10B91,
	0x10BAD,
	0x10BAF,
	0x1E900,
	0x1E944
};

static const UV PL_JT__L_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA872,
	0xA873,
	0x10ACD,
	0x10ACE,
	0x10AD7,
	0x10AD8
};

static const UV PL_JT__R_invlist[] = { /* for all charsets */
	107,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x622,
	0x626,
	0x627,
	0x628,
	0x629,
	0x62A,
	0x62F,
	0x633,
	0x648,
	0x649,
	0x671,
	0x674,
	0x675,
	0x678,
	0x688,
	0x69A,
	0x6C0,
	0x6C1,
	0x6C3,
	0x6CC,
	0x6CD,
	0x6CE,
	0x6CF,
	0x6D0,
	0x6D2,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6EE,
	0x6F0,
	0x710,
	0x711,
	0x715,
	0x71A,
	0x71E,
	0x71F,
	0x728,
	0x729,
	0x72A,
	0x72B,
	0x72C,
	0x72D,
	0x72F,
	0x730,
	0x74D,
	0x74E,
	0x759,
	0x75C,
	0x76B,
	0x76D,
	0x771,
	0x772,
	0x773,
	0x775,
	0x778,
	0x77A,
	0x840,
	0x841,
	0x846,
	0x848,
	0x849,
	0x84A,
	0x854,
	0x855,
	0x867,
	0x868,
	0x869,
	0x86B,
	0x8AA,
	0x8AD,
	0x8AE,
	0x8AF,
	0x8B1,
	0x8B3,
	0x8B9,
	0x8BA,
	0x10AC5,
	0x10AC6,
	0x10AC7,
	0x10AC8,
	0x10AC9,
	0x10ACB,
	0x10ACE,
	0x10AD3,
	0x10ADD,
	0x10ADE,
	0x10AE1,
	0x10AE2,
	0x10AE4,
	0x10AE5,
	0x10AEF,
	0x10AF0,
	0x10B81,
	0x10B82,
	0x10B83,
	0x10B86,
	0x10B89,
	0x10B8A,
	0x10B8C,
	0x10B8D,
	0x10B8E,
	0x10B90,
	0x10B91,
	0x10B92,
	0x10BA9,
	0x10BAD
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_JT__T_invlist[] = { /* for ASCII/Latin1 */
	627,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x206A,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_JT__T_invlist[] = { /* for EBCDIC 1047 */
	627,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x206A,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_JT__T_invlist[] = { /* for EBCDIC 037 */
	627,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x206A,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_JT__U_invlist[] = { /* for ASCII/Latin1 */
	667,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x621,
	0x622,
	0x660,
	0x66E,
	0x674,
	0x675,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x74B,
	0x74D,
	0x780,
	0x7A6,
	0x7B1,
	0x7CA,
	0x7F4,
	0x7FA,
	0x7FB,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x856,
	0x859,
	0x85C,
	0x860,
	0x861,
	0x862,
	0x866,
	0x867,
	0x86B,
	0x8A0,
	0x8AD,
	0x8AE,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1807,
	0x1808,
	0x180A,
	0x180E,
	0x1820,
	0x1878,
	0x1885,
	0x18AB,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x200C,
	0x200D,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x206A,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA840,
	0xA873,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AC0,
	0x10AC6,
	0x10AC7,
	0x10AC8,
	0x10AC9,
	0x10ACB,
	0x10ACD,
	0x10AE2,
	0x10AE4,
	0x10AE7,
	0x10AEB,
	0x10AF0,
	0x10B80,
	0x10B92,
	0x10BA9,
	0x10BAF,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_JT__U_invlist[] = { /* for EBCDIC 1047 */
	667,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x621,
	0x622,
	0x660,
	0x66E,
	0x674,
	0x675,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x74B,
	0x74D,
	0x780,
	0x7A6,
	0x7B1,
	0x7CA,
	0x7F4,
	0x7FA,
	0x7FB,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x856,
	0x859,
	0x85C,
	0x860,
	0x861,
	0x862,
	0x866,
	0x867,
	0x86B,
	0x8A0,
	0x8AD,
	0x8AE,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1807,
	0x1808,
	0x180A,
	0x180E,
	0x1820,
	0x1878,
	0x1885,
	0x18AB,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x200C,
	0x200D,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x206A,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA840,
	0xA873,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AC0,
	0x10AC6,
	0x10AC7,
	0x10AC8,
	0x10AC9,
	0x10ACB,
	0x10ACD,
	0x10AE2,
	0x10AE4,
	0x10AE7,
	0x10AEB,
	0x10AF0,
	0x10B80,
	0x10B92,
	0x10BA9,
	0x10BAF,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_JT__U_invlist[] = { /* for EBCDIC 037 */
	667,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x621,
	0x622,
	0x660,
	0x66E,
	0x674,
	0x675,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x74B,
	0x74D,
	0x780,
	0x7A6,
	0x7B1,
	0x7CA,
	0x7F4,
	0x7FA,
	0x7FB,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x840,
	0x856,
	0x859,
	0x85C,
	0x860,
	0x861,
	0x862,
	0x866,
	0x867,
	0x86B,
	0x8A0,
	0x8AD,
	0x8AE,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1807,
	0x1808,
	0x180A,
	0x180E,
	0x1820,
	0x1878,
	0x1885,
	0x18AB,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200B,
	0x200C,
	0x200D,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x206A,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA840,
	0xA873,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AC0,
	0x10AC6,
	0x10AC7,
	0x10AC8,
	0x10AC9,
	0x10ACB,
	0x10ACD,
	0x10AE2,
	0x10AE4,
	0x10AE7,
	0x10AEB,
	0x10AF0,
	0x10B80,
	0x10B92,
	0x10BA9,
	0x10BAF,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110BD,
	0x110BE,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D167,
	0x1D16A,
	0x1D173,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

static const UV PL_KALI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA900,
	0xA930
};

static const UV PL_KANA_invlist[] = { /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3013,
	0x3020,
	0x3030,
	0x3036,
	0x3037,
	0x3038,
	0x303C,
	0x303E,
	0x3099,
	0x309D,
	0x30A0,
	0x3100,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFFA0,
	0x1B000,
	0x1B001
};

static const UV PL_KANAEXTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B100,
	0x1B130
};

static const UV PL_KANASUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B000,
	0x1B100
};

static const UV PL_KANBUN_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3190,
	0x31A0
};

static const UV PL_KANGXI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2F00,
	0x2FE0
};

static const UV PL_KATAKANAEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x31F0,
	0x3200
};

static const UV PL_KHAR_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59
};

static const UV PL_KHMERSYMBOLS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x19E0,
	0x1A00
};

static const UV PL_KHMR_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x19E0,
	0x1A00
};

static const UV PL_KHOJ_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAE6,
	0xAF0,
	0x11200,
	0x11212,
	0x11213,
	0x1123F
};

static const UV PL_KNDA_invlist[] = { /* for all charsets */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0x1CDA,
	0x1CDB,
	0x1CF5,
	0x1CF6,
	0xA830,
	0xA836
};

static const UV PL_KTHI_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x966,
	0x970,
	0xA830,
	0xA83A,
	0x11080,
	0x110C2
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_L_invlist[] = { /* for ASCII/Latin1 */
	1171,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16F1,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2183,
	0x2185,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3007,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6E6,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x10341,
	0x10342,
	0x1034A,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_L_invlist[] = { /* for EBCDIC 1047 */
	1197,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16F1,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2183,
	0x2185,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3007,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6E6,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x10341,
	0x10342,
	0x1034A,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_L_invlist[] = { /* for EBCDIC 037 */
	1193,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16F1,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2183,
	0x2185,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3007,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6E6,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x10341,
	0x10342,
	0x1034A,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_L_AMP__invlist[] = { /* for ASCII/Latin1 */
	253,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xB5,
	0xB6,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B0,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2183,
	0x2185,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C7C,
	0x2C7E,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA770,
	0xA771,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7FA,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB60,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E900,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_L_AMP__invlist[] = { /* for EBCDIC 1047 */
	285,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B0,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2183,
	0x2185,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C7C,
	0x2C7E,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA770,
	0xA771,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7FA,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB60,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E900,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_L_AMP__invlist[] = { /* for EBCDIC 037 */
	281,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B0,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x561,
	0x588,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2183,
	0x2185,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2C7C,
	0x2C7E,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69C,
	0xA722,
	0xA770,
	0xA771,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7FA,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB60,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E900,
	0x1E944
};

#   endif	/* EBCDIC 037 */

static const UV PL_LANA_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE
};

static const UV PL_LAO_invlist[] = { /* for all charsets */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LATIN1_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x80,
	0x100
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LATIN1_invlist[] = { /* for EBCDIC 1047 */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LATIN1_invlist[] = { /* for EBCDIC 037 */
	57,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#   endif	/* EBCDIC 037 */

static const UV PL_LATINEXTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100,
	0x180
};

static const UV PL_LATINEXTADDITIONAL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E00,
	0x1F00
};

static const UV PL_LATINEXTB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x180,
	0x250
};

static const UV PL_LATINEXTC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C60,
	0x2C80
};

static const UV PL_LATINEXTD_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA720,
	0xA800
};

static const UV PL_LATINEXTE_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAB30,
	0xAB70
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LATN_invlist[] = { /* for ASCII/Latin1 */
	75,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2B9,
	0x2E0,
	0x2E5,
	0x363,
	0x370,
	0x485,
	0x487,
	0x951,
	0x953,
	0x10FB,
	0x10FC,
	0x1D00,
	0x1D26,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1E00,
	0x1F00,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20F0,
	0x20F1,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C60,
	0x2C80,
	0xA722,
	0xA788,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA800,
	0xA92E,
	0xA92F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xFB00,
	0xFB07,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LATN_invlist[] = { /* for EBCDIC 1047 */
	101,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x363,
	0x370,
	0x485,
	0x487,
	0x951,
	0x953,
	0x10FB,
	0x10FC,
	0x1D00,
	0x1D26,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1E00,
	0x1F00,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20F0,
	0x20F1,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C60,
	0x2C80,
	0xA722,
	0xA788,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA800,
	0xA92E,
	0xA92F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xFB00,
	0xFB07,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LATN_invlist[] = { /* for EBCDIC 037 */
	97,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x363,
	0x370,
	0x485,
	0x487,
	0x951,
	0x953,
	0x10FB,
	0x10FC,
	0x1D00,
	0x1D26,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1E00,
	0x1F00,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20F0,
	0x20F1,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C60,
	0x2C80,
	0xA722,
	0xA788,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA800,
	0xA92E,
	0xA92F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xFB00,
	0xFB07,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__AI_invlist[] = { /* for ASCII/Latin1 */
	219,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA7,
	0xA9,
	0xAA,
	0xAB,
	0xB2,
	0xB4,
	0xB6,
	0xBB,
	0xBC,
	0xBF,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2015,
	0x2017,
	0x2020,
	0x2022,
	0x203B,
	0x203C,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
	0x2081,
	0x2085,
	0x2105,
	0x2106,
	0x2113,
	0x2114,
	0x2121,
	0x2123,
	0x212B,
	0x212C,
	0x2154,
	0x2156,
	0x215B,
	0x215C,
	0x215E,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x2190,
	0x219A,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2212,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x2312,
	0x2313,
	0x2460,
	0x24FF,
	0x2500,
	0x254C,
	0x2550,
	0x2575,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x2616,
	0x2618,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x2668,
	0x2669,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x269E,
	0x26A0,
	0x26C9,
	0x26CD,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E3,
	0x26E4,
	0x26E8,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26FB,
	0x26FD,
	0x2757,
	0x2758,
	0x2776,
	0x2794,
	0x2B55,
	0x2B5A,
	0x3248,
	0x3250,
	0xFFFD,
	0xFFFE,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12E,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F1AD
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__AI_invlist[] = { /* for EBCDIC 1047 */
	225,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xB3,
	0xB4,
	0xB5,
	0xBA,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0xDA,
	0xDB,
	0xE1,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2015,
	0x2017,
	0x2020,
	0x2022,
	0x203B,
	0x203C,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
	0x2081,
	0x2085,
	0x2105,
	0x2106,
	0x2113,
	0x2114,
	0x2121,
	0x2123,
	0x212B,
	0x212C,
	0x2154,
	0x2156,
	0x215B,
	0x215C,
	0x215E,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x2190,
	0x219A,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2212,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x2312,
	0x2313,
	0x2460,
	0x24FF,
	0x2500,
	0x254C,
	0x2550,
	0x2575,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x2616,
	0x2618,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x2668,
	0x2669,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x269E,
	0x26A0,
	0x26C9,
	0x26CD,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E3,
	0x26E4,
	0x26E8,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26FB,
	0x26FD,
	0x2757,
	0x2758,
	0x2776,
	0x2794,
	0x2B55,
	0x2B5A,
	0x3248,
	0x3250,
	0xFFFD,
	0xFFFE,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12E,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F1AD
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__AI_invlist[] = { /* for EBCDIC 037 */
	225,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xB3,
	0xB4,
	0xB5,
	0xBA,
	0xBD,
	0xBE,
	0xBF,
	0xC0,
	0xDA,
	0xDB,
	0xE1,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2015,
	0x2017,
	0x2020,
	0x2022,
	0x203B,
	0x203C,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
	0x2081,
	0x2085,
	0x2105,
	0x2106,
	0x2113,
	0x2114,
	0x2121,
	0x2123,
	0x212B,
	0x212C,
	0x2154,
	0x2156,
	0x215B,
	0x215C,
	0x215E,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x2190,
	0x219A,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2212,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x2312,
	0x2313,
	0x2460,
	0x24FF,
	0x2500,
	0x254C,
	0x2550,
	0x2575,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x2616,
	0x2618,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x2668,
	0x2669,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x269E,
	0x26A0,
	0x26C9,
	0x26CD,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E3,
	0x26E4,
	0x26E8,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26FB,
	0x26FD,
	0x2757,
	0x2758,
	0x2776,
	0x2794,
	0x2B55,
	0x2B5A,
	0x3248,
	0x3250,
	0xFFFD,
	0xFFFE,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12E,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F1AD
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__AL_invlist[] = { /* for ASCII/Latin1 */
	1443,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x23,
	0x24,
	0x26,
	0x27,
	0x2A,
	0x2B,
	0x3C,
	0x3F,
	0x40,
	0x5B,
	0x5E,
	0x7B,
	0x7E,
	0x7F,
	0xA6,
	0xA7,
	0xA9,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB0,
	0xB5,
	0xB6,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C7,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x58D,
	0x58F,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5F3,
	0x5F5,
	0x600,
	0x609,
	0x60E,
	0x610,
	0x620,
	0x64B,
	0x66D,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x70E,
	0x70F,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F8,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x830,
	0x83F,
	0x840,
	0x859,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x970,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0x9FB,
	0x9FC,
	0x9FE,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF0,
	0xAF1,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB70,
	0xB78,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xBF0,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC78,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD50,
	0xD54,
	0xD57,
	0xD58,
	0xD62,
	0xD70,
	0xD79,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xF00,
	0xF01,
	0xF05,
	0xF06,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF34,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0xFC0,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD4,
	0xFD9,
	0x104C,
	0x1050,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1100,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1360,
	0x1361,
	0x1362,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x17D9,
	0x17DA,
	0x17F0,
	0x17FA,
	0x1800,
	0x1802,
	0x1807,
	0x1808,
	0x180A,
	0x180B,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1940,
	0x1941,
	0x19E0,
	0x1A17,
	0x1A1E,
	0x1A20,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BFC,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x1FFE,
	0x1FFF,
	0x2017,
	0x2018,
	0x2022,
	0x2024,
	0x2038,
	0x2039,
	0x203E,
	0x2044,
	0x204A,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2061,
	0x2065,
	0x2070,
	0x2072,
	0x2075,
	0x207D,
	0x2080,
	0x2081,
	0x2085,
	0x208D,
	0x2090,
	0x209D,
	0x2100,
	0x2103,
	0x2104,
	0x2105,
	0x2106,
	0x2109,
	0x210A,
	0x2113,
	0x2114,
	0x2116,
	0x2117,
	0x2121,
	0x2123,
	0x212B,
	0x212C,
	0x2154,
	0x2156,
	0x215B,
	0x215C,
	0x215E,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x218C,
	0x219A,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2214,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x22EF,
	0x22F0,
	0x2308,
	0x230C,
	0x2312,
	0x2313,
	0x231A,
	0x231C,
	0x2329,
	0x232B,
	0x23F0,
	0x23F4,
	0x2427,
	0x2440,
	0x244B,
	0x24FF,
	0x2500,
	0x254C,
	0x2550,
	0x2575,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x2600,
	0x2604,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x2614,
	0x2619,
	0x261A,
	0x2620,
	0x2639,
	0x263C,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x267F,
	0x2680,
	0x269E,
	0x26A0,
	0x26BD,
	0x26CE,
	0x26CF,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2705,
	0x2708,
	0x270E,
	0x2757,
	0x2758,
	0x275B,
	0x2761,
	0x2762,
	0x2765,
	0x2768,
	0x2794,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B55,
	0x2B5A,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E16,
	0x2E17,
	0x2E1A,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2F,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3A,
	0x2E3F,
	0x2E40,
	0x4DC0,
	0x4E00,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA82C,
	0xA830,
	0xA838,
	0xA839,
	0xA83A,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA95F,
	0xA960,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C7,
	0xA9CA,
	0xA9CE,
	0xA9CF,
	0xA9D0,
	0xA9DE,
	0xA9E0,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA5C,
	0xAA5D,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE3,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB29,
	0xFB2A,
	0xFB50,
	0xFBC2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFDFD,
	0xFDFE,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFFE8,
	0xFFEF,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E1,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10858,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x10920,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A40,
	0x10A48,
	0x10A58,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE5,
	0x10AEB,
	0x10AF0,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11003,
	0x11038,
	0x11049,
	0x1104E,
	0x11052,
	0x11066,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BE,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11174,
	0x11175,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x1144F,
	0x11450,
	0x1145D,
	0x1145E,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C8,
	0x11580,
	0x115AF,
	0x115C6,
	0x115C9,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11643,
	0x11645,
	0x11680,
	0x116AB,
	0x118A0,
	0x118E0,
	0x118EA,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A40,
	0x11A41,
	0x11A46,
	0x11A47,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C5A,
	0x11C6D,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x13258,
	0x1325E,
	0x13282,
	0x13283,
	0x13286,
	0x1328A,
	0x13379,
	0x1337C,
	0x1342F,
	0x14400,
	0x145CE,
	0x145D0,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16B46,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BC9D,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1DA8B,
	0x1DA8C,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D0,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F12E,
	0x1F12F,
	0x1F16A,
	0x1F16C,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F650,
	0x1F676,
	0x1F67C,
	0x1F680,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__AL_invlist[] = { /* for EBCDIC 1047 */
	1471,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x4C,
	0x4D,
	0x50,
	0x5A,
	0x5C,
	0x5D,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x6D,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB1,
	0xB4,
	0xB5,
	0xBA,
	0xBB,
	0xBC,
	0xBD,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C7,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x58D,
	0x58F,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5F3,
	0x5F5,
	0x600,
	0x609,
	0x60E,
	0x610,
	0x620,
	0x64B,
	0x66D,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x70E,
	0x70F,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F8,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x830,
	0x83F,
	0x840,
	0x859,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x970,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0x9FB,
	0x9FC,
	0x9FE,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF0,
	0xAF1,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB70,
	0xB78,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xBF0,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC78,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD50,
	0xD54,
	0xD57,
	0xD58,
	0xD62,
	0xD70,
	0xD79,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xF00,
	0xF01,
	0xF05,
	0xF06,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF34,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0xFC0,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD4,
	0xFD9,
	0x104C,
	0x1050,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1100,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1360,
	0x1361,
	0x1362,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x17D9,
	0x17DA,
	0x17F0,
	0x17FA,
	0x1800,
	0x1802,
	0x1807,
	0x1808,
	0x180A,
	0x180B,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1940,
	0x1941,
	0x19E0,
	0x1A17,
	0x1A1E,
	0x1A20,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BFC,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x1FFE,
	0x1FFF,
	0x2017,
	0x2018,
	0x2022,
	0x2024,
	0x2038,
	0x2039,
	0x203E,
	0x2044,
	0x204A,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2061,
	0x2065,
	0x2070,
	0x2072,
	0x2075,
	0x207D,
	0x2080,
	0x2081,
	0x2085,
	0x208D,
	0x2090,
	0x209D,
	0x2100,
	0x2103,
	0x2104,
	0x2105,
	0x2106,
	0x2109,
	0x210A,
	0x2113,
	0x2114,
	0x2116,
	0x2117,
	0x2121,
	0x2123,
	0x212B,
	0x212C,
	0x2154,
	0x2156,
	0x215B,
	0x215C,
	0x215E,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x218C,
	0x219A,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2214,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x22EF,
	0x22F0,
	0x2308,
	0x230C,
	0x2312,
	0x2313,
	0x231A,
	0x231C,
	0x2329,
	0x232B,
	0x23F0,
	0x23F4,
	0x2427,
	0x2440,
	0x244B,
	0x24FF,
	0x2500,
	0x254C,
	0x2550,
	0x2575,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x2600,
	0x2604,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x2614,
	0x2619,
	0x261A,
	0x2620,
	0x2639,
	0x263C,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x267F,
	0x2680,
	0x269E,
	0x26A0,
	0x26BD,
	0x26CE,
	0x26CF,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2705,
	0x2708,
	0x270E,
	0x2757,
	0x2758,
	0x275B,
	0x2761,
	0x2762,
	0x2765,
	0x2768,
	0x2794,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B55,
	0x2B5A,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E16,
	0x2E17,
	0x2E1A,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2F,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3A,
	0x2E3F,
	0x2E40,
	0x4DC0,
	0x4E00,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA82C,
	0xA830,
	0xA838,
	0xA839,
	0xA83A,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA95F,
	0xA960,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C7,
	0xA9CA,
	0xA9CE,
	0xA9CF,
	0xA9D0,
	0xA9DE,
	0xA9E0,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA5C,
	0xAA5D,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE3,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB29,
	0xFB2A,
	0xFB50,
	0xFBC2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFDFD,
	0xFDFE,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFFE8,
	0xFFEF,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E1,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10858,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x10920,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A40,
	0x10A48,
	0x10A58,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE5,
	0x10AEB,
	0x10AF0,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11003,
	0x11038,
	0x11049,
	0x1104E,
	0x11052,
	0x11066,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BE,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11174,
	0x11175,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x1144F,
	0x11450,
	0x1145D,
	0x1145E,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C8,
	0x11580,
	0x115AF,
	0x115C6,
	0x115C9,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11643,
	0x11645,
	0x11680,
	0x116AB,
	0x118A0,
	0x118E0,
	0x118EA,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A40,
	0x11A41,
	0x11A46,
	0x11A47,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C5A,
	0x11C6D,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x13258,
	0x1325E,
	0x13282,
	0x13283,
	0x13286,
	0x1328A,
	0x13379,
	0x1337C,
	0x1342F,
	0x14400,
	0x145CE,
	0x145D0,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16B46,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BC9D,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1DA8B,
	0x1DA8C,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D0,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F12E,
	0x1F12F,
	0x1F16A,
	0x1F16C,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F650,
	0x1F676,
	0x1F67C,
	0x1F680,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__AL_invlist[] = { /* for EBCDIC 037 */
	1467,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x4C,
	0x4D,
	0x50,
	0x5A,
	0x5C,
	0x5D,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x6D,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xAA,
	0xAC,
	0xB1,
	0xB4,
	0xB5,
	0xBC,
	0xBD,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C7,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x58D,
	0x58F,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5F3,
	0x5F5,
	0x600,
	0x609,
	0x60E,
	0x610,
	0x620,
	0x64B,
	0x66D,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x6F0,
	0x6FA,
	0x70E,
	0x70F,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F8,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x830,
	0x83F,
	0x840,
	0x859,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x970,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0x9FB,
	0x9FC,
	0x9FE,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF0,
	0xAF1,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB70,
	0xB78,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xBF0,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC78,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD50,
	0xD54,
	0xD57,
	0xD58,
	0xD62,
	0xD70,
	0xD79,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xF00,
	0xF01,
	0xF05,
	0xF06,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF34,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0xFC0,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD4,
	0xFD9,
	0x104C,
	0x1050,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1100,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1360,
	0x1361,
	0x1362,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x17D9,
	0x17DA,
	0x17F0,
	0x17FA,
	0x1800,
	0x1802,
	0x1807,
	0x1808,
	0x180A,
	0x180B,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1940,
	0x1941,
	0x19E0,
	0x1A17,
	0x1A1E,
	0x1A20,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1BFC,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x1FFE,
	0x1FFF,
	0x2017,
	0x2018,
	0x2022,
	0x2024,
	0x2038,
	0x2039,
	0x203E,
	0x2044,
	0x204A,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2061,
	0x2065,
	0x2070,
	0x2072,
	0x2075,
	0x207D,
	0x2080,
	0x2081,
	0x2085,
	0x208D,
	0x2090,
	0x209D,
	0x2100,
	0x2103,
	0x2104,
	0x2105,
	0x2106,
	0x2109,
	0x210A,
	0x2113,
	0x2114,
	0x2116,
	0x2117,
	0x2121,
	0x2123,
	0x212B,
	0x212C,
	0x2154,
	0x2156,
	0x215B,
	0x215C,
	0x215E,
	0x215F,
	0x2160,
	0x216C,
	0x2170,
	0x217A,
	0x2189,
	0x218A,
	0x218C,
	0x219A,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x2200,
	0x2201,
	0x2202,
	0x2204,
	0x2207,
	0x2209,
	0x220B,
	0x220C,
	0x220F,
	0x2210,
	0x2211,
	0x2214,
	0x2215,
	0x2216,
	0x221A,
	0x221B,
	0x221D,
	0x2221,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222D,
	0x222E,
	0x222F,
	0x2234,
	0x2238,
	0x223C,
	0x223E,
	0x2248,
	0x2249,
	0x224C,
	0x224D,
	0x2252,
	0x2253,
	0x2260,
	0x2262,
	0x2264,
	0x2268,
	0x226A,
	0x226C,
	0x226E,
	0x2270,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x2295,
	0x2296,
	0x2299,
	0x229A,
	0x22A5,
	0x22A6,
	0x22BF,
	0x22C0,
	0x22EF,
	0x22F0,
	0x2308,
	0x230C,
	0x2312,
	0x2313,
	0x231A,
	0x231C,
	0x2329,
	0x232B,
	0x23F0,
	0x23F4,
	0x2427,
	0x2440,
	0x244B,
	0x24FF,
	0x2500,
	0x254C,
	0x2550,
	0x2575,
	0x2580,
	0x2590,
	0x2592,
	0x2596,
	0x25A0,
	0x25A2,
	0x25A3,
	0x25AA,
	0x25B2,
	0x25B4,
	0x25B6,
	0x25B8,
	0x25BC,
	0x25BE,
	0x25C0,
	0x25C2,
	0x25C6,
	0x25C9,
	0x25CB,
	0x25CC,
	0x25CE,
	0x25D2,
	0x25E2,
	0x25E6,
	0x25EF,
	0x25F0,
	0x2600,
	0x2604,
	0x2605,
	0x2607,
	0x2609,
	0x260A,
	0x260E,
	0x2610,
	0x2614,
	0x2619,
	0x261A,
	0x2620,
	0x2639,
	0x263C,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2662,
	0x2663,
	0x2666,
	0x2667,
	0x266B,
	0x266C,
	0x266E,
	0x266F,
	0x2670,
	0x267F,
	0x2680,
	0x269E,
	0x26A0,
	0x26BD,
	0x26CE,
	0x26CF,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2705,
	0x2708,
	0x270E,
	0x2757,
	0x2758,
	0x275B,
	0x2761,
	0x2762,
	0x2765,
	0x2768,
	0x2794,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B55,
	0x2B5A,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E16,
	0x2E17,
	0x2E1A,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2F,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3A,
	0x2E3F,
	0x2E40,
	0x4DC0,
	0x4E00,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA6F3,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA82C,
	0xA830,
	0xA838,
	0xA839,
	0xA83A,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA95F,
	0xA960,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9C7,
	0xA9CA,
	0xA9CE,
	0xA9CF,
	0xA9D0,
	0xA9DE,
	0xA9E0,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA5C,
	0xAA5D,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE3,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB29,
	0xFB2A,
	0xFB50,
	0xFBC2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFDFD,
	0xFDFE,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFFE8,
	0xFFEF,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E1,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10858,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x10920,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A40,
	0x10A48,
	0x10A58,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE5,
	0x10AEB,
	0x10AF0,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11003,
	0x11038,
	0x11049,
	0x1104E,
	0x11052,
	0x11066,
	0x11083,
	0x110B0,
	0x110BB,
	0x110BE,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11174,
	0x11175,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x1144F,
	0x11450,
	0x1145D,
	0x1145E,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C8,
	0x11580,
	0x115AF,
	0x115C6,
	0x115C9,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11643,
	0x11645,
	0x11680,
	0x116AB,
	0x118A0,
	0x118E0,
	0x118EA,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A40,
	0x11A41,
	0x11A46,
	0x11A47,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C5A,
	0x11C6D,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x13258,
	0x1325E,
	0x13282,
	0x13283,
	0x13286,
	0x1328A,
	0x13379,
	0x1337C,
	0x1342F,
	0x14400,
	0x145CE,
	0x145D0,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16B46,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BC9D,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1DA8B,
	0x1DA8C,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D0,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F12E,
	0x1F12F,
	0x1F16A,
	0x1F16C,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F650,
	0x1F676,
	0x1F67C,
	0x1F680,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C
};

#   endif	/* EBCDIC 037 */

static const UV PL_LB__B2_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2014,
	0x2015,
	0x2E3A,
	0x2E3C
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__BA_invlist[] = { /* for ASCII/Latin1 */
	185,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0x7C,
	0x7D,
	0xAD,
	0xAE,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF0B,
	0xF0C,
	0xF34,
	0xF35,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xFBE,
	0xFC0,
	0xFD2,
	0xFD3,
	0x104A,
	0x104C,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D6,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x1804,
	0x1806,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2027,
	0x2028,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2CFA,
	0x2CFD,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E2A,
	0x2E2E,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E4A,
	0x3000,
	0x3001,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA8CE,
	0xA8D0,
	0xA92E,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A50,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B39,
	0x10B40,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144F,
	0x1145B,
	0x1145C,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A41,
	0x11A45,
	0x11A9A,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__BA_invlist[] = { /* for EBCDIC 1047 */
	185,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x4F,
	0x50,
	0xCA,
	0xCB,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF0B,
	0xF0C,
	0xF34,
	0xF35,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xFBE,
	0xFC0,
	0xFD2,
	0xFD3,
	0x104A,
	0x104C,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D6,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x1804,
	0x1806,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2027,
	0x2028,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2CFA,
	0x2CFD,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E2A,
	0x2E2E,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E4A,
	0x3000,
	0x3001,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA8CE,
	0xA8D0,
	0xA92E,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A50,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B39,
	0x10B40,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144F,
	0x1145B,
	0x1145C,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A41,
	0x11A45,
	0x11A9A,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__BA_invlist[] = { /* for EBCDIC 037 */
	185,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x4F,
	0x50,
	0xCA,
	0xCB,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF0B,
	0xF0C,
	0xF34,
	0xF35,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xFBE,
	0xFC0,
	0xFD2,
	0xFD3,
	0x104A,
	0x104C,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D6,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x1804,
	0x1806,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2027,
	0x2028,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2CFA,
	0x2CFD,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E2A,
	0x2E2E,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E4A,
	0x3000,
	0x3001,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA8CE,
	0xA8D0,
	0xA92E,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A50,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B39,
	0x10B40,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144F,
	0x1145B,
	0x1145C,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A41,
	0x11A45,
	0x11A9A,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__BB_invlist[] = { /* for ASCII/Latin1 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB4,
	0xB5,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0x1806,
	0x1807,
	0x1FFD,
	0x1FFE,
	0xA874,
	0xA876,
	0xA8FC,
	0xA8FD,
	0x11175,
	0x11176,
	0x111DB,
	0x111DC,
	0x115C1,
	0x115C2,
	0x11660,
	0x1166D,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A9E,
	0x11AA1,
	0x11C70,
	0x11C71
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__BB_invlist[] = { /* for EBCDIC 1047 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBE,
	0xBF,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0x1806,
	0x1807,
	0x1FFD,
	0x1FFE,
	0xA874,
	0xA876,
	0xA8FC,
	0xA8FD,
	0x11175,
	0x11176,
	0x111DB,
	0x111DC,
	0x115C1,
	0x115C2,
	0x11660,
	0x1166D,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A9E,
	0x11AA1,
	0x11C70,
	0x11C71
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__BB_invlist[] = { /* for EBCDIC 037 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBE,
	0xBF,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0x1806,
	0x1807,
	0x1FFD,
	0x1FFE,
	0xA874,
	0xA876,
	0xA8FC,
	0xA8FD,
	0x11175,
	0x11176,
	0x111DB,
	0x111DC,
	0x115C1,
	0x115C2,
	0x11660,
	0x1166D,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A9E,
	0x11AA1,
	0x11C70,
	0x11C71
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__BK_invlist[] = { /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xD,
	0x2028,
	0x202A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__BK_invlist[] = { /* for EBCDIC 1047 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xD,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__BK_invlist[] = { /* for EBCDIC 037 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xD,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 037 */

static const UV PL_LB__CB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFFFC,
	0xFFFD
};

static const UV PL_LB__CJ_invlist[] = { /* for all charsets */
	51,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x30A1,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FC,
	0x30FD,
	0x31F0,
	0x3200,
	0xFF67,
	0xFF71
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__CL_invlist[] = { /* for ASCII/Latin1 */
	165,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x3001,
	0x3003,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE11,
	0xFE13,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x1337A,
	0x1337C,
	0x145CF,
	0x145D0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__CL_invlist[] = { /* for EBCDIC 1047 */
	165,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD0,
	0xD1,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x3001,
	0x3003,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE11,
	0xFE13,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x1337A,
	0x1337C,
	0x145CF,
	0x145D0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__CL_invlist[] = { /* for EBCDIC 037 */
	165,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD0,
	0xD1,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x3001,
	0x3003,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE11,
	0xFE13,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x1337A,
	0x1337C,
	0x145CF,
	0x145D0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__CM_invlist[] = { /* for ASCII/Latin1 */
	502,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xE,
	0x20,
	0x7F,
	0x85,
	0x86,
	0xA0,
	0x300,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2066,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111CA,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__CM_invlist[] = { /* for EBCDIC 1047 */
	506,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0xFF,
	0x100,
	0x300,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2066,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111CA,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__CM_invlist[] = { /* for EBCDIC 037 */
	506,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0xFF,
	0x100,
	0x300,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200C,
	0x200D,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2066,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111CA,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__CP_invlist[] = { /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x29,
	0x2A,
	0x5D,
	0x5E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__CP_invlist[] = { /* for EBCDIC 1047 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5D,
	0x5E,
	0xBD,
	0xBE
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__CP_invlist[] = { /* for EBCDIC 037 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5D,
	0x5E,
	0xBB,
	0xBC
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__CR_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__CR_invlist[] = { /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__CR_invlist[] = { /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE
};

#   endif	/* EBCDIC 037 */

static const UV PL_LB__EB_invlist[] = { /* for all charsets */
	65,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x261D,
	0x261E,
	0x26F9,
	0x26FA,
	0x270A,
	0x270E,
	0x1F385,
	0x1F386,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F4AA,
	0x1F4AB,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE
};

static const UV PL_LB__EM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F3FB,
	0x1F400
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__EX_invlist[] = { /* for ASCII/Latin1 */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x22,
	0x3F,
	0x40,
	0x5C6,
	0x5C7,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x6D4,
	0x6D5,
	0x7F9,
	0x7FA,
	0xF0D,
	0xF12,
	0xF14,
	0xF15,
	0x1802,
	0x1804,
	0x1808,
	0x180A,
	0x1944,
	0x1946,
	0x2762,
	0x2764,
	0x2CF9,
	0x2CFA,
	0x2CFE,
	0x2CFF,
	0x2E2E,
	0x2E2F,
	0xA60E,
	0xA60F,
	0xA876,
	0xA878,
	0xFE15,
	0xFE17,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF1F,
	0xFF20,
	0x115C4,
	0x115C6,
	0x11C71,
	0x11C72
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__EX_invlist[] = { /* for EBCDIC 1047 */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x5C6,
	0x5C7,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x6D4,
	0x6D5,
	0x7F9,
	0x7FA,
	0xF0D,
	0xF12,
	0xF14,
	0xF15,
	0x1802,
	0x1804,
	0x1808,
	0x180A,
	0x1944,
	0x1946,
	0x2762,
	0x2764,
	0x2CF9,
	0x2CFA,
	0x2CFE,
	0x2CFF,
	0x2E2E,
	0x2E2F,
	0xA60E,
	0xA60F,
	0xA876,
	0xA878,
	0xFE15,
	0xFE17,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF1F,
	0xFF20,
	0x115C4,
	0x115C6,
	0x11C71,
	0x11C72
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__EX_invlist[] = { /* for EBCDIC 037 */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x5C6,
	0x5C7,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x6D4,
	0x6D5,
	0x7F9,
	0x7FA,
	0xF0D,
	0xF12,
	0xF14,
	0xF15,
	0x1802,
	0x1804,
	0x1808,
	0x180A,
	0x1944,
	0x1946,
	0x2762,
	0x2764,
	0x2CF9,
	0x2CFA,
	0x2CFE,
	0x2CFF,
	0x2E2E,
	0x2E2F,
	0xA60E,
	0xA60F,
	0xA876,
	0xA878,
	0xFE15,
	0xFE17,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF1F,
	0xFF20,
	0x115C4,
	0x115C6,
	0x11C71,
	0x11C72
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__GL_invlist[] = { /* for ASCII/Latin1 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA0,
	0xA1,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0xF08,
	0xF09,
	0xF0C,
	0xF0D,
	0xF12,
	0xF13,
	0xFD9,
	0xFDB,
	0x180E,
	0x180F,
	0x2007,
	0x2008,
	0x2011,
	0x2012,
	0x202F,
	0x2030
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__GL_invlist[] = { /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0xF08,
	0xF09,
	0xF0C,
	0xF0D,
	0xF12,
	0xF13,
	0xFD9,
	0xFDB,
	0x180E,
	0x180F,
	0x2007,
	0x2008,
	0x2011,
	0x2012,
	0x202F,
	0x2030
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__GL_invlist[] = { /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x34F,
	0x350,
	0x35C,
	0x363,
	0xF08,
	0xF09,
	0xF0C,
	0xF0D,
	0xF12,
	0xF13,
	0xFD9,
	0xFDB,
	0x180E,
	0x180F,
	0x2007,
	0x2008,
	0x2011,
	0x2012,
	0x202F,
	0x2030
};

#   endif	/* EBCDIC 037 */

static const UV PL_LB__H2_invlist[] = { /* for all charsets */
	799,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAC00,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789
};

static const UV PL_LB__H3_invlist[] = { /* for all charsets */
	799,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAC01,
	0xAC1C,
	0xAC1D,
	0xAC38,
	0xAC39,
	0xAC54,
	0xAC55,
	0xAC70,
	0xAC71,
	0xAC8C,
	0xAC8D,
	0xACA8,
	0xACA9,
	0xACC4,
	0xACC5,
	0xACE0,
	0xACE1,
	0xACFC,
	0xACFD,
	0xAD18,
	0xAD19,
	0xAD34,
	0xAD35,
	0xAD50,
	0xAD51,
	0xAD6C,
	0xAD6D,
	0xAD88,
	0xAD89,
	0xADA4,
	0xADA5,
	0xADC0,
	0xADC1,
	0xADDC,
	0xADDD,
	0xADF8,
	0xADF9,
	0xAE14,
	0xAE15,
	0xAE30,
	0xAE31,
	0xAE4C,
	0xAE4D,
	0xAE68,
	0xAE69,
	0xAE84,
	0xAE85,
	0xAEA0,
	0xAEA1,
	0xAEBC,
	0xAEBD,
	0xAED8,
	0xAED9,
	0xAEF4,
	0xAEF5,
	0xAF10,
	0xAF11,
	0xAF2C,
	0xAF2D,
	0xAF48,
	0xAF49,
	0xAF64,
	0xAF65,
	0xAF80,
	0xAF81,
	0xAF9C,
	0xAF9D,
	0xAFB8,
	0xAFB9,
	0xAFD4,
	0xAFD5,
	0xAFF0,
	0xAFF1,
	0xB00C,
	0xB00D,
	0xB028,
	0xB029,
	0xB044,
	0xB045,
	0xB060,
	0xB061,
	0xB07C,
	0xB07D,
	0xB098,
	0xB099,
	0xB0B4,
	0xB0B5,
	0xB0D0,
	0xB0D1,
	0xB0EC,
	0xB0ED,
	0xB108,
	0xB109,
	0xB124,
	0xB125,
	0xB140,
	0xB141,
	0xB15C,
	0xB15D,
	0xB178,
	0xB179,
	0xB194,
	0xB195,
	0xB1B0,
	0xB1B1,
	0xB1CC,
	0xB1CD,
	0xB1E8,
	0xB1E9,
	0xB204,
	0xB205,
	0xB220,
	0xB221,
	0xB23C,
	0xB23D,
	0xB258,
	0xB259,
	0xB274,
	0xB275,
	0xB290,
	0xB291,
	0xB2AC,
	0xB2AD,
	0xB2C8,
	0xB2C9,
	0xB2E4,
	0xB2E5,
	0xB300,
	0xB301,
	0xB31C,
	0xB31D,
	0xB338,
	0xB339,
	0xB354,
	0xB355,
	0xB370,
	0xB371,
	0xB38C,
	0xB38D,
	0xB3A8,
	0xB3A9,
	0xB3C4,
	0xB3C5,
	0xB3E0,
	0xB3E1,
	0xB3FC,
	0xB3FD,
	0xB418,
	0xB419,
	0xB434,
	0xB435,
	0xB450,
	0xB451,
	0xB46C,
	0xB46D,
	0xB488,
	0xB489,
	0xB4A4,
	0xB4A5,
	0xB4C0,
	0xB4C1,
	0xB4DC,
	0xB4DD,
	0xB4F8,
	0xB4F9,
	0xB514,
	0xB515,
	0xB530,
	0xB531,
	0xB54C,
	0xB54D,
	0xB568,
	0xB569,
	0xB584,
	0xB585,
	0xB5A0,
	0xB5A1,
	0xB5BC,
	0xB5BD,
	0xB5D8,
	0xB5D9,
	0xB5F4,
	0xB5F5,
	0xB610,
	0xB611,
	0xB62C,
	0xB62D,
	0xB648,
	0xB649,
	0xB664,
	0xB665,
	0xB680,
	0xB681,
	0xB69C,
	0xB69D,
	0xB6B8,
	0xB6B9,
	0xB6D4,
	0xB6D5,
	0xB6F0,
	0xB6F1,
	0xB70C,
	0xB70D,
	0xB728,
	0xB729,
	0xB744,
	0xB745,
	0xB760,
	0xB761,
	0xB77C,
	0xB77D,
	0xB798,
	0xB799,
	0xB7B4,
	0xB7B5,
	0xB7D0,
	0xB7D1,
	0xB7EC,
	0xB7ED,
	0xB808,
	0xB809,
	0xB824,
	0xB825,
	0xB840,
	0xB841,
	0xB85C,
	0xB85D,
	0xB878,
	0xB879,
	0xB894,
	0xB895,
	0xB8B0,
	0xB8B1,
	0xB8CC,
	0xB8CD,
	0xB8E8,
	0xB8E9,
	0xB904,
	0xB905,
	0xB920,
	0xB921,
	0xB93C,
	0xB93D,
	0xB958,
	0xB959,
	0xB974,
	0xB975,
	0xB990,
	0xB991,
	0xB9AC,
	0xB9AD,
	0xB9C8,
	0xB9C9,
	0xB9E4,
	0xB9E5,
	0xBA00,
	0xBA01,
	0xBA1C,
	0xBA1D,
	0xBA38,
	0xBA39,
	0xBA54,
	0xBA55,
	0xBA70,
	0xBA71,
	0xBA8C,
	0xBA8D,
	0xBAA8,
	0xBAA9,
	0xBAC4,
	0xBAC5,
	0xBAE0,
	0xBAE1,
	0xBAFC,
	0xBAFD,
	0xBB18,
	0xBB19,
	0xBB34,
	0xBB35,
	0xBB50,
	0xBB51,
	0xBB6C,
	0xBB6D,
	0xBB88,
	0xBB89,
	0xBBA4,
	0xBBA5,
	0xBBC0,
	0xBBC1,
	0xBBDC,
	0xBBDD,
	0xBBF8,
	0xBBF9,
	0xBC14,
	0xBC15,
	0xBC30,
	0xBC31,
	0xBC4C,
	0xBC4D,
	0xBC68,
	0xBC69,
	0xBC84,
	0xBC85,
	0xBCA0,
	0xBCA1,
	0xBCBC,
	0xBCBD,
	0xBCD8,
	0xBCD9,
	0xBCF4,
	0xBCF5,
	0xBD10,
	0xBD11,
	0xBD2C,
	0xBD2D,
	0xBD48,
	0xBD49,
	0xBD64,
	0xBD65,
	0xBD80,
	0xBD81,
	0xBD9C,
	0xBD9D,
	0xBDB8,
	0xBDB9,
	0xBDD4,
	0xBDD5,
	0xBDF0,
	0xBDF1,
	0xBE0C,
	0xBE0D,
	0xBE28,
	0xBE29,
	0xBE44,
	0xBE45,
	0xBE60,
	0xBE61,
	0xBE7C,
	0xBE7D,
	0xBE98,
	0xBE99,
	0xBEB4,
	0xBEB5,
	0xBED0,
	0xBED1,
	0xBEEC,
	0xBEED,
	0xBF08,
	0xBF09,
	0xBF24,
	0xBF25,
	0xBF40,
	0xBF41,
	0xBF5C,
	0xBF5D,
	0xBF78,
	0xBF79,
	0xBF94,
	0xBF95,
	0xBFB0,
	0xBFB1,
	0xBFCC,
	0xBFCD,
	0xBFE8,
	0xBFE9,
	0xC004,
	0xC005,
	0xC020,
	0xC021,
	0xC03C,
	0xC03D,
	0xC058,
	0xC059,
	0xC074,
	0xC075,
	0xC090,
	0xC091,
	0xC0AC,
	0xC0AD,
	0xC0C8,
	0xC0C9,
	0xC0E4,
	0xC0E5,
	0xC100,
	0xC101,
	0xC11C,
	0xC11D,
	0xC138,
	0xC139,
	0xC154,
	0xC155,
	0xC170,
	0xC171,
	0xC18C,
	0xC18D,
	0xC1A8,
	0xC1A9,
	0xC1C4,
	0xC1C5,
	0xC1E0,
	0xC1E1,
	0xC1FC,
	0xC1FD,
	0xC218,
	0xC219,
	0xC234,
	0xC235,
	0xC250,
	0xC251,
	0xC26C,
	0xC26D,
	0xC288,
	0xC289,
	0xC2A4,
	0xC2A5,
	0xC2C0,
	0xC2C1,
	0xC2DC,
	0xC2DD,
	0xC2F8,
	0xC2F9,
	0xC314,
	0xC315,
	0xC330,
	0xC331,
	0xC34C,
	0xC34D,
	0xC368,
	0xC369,
	0xC384,
	0xC385,
	0xC3A0,
	0xC3A1,
	0xC3BC,
	0xC3BD,
	0xC3D8,
	0xC3D9,
	0xC3F4,
	0xC3F5,
	0xC410,
	0xC411,
	0xC42C,
	0xC42D,
	0xC448,
	0xC449,
	0xC464,
	0xC465,
	0xC480,
	0xC481,
	0xC49C,
	0xC49D,
	0xC4B8,
	0xC4B9,
	0xC4D4,
	0xC4D5,
	0xC4F0,
	0xC4F1,
	0xC50C,
	0xC50D,
	0xC528,
	0xC529,
	0xC544,
	0xC545,
	0xC560,
	0xC561,
	0xC57C,
	0xC57D,
	0xC598,
	0xC599,
	0xC5B4,
	0xC5B5,
	0xC5D0,
	0xC5D1,
	0xC5EC,
	0xC5ED,
	0xC608,
	0xC609,
	0xC624,
	0xC625,
	0xC640,
	0xC641,
	0xC65C,
	0xC65D,
	0xC678,
	0xC679,
	0xC694,
	0xC695,
	0xC6B0,
	0xC6B1,
	0xC6CC,
	0xC6CD,
	0xC6E8,
	0xC6E9,
	0xC704,
	0xC705,
	0xC720,
	0xC721,
	0xC73C,
	0xC73D,
	0xC758,
	0xC759,
	0xC774,
	0xC775,
	0xC790,
	0xC791,
	0xC7AC,
	0xC7AD,
	0xC7C8,
	0xC7C9,
	0xC7E4,
	0xC7E5,
	0xC800,
	0xC801,
	0xC81C,
	0xC81D,
	0xC838,
	0xC839,
	0xC854,
	0xC855,
	0xC870,
	0xC871,
	0xC88C,
	0xC88D,
	0xC8A8,
	0xC8A9,
	0xC8C4,
	0xC8C5,
	0xC8E0,
	0xC8E1,
	0xC8FC,
	0xC8FD,
	0xC918,
	0xC919,
	0xC934,
	0xC935,
	0xC950,
	0xC951,
	0xC96C,
	0xC96D,
	0xC988,
	0xC989,
	0xC9A4,
	0xC9A5,
	0xC9C0,
	0xC9C1,
	0xC9DC,
	0xC9DD,
	0xC9F8,
	0xC9F9,
	0xCA14,
	0xCA15,
	0xCA30,
	0xCA31,
	0xCA4C,
	0xCA4D,
	0xCA68,
	0xCA69,
	0xCA84,
	0xCA85,
	0xCAA0,
	0xCAA1,
	0xCABC,
	0xCABD,
	0xCAD8,
	0xCAD9,
	0xCAF4,
	0xCAF5,
	0xCB10,
	0xCB11,
	0xCB2C,
	0xCB2D,
	0xCB48,
	0xCB49,
	0xCB64,
	0xCB65,
	0xCB80,
	0xCB81,
	0xCB9C,
	0xCB9D,
	0xCBB8,
	0xCBB9,
	0xCBD4,
	0xCBD5,
	0xCBF0,
	0xCBF1,
	0xCC0C,
	0xCC0D,
	0xCC28,
	0xCC29,
	0xCC44,
	0xCC45,
	0xCC60,
	0xCC61,
	0xCC7C,
	0xCC7D,
	0xCC98,
	0xCC99,
	0xCCB4,
	0xCCB5,
	0xCCD0,
	0xCCD1,
	0xCCEC,
	0xCCED,
	0xCD08,
	0xCD09,
	0xCD24,
	0xCD25,
	0xCD40,
	0xCD41,
	0xCD5C,
	0xCD5D,
	0xCD78,
	0xCD79,
	0xCD94,
	0xCD95,
	0xCDB0,
	0xCDB1,
	0xCDCC,
	0xCDCD,
	0xCDE8,
	0xCDE9,
	0xCE04,
	0xCE05,
	0xCE20,
	0xCE21,
	0xCE3C,
	0xCE3D,
	0xCE58,
	0xCE59,
	0xCE74,
	0xCE75,
	0xCE90,
	0xCE91,
	0xCEAC,
	0xCEAD,
	0xCEC8,
	0xCEC9,
	0xCEE4,
	0xCEE5,
	0xCF00,
	0xCF01,
	0xCF1C,
	0xCF1D,
	0xCF38,
	0xCF39,
	0xCF54,
	0xCF55,
	0xCF70,
	0xCF71,
	0xCF8C,
	0xCF8D,
	0xCFA8,
	0xCFA9,
	0xCFC4,
	0xCFC5,
	0xCFE0,
	0xCFE1,
	0xCFFC,
	0xCFFD,
	0xD018,
	0xD019,
	0xD034,
	0xD035,
	0xD050,
	0xD051,
	0xD06C,
	0xD06D,
	0xD088,
	0xD089,
	0xD0A4,
	0xD0A5,
	0xD0C0,
	0xD0C1,
	0xD0DC,
	0xD0DD,
	0xD0F8,
	0xD0F9,
	0xD114,
	0xD115,
	0xD130,
	0xD131,
	0xD14C,
	0xD14D,
	0xD168,
	0xD169,
	0xD184,
	0xD185,
	0xD1A0,
	0xD1A1,
	0xD1BC,
	0xD1BD,
	0xD1D8,
	0xD1D9,
	0xD1F4,
	0xD1F5,
	0xD210,
	0xD211,
	0xD22C,
	0xD22D,
	0xD248,
	0xD249,
	0xD264,
	0xD265,
	0xD280,
	0xD281,
	0xD29C,
	0xD29D,
	0xD2B8,
	0xD2B9,
	0xD2D4,
	0xD2D5,
	0xD2F0,
	0xD2F1,
	0xD30C,
	0xD30D,
	0xD328,
	0xD329,
	0xD344,
	0xD345,
	0xD360,
	0xD361,
	0xD37C,
	0xD37D,
	0xD398,
	0xD399,
	0xD3B4,
	0xD3B5,
	0xD3D0,
	0xD3D1,
	0xD3EC,
	0xD3ED,
	0xD408,
	0xD409,
	0xD424,
	0xD425,
	0xD440,
	0xD441,
	0xD45C,
	0xD45D,
	0xD478,
	0xD479,
	0xD494,
	0xD495,
	0xD4B0,
	0xD4B1,
	0xD4CC,
	0xD4CD,
	0xD4E8,
	0xD4E9,
	0xD504,
	0xD505,
	0xD520,
	0xD521,
	0xD53C,
	0xD53D,
	0xD558,
	0xD559,
	0xD574,
	0xD575,
	0xD590,
	0xD591,
	0xD5AC,
	0xD5AD,
	0xD5C8,
	0xD5C9,
	0xD5E4,
	0xD5E5,
	0xD600,
	0xD601,
	0xD61C,
	0xD61D,
	0xD638,
	0xD639,
	0xD654,
	0xD655,
	0xD670,
	0xD671,
	0xD68C,
	0xD68D,
	0xD6A8,
	0xD6A9,
	0xD6C4,
	0xD6C5,
	0xD6E0,
	0xD6E1,
	0xD6FC,
	0xD6FD,
	0xD718,
	0xD719,
	0xD734,
	0xD735,
	0xD750,
	0xD751,
	0xD76C,
	0xD76D,
	0xD788,
	0xD789,
	0xD7A4
};

static const UV PL_LB__HL_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__HY_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__HY_invlist[] = { /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__HY_invlist[] = { /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61
};

#   endif	/* EBCDIC 037 */

static const UV PL_LB__ID_invlist[] = { /* for all charsets */
	321,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x231A,
	0x231C,
	0x23F0,
	0x23F4,
	0x2600,
	0x2604,
	0x2614,
	0x2616,
	0x2618,
	0x2619,
	0x261A,
	0x261D,
	0x261E,
	0x2620,
	0x2639,
	0x263C,
	0x2668,
	0x2669,
	0x267F,
	0x2680,
	0x26BD,
	0x26C9,
	0x26CD,
	0x26CE,
	0x26CF,
	0x26D2,
	0x26D3,
	0x26D5,
	0x26D8,
	0x26DA,
	0x26DC,
	0x26DD,
	0x26DF,
	0x26E2,
	0x26EA,
	0x26EB,
	0x26F1,
	0x26F6,
	0x26F7,
	0x26F9,
	0x26FA,
	0x26FB,
	0x26FD,
	0x2705,
	0x2708,
	0x270A,
	0x2764,
	0x2765,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3003,
	0x3005,
	0x3006,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x302A,
	0x3030,
	0x3035,
	0x3036,
	0x303B,
	0x303D,
	0x3040,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x309F,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x32FF,
	0x3300,
	0x4DC0,
	0x4E00,
	0xA015,
	0xA016,
	0xA48D,
	0xA490,
	0xA4C7,
	0xF900,
	0xFB00,
	0xFE30,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE58,
	0xFE59,
	0xFE5F,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6B,
	0xFE6C,
	0xFF02,
	0xFF04,
	0xFF06,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0xFF67,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE2,
	0xFFE5,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1F000,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F385,
	0x1F386,
	0x1F39C,
	0x1F39E,
	0x1F3B5,
	0x1F3B7,
	0x1F3BC,
	0x1F3BD,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F4A0,
	0x1F4A1,
	0x1F4A2,
	0x1F4A3,
	0x1F4A4,
	0x1F4A5,
	0x1F4AA,
	0x1F4AB,
	0x1F4AF,
	0x1F4B0,
	0x1F4B1,
	0x1F4B3,
	0x1F500,
	0x1F507,
	0x1F517,
	0x1F525,
	0x1F532,
	0x1F54A,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5D4,
	0x1F5DC,
	0x1F5F4,
	0x1F5FA,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F680,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE
};

static const UV PL_LB__IN_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2024,
	0x2027,
	0x22EF,
	0x22F0,
	0xFE19,
	0xFE1A,
	0x10AF6,
	0x10AF7
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__IS_invlist[] = { /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C,
	0x2D,
	0x2E,
	0x2F,
	0x3A,
	0x3C,
	0x37E,
	0x37F,
	0x589,
	0x58A,
	0x60C,
	0x60E,
	0x7F8,
	0x7F9,
	0x2044,
	0x2045,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE15
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__IS_invlist[] = { /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5E,
	0x5F,
	0x6B,
	0x6C,
	0x7A,
	0x7B,
	0x37E,
	0x37F,
	0x589,
	0x58A,
	0x60C,
	0x60E,
	0x7F8,
	0x7F9,
	0x2044,
	0x2045,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE15
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__IS_invlist[] = { /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5E,
	0x5F,
	0x6B,
	0x6C,
	0x7A,
	0x7B,
	0x37E,
	0x37F,
	0x589,
	0x58A,
	0x60C,
	0x60E,
	0x7F8,
	0x7F9,
	0x2044,
	0x2045,
	0xFE10,
	0xFE11,
	0xFE13,
	0xFE15
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__LF_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xB
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__LF_invlist[] = { /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x15,
	0x16
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__LF_invlist[] = { /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x25,
	0x26
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__NL_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x85,
	0x86
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__NL_invlist[] = { /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x25,
	0x26
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__NL_invlist[] = { /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x15,
	0x16
};

#   endif	/* EBCDIC 037 */

static const UV PL_LB__NS_invlist[] = { /* for all charsets */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x17D6,
	0x17D7,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x3005,
	0x3006,
	0x301C,
	0x301D,
	0x303B,
	0x303D,
	0x309B,
	0x309F,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x30FD,
	0x30FF,
	0xA015,
	0xA016,
	0xFE54,
	0xFE56,
	0xFF1A,
	0xFF1C,
	0xFF65,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0x16FE0,
	0x16FE2,
	0x1F679,
	0x1F67C
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__NU_invlist[] = { /* for ASCII/Latin1 */
	111,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E950,
	0x1E95A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__NU_invlist[] = { /* for EBCDIC 1047 */
	111,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E950,
	0x1E95A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__NU_invlist[] = { /* for EBCDIC 037 */
	111,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x66B,
	0x66D,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E950,
	0x1E95A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__OP_invlist[] = { /* for ASCII/Latin1 */
	169,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x28,
	0x29,
	0x5B,
	0x5C,
	0x7B,
	0x7C,
	0xA1,
	0xA2,
	0xBF,
	0xC0,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E18,
	0x2E19,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E42,
	0x2E43,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301D,
	0x301E,
	0xFD3F,
	0xFD40,
	0xFE17,
	0xFE18,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE47,
	0xFE48,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63,
	0x13258,
	0x1325B,
	0x13286,
	0x13287,
	0x13288,
	0x13289,
	0x13379,
	0x1337A,
	0x145CE,
	0x145CF,
	0x1E95E,
	0x1E960
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__OP_invlist[] = { /* for EBCDIC 1047 */
	167,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xC0,
	0xC1,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E18,
	0x2E19,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E42,
	0x2E43,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301D,
	0x301E,
	0xFD3F,
	0xFD40,
	0xFE17,
	0xFE18,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE47,
	0xFE48,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63,
	0x13258,
	0x1325B,
	0x13286,
	0x13287,
	0x13288,
	0x13289,
	0x13379,
	0x1337A,
	0x145CE,
	0x145CF,
	0x1E95E,
	0x1E960
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__OP_invlist[] = { /* for EBCDIC 037 */
	167,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0xAA,
	0xAC,
	0xBA,
	0xBB,
	0xC0,
	0xC1,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E18,
	0x2E19,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E42,
	0x2E43,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301D,
	0x301E,
	0xFD3F,
	0xFD40,
	0xFE17,
	0xFE18,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE47,
	0xFE48,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63,
	0x13258,
	0x1325B,
	0x13286,
	0x13287,
	0x13288,
	0x13289,
	0x13379,
	0x1337A,
	0x145CE,
	0x145CF,
	0x1E95E,
	0x1E960
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__PO_invlist[] = { /* for ASCII/Latin1 */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x25,
	0x26,
	0xA2,
	0xA3,
	0xB0,
	0xB1,
	0x609,
	0x60C,
	0x66A,
	0x66B,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0xD79,
	0xD7A,
	0x2030,
	0x2038,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x2103,
	0x2104,
	0x2109,
	0x210A,
	0xA838,
	0xA839,
	0xFDFC,
	0xFDFD,
	0xFE6A,
	0xFE6B,
	0xFF05,
	0xFF06,
	0xFFE0,
	0xFFE1
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__PO_invlist[] = { /* for EBCDIC 1047 */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x4B,
	0x6C,
	0x6D,
	0x90,
	0x91,
	0x609,
	0x60C,
	0x66A,
	0x66B,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0xD79,
	0xD7A,
	0x2030,
	0x2038,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x2103,
	0x2104,
	0x2109,
	0x210A,
	0xA838,
	0xA839,
	0xFDFC,
	0xFDFD,
	0xFE6A,
	0xFE6B,
	0xFF05,
	0xFF06,
	0xFFE0,
	0xFFE1
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__PO_invlist[] = { /* for EBCDIC 037 */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x4B,
	0x6C,
	0x6D,
	0x90,
	0x91,
	0x609,
	0x60C,
	0x66A,
	0x66B,
	0x9F2,
	0x9F4,
	0x9F9,
	0x9FA,
	0xD79,
	0xD7A,
	0x2030,
	0x2038,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x2103,
	0x2104,
	0x2109,
	0x210A,
	0xA838,
	0xA839,
	0xFDFC,
	0xFDFD,
	0xFE6A,
	0xFE6B,
	0xFF05,
	0xFF06,
	0xFFE0,
	0xFFE1
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__PR_invlist[] = { /* for ASCII/Latin1 */
	45,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x24,
	0x25,
	0x2B,
	0x2C,
	0x5C,
	0x5D,
	0xA3,
	0xA6,
	0xB1,
	0xB2,
	0x58F,
	0x590,
	0x9FB,
	0x9FC,
	0xAF1,
	0xAF2,
	0xBF9,
	0xBFA,
	0xE3F,
	0xE40,
	0x17DB,
	0x17DC,
	0x20A0,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x20D0,
	0x2116,
	0x2117,
	0x2212,
	0x2214,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFFE1,
	0xFFE2,
	0xFFE5,
	0xFFE7
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__PR_invlist[] = { /* for EBCDIC 1047 */
	47,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4E,
	0x4F,
	0x5B,
	0x5C,
	0x8F,
	0x90,
	0x9F,
	0xA0,
	0xB1,
	0xB3,
	0xE0,
	0xE1,
	0x58F,
	0x590,
	0x9FB,
	0x9FC,
	0xAF1,
	0xAF2,
	0xBF9,
	0xBFA,
	0xE3F,
	0xE40,
	0x17DB,
	0x17DC,
	0x20A0,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x20D0,
	0x2116,
	0x2117,
	0x2212,
	0x2214,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFFE1,
	0xFFE2,
	0xFFE5,
	0xFFE7
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__PR_invlist[] = { /* for EBCDIC 037 */
	47,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4E,
	0x4F,
	0x5B,
	0x5C,
	0x8F,
	0x90,
	0x9F,
	0xA0,
	0xB1,
	0xB3,
	0xE0,
	0xE1,
	0x58F,
	0x590,
	0x9FB,
	0x9FC,
	0xAF1,
	0xAF2,
	0xBF9,
	0xBFA,
	0xE3F,
	0xE40,
	0x17DB,
	0x17DC,
	0x20A0,
	0x20A7,
	0x20A8,
	0x20B6,
	0x20B7,
	0x20BB,
	0x20BC,
	0x20BE,
	0x20BF,
	0x20D0,
	0x2116,
	0x2117,
	0x2212,
	0x2214,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFFE1,
	0xFFE2,
	0xFFE5,
	0xFFE7
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__QU_invlist[] = { /* for ASCII/Latin1 */
	27,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x22,
	0x23,
	0x27,
	0x28,
	0xAB,
	0xAC,
	0xBB,
	0xBC,
	0x2018,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2020,
	0x2039,
	0x203B,
	0x275B,
	0x2761,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E22,
	0x1F676,
	0x1F679
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__QU_invlist[] = { /* for EBCDIC 1047 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x2018,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2020,
	0x2039,
	0x203B,
	0x275B,
	0x2761,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E22,
	0x1F676,
	0x1F679
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__QU_invlist[] = { /* for EBCDIC 037 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x2018,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2020,
	0x2039,
	0x203B,
	0x275B,
	0x2761,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E22,
	0x1F676,
	0x1F679
};

#   endif	/* EBCDIC 037 */

static const UV PL_LB__SA_invlist[] = { /* for all charsets */
	85,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xEDC,
	0xEE0,
	0x1000,
	0x1040,
	0x1050,
	0x1090,
	0x109A,
	0x10A0,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19DA,
	0x19DB,
	0x19DE,
	0x19E0,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1AA0,
	0x1AAE,
	0xA9E0,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA60,
	0xAAC3,
	0xAADB,
	0xAAE0,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x1173A,
	0x1173C,
	0x1173F,
	0x11740
};

static const UV PL_LB__SG_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD800,
	0xE000
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__SP_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x21
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__SP_invlist[] = { /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__SP_invlist[] = { /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LB__SY_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2F,
	0x30
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__SY_invlist[] = { /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x62
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LB__SY_invlist[] = { /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x62
};

#   endif	/* EBCDIC 037 */

static const UV PL_LB__WJ_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2060,
	0x2061,
	0xFEFF,
	0xFF00
};

static const UV PL_LB__XX_invlist[] = { /* for all charsets */
	1216,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xD800,
	0xE000,
	0xF900,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

static const UV PL_LB__ZW_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x200B,
	0x200C
};

static const UV PL_LB__ZWJ_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x200D,
	0x200E
};

static const UV PL_LEPC_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C50
};

static const UV PL_LETTERLIKESYMBOLS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2100,
	0x2150
};

static const UV PL_LIMB_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x965,
	0x966,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x1950
};

static const UV PL_LINA_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10107,
	0x10134,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768
};

static const UV PL_LINB_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140
};

static const UV PL_LINEARBIDEOGRAMS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10080,
	0x10100
};

static const UV PL_LINEARBSYLLABARY_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10000,
	0x10080
};

static const UV PL_LISU_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA4D0,
	0xA500
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LL_invlist[] = { /* for ASCII/Latin1 */
	1267,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x7B,
	0xB5,
	0xB6,
	0xDF,
	0xF7,
	0xF8,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B0,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2184,
	0x2185,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7C,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA771,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7FA,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB60,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1E922,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LL_invlist[] = { /* for EBCDIC 1047 */
	1281,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B0,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2184,
	0x2185,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7C,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA771,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7FA,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB60,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LL_invlist[] = { /* for EBCDIC 037 */
	1281,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9A,
	0x9C,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B0,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37B,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2184,
	0x2185,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7C,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA771,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7FA,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB60,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 037 */

static const UV PL_LM_invlist[] = { /* for all charsets */
	115,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2B0,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x559,
	0x55A,
	0x640,
	0x641,
	0x6E5,
	0x6E7,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x971,
	0x972,
	0xE46,
	0xE47,
	0xEC6,
	0xEC7,
	0x10FC,
	0x10FD,
	0x17D7,
	0x17D8,
	0x1843,
	0x1844,
	0x1AA7,
	0x1AA8,
	0x1C78,
	0x1C7E,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x3031,
	0x3036,
	0x303B,
	0x303C,
	0x309D,
	0x309F,
	0x30FC,
	0x30FF,
	0xA015,
	0xA016,
	0xA4F8,
	0xA4FE,
	0xA60C,
	0xA60D,
	0xA67F,
	0xA680,
	0xA69C,
	0xA69E,
	0xA717,
	0xA720,
	0xA770,
	0xA771,
	0xA788,
	0xA789,
	0xA7F8,
	0xA7FA,
	0xA9CF,
	0xA9D0,
	0xA9E6,
	0xA9E7,
	0xAA70,
	0xAA71,
	0xAADD,
	0xAADE,
	0xAAF3,
	0xAAF5,
	0xAB5C,
	0xAB60,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0x16B40,
	0x16B44,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LO_invlist[] = { /* for ASCII/Latin1 */
	919,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA,
	0xAB,
	0xBA,
	0xBB,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x640,
	0x641,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x800,
	0x816,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x972,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE46,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10D0,
	0x10FB,
	0x10FD,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16F1,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17DC,
	0x17DD,
	0x1820,
	0x1843,
	0x1844,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C78,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x2135,
	0x2139,
	0x2D30,
	0x2D68,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3006,
	0x3007,
	0x303C,
	0x303D,
	0x3041,
	0x3097,
	0x309F,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA015,
	0xA016,
	0xA48D,
	0xA4D0,
	0xA4F8,
	0xA500,
	0xA60C,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA66E,
	0xA66F,
	0xA6A0,
	0xA6E6,
	0xA78F,
	0xA790,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9E0,
	0xA9E5,
	0xA9E7,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADD,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF3,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xABC0,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x10341,
	0x10342,
	0x1034A,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x10450,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LO_invlist[] = { /* for EBCDIC 1047 */
	917,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9A,
	0x9C,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x640,
	0x641,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x800,
	0x816,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x972,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE46,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10D0,
	0x10FB,
	0x10FD,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16F1,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17DC,
	0x17DD,
	0x1820,
	0x1843,
	0x1844,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C78,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x2135,
	0x2139,
	0x2D30,
	0x2D68,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3006,
	0x3007,
	0x303C,
	0x303D,
	0x3041,
	0x3097,
	0x309F,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA015,
	0xA016,
	0xA48D,
	0xA4D0,
	0xA4F8,
	0xA500,
	0xA60C,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA66E,
	0xA66F,
	0xA6A0,
	0xA6E6,
	0xA78F,
	0xA790,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9E0,
	0xA9E5,
	0xA9E7,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADD,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF3,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xABC0,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x10341,
	0x10342,
	0x1034A,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x10450,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LO_invlist[] = { /* for EBCDIC 037 */
	917,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9A,
	0x9C,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x640,
	0x641,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x800,
	0x816,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x972,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE46,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10D0,
	0x10FB,
	0x10FD,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16F1,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17DC,
	0x17DD,
	0x1820,
	0x1843,
	0x1844,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C78,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x2135,
	0x2139,
	0x2D30,
	0x2D68,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3006,
	0x3007,
	0x303C,
	0x303D,
	0x3041,
	0x3097,
	0x309F,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FF,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA015,
	0xA016,
	0xA48D,
	0xA4D0,
	0xA4F8,
	0xA500,
	0xA60C,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA66E,
	0xA66F,
	0xA6A0,
	0xA6E6,
	0xA78F,
	0xA790,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9E0,
	0xA9E5,
	0xA9E7,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADD,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF3,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xABC0,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x10341,
	0x10342,
	0x1034A,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x10450,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

static const UV PL_LOE_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE40,
	0xE45,
	0xEC0,
	0xEC5,
	0x19B5,
	0x19B8,
	0x19BA,
	0x19BB,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABA,
	0xAABB,
	0xAABD
};

static const UV PL_LOWSURROGATES_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDC00,
	0xE000
};

static const UV PL_LT_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1C5,
	0x1C6,
	0x1C8,
	0x1C9,
	0x1CB,
	0x1CC,
	0x1F2,
	0x1F3,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FBC,
	0x1FBD,
	0x1FCC,
	0x1FCD,
	0x1FFC,
	0x1FFD
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_LU_invlist[] = { /* for ASCII/Latin1 */
	1255,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1FB8,
	0x1FBC,
	0x1FC8,
	0x1FCC,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFC,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2183,
	0x2184,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1E900,
	0x1E922
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LU_invlist[] = { /* for EBCDIC 1047 */
	1273,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1FB8,
	0x1FBC,
	0x1FC8,
	0x1FCC,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFC,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2183,
	0x2184,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_LU_invlist[] = { /* for EBCDIC 037 */
	1269,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1FB8,
	0x1FBC,
	0x1FC8,
	0x1FCC,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFC,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2183,
	0x2184,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1E900,
	0x1E922
};

#   endif	/* EBCDIC 037 */

static const UV PL_LYCI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10280,
	0x1029D
};

static const UV PL_LYDI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10920,
	0x1093A,
	0x1093F,
	0x10940
};

static const UV PL_M_invlist[] = { /* for all charsets */
	527,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111CA,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x1171D,
	0x1172C,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0100,
	0xE01F0
};

static const UV PL_MAHJ_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x970,
	0xA830,
	0xA83A,
	0x11150,
	0x11177
};

static const UV PL_MAHJONG_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F000,
	0x1F030
};

static const UV PL_MAND_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x640,
	0x641,
	0x840,
	0x85C,
	0x85E,
	0x85F
};

static const UV PL_MANI_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x640,
	0x641,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7
};

static const UV PL_MARC_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_MATH_invlist[] = { /* for ASCII/Latin1 */
	277,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2B,
	0x2C,
	0x3C,
	0x3F,
	0x5E,
	0x5F,
	0x7C,
	0x7D,
	0x7E,
	0x7F,
	0xAC,
	0xAD,
	0xB1,
	0xB2,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D6,
	0x3F0,
	0x3F2,
	0x3F4,
	0x3F7,
	0x606,
	0x609,
	0x2016,
	0x2017,
	0x2032,
	0x2035,
	0x2040,
	0x2041,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x2061,
	0x2065,
	0x207A,
	0x207F,
	0x208A,
	0x208F,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20E7,
	0x20EB,
	0x20F0,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2128,
	0x212A,
	0x212C,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x2139,
	0x213C,
	0x214A,
	0x214B,
	0x214C,
	0x2190,
	0x21A8,
	0x21A9,
	0x21AF,
	0x21B0,
	0x21B2,
	0x21B6,
	0x21B8,
	0x21BC,
	0x21DC,
	0x21DD,
	0x21DE,
	0x21E4,
	0x21E6,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x237C,
	0x237D,
	0x239B,
	0x23B6,
	0x23B7,
	0x23B8,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E3,
	0x25A0,
	0x25A2,
	0x25AE,
	0x25B8,
	0x25BC,
	0x25C2,
	0x25C6,
	0x25C8,
	0x25CA,
	0x25CC,
	0x25CF,
	0x25D4,
	0x25E2,
	0x25E3,
	0x25E4,
	0x25E5,
	0x25E7,
	0x25ED,
	0x25F8,
	0x2600,
	0x2605,
	0x2607,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2664,
	0x266D,
	0x2670,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0xFB29,
	0xFB2A,
	0xFE61,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE2,
	0xFFE3,
	0xFFE9,
	0xFFED,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_MATH_invlist[] = { /* for EBCDIC 1047 */
	279,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x5F,
	0x60,
	0x6E,
	0x6F,
	0x7E,
	0x7F,
	0x8F,
	0x90,
	0xA1,
	0xA2,
	0xB0,
	0xB1,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D6,
	0x3F0,
	0x3F2,
	0x3F4,
	0x3F7,
	0x606,
	0x609,
	0x2016,
	0x2017,
	0x2032,
	0x2035,
	0x2040,
	0x2041,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x2061,
	0x2065,
	0x207A,
	0x207F,
	0x208A,
	0x208F,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20E7,
	0x20EB,
	0x20F0,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2128,
	0x212A,
	0x212C,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x2139,
	0x213C,
	0x214A,
	0x214B,
	0x214C,
	0x2190,
	0x21A8,
	0x21A9,
	0x21AF,
	0x21B0,
	0x21B2,
	0x21B6,
	0x21B8,
	0x21BC,
	0x21DC,
	0x21DD,
	0x21DE,
	0x21E4,
	0x21E6,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x237C,
	0x237D,
	0x239B,
	0x23B6,
	0x23B7,
	0x23B8,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E3,
	0x25A0,
	0x25A2,
	0x25AE,
	0x25B8,
	0x25BC,
	0x25C2,
	0x25C6,
	0x25C8,
	0x25CA,
	0x25CC,
	0x25CF,
	0x25D4,
	0x25E2,
	0x25E3,
	0x25E4,
	0x25E5,
	0x25E7,
	0x25ED,
	0x25F8,
	0x2600,
	0x2605,
	0x2607,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2664,
	0x266D,
	0x2670,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0xFB29,
	0xFB2A,
	0xFE61,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE2,
	0xFFE3,
	0xFFE9,
	0xFFED,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_MATH_invlist[] = { /* for EBCDIC 037 */
	279,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x5F,
	0x60,
	0x6E,
	0x6F,
	0x7E,
	0x7F,
	0x8F,
	0x90,
	0xA1,
	0xA2,
	0xB0,
	0xB1,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D6,
	0x3F0,
	0x3F2,
	0x3F4,
	0x3F7,
	0x606,
	0x609,
	0x2016,
	0x2017,
	0x2032,
	0x2035,
	0x2040,
	0x2041,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x2061,
	0x2065,
	0x207A,
	0x207F,
	0x208A,
	0x208F,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20E7,
	0x20EB,
	0x20F0,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2128,
	0x212A,
	0x212C,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x2139,
	0x213C,
	0x214A,
	0x214B,
	0x214C,
	0x2190,
	0x21A8,
	0x21A9,
	0x21AF,
	0x21B0,
	0x21B2,
	0x21B6,
	0x21B8,
	0x21BC,
	0x21DC,
	0x21DD,
	0x21DE,
	0x21E4,
	0x21E6,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x237C,
	0x237D,
	0x239B,
	0x23B6,
	0x23B7,
	0x23B8,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E3,
	0x25A0,
	0x25A2,
	0x25AE,
	0x25B8,
	0x25BC,
	0x25C2,
	0x25C6,
	0x25C8,
	0x25CA,
	0x25CC,
	0x25CF,
	0x25D4,
	0x25E2,
	0x25E3,
	0x25E4,
	0x25E5,
	0x25E7,
	0x25ED,
	0x25F8,
	0x2600,
	0x2605,
	0x2607,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2664,
	0x266D,
	0x2670,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0xFB29,
	0xFB2A,
	0xFE61,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE2,
	0xFFE3,
	0xFFE9,
	0xFFED,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2
};

#   endif	/* EBCDIC 037 */

static const UV PL_MATHALPHANUM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D400,
	0x1D800
};

static const UV PL_MATHOPERATORS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2200,
	0x2300
};

static const UV PL_MC_invlist[] = { /* for all charsets */
	321,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x903,
	0x904,
	0x93B,
	0x93C,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x982,
	0x984,
	0x9BE,
	0x9C1,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9D7,
	0x9D8,
	0xA03,
	0xA04,
	0xA3E,
	0xA41,
	0xA83,
	0xA84,
	0xABE,
	0xAC1,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xB02,
	0xB04,
	0xB3E,
	0xB3F,
	0xB40,
	0xB41,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB57,
	0xB58,
	0xBBE,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD7,
	0xBD8,
	0xC01,
	0xC04,
	0xC41,
	0xC45,
	0xC82,
	0xC84,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC5,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCD5,
	0xCD7,
	0xD02,
	0xD04,
	0xD3E,
	0xD41,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD57,
	0xD58,
	0xD82,
	0xD84,
	0xDCF,
	0xDD2,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xF3E,
	0xF40,
	0xF7F,
	0xF80,
	0x102B,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x1056,
	0x1058,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108F,
	0x1090,
	0x109A,
	0x109D,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x1A19,
	0x1A1B,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1B04,
	0x1B05,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1CE1,
	0x1CE2,
	0x1CF2,
	0x1CF4,
	0x1CF7,
	0x1CF8,
	0x302E,
	0x3030,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA952,
	0xA954,
	0xA983,
	0xA984,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9C1,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA4D,
	0xAA4E,
	0xAA7B,
	0xAA7C,
	0xAA7D,
	0xAA7E,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x1112C,
	0x1112D,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x112E0,
	0x112E3,
	0x11302,
	0x11304,
	0x1133E,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11435,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x114B0,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x115AF,
	0x115B2,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x11A07,
	0x11A09,
	0x11A39,
	0x11A3A,
	0x11A57,
	0x11A59,
	0x11A97,
	0x11A98,
	0x11C2F,
	0x11C30,
	0x11C3E,
	0x11C3F,
	0x11CA9,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x16F51,
	0x16F7F,
	0x1D165,
	0x1D167,
	0x1D16D,
	0x1D173
};

static const UV PL_ME_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x488,
	0x48A,
	0x1ABE,
	0x1ABF,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0xA670,
	0xA673
};

static const UV PL_MEETEIMAYEKEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAAE0,
	0xAB00
};

static const UV PL_MEND_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7
};

static const UV PL_MERC_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109A0,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A00
};

static const UV PL_MERO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10980,
	0x109A0
};

static const UV PL_MIAO_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0
};

static const UV PL_MISCARROWS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2B00,
	0x2C00
};

static const UV PL_MISCMATHSYMBOLSA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x27C0,
	0x27F0
};

static const UV PL_MISCMATHSYMBOLSB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2980,
	0x2A00
};

static const UV PL_MISCPICTOGRAPHS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F300,
	0x1F600
};

static const UV PL_MISCSYMBOLS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2600,
	0x2700
};

static const UV PL_MISCTECHNICAL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2300,
	0x2400
};

static const UV PL_MLYM_invlist[] = { /* for all charsets */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0x1CDA,
	0x1CDB
};

static const UV PL_MN_invlist[] = { /* for all charsets */
	603,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x483,
	0x488,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB56,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xA66F,
	0xA670,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BD,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111CA,
	0x111CD,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133C,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x11A01,
	0x11A07,
	0x11A09,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0100,
	0xE01F0
};

static const UV PL_MODI_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA830,
	0xA83A,
	0x11600,
	0x11645,
	0x11650,
	0x1165A
};

static const UV PL_MODIFIERLETTERS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2B0,
	0x300
};

static const UV PL_MODIFIERTONELETTERS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA700,
	0xA720
};

static const UV PL_MONG_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x11660,
	0x1166D
};

static const UV PL_MONGOLIANSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11660,
	0x11680
};

static const UV PL_MRO_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70
};

static const UV PL_MTEI_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAAE0,
	0xAAF7,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA
};

static const UV PL_MULT_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA66,
	0xA70,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA
};

static const UV PL_MUSIC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D100,
	0x1D200
};

static const UV PL_MYANMAREXTA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA60,
	0xAA80
};

static const UV PL_MYANMAREXTB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA9E0,
	0xAA00
};

static const UV PL_MYMR_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1000,
	0x10A0,
	0xA92E,
	0xA92F,
	0xA9E0,
	0xA9FF,
	0xAA60,
	0xAA80
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_N_invlist[] = { /* for ASCII/Latin1 */
	233,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0xB2,
	0xB4,
	0xB9,
	0xBA,
	0xBC,
	0xBF,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0x9F4,
	0x9FA,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xB72,
	0xB78,
	0xBE6,
	0xBF3,
	0xC66,
	0xC70,
	0xC78,
	0xC7F,
	0xCE6,
	0xCF0,
	0xD58,
	0xD5F,
	0xD66,
	0xD79,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x1369,
	0x137D,
	0x16EE,
	0x16F1,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DB,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2150,
	0x2183,
	0x2185,
	0x218A,
	0x2460,
	0x249C,
	0x24EA,
	0x2500,
	0x2776,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0xA620,
	0xA62A,
	0xA6E6,
	0xA6F0,
	0xA830,
	0xA836,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x10107,
	0x10134,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x104A0,
	0x104AA,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A40,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11052,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x118E0,
	0x118F3,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A,
	0x12400,
	0x1246F,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1D7CE,
	0x1D800,
	0x1E8C7,
	0x1E8D0,
	0x1E950,
	0x1E95A,
	0x1F100,
	0x1F10D
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_N_invlist[] = { /* for EBCDIC 1047 */
	233,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0x9F4,
	0x9FA,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xB72,
	0xB78,
	0xBE6,
	0xBF3,
	0xC66,
	0xC70,
	0xC78,
	0xC7F,
	0xCE6,
	0xCF0,
	0xD58,
	0xD5F,
	0xD66,
	0xD79,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x1369,
	0x137D,
	0x16EE,
	0x16F1,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DB,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2150,
	0x2183,
	0x2185,
	0x218A,
	0x2460,
	0x249C,
	0x24EA,
	0x2500,
	0x2776,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0xA620,
	0xA62A,
	0xA6E6,
	0xA6F0,
	0xA830,
	0xA836,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x10107,
	0x10134,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x104A0,
	0x104AA,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A40,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11052,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x118E0,
	0x118F3,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A,
	0x12400,
	0x1246F,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1D7CE,
	0x1D800,
	0x1E8C7,
	0x1E8D0,
	0x1E950,
	0x1E95A,
	0x1F100,
	0x1F10D
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_N_invlist[] = { /* for EBCDIC 037 */
	233,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0x9F4,
	0x9FA,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xB72,
	0xB78,
	0xBE6,
	0xBF3,
	0xC66,
	0xC70,
	0xC78,
	0xC7F,
	0xCE6,
	0xCF0,
	0xD58,
	0xD5F,
	0xD66,
	0xD79,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x1369,
	0x137D,
	0x16EE,
	0x16F1,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DB,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2150,
	0x2183,
	0x2185,
	0x218A,
	0x2460,
	0x249C,
	0x24EA,
	0x2500,
	0x2776,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0xA620,
	0xA62A,
	0xA6E6,
	0xA6F0,
	0xA830,
	0xA836,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x10107,
	0x10134,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x104A0,
	0x104AA,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A40,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11052,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x118E0,
	0x118F3,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A,
	0x12400,
	0x1246F,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1D7CE,
	0x1D800,
	0x1E8C7,
	0x1E8D0,
	0x1E950,
	0x1E95A,
	0x1F100,
	0x1F10D
};

#   endif	/* EBCDIC 037 */

static const UV PL_NARB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10A80,
	0x10AA0
};

static const UV PL_NB_invlist[] = { /* for all charsets */
	96,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x870,
	0x8A0,
	0x1C90,
	0x1CC0,
	0x2FE0,
	0x2FF0,
	0x10200,
	0x10280,
	0x103E0,
	0x10400,
	0x10570,
	0x10600,
	0x10780,
	0x10800,
	0x108B0,
	0x108E0,
	0x10940,
	0x10980,
	0x10AA0,
	0x10AC0,
	0x10BB0,
	0x10C00,
	0x10C50,
	0x10C80,
	0x10D00,
	0x10E60,
	0x10E80,
	0x11000,
	0x11250,
	0x11280,
	0x11380,
	0x11400,
	0x114E0,
	0x11580,
	0x116D0,
	0x11700,
	0x11740,
	0x118A0,
	0x11900,
	0x11A00,
	0x11AB0,
	0x11AC0,
	0x11B00,
	0x11C00,
	0x11CC0,
	0x11D00,
	0x11D60,
	0x12000,
	0x12550,
	0x13000,
	0x13430,
	0x14400,
	0x14680,
	0x16800,
	0x16A70,
	0x16AD0,
	0x16B90,
	0x16F00,
	0x16FA0,
	0x16FE0,
	0x18B00,
	0x1B000,
	0x1B130,
	0x1B170,
	0x1B300,
	0x1BC00,
	0x1BCB0,
	0x1D000,
	0x1D250,
	0x1D300,
	0x1D380,
	0x1D400,
	0x1DAB0,
	0x1E000,
	0x1E030,
	0x1E800,
	0x1E8E0,
	0x1E900,
	0x1E960,
	0x1EE00,
	0x1EF00,
	0x1F000,
	0x1FA00,
	0x20000,
	0x2A6E0,
	0x2A700,
	0x2EBF0,
	0x2F800,
	0x2FA20,
	0xE0000,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0x110000
};

static const UV PL_NBAT_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10880,
	0x1089F,
	0x108A7,
	0x108B0
};

static const UV PL_NCHAR_invlist[] = { /* for all charsets */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFDD0,
	0xFDF0,
	0xFFFE,
	0x10000,
	0x1FFFE,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0x40000,
	0x4FFFE,
	0x50000,
	0x5FFFE,
	0x60000,
	0x6FFFE,
	0x70000,
	0x7FFFE,
	0x80000,
	0x8FFFE,
	0x90000,
	0x9FFFE,
	0xA0000,
	0xAFFFE,
	0xB0000,
	0xBFFFE,
	0xC0000,
	0xCFFFE,
	0xD0000,
	0xDFFFE,
	0xE0000,
	0xEFFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE,
	0x110000
};

static const UV PL_NEWA_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E
};

static const UV PL_NFCQC__M_invlist[] = { /* for all charsets */
	83,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x305,
	0x306,
	0x30D,
	0x30F,
	0x310,
	0x311,
	0x312,
	0x313,
	0x315,
	0x31B,
	0x31C,
	0x323,
	0x329,
	0x32D,
	0x32F,
	0x330,
	0x332,
	0x338,
	0x339,
	0x342,
	0x343,
	0x345,
	0x346,
	0x653,
	0x656,
	0x93C,
	0x93D,
	0x9BE,
	0x9BF,
	0x9D7,
	0x9D8,
	0xB3E,
	0xB3F,
	0xB56,
	0xB58,
	0xBBE,
	0xBBF,
	0xBD7,
	0xBD8,
	0xC56,
	0xC57,
	0xCC2,
	0xCC3,
	0xCD5,
	0xCD7,
	0xD3E,
	0xD3F,
	0xD57,
	0xD58,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDDF,
	0xDE0,
	0x102E,
	0x102F,
	0x1161,
	0x1176,
	0x11A8,
	0x11C3,
	0x1B35,
	0x1B36,
	0x3099,
	0x309B,
	0x110BA,
	0x110BB,
	0x11127,
	0x11128,
	0x1133E,
	0x1133F,
	0x11357,
	0x11358,
	0x114B0,
	0x114B1,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x115AF,
	0x115B0
};

static const UV PL_NFCQC__Y_invlist[] = { /* for all charsets */
	223,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x305,
	0x306,
	0x30D,
	0x30F,
	0x310,
	0x311,
	0x312,
	0x313,
	0x315,
	0x31B,
	0x31C,
	0x323,
	0x329,
	0x32D,
	0x32F,
	0x330,
	0x332,
	0x338,
	0x339,
	0x340,
	0x346,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x653,
	0x656,
	0x93C,
	0x93D,
	0x958,
	0x960,
	0x9BE,
	0x9BF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB3E,
	0xB3F,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xBBE,
	0xBBF,
	0xBD7,
	0xBD8,
	0xC56,
	0xC57,
	0xCC2,
	0xCC3,
	0xCD5,
	0xCD7,
	0xD3E,
	0xD3F,
	0xD57,
	0xD58,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDDF,
	0xDE0,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x102E,
	0x102F,
	0x1161,
	0x1176,
	0x11A8,
	0x11C3,
	0x1B35,
	0x1B36,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1FBB,
	0x1FBC,
	0x1FBE,
	0x1FBF,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FD3,
	0x1FD4,
	0x1FDB,
	0x1FDC,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FEE,
	0x1FF0,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0x3099,
	0x309B,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x110BA,
	0x110BB,
	0x11127,
	0x11128,
	0x1133E,
	0x1133F,
	0x11357,
	0x11358,
	0x114B0,
	0x114B1,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x115AF,
	0x115B0,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NFDQC__Y_invlist[] = { /* for ASCII/Latin1 */
	463,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC0,
	0xC6,
	0xC7,
	0xD0,
	0xD1,
	0xD7,
	0xD9,
	0xDE,
	0xE0,
	0xE6,
	0xE7,
	0xF0,
	0xF1,
	0xF7,
	0xF9,
	0xFE,
	0xFF,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x149,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x17F,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1CD,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F1,
	0x1F4,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D3,
	0x3D5,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x622,
	0x627,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1E00,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309E,
	0x309F,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x30FF,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NFDQC__Y_invlist[] = { /* for EBCDIC 1047 */
	467,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x59,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8D,
	0x8E,
	0xBA,
	0xBB,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x149,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x17F,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1CD,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F1,
	0x1F4,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D3,
	0x3D5,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x622,
	0x627,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1E00,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309E,
	0x309F,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x30FF,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NFDQC__Y_invlist[] = { /* for EBCDIC 037 */
	467,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x59,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8D,
	0x8E,
	0xAD,
	0xAE,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x149,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x17F,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1CD,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F1,
	0x1F4,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D3,
	0x3D5,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x622,
	0x627,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1E00,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309E,
	0x309F,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x30FF,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NFKCQC__N_invlist[] = { /* for ASCII/Latin1 */
	499,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA0,
	0xA1,
	0xA8,
	0xA9,
	0xAA,
	0xAB,
	0xAF,
	0xB0,
	0xB2,
	0xB6,
	0xB8,
	0xBB,
	0xBC,
	0xBF,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x675,
	0x679,
	0x958,
	0x960,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB5C,
	0xB5E,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E9A,
	0x1E9C,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1FBB,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD3,
	0x1FD4,
	0x1FDB,
	0x1FDC,
	0x1FDD,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FED,
	0x1FF0,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NFKCQC__N_invlist[] = { /* for EBCDIC 1047 */
	505,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xB7,
	0xBA,
	0xBB,
	0xBD,
	0xBE,
	0xBF,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x675,
	0x679,
	0x958,
	0x960,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB5C,
	0xB5E,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E9A,
	0x1E9C,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1FBB,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD3,
	0x1FD4,
	0x1FDB,
	0x1FDC,
	0x1FDD,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FED,
	0x1FF0,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NFKCQC__N_invlist[] = { /* for EBCDIC 037 */
	503,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xB7,
	0xBA,
	0xBC,
	0xBF,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x675,
	0x679,
	0x958,
	0x960,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB5C,
	0xB5E,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E9A,
	0x1E9C,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1FBB,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD3,
	0x1FD4,
	0x1FDB,
	0x1FDC,
	0x1FDD,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FED,
	0x1FF0,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NFKCQC__Y_invlist[] = { /* for ASCII/Latin1 */
	573,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA0,
	0xA1,
	0xA8,
	0xA9,
	0xAA,
	0xAB,
	0xAF,
	0xB0,
	0xB2,
	0xB6,
	0xB8,
	0xBB,
	0xBC,
	0xBF,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x300,
	0x305,
	0x306,
	0x30D,
	0x30F,
	0x310,
	0x311,
	0x312,
	0x313,
	0x315,
	0x31B,
	0x31C,
	0x323,
	0x329,
	0x32D,
	0x32F,
	0x330,
	0x332,
	0x338,
	0x339,
	0x340,
	0x346,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x653,
	0x656,
	0x675,
	0x679,
	0x93C,
	0x93D,
	0x958,
	0x960,
	0x9BE,
	0x9BF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB3E,
	0xB3F,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xBBE,
	0xBBF,
	0xBD7,
	0xBD8,
	0xC56,
	0xC57,
	0xCC2,
	0xCC3,
	0xCD5,
	0xCD7,
	0xD3E,
	0xD3F,
	0xD57,
	0xD58,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDDF,
	0xDE0,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x102E,
	0x102F,
	0x10FC,
	0x10FD,
	0x1161,
	0x1176,
	0x11A8,
	0x11C3,
	0x1B35,
	0x1B36,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E9A,
	0x1E9C,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1FBB,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD3,
	0x1FD4,
	0x1FDB,
	0x1FDC,
	0x1FDD,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FED,
	0x1FF0,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x3099,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x110BA,
	0x110BB,
	0x11127,
	0x11128,
	0x1133E,
	0x1133F,
	0x11357,
	0x11358,
	0x114B0,
	0x114B1,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x115AF,
	0x115B0,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NFKCQC__Y_invlist[] = { /* for EBCDIC 1047 */
	579,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xB7,
	0xBA,
	0xBB,
	0xBD,
	0xBE,
	0xBF,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x300,
	0x305,
	0x306,
	0x30D,
	0x30F,
	0x310,
	0x311,
	0x312,
	0x313,
	0x315,
	0x31B,
	0x31C,
	0x323,
	0x329,
	0x32D,
	0x32F,
	0x330,
	0x332,
	0x338,
	0x339,
	0x340,
	0x346,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x653,
	0x656,
	0x675,
	0x679,
	0x93C,
	0x93D,
	0x958,
	0x960,
	0x9BE,
	0x9BF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB3E,
	0xB3F,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xBBE,
	0xBBF,
	0xBD7,
	0xBD8,
	0xC56,
	0xC57,
	0xCC2,
	0xCC3,
	0xCD5,
	0xCD7,
	0xD3E,
	0xD3F,
	0xD57,
	0xD58,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDDF,
	0xDE0,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x102E,
	0x102F,
	0x10FC,
	0x10FD,
	0x1161,
	0x1176,
	0x11A8,
	0x11C3,
	0x1B35,
	0x1B36,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E9A,
	0x1E9C,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1FBB,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD3,
	0x1FD4,
	0x1FDB,
	0x1FDC,
	0x1FDD,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FED,
	0x1FF0,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x3099,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x110BA,
	0x110BB,
	0x11127,
	0x11128,
	0x1133E,
	0x1133F,
	0x11357,
	0x11358,
	0x114B0,
	0x114B1,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x115AF,
	0x115B0,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NFKCQC__Y_invlist[] = { /* for EBCDIC 037 */
	577,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xB7,
	0xBA,
	0xBC,
	0xBF,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x132,
	0x134,
	0x13F,
	0x141,
	0x149,
	0x14A,
	0x17F,
	0x180,
	0x1C4,
	0x1CD,
	0x1F1,
	0x1F4,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x300,
	0x305,
	0x306,
	0x30D,
	0x30F,
	0x310,
	0x311,
	0x312,
	0x313,
	0x315,
	0x31B,
	0x31C,
	0x323,
	0x329,
	0x32D,
	0x32F,
	0x330,
	0x332,
	0x338,
	0x339,
	0x340,
	0x346,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x587,
	0x588,
	0x653,
	0x656,
	0x675,
	0x679,
	0x93C,
	0x93D,
	0x958,
	0x960,
	0x9BE,
	0x9BF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB3E,
	0xB3F,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xBBE,
	0xBBF,
	0xBD7,
	0xBD8,
	0xC56,
	0xC57,
	0xCC2,
	0xCC3,
	0xCD5,
	0xCD7,
	0xD3E,
	0xD3F,
	0xD57,
	0xD58,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDDF,
	0xDE0,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x102E,
	0x102F,
	0x10FC,
	0x10FD,
	0x1161,
	0x1176,
	0x11A8,
	0x11C3,
	0x1B35,
	0x1B36,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E9A,
	0x1E9C,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1FBB,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD3,
	0x1FD4,
	0x1FDB,
	0x1FDC,
	0x1FDD,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FED,
	0x1FF0,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x3099,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x110BA,
	0x110BB,
	0x11127,
	0x11128,
	0x1133E,
	0x1133F,
	0x11357,
	0x11358,
	0x114B0,
	0x114B1,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x115AF,
	0x115B0,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NFKDQC__N_invlist[] = { /* for ASCII/Latin1 */
	781,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA0,
	0xA1,
	0xA8,
	0xA9,
	0xAA,
	0xAB,
	0xAF,
	0xB0,
	0xB2,
	0xB6,
	0xB8,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0xC6,
	0xC7,
	0xD0,
	0xD1,
	0xD7,
	0xD9,
	0xDE,
	0xE0,
	0xE6,
	0xE7,
	0xF0,
	0xF1,
	0xF7,
	0xF9,
	0xFE,
	0xFF,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x132,
	0x138,
	0x139,
	0x141,
	0x143,
	0x14A,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x180,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1C4,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x587,
	0x588,
	0x622,
	0x627,
	0x675,
	0x679,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x10FC,
	0x10FD,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309B,
	0x309D,
	0x309E,
	0x30A0,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NFKDQC__N_invlist[] = { /* for EBCDIC 1047 */
	779,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x4A,
	0x51,
	0x59,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8D,
	0x8E,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xB7,
	0xBD,
	0xBE,
	0xBF,
	0xCB,
	0xD0,
	0xDA,
	0xE0,
	0xEA,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x132,
	0x138,
	0x139,
	0x141,
	0x143,
	0x14A,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x180,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1C4,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x587,
	0x588,
	0x622,
	0x627,
	0x675,
	0x679,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x10FC,
	0x10FD,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309B,
	0x309D,
	0x309E,
	0x30A0,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NFKDQC__N_invlist[] = { /* for EBCDIC 037 */
	781,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x4A,
	0x51,
	0x59,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8D,
	0x8E,
	0x9A,
	0x9C,
	0x9D,
	0x9E,
	0xA0,
	0xA1,
	0xAD,
	0xAE,
	0xB7,
	0xBA,
	0xBC,
	0xBF,
	0xCB,
	0xD0,
	0xDA,
	0xE0,
	0xEA,
	0xF0,
	0xFA,
	0xFF,
	0x100,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x132,
	0x138,
	0x139,
	0x141,
	0x143,
	0x14A,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x180,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1C4,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x2B0,
	0x2B9,
	0x2D8,
	0x2DE,
	0x2E0,
	0x2E5,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37A,
	0x37B,
	0x37E,
	0x37F,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D0,
	0x3D7,
	0x3F0,
	0x3F3,
	0x3F4,
	0x3F6,
	0x3F9,
	0x3FA,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x587,
	0x588,
	0x622,
	0x627,
	0x675,
	0x679,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xEDC,
	0xEDE,
	0xF0C,
	0xF0D,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF7A,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x10FC,
	0x10FD,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x1E00,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309B,
	0x309D,
	0x309E,
	0x30A0,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x32FF,
	0x3300,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16C,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

static const UV PL_NKO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7C0,
	0x7FB
};

static const UV PL_NL_invlist[] = { /* for all charsets */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16EE,
	0x16F1,
	0x2160,
	0x2183,
	0x2185,
	0x2189,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0xA6E6,
	0xA6F0,
	0x10140,
	0x10175,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x12400,
	0x1246F
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NO_invlist[] = { /* for ASCII/Latin1 */
	121,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB2,
	0xB4,
	0xB9,
	0xBA,
	0xBC,
	0xBF,
	0x9F4,
	0x9FA,
	0xB72,
	0xB78,
	0xBF0,
	0xBF3,
	0xC78,
	0xC7F,
	0xD58,
	0xD5F,
	0xD70,
	0xD79,
	0xF2A,
	0xF34,
	0x1369,
	0x137D,
	0x17F0,
	0x17FA,
	0x19DA,
	0x19DB,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2150,
	0x2160,
	0x2189,
	0x218A,
	0x2460,
	0x249C,
	0x24EA,
	0x2500,
	0x2776,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0xA830,
	0xA836,
	0x10107,
	0x10134,
	0x10175,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A40,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11052,
	0x11066,
	0x111E1,
	0x111F5,
	0x1173A,
	0x1173C,
	0x118EA,
	0x118F3,
	0x11C5A,
	0x11C6D,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1E8C7,
	0x1E8D0,
	0x1F100,
	0x1F10D
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NO_invlist[] = { /* for EBCDIC 1047 */
	123,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x9F4,
	0x9FA,
	0xB72,
	0xB78,
	0xBF0,
	0xBF3,
	0xC78,
	0xC7F,
	0xD58,
	0xD5F,
	0xD70,
	0xD79,
	0xF2A,
	0xF34,
	0x1369,
	0x137D,
	0x17F0,
	0x17FA,
	0x19DA,
	0x19DB,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2150,
	0x2160,
	0x2189,
	0x218A,
	0x2460,
	0x249C,
	0x24EA,
	0x2500,
	0x2776,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0xA830,
	0xA836,
	0x10107,
	0x10134,
	0x10175,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A40,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11052,
	0x11066,
	0x111E1,
	0x111F5,
	0x1173A,
	0x1173C,
	0x118EA,
	0x118F3,
	0x11C5A,
	0x11C6D,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1E8C7,
	0x1E8D0,
	0x1F100,
	0x1F10D
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NO_invlist[] = { /* for EBCDIC 037 */
	123,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x9F4,
	0x9FA,
	0xB72,
	0xB78,
	0xBF0,
	0xBF3,
	0xC78,
	0xC7F,
	0xD58,
	0xD5F,
	0xD70,
	0xD79,
	0xF2A,
	0xF34,
	0x1369,
	0x137D,
	0x17F0,
	0x17FA,
	0x19DA,
	0x19DB,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2150,
	0x2160,
	0x2189,
	0x218A,
	0x2460,
	0x249C,
	0x24EA,
	0x2500,
	0x2776,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0xA830,
	0xA836,
	0x10107,
	0x10134,
	0x10175,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A40,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11052,
	0x11066,
	0x111E1,
	0x111F5,
	0x1173A,
	0x1173C,
	0x118EA,
	0x118F3,
	0x11C5A,
	0x11C6D,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1E8C7,
	0x1E8D0,
	0x1F100,
	0x1F10D
};

#   endif	/* EBCDIC 037 */

static const UV PL_NSHU_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16FE1,
	0x16FE2,
	0x1B170,
	0x1B2FC
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NT__DI_invlist[] = { /* for ASCII/Latin1 */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB2,
	0xB4,
	0xB9,
	0xBA,
	0x1369,
	0x1372,
	0x19DA,
	0x19DB,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2460,
	0x2469,
	0x2474,
	0x247D,
	0x2488,
	0x2491,
	0x24EA,
	0x24EB,
	0x24F5,
	0x24FE,
	0x24FF,
	0x2500,
	0x2776,
	0x277F,
	0x2780,
	0x2789,
	0x278A,
	0x2793,
	0x10A40,
	0x10A44,
	0x10E60,
	0x10E69,
	0x11052,
	0x1105B,
	0x1F100,
	0x1F10B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NT__DI_invlist[] = { /* for EBCDIC 1047 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x1369,
	0x1372,
	0x19DA,
	0x19DB,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2460,
	0x2469,
	0x2474,
	0x247D,
	0x2488,
	0x2491,
	0x24EA,
	0x24EB,
	0x24F5,
	0x24FE,
	0x24FF,
	0x2500,
	0x2776,
	0x277F,
	0x2780,
	0x2789,
	0x278A,
	0x2793,
	0x10A40,
	0x10A44,
	0x10E60,
	0x10E69,
	0x11052,
	0x1105B,
	0x1F100,
	0x1F10B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NT__DI_invlist[] = { /* for EBCDIC 037 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x1369,
	0x1372,
	0x19DA,
	0x19DB,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2460,
	0x2469,
	0x2474,
	0x247D,
	0x2488,
	0x2491,
	0x24EA,
	0x24EB,
	0x24F5,
	0x24FE,
	0x24FF,
	0x2500,
	0x2776,
	0x277F,
	0x2780,
	0x2789,
	0x278A,
	0x2793,
	0x10A40,
	0x10A44,
	0x10E60,
	0x10E69,
	0x11052,
	0x1105B,
	0x1F100,
	0x1F10B
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NT__NU_invlist[] = { /* for ASCII/Latin1 */
	281,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBC,
	0xBF,
	0x9F4,
	0x9FA,
	0xB72,
	0xB78,
	0xBF0,
	0xBF3,
	0xC78,
	0xC7F,
	0xD58,
	0xD5F,
	0xD70,
	0xD79,
	0xF2A,
	0xF34,
	0x1372,
	0x137D,
	0x16EE,
	0x16F1,
	0x17F0,
	0x17FA,
	0x2150,
	0x2183,
	0x2185,
	0x218A,
	0x2469,
	0x2474,
	0x247D,
	0x2488,
	0x2491,
	0x249C,
	0x24EB,
	0x24F5,
	0x24FE,
	0x24FF,
	0x277F,
	0x2780,
	0x2789,
	0x278A,
	0x2793,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3405,
	0x3406,
	0x3483,
	0x3484,
	0x382A,
	0x382B,
	0x3B4D,
	0x3B4E,
	0x4E00,
	0x4E01,
	0x4E03,
	0x4E04,
	0x4E07,
	0x4E08,
	0x4E09,
	0x4E0A,
	0x4E5D,
	0x4E5E,
	0x4E8C,
	0x4E8D,
	0x4E94,
	0x4E95,
	0x4E96,
	0x4E97,
	0x4EBF,
	0x4EC1,
	0x4EDF,
	0x4EE0,
	0x4EE8,
	0x4EE9,
	0x4F0D,
	0x4F0E,
	0x4F70,
	0x4F71,
	0x5104,
	0x5105,
	0x5146,
	0x5147,
	0x5169,
	0x516A,
	0x516B,
	0x516C,
	0x516D,
	0x516E,
	0x5341,
	0x5342,
	0x5343,
	0x5346,
	0x534C,
	0x534D,
	0x53C1,
	0x53C5,
	0x56DB,
	0x56DC,
	0x58F1,
	0x58F2,
	0x58F9,
	0x58FA,
	0x5E7A,
	0x5E7B,
	0x5EFE,
	0x5F00,
	0x5F0C,
	0x5F0F,
	0x5F10,
	0x5F11,
	0x62FE,
	0x62FF,
	0x634C,
	0x634D,
	0x67D2,
	0x67D3,
	0x6F06,
	0x6F07,
	0x7396,
	0x7397,
	0x767E,
	0x767F,
	0x8086,
	0x8087,
	0x842C,
	0x842D,
	0x8CAE,
	0x8CAF,
	0x8CB3,
	0x8CB4,
	0x8D30,
	0x8D31,
	0x9621,
	0x9622,
	0x9646,
	0x9647,
	0x964C,
	0x964D,
	0x9678,
	0x9679,
	0x96F6,
	0x96F7,
	0xA6E6,
	0xA6F0,
	0xA830,
	0xA836,
	0xF96B,
	0xF96C,
	0xF973,
	0xF974,
	0xF978,
	0xF979,
	0xF9B2,
	0xF9B3,
	0xF9D1,
	0xF9D2,
	0xF9D3,
	0xF9D4,
	0xF9FD,
	0xF9FE,
	0x10107,
	0x10134,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A44,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E69,
	0x10E7F,
	0x1105B,
	0x11066,
	0x111E1,
	0x111F5,
	0x1173A,
	0x1173C,
	0x118EA,
	0x118F3,
	0x11C5A,
	0x11C6D,
	0x12400,
	0x1246F,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1E8C7,
	0x1E8D0,
	0x1F10B,
	0x1F10D,
	0x20001,
	0x20002,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x20121,
	0x20122,
	0x2092A,
	0x2092B,
	0x20983,
	0x20984,
	0x2098C,
	0x2098D,
	0x2099C,
	0x2099D,
	0x20AEA,
	0x20AEB,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22390,
	0x22391,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C,
	0x2626D,
	0x2626E,
	0x2F890,
	0x2F891
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NT__NU_invlist[] = { /* for EBCDIC 1047 */
	281,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0x9F4,
	0x9FA,
	0xB72,
	0xB78,
	0xBF0,
	0xBF3,
	0xC78,
	0xC7F,
	0xD58,
	0xD5F,
	0xD70,
	0xD79,
	0xF2A,
	0xF34,
	0x1372,
	0x137D,
	0x16EE,
	0x16F1,
	0x17F0,
	0x17FA,
	0x2150,
	0x2183,
	0x2185,
	0x218A,
	0x2469,
	0x2474,
	0x247D,
	0x2488,
	0x2491,
	0x249C,
	0x24EB,
	0x24F5,
	0x24FE,
	0x24FF,
	0x277F,
	0x2780,
	0x2789,
	0x278A,
	0x2793,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3405,
	0x3406,
	0x3483,
	0x3484,
	0x382A,
	0x382B,
	0x3B4D,
	0x3B4E,
	0x4E00,
	0x4E01,
	0x4E03,
	0x4E04,
	0x4E07,
	0x4E08,
	0x4E09,
	0x4E0A,
	0x4E5D,
	0x4E5E,
	0x4E8C,
	0x4E8D,
	0x4E94,
	0x4E95,
	0x4E96,
	0x4E97,
	0x4EBF,
	0x4EC1,
	0x4EDF,
	0x4EE0,
	0x4EE8,
	0x4EE9,
	0x4F0D,
	0x4F0E,
	0x4F70,
	0x4F71,
	0x5104,
	0x5105,
	0x5146,
	0x5147,
	0x5169,
	0x516A,
	0x516B,
	0x516C,
	0x516D,
	0x516E,
	0x5341,
	0x5342,
	0x5343,
	0x5346,
	0x534C,
	0x534D,
	0x53C1,
	0x53C5,
	0x56DB,
	0x56DC,
	0x58F1,
	0x58F2,
	0x58F9,
	0x58FA,
	0x5E7A,
	0x5E7B,
	0x5EFE,
	0x5F00,
	0x5F0C,
	0x5F0F,
	0x5F10,
	0x5F11,
	0x62FE,
	0x62FF,
	0x634C,
	0x634D,
	0x67D2,
	0x67D3,
	0x6F06,
	0x6F07,
	0x7396,
	0x7397,
	0x767E,
	0x767F,
	0x8086,
	0x8087,
	0x842C,
	0x842D,
	0x8CAE,
	0x8CAF,
	0x8CB3,
	0x8CB4,
	0x8D30,
	0x8D31,
	0x9621,
	0x9622,
	0x9646,
	0x9647,
	0x964C,
	0x964D,
	0x9678,
	0x9679,
	0x96F6,
	0x96F7,
	0xA6E6,
	0xA6F0,
	0xA830,
	0xA836,
	0xF96B,
	0xF96C,
	0xF973,
	0xF974,
	0xF978,
	0xF979,
	0xF9B2,
	0xF9B3,
	0xF9D1,
	0xF9D2,
	0xF9D3,
	0xF9D4,
	0xF9FD,
	0xF9FE,
	0x10107,
	0x10134,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A44,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E69,
	0x10E7F,
	0x1105B,
	0x11066,
	0x111E1,
	0x111F5,
	0x1173A,
	0x1173C,
	0x118EA,
	0x118F3,
	0x11C5A,
	0x11C6D,
	0x12400,
	0x1246F,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1E8C7,
	0x1E8D0,
	0x1F10B,
	0x1F10D,
	0x20001,
	0x20002,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x20121,
	0x20122,
	0x2092A,
	0x2092B,
	0x20983,
	0x20984,
	0x2098C,
	0x2098D,
	0x2099C,
	0x2099D,
	0x20AEA,
	0x20AEB,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22390,
	0x22391,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C,
	0x2626D,
	0x2626E,
	0x2F890,
	0x2F891
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NT__NU_invlist[] = { /* for EBCDIC 037 */
	281,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0x9F4,
	0x9FA,
	0xB72,
	0xB78,
	0xBF0,
	0xBF3,
	0xC78,
	0xC7F,
	0xD58,
	0xD5F,
	0xD70,
	0xD79,
	0xF2A,
	0xF34,
	0x1372,
	0x137D,
	0x16EE,
	0x16F1,
	0x17F0,
	0x17FA,
	0x2150,
	0x2183,
	0x2185,
	0x218A,
	0x2469,
	0x2474,
	0x247D,
	0x2488,
	0x2491,
	0x249C,
	0x24EB,
	0x24F5,
	0x24FE,
	0x24FF,
	0x277F,
	0x2780,
	0x2789,
	0x278A,
	0x2793,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3405,
	0x3406,
	0x3483,
	0x3484,
	0x382A,
	0x382B,
	0x3B4D,
	0x3B4E,
	0x4E00,
	0x4E01,
	0x4E03,
	0x4E04,
	0x4E07,
	0x4E08,
	0x4E09,
	0x4E0A,
	0x4E5D,
	0x4E5E,
	0x4E8C,
	0x4E8D,
	0x4E94,
	0x4E95,
	0x4E96,
	0x4E97,
	0x4EBF,
	0x4EC1,
	0x4EDF,
	0x4EE0,
	0x4EE8,
	0x4EE9,
	0x4F0D,
	0x4F0E,
	0x4F70,
	0x4F71,
	0x5104,
	0x5105,
	0x5146,
	0x5147,
	0x5169,
	0x516A,
	0x516B,
	0x516C,
	0x516D,
	0x516E,
	0x5341,
	0x5342,
	0x5343,
	0x5346,
	0x534C,
	0x534D,
	0x53C1,
	0x53C5,
	0x56DB,
	0x56DC,
	0x58F1,
	0x58F2,
	0x58F9,
	0x58FA,
	0x5E7A,
	0x5E7B,
	0x5EFE,
	0x5F00,
	0x5F0C,
	0x5F0F,
	0x5F10,
	0x5F11,
	0x62FE,
	0x62FF,
	0x634C,
	0x634D,
	0x67D2,
	0x67D3,
	0x6F06,
	0x6F07,
	0x7396,
	0x7397,
	0x767E,
	0x767F,
	0x8086,
	0x8087,
	0x842C,
	0x842D,
	0x8CAE,
	0x8CAF,
	0x8CB3,
	0x8CB4,
	0x8D30,
	0x8D31,
	0x9621,
	0x9622,
	0x9646,
	0x9647,
	0x964C,
	0x964D,
	0x9678,
	0x9679,
	0x96F6,
	0x96F7,
	0xA6E6,
	0xA6F0,
	0xA830,
	0xA836,
	0xF96B,
	0xF96C,
	0xF973,
	0xF974,
	0xF978,
	0xF979,
	0xF9B2,
	0xF9B3,
	0xF9D1,
	0xF9D2,
	0xF9D3,
	0xF9D4,
	0xF9FD,
	0xF9FE,
	0x10107,
	0x10134,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A44,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E69,
	0x10E7F,
	0x1105B,
	0x11066,
	0x111E1,
	0x111F5,
	0x1173A,
	0x1173C,
	0x118EA,
	0x118F3,
	0x11C5A,
	0x11C6D,
	0x12400,
	0x1246F,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1E8C7,
	0x1E8D0,
	0x1F10B,
	0x1F10D,
	0x20001,
	0x20002,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x20121,
	0x20122,
	0x2092A,
	0x2092B,
	0x20983,
	0x20984,
	0x2098C,
	0x2098D,
	0x2099C,
	0x2099D,
	0x20AEA,
	0x20AEB,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22390,
	0x22391,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C,
	0x2626D,
	0x2626E,
	0x2F890,
	0x2F891
};

#   endif	/* EBCDIC 037 */

static const UV PL_NUMBERFORMS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2150,
	0x2190
};

static const UV PL_NV___MINUS_1_SLASH_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF33,
	0xF34
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__0_invlist[] = { /* for ASCII/Latin1 */
	147,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x31,
	0x660,
	0x661,
	0x6F0,
	0x6F1,
	0x7C0,
	0x7C1,
	0x966,
	0x967,
	0x9E6,
	0x9E7,
	0xA66,
	0xA67,
	0xAE6,
	0xAE7,
	0xB66,
	0xB67,
	0xBE6,
	0xBE7,
	0xC66,
	0xC67,
	0xC78,
	0xC79,
	0xCE6,
	0xCE7,
	0xD66,
	0xD67,
	0xDE6,
	0xDE7,
	0xE50,
	0xE51,
	0xED0,
	0xED1,
	0xF20,
	0xF21,
	0x1040,
	0x1041,
	0x1090,
	0x1091,
	0x17E0,
	0x17E1,
	0x17F0,
	0x17F1,
	0x1810,
	0x1811,
	0x1946,
	0x1947,
	0x19D0,
	0x19D1,
	0x1A80,
	0x1A81,
	0x1A90,
	0x1A91,
	0x1B50,
	0x1B51,
	0x1BB0,
	0x1BB1,
	0x1C40,
	0x1C41,
	0x1C50,
	0x1C51,
	0x2070,
	0x2071,
	0x2080,
	0x2081,
	0x2189,
	0x218A,
	0x24EA,
	0x24EB,
	0x24FF,
	0x2500,
	0x3007,
	0x3008,
	0x96F6,
	0x96F7,
	0xA620,
	0xA621,
	0xA6EF,
	0xA6F0,
	0xA8D0,
	0xA8D1,
	0xA900,
	0xA901,
	0xA9D0,
	0xA9D1,
	0xA9F0,
	0xA9F1,
	0xAA50,
	0xAA51,
	0xABF0,
	0xABF1,
	0xF9B2,
	0xF9B3,
	0xFF10,
	0xFF11,
	0x1018A,
	0x1018B,
	0x104A0,
	0x104A1,
	0x11066,
	0x11067,
	0x110F0,
	0x110F1,
	0x11136,
	0x11137,
	0x111D0,
	0x111D1,
	0x112F0,
	0x112F1,
	0x11450,
	0x11451,
	0x114D0,
	0x114D1,
	0x11650,
	0x11651,
	0x116C0,
	0x116C1,
	0x11730,
	0x11731,
	0x118E0,
	0x118E1,
	0x11C50,
	0x11C51,
	0x11D50,
	0x11D51,
	0x16A60,
	0x16A61,
	0x16B50,
	0x16B51,
	0x1D7CE,
	0x1D7CF,
	0x1D7D8,
	0x1D7D9,
	0x1D7E2,
	0x1D7E3,
	0x1D7EC,
	0x1D7ED,
	0x1D7F6,
	0x1D7F7,
	0x1E950,
	0x1E951,
	0x1F100,
	0x1F102,
	0x1F10B,
	0x1F10D
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__0_invlist[] = { /* for EBCDIC 1047 */
	147,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xF1,
	0x660,
	0x661,
	0x6F0,
	0x6F1,
	0x7C0,
	0x7C1,
	0x966,
	0x967,
	0x9E6,
	0x9E7,
	0xA66,
	0xA67,
	0xAE6,
	0xAE7,
	0xB66,
	0xB67,
	0xBE6,
	0xBE7,
	0xC66,
	0xC67,
	0xC78,
	0xC79,
	0xCE6,
	0xCE7,
	0xD66,
	0xD67,
	0xDE6,
	0xDE7,
	0xE50,
	0xE51,
	0xED0,
	0xED1,
	0xF20,
	0xF21,
	0x1040,
	0x1041,
	0x1090,
	0x1091,
	0x17E0,
	0x17E1,
	0x17F0,
	0x17F1,
	0x1810,
	0x1811,
	0x1946,
	0x1947,
	0x19D0,
	0x19D1,
	0x1A80,
	0x1A81,
	0x1A90,
	0x1A91,
	0x1B50,
	0x1B51,
	0x1BB0,
	0x1BB1,
	0x1C40,
	0x1C41,
	0x1C50,
	0x1C51,
	0x2070,
	0x2071,
	0x2080,
	0x2081,
	0x2189,
	0x218A,
	0x24EA,
	0x24EB,
	0x24FF,
	0x2500,
	0x3007,
	0x3008,
	0x96F6,
	0x96F7,
	0xA620,
	0xA621,
	0xA6EF,
	0xA6F0,
	0xA8D0,
	0xA8D1,
	0xA900,
	0xA901,
	0xA9D0,
	0xA9D1,
	0xA9F0,
	0xA9F1,
	0xAA50,
	0xAA51,
	0xABF0,
	0xABF1,
	0xF9B2,
	0xF9B3,
	0xFF10,
	0xFF11,
	0x1018A,
	0x1018B,
	0x104A0,
	0x104A1,
	0x11066,
	0x11067,
	0x110F0,
	0x110F1,
	0x11136,
	0x11137,
	0x111D0,
	0x111D1,
	0x112F0,
	0x112F1,
	0x11450,
	0x11451,
	0x114D0,
	0x114D1,
	0x11650,
	0x11651,
	0x116C0,
	0x116C1,
	0x11730,
	0x11731,
	0x118E0,
	0x118E1,
	0x11C50,
	0x11C51,
	0x11D50,
	0x11D51,
	0x16A60,
	0x16A61,
	0x16B50,
	0x16B51,
	0x1D7CE,
	0x1D7CF,
	0x1D7D8,
	0x1D7D9,
	0x1D7E2,
	0x1D7E3,
	0x1D7EC,
	0x1D7ED,
	0x1D7F6,
	0x1D7F7,
	0x1E950,
	0x1E951,
	0x1F100,
	0x1F102,
	0x1F10B,
	0x1F10D
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__0_invlist[] = { /* for EBCDIC 037 */
	147,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xF1,
	0x660,
	0x661,
	0x6F0,
	0x6F1,
	0x7C0,
	0x7C1,
	0x966,
	0x967,
	0x9E6,
	0x9E7,
	0xA66,
	0xA67,
	0xAE6,
	0xAE7,
	0xB66,
	0xB67,
	0xBE6,
	0xBE7,
	0xC66,
	0xC67,
	0xC78,
	0xC79,
	0xCE6,
	0xCE7,
	0xD66,
	0xD67,
	0xDE6,
	0xDE7,
	0xE50,
	0xE51,
	0xED0,
	0xED1,
	0xF20,
	0xF21,
	0x1040,
	0x1041,
	0x1090,
	0x1091,
	0x17E0,
	0x17E1,
	0x17F0,
	0x17F1,
	0x1810,
	0x1811,
	0x1946,
	0x1947,
	0x19D0,
	0x19D1,
	0x1A80,
	0x1A81,
	0x1A90,
	0x1A91,
	0x1B50,
	0x1B51,
	0x1BB0,
	0x1BB1,
	0x1C40,
	0x1C41,
	0x1C50,
	0x1C51,
	0x2070,
	0x2071,
	0x2080,
	0x2081,
	0x2189,
	0x218A,
	0x24EA,
	0x24EB,
	0x24FF,
	0x2500,
	0x3007,
	0x3008,
	0x96F6,
	0x96F7,
	0xA620,
	0xA621,
	0xA6EF,
	0xA6F0,
	0xA8D0,
	0xA8D1,
	0xA900,
	0xA901,
	0xA9D0,
	0xA9D1,
	0xA9F0,
	0xA9F1,
	0xAA50,
	0xAA51,
	0xABF0,
	0xABF1,
	0xF9B2,
	0xF9B3,
	0xFF10,
	0xFF11,
	0x1018A,
	0x1018B,
	0x104A0,
	0x104A1,
	0x11066,
	0x11067,
	0x110F0,
	0x110F1,
	0x11136,
	0x11137,
	0x111D0,
	0x111D1,
	0x112F0,
	0x112F1,
	0x11450,
	0x11451,
	0x114D0,
	0x114D1,
	0x11650,
	0x11651,
	0x116C0,
	0x116C1,
	0x11730,
	0x11731,
	0x118E0,
	0x118E1,
	0x11C50,
	0x11C51,
	0x11D50,
	0x11D51,
	0x16A60,
	0x16A61,
	0x16B50,
	0x16B51,
	0x1D7CE,
	0x1D7CF,
	0x1D7D8,
	0x1D7D9,
	0x1D7E2,
	0x1D7E3,
	0x1D7EC,
	0x1D7ED,
	0x1D7F6,
	0x1D7F7,
	0x1E950,
	0x1E951,
	0x1F100,
	0x1F102,
	0x1F10B,
	0x1F10D
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__1_invlist[] = { /* for ASCII/Latin1 */
	239,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x31,
	0x32,
	0xB9,
	0xBA,
	0x661,
	0x662,
	0x6F1,
	0x6F2,
	0x7C1,
	0x7C2,
	0x967,
	0x968,
	0x9E7,
	0x9E8,
	0xA67,
	0xA68,
	0xAE7,
	0xAE8,
	0xB67,
	0xB68,
	0xBE7,
	0xBE8,
	0xC67,
	0xC68,
	0xC79,
	0xC7A,
	0xC7C,
	0xC7D,
	0xCE7,
	0xCE8,
	0xD67,
	0xD68,
	0xDE7,
	0xDE8,
	0xE51,
	0xE52,
	0xED1,
	0xED2,
	0xF21,
	0xF22,
	0x1041,
	0x1042,
	0x1091,
	0x1092,
	0x1369,
	0x136A,
	0x17E1,
	0x17E2,
	0x17F1,
	0x17F2,
	0x1811,
	0x1812,
	0x1947,
	0x1948,
	0x19D1,
	0x19D2,
	0x19DA,
	0x19DB,
	0x1A81,
	0x1A82,
	0x1A91,
	0x1A92,
	0x1B51,
	0x1B52,
	0x1BB1,
	0x1BB2,
	0x1C41,
	0x1C42,
	0x1C51,
	0x1C52,
	0x2081,
	0x2082,
	0x215F,
	0x2161,
	0x2170,
	0x2171,
	0x2460,
	0x2461,
	0x2474,
	0x2475,
	0x2488,
	0x2489,
	0x24F5,
	0x24F6,
	0x2776,
	0x2777,
	0x2780,
	0x2781,
	0x278A,
	0x278B,
	0x3021,
	0x3022,
	0x3192,
	0x3193,
	0x3220,
	0x3221,
	0x3280,
	0x3281,
	0x4E00,
	0x4E01,
	0x58F1,
	0x58F2,
	0x58F9,
	0x58FA,
	0x5E7A,
	0x5E7B,
	0x5F0C,
	0x5F0D,
	0xA621,
	0xA622,
	0xA6E6,
	0xA6E7,
	0xA8D1,
	0xA8D2,
	0xA901,
	0xA902,
	0xA9D1,
	0xA9D2,
	0xA9F1,
	0xA9F2,
	0xAA51,
	0xAA52,
	0xABF1,
	0xABF2,
	0xFF11,
	0xFF12,
	0x10107,
	0x10108,
	0x10142,
	0x10143,
	0x10158,
	0x1015B,
	0x102E1,
	0x102E2,
	0x10320,
	0x10321,
	0x103D1,
	0x103D2,
	0x104A1,
	0x104A2,
	0x10858,
	0x10859,
	0x10879,
	0x1087A,
	0x108A7,
	0x108A8,
	0x108FB,
	0x108FC,
	0x10916,
	0x10917,
	0x109C0,
	0x109C1,
	0x10A40,
	0x10A41,
	0x10A7D,
	0x10A7E,
	0x10A9D,
	0x10A9E,
	0x10AEB,
	0x10AEC,
	0x10B58,
	0x10B59,
	0x10B78,
	0x10B79,
	0x10BA9,
	0x10BAA,
	0x10CFA,
	0x10CFB,
	0x10E60,
	0x10E61,
	0x11052,
	0x11053,
	0x11067,
	0x11068,
	0x110F1,
	0x110F2,
	0x11137,
	0x11138,
	0x111D1,
	0x111D2,
	0x111E1,
	0x111E2,
	0x112F1,
	0x112F2,
	0x11451,
	0x11452,
	0x114D1,
	0x114D2,
	0x11651,
	0x11652,
	0x116C1,
	0x116C2,
	0x11731,
	0x11732,
	0x118E1,
	0x118E2,
	0x11C51,
	0x11C52,
	0x11C5A,
	0x11C5B,
	0x11D51,
	0x11D52,
	0x12415,
	0x12416,
	0x1241E,
	0x1241F,
	0x1242C,
	0x1242D,
	0x12434,
	0x12435,
	0x1244F,
	0x12450,
	0x12458,
	0x12459,
	0x16A61,
	0x16A62,
	0x16B51,
	0x16B52,
	0x1D360,
	0x1D361,
	0x1D7CF,
	0x1D7D0,
	0x1D7D9,
	0x1D7DA,
	0x1D7E3,
	0x1D7E4,
	0x1D7ED,
	0x1D7EE,
	0x1D7F7,
	0x1D7F8,
	0x1E8C7,
	0x1E8C8,
	0x1E951,
	0x1E952,
	0x1F102,
	0x1F103,
	0x2092A,
	0x2092B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__1_invlist[] = { /* for EBCDIC 1047 */
	239,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDA,
	0xDB,
	0xF1,
	0xF2,
	0x661,
	0x662,
	0x6F1,
	0x6F2,
	0x7C1,
	0x7C2,
	0x967,
	0x968,
	0x9E7,
	0x9E8,
	0xA67,
	0xA68,
	0xAE7,
	0xAE8,
	0xB67,
	0xB68,
	0xBE7,
	0xBE8,
	0xC67,
	0xC68,
	0xC79,
	0xC7A,
	0xC7C,
	0xC7D,
	0xCE7,
	0xCE8,
	0xD67,
	0xD68,
	0xDE7,
	0xDE8,
	0xE51,
	0xE52,
	0xED1,
	0xED2,
	0xF21,
	0xF22,
	0x1041,
	0x1042,
	0x1091,
	0x1092,
	0x1369,
	0x136A,
	0x17E1,
	0x17E2,
	0x17F1,
	0x17F2,
	0x1811,
	0x1812,
	0x1947,
	0x1948,
	0x19D1,
	0x19D2,
	0x19DA,
	0x19DB,
	0x1A81,
	0x1A82,
	0x1A91,
	0x1A92,
	0x1B51,
	0x1B52,
	0x1BB1,
	0x1BB2,
	0x1C41,
	0x1C42,
	0x1C51,
	0x1C52,
	0x2081,
	0x2082,
	0x215F,
	0x2161,
	0x2170,
	0x2171,
	0x2460,
	0x2461,
	0x2474,
	0x2475,
	0x2488,
	0x2489,
	0x24F5,
	0x24F6,
	0x2776,
	0x2777,
	0x2780,
	0x2781,
	0x278A,
	0x278B,
	0x3021,
	0x3022,
	0x3192,
	0x3193,
	0x3220,
	0x3221,
	0x3280,
	0x3281,
	0x4E00,
	0x4E01,
	0x58F1,
	0x58F2,
	0x58F9,
	0x58FA,
	0x5E7A,
	0x5E7B,
	0x5F0C,
	0x5F0D,
	0xA621,
	0xA622,
	0xA6E6,
	0xA6E7,
	0xA8D1,
	0xA8D2,
	0xA901,
	0xA902,
	0xA9D1,
	0xA9D2,
	0xA9F1,
	0xA9F2,
	0xAA51,
	0xAA52,
	0xABF1,
	0xABF2,
	0xFF11,
	0xFF12,
	0x10107,
	0x10108,
	0x10142,
	0x10143,
	0x10158,
	0x1015B,
	0x102E1,
	0x102E2,
	0x10320,
	0x10321,
	0x103D1,
	0x103D2,
	0x104A1,
	0x104A2,
	0x10858,
	0x10859,
	0x10879,
	0x1087A,
	0x108A7,
	0x108A8,
	0x108FB,
	0x108FC,
	0x10916,
	0x10917,
	0x109C0,
	0x109C1,
	0x10A40,
	0x10A41,
	0x10A7D,
	0x10A7E,
	0x10A9D,
	0x10A9E,
	0x10AEB,
	0x10AEC,
	0x10B58,
	0x10B59,
	0x10B78,
	0x10B79,
	0x10BA9,
	0x10BAA,
	0x10CFA,
	0x10CFB,
	0x10E60,
	0x10E61,
	0x11052,
	0x11053,
	0x11067,
	0x11068,
	0x110F1,
	0x110F2,
	0x11137,
	0x11138,
	0x111D1,
	0x111D2,
	0x111E1,
	0x111E2,
	0x112F1,
	0x112F2,
	0x11451,
	0x11452,
	0x114D1,
	0x114D2,
	0x11651,
	0x11652,
	0x116C1,
	0x116C2,
	0x11731,
	0x11732,
	0x118E1,
	0x118E2,
	0x11C51,
	0x11C52,
	0x11C5A,
	0x11C5B,
	0x11D51,
	0x11D52,
	0x12415,
	0x12416,
	0x1241E,
	0x1241F,
	0x1242C,
	0x1242D,
	0x12434,
	0x12435,
	0x1244F,
	0x12450,
	0x12458,
	0x12459,
	0x16A61,
	0x16A62,
	0x16B51,
	0x16B52,
	0x1D360,
	0x1D361,
	0x1D7CF,
	0x1D7D0,
	0x1D7D9,
	0x1D7DA,
	0x1D7E3,
	0x1D7E4,
	0x1D7ED,
	0x1D7EE,
	0x1D7F7,
	0x1D7F8,
	0x1E8C7,
	0x1E8C8,
	0x1E951,
	0x1E952,
	0x1F102,
	0x1F103,
	0x2092A,
	0x2092B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__1_invlist[] = { /* for EBCDIC 037 */
	239,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDA,
	0xDB,
	0xF1,
	0xF2,
	0x661,
	0x662,
	0x6F1,
	0x6F2,
	0x7C1,
	0x7C2,
	0x967,
	0x968,
	0x9E7,
	0x9E8,
	0xA67,
	0xA68,
	0xAE7,
	0xAE8,
	0xB67,
	0xB68,
	0xBE7,
	0xBE8,
	0xC67,
	0xC68,
	0xC79,
	0xC7A,
	0xC7C,
	0xC7D,
	0xCE7,
	0xCE8,
	0xD67,
	0xD68,
	0xDE7,
	0xDE8,
	0xE51,
	0xE52,
	0xED1,
	0xED2,
	0xF21,
	0xF22,
	0x1041,
	0x1042,
	0x1091,
	0x1092,
	0x1369,
	0x136A,
	0x17E1,
	0x17E2,
	0x17F1,
	0x17F2,
	0x1811,
	0x1812,
	0x1947,
	0x1948,
	0x19D1,
	0x19D2,
	0x19DA,
	0x19DB,
	0x1A81,
	0x1A82,
	0x1A91,
	0x1A92,
	0x1B51,
	0x1B52,
	0x1BB1,
	0x1BB2,
	0x1C41,
	0x1C42,
	0x1C51,
	0x1C52,
	0x2081,
	0x2082,
	0x215F,
	0x2161,
	0x2170,
	0x2171,
	0x2460,
	0x2461,
	0x2474,
	0x2475,
	0x2488,
	0x2489,
	0x24F5,
	0x24F6,
	0x2776,
	0x2777,
	0x2780,
	0x2781,
	0x278A,
	0x278B,
	0x3021,
	0x3022,
	0x3192,
	0x3193,
	0x3220,
	0x3221,
	0x3280,
	0x3281,
	0x4E00,
	0x4E01,
	0x58F1,
	0x58F2,
	0x58F9,
	0x58FA,
	0x5E7A,
	0x5E7B,
	0x5F0C,
	0x5F0D,
	0xA621,
	0xA622,
	0xA6E6,
	0xA6E7,
	0xA8D1,
	0xA8D2,
	0xA901,
	0xA902,
	0xA9D1,
	0xA9D2,
	0xA9F1,
	0xA9F2,
	0xAA51,
	0xAA52,
	0xABF1,
	0xABF2,
	0xFF11,
	0xFF12,
	0x10107,
	0x10108,
	0x10142,
	0x10143,
	0x10158,
	0x1015B,
	0x102E1,
	0x102E2,
	0x10320,
	0x10321,
	0x103D1,
	0x103D2,
	0x104A1,
	0x104A2,
	0x10858,
	0x10859,
	0x10879,
	0x1087A,
	0x108A7,
	0x108A8,
	0x108FB,
	0x108FC,
	0x10916,
	0x10917,
	0x109C0,
	0x109C1,
	0x10A40,
	0x10A41,
	0x10A7D,
	0x10A7E,
	0x10A9D,
	0x10A9E,
	0x10AEB,
	0x10AEC,
	0x10B58,
	0x10B59,
	0x10B78,
	0x10B79,
	0x10BA9,
	0x10BAA,
	0x10CFA,
	0x10CFB,
	0x10E60,
	0x10E61,
	0x11052,
	0x11053,
	0x11067,
	0x11068,
	0x110F1,
	0x110F2,
	0x11137,
	0x11138,
	0x111D1,
	0x111D2,
	0x111E1,
	0x111E2,
	0x112F1,
	0x112F2,
	0x11451,
	0x11452,
	0x114D1,
	0x114D2,
	0x11651,
	0x11652,
	0x116C1,
	0x116C2,
	0x11731,
	0x11732,
	0x118E1,
	0x118E2,
	0x11C51,
	0x11C52,
	0x11C5A,
	0x11C5B,
	0x11D51,
	0x11D52,
	0x12415,
	0x12416,
	0x1241E,
	0x1241F,
	0x1242C,
	0x1242D,
	0x12434,
	0x12435,
	0x1244F,
	0x12450,
	0x12458,
	0x12459,
	0x16A61,
	0x16A62,
	0x16B51,
	0x16B52,
	0x1D360,
	0x1D361,
	0x1D7CF,
	0x1D7D0,
	0x1D7D9,
	0x1D7DA,
	0x1D7E3,
	0x1D7E4,
	0x1D7ED,
	0x1D7EE,
	0x1D7F7,
	0x1D7F8,
	0x1E8C7,
	0x1E8C8,
	0x1E951,
	0x1E952,
	0x1F102,
	0x1F103,
	0x2092A,
	0x2092B
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__1_SLASH_10_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD5C,
	0xD5D,
	0x2152,
	0x2153
};

static const UV PL_NV__1_SLASH_12_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109F6,
	0x109F7
};

static const UV PL_NV__1_SLASH_16_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9F4,
	0x9F5,
	0xB75,
	0xB76,
	0xD76,
	0xD77,
	0xA833,
	0xA834
};

static const UV PL_NV__1_SLASH_160_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD58,
	0xD59
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__1_SLASH_2_invlist[] = { /* for ASCII/Latin1 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBD,
	0xBE,
	0xB73,
	0xB74,
	0xD74,
	0xD75,
	0xF2A,
	0xF2B,
	0x2CFD,
	0x2CFE,
	0xA831,
	0xA832,
	0x10141,
	0x10142,
	0x10175,
	0x10177,
	0x109BD,
	0x109BE,
	0x109FB,
	0x109FC,
	0x10E7B,
	0x10E7C,
	0x12464,
	0x12465
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__1_SLASH_2_invlist[] = { /* for EBCDIC 1047 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB8,
	0xB9,
	0xB73,
	0xB74,
	0xD74,
	0xD75,
	0xF2A,
	0xF2B,
	0x2CFD,
	0x2CFE,
	0xA831,
	0xA832,
	0x10141,
	0x10142,
	0x10175,
	0x10177,
	0x109BD,
	0x109BE,
	0x109FB,
	0x109FC,
	0x10E7B,
	0x10E7C,
	0x12464,
	0x12465
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__1_SLASH_2_invlist[] = { /* for EBCDIC 037 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB8,
	0xB9,
	0xB73,
	0xB74,
	0xD74,
	0xD75,
	0xF2A,
	0xF2B,
	0x2CFD,
	0x2CFE,
	0xA831,
	0xA832,
	0x10141,
	0x10142,
	0x10175,
	0x10177,
	0x109BD,
	0x109BE,
	0x109FB,
	0x109FC,
	0x10E7B,
	0x10E7C,
	0x12464,
	0x12465
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__1_SLASH_20_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD5B,
	0xD5C
};

static const UV PL_NV__1_SLASH_3_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2153,
	0x2154,
	0x109F9,
	0x109FA,
	0x10E7D,
	0x10E7E,
	0x1245A,
	0x1245B,
	0x1245D,
	0x1245E,
	0x12465,
	0x12466
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__1_SLASH_4_invlist[] = { /* for ASCII/Latin1 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBC,
	0xBD,
	0x9F7,
	0x9F8,
	0xB72,
	0xB73,
	0xD73,
	0xD74,
	0xA830,
	0xA831,
	0x10140,
	0x10141,
	0x1018B,
	0x1018C,
	0x109F8,
	0x109F9,
	0x10E7C,
	0x10E7D,
	0x12460,
	0x12461,
	0x12462,
	0x12464
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__1_SLASH_4_invlist[] = { /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xB8,
	0x9F7,
	0x9F8,
	0xB72,
	0xB73,
	0xD73,
	0xD74,
	0xA830,
	0xA831,
	0x10140,
	0x10141,
	0x1018B,
	0x1018C,
	0x109F8,
	0x109F9,
	0x10E7C,
	0x10E7D,
	0x12460,
	0x12461,
	0x12462,
	0x12464
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__1_SLASH_4_invlist[] = { /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xB8,
	0x9F7,
	0x9F8,
	0xB72,
	0xB73,
	0xD73,
	0xD74,
	0xA830,
	0xA831,
	0x10140,
	0x10141,
	0x1018B,
	0x1018C,
	0x109F8,
	0x109F9,
	0x10E7C,
	0x10E7D,
	0x12460,
	0x12461,
	0x12462,
	0x12464
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__1_SLASH_40_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD59,
	0xD5A
};

static const UV PL_NV__1_SLASH_5_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD5E,
	0xD5F,
	0x2155,
	0x2156
};

static const UV PL_NV__1_SLASH_6_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2159,
	0x215A,
	0x109F7,
	0x109F8,
	0x12461,
	0x12462
};

static const UV PL_NV__1_SLASH_7_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2150,
	0x2151
};

static const UV PL_NV__1_SLASH_8_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9F5,
	0x9F6,
	0xB76,
	0xB77,
	0xD77,
	0xD78,
	0x215B,
	0x215C,
	0xA834,
	0xA835,
	0x1245F,
	0x12460
};

static const UV PL_NV__1_SLASH_9_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2151,
	0x2152
};

static const UV PL_NV__10_invlist[] = { /* for all charsets */
	101,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBF0,
	0xBF1,
	0xD70,
	0xD71,
	0x1372,
	0x1373,
	0x2169,
	0x216A,
	0x2179,
	0x217A,
	0x2469,
	0x246A,
	0x247D,
	0x247E,
	0x2491,
	0x2492,
	0x24FE,
	0x24FF,
	0x277F,
	0x2780,
	0x2789,
	0x278A,
	0x2793,
	0x2794,
	0x3038,
	0x3039,
	0x3229,
	0x322A,
	0x3248,
	0x3249,
	0x3289,
	0x328A,
	0x4EC0,
	0x4EC1,
	0x5341,
	0x5342,
	0x62FE,
	0x62FF,
	0xF973,
	0xF974,
	0xF9FD,
	0xF9FE,
	0x10110,
	0x10111,
	0x10149,
	0x1014A,
	0x10150,
	0x10151,
	0x10157,
	0x10158,
	0x10160,
	0x10165,
	0x102EA,
	0x102EB,
	0x10322,
	0x10323,
	0x103D3,
	0x103D4,
	0x1085B,
	0x1085C,
	0x1087E,
	0x1087F,
	0x108AD,
	0x108AE,
	0x108FD,
	0x108FE,
	0x10917,
	0x10918,
	0x109C9,
	0x109CA,
	0x10A44,
	0x10A45,
	0x10A9E,
	0x10A9F,
	0x10AED,
	0x10AEE,
	0x10B5C,
	0x10B5D,
	0x10B7C,
	0x10B7D,
	0x10BAD,
	0x10BAE,
	0x10CFC,
	0x10CFD,
	0x10E69,
	0x10E6A,
	0x1105B,
	0x1105C,
	0x111EA,
	0x111EB,
	0x1173A,
	0x1173B,
	0x118EA,
	0x118EB,
	0x11C63,
	0x11C64,
	0x16B5B,
	0x16B5C,
	0x1D369,
	0x1D36A
};

static const UV PL_NV__100_invlist[] = { /* for all charsets */
	61,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBF1,
	0xBF2,
	0xD71,
	0xD72,
	0x137B,
	0x137C,
	0x216D,
	0x216E,
	0x217D,
	0x217E,
	0x4F70,
	0x4F71,
	0x767E,
	0x767F,
	0x964C,
	0x964D,
	0x10119,
	0x1011A,
	0x1014B,
	0x1014C,
	0x10152,
	0x10153,
	0x1016A,
	0x1016B,
	0x102F3,
	0x102F4,
	0x103D5,
	0x103D6,
	0x1085D,
	0x1085E,
	0x108AF,
	0x108B0,
	0x108FF,
	0x10900,
	0x10919,
	0x1091A,
	0x109D2,
	0x109D3,
	0x10A46,
	0x10A47,
	0x10AEF,
	0x10AF0,
	0x10B5E,
	0x10B5F,
	0x10B7E,
	0x10B7F,
	0x10BAF,
	0x10BB0,
	0x10CFE,
	0x10CFF,
	0x10E72,
	0x10E73,
	0x11064,
	0x11065,
	0x111F3,
	0x111F4,
	0x11C6C,
	0x11C6D,
	0x16B5C,
	0x16B5D
};

static const UV PL_NV__1000_invlist[] = { /* for all charsets */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBF2,
	0xBF3,
	0xD72,
	0xD73,
	0x216F,
	0x2170,
	0x217F,
	0x2181,
	0x4EDF,
	0x4EE0,
	0x5343,
	0x5344,
	0x9621,
	0x9622,
	0x10122,
	0x10123,
	0x1014D,
	0x1014E,
	0x10154,
	0x10155,
	0x10171,
	0x10172,
	0x1085E,
	0x1085F,
	0x109DB,
	0x109DC,
	0x10A47,
	0x10A48,
	0x10B5F,
	0x10B60,
	0x10B7F,
	0x10B80,
	0x10CFF,
	0x10D00,
	0x11065,
	0x11066,
	0x111F4,
	0x111F5
};

static const UV PL_NV__10000_invlist[] = { /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x137C,
	0x137D,
	0x2182,
	0x2183,
	0x4E07,
	0x4E08,
	0x842C,
	0x842D,
	0x1012B,
	0x1012C,
	0x10155,
	0x10156,
	0x1085F,
	0x10860,
	0x109E4,
	0x109E5,
	0x16B5D,
	0x16B5E
};

static const UV PL_NV__100000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2188,
	0x2189,
	0x109ED,
	0x109EE
};

static const UV PL_NV__1000000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16B5E,
	0x16B5F
};

static const UV PL_NV__100000000_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4EBF,
	0x4EC0,
	0x5104,
	0x5105,
	0x16B5F,
	0x16B60
};

static const UV PL_NV__10000000000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16B60,
	0x16B61
};

static const UV PL_NV__1000000000000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5146,
	0x5147,
	0x16B61,
	0x16B62
};

static const UV PL_NV__11_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x216A,
	0x216B,
	0x217A,
	0x217B,
	0x246A,
	0x246B,
	0x247E,
	0x247F,
	0x2492,
	0x2493,
	0x24EB,
	0x24EC
};

static const UV PL_NV__11_SLASH_12_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109BC,
	0x109BD
};

static const UV PL_NV__11_SLASH_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF2F,
	0xF30
};

static const UV PL_NV__12_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x216B,
	0x216C,
	0x217B,
	0x217C,
	0x246B,
	0x246C,
	0x247F,
	0x2480,
	0x2493,
	0x2494,
	0x24EC,
	0x24ED
};

static const UV PL_NV__13_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x246C,
	0x246D,
	0x2480,
	0x2481,
	0x2494,
	0x2495,
	0x24ED,
	0x24EE
};

static const UV PL_NV__13_SLASH_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF30,
	0xF31
};

static const UV PL_NV__14_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x246D,
	0x246E,
	0x2481,
	0x2482,
	0x2495,
	0x2496,
	0x24EE,
	0x24EF
};

static const UV PL_NV__15_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x246E,
	0x246F,
	0x2482,
	0x2483,
	0x2496,
	0x2497,
	0x24EF,
	0x24F0
};

static const UV PL_NV__15_SLASH_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF31,
	0xF32
};

static const UV PL_NV__16_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9F9,
	0x9FA,
	0x246F,
	0x2470,
	0x2483,
	0x2484,
	0x2497,
	0x2498,
	0x24F0,
	0x24F1
};

static const UV PL_NV__17_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16EE,
	0x16EF,
	0x2470,
	0x2471,
	0x2484,
	0x2485,
	0x2498,
	0x2499,
	0x24F1,
	0x24F2
};

static const UV PL_NV__17_SLASH_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF32,
	0xF33
};

static const UV PL_NV__18_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16EF,
	0x16F0,
	0x2471,
	0x2472,
	0x2485,
	0x2486,
	0x2499,
	0x249A,
	0x24F2,
	0x24F3
};

static const UV PL_NV__19_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16F0,
	0x16F1,
	0x2472,
	0x2473,
	0x2486,
	0x2487,
	0x249A,
	0x249B,
	0x24F3,
	0x24F4
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__2_invlist[] = { /* for ASCII/Latin1 */
	239,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32,
	0x33,
	0xB2,
	0xB3,
	0x662,
	0x663,
	0x6F2,
	0x6F3,
	0x7C2,
	0x7C3,
	0x968,
	0x969,
	0x9E8,
	0x9E9,
	0xA68,
	0xA69,
	0xAE8,
	0xAE9,
	0xB68,
	0xB69,
	0xBE8,
	0xBE9,
	0xC68,
	0xC69,
	0xC7A,
	0xC7B,
	0xC7D,
	0xC7E,
	0xCE8,
	0xCE9,
	0xD68,
	0xD69,
	0xDE8,
	0xDE9,
	0xE52,
	0xE53,
	0xED2,
	0xED3,
	0xF22,
	0xF23,
	0x1042,
	0x1043,
	0x1092,
	0x1093,
	0x136A,
	0x136B,
	0x17E2,
	0x17E3,
	0x17F2,
	0x17F3,
	0x1812,
	0x1813,
	0x1948,
	0x1949,
	0x19D2,
	0x19D3,
	0x1A82,
	0x1A83,
	0x1A92,
	0x1A93,
	0x1B52,
	0x1B53,
	0x1BB2,
	0x1BB3,
	0x1C42,
	0x1C43,
	0x1C52,
	0x1C53,
	0x2082,
	0x2083,
	0x2161,
	0x2162,
	0x2171,
	0x2172,
	0x2461,
	0x2462,
	0x2475,
	0x2476,
	0x2489,
	0x248A,
	0x24F6,
	0x24F7,
	0x2777,
	0x2778,
	0x2781,
	0x2782,
	0x278B,
	0x278C,
	0x3022,
	0x3023,
	0x3193,
	0x3194,
	0x3221,
	0x3222,
	0x3281,
	0x3282,
	0x3483,
	0x3484,
	0x4E8C,
	0x4E8D,
	0x5169,
	0x516A,
	0x5F0D,
	0x5F0E,
	0x5F10,
	0x5F11,
	0x8CAE,
	0x8CAF,
	0x8CB3,
	0x8CB4,
	0x8D30,
	0x8D31,
	0xA622,
	0xA623,
	0xA6E7,
	0xA6E8,
	0xA8D2,
	0xA8D3,
	0xA902,
	0xA903,
	0xA9D2,
	0xA9D3,
	0xA9F2,
	0xA9F3,
	0xAA52,
	0xAA53,
	0xABF2,
	0xABF3,
	0xF978,
	0xF979,
	0xFF12,
	0xFF13,
	0x10108,
	0x10109,
	0x1015B,
	0x1015F,
	0x102E2,
	0x102E3,
	0x103D2,
	0x103D3,
	0x104A2,
	0x104A3,
	0x10859,
	0x1085A,
	0x1087A,
	0x1087B,
	0x108A8,
	0x108A9,
	0x1091A,
	0x1091B,
	0x109C1,
	0x109C2,
	0x10A41,
	0x10A42,
	0x10B59,
	0x10B5A,
	0x10B79,
	0x10B7A,
	0x10BAA,
	0x10BAB,
	0x10E61,
	0x10E62,
	0x11053,
	0x11054,
	0x11068,
	0x11069,
	0x110F2,
	0x110F3,
	0x11138,
	0x11139,
	0x111D2,
	0x111D3,
	0x111E2,
	0x111E3,
	0x112F2,
	0x112F3,
	0x11452,
	0x11453,
	0x114D2,
	0x114D3,
	0x11652,
	0x11653,
	0x116C2,
	0x116C3,
	0x11732,
	0x11733,
	0x118E2,
	0x118E3,
	0x11C52,
	0x11C53,
	0x11C5B,
	0x11C5C,
	0x11D52,
	0x11D53,
	0x12400,
	0x12401,
	0x12416,
	0x12417,
	0x1241F,
	0x12420,
	0x12423,
	0x12424,
	0x1242D,
	0x1242E,
	0x12435,
	0x12436,
	0x1244A,
	0x1244B,
	0x12450,
	0x12451,
	0x12456,
	0x12457,
	0x12459,
	0x1245A,
	0x16A62,
	0x16A63,
	0x16B52,
	0x16B53,
	0x1D361,
	0x1D362,
	0x1D7D0,
	0x1D7D1,
	0x1D7DA,
	0x1D7DB,
	0x1D7E4,
	0x1D7E5,
	0x1D7EE,
	0x1D7EF,
	0x1D7F8,
	0x1D7F9,
	0x1E8C8,
	0x1E8C9,
	0x1E952,
	0x1E953,
	0x1F103,
	0x1F104,
	0x22390,
	0x22391
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__2_invlist[] = { /* for EBCDIC 1047 */
	239,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xEA,
	0xEB,
	0xF2,
	0xF3,
	0x662,
	0x663,
	0x6F2,
	0x6F3,
	0x7C2,
	0x7C3,
	0x968,
	0x969,
	0x9E8,
	0x9E9,
	0xA68,
	0xA69,
	0xAE8,
	0xAE9,
	0xB68,
	0xB69,
	0xBE8,
	0xBE9,
	0xC68,
	0xC69,
	0xC7A,
	0xC7B,
	0xC7D,
	0xC7E,
	0xCE8,
	0xCE9,
	0xD68,
	0xD69,
	0xDE8,
	0xDE9,
	0xE52,
	0xE53,
	0xED2,
	0xED3,
	0xF22,
	0xF23,
	0x1042,
	0x1043,
	0x1092,
	0x1093,
	0x136A,
	0x136B,
	0x17E2,
	0x17E3,
	0x17F2,
	0x17F3,
	0x1812,
	0x1813,
	0x1948,
	0x1949,
	0x19D2,
	0x19D3,
	0x1A82,
	0x1A83,
	0x1A92,
	0x1A93,
	0x1B52,
	0x1B53,
	0x1BB2,
	0x1BB3,
	0x1C42,
	0x1C43,
	0x1C52,
	0x1C53,
	0x2082,
	0x2083,
	0x2161,
	0x2162,
	0x2171,
	0x2172,
	0x2461,
	0x2462,
	0x2475,
	0x2476,
	0x2489,
	0x248A,
	0x24F6,
	0x24F7,
	0x2777,
	0x2778,
	0x2781,
	0x2782,
	0x278B,
	0x278C,
	0x3022,
	0x3023,
	0x3193,
	0x3194,
	0x3221,
	0x3222,
	0x3281,
	0x3282,
	0x3483,
	0x3484,
	0x4E8C,
	0x4E8D,
	0x5169,
	0x516A,
	0x5F0D,
	0x5F0E,
	0x5F10,
	0x5F11,
	0x8CAE,
	0x8CAF,
	0x8CB3,
	0x8CB4,
	0x8D30,
	0x8D31,
	0xA622,
	0xA623,
	0xA6E7,
	0xA6E8,
	0xA8D2,
	0xA8D3,
	0xA902,
	0xA903,
	0xA9D2,
	0xA9D3,
	0xA9F2,
	0xA9F3,
	0xAA52,
	0xAA53,
	0xABF2,
	0xABF3,
	0xF978,
	0xF979,
	0xFF12,
	0xFF13,
	0x10108,
	0x10109,
	0x1015B,
	0x1015F,
	0x102E2,
	0x102E3,
	0x103D2,
	0x103D3,
	0x104A2,
	0x104A3,
	0x10859,
	0x1085A,
	0x1087A,
	0x1087B,
	0x108A8,
	0x108A9,
	0x1091A,
	0x1091B,
	0x109C1,
	0x109C2,
	0x10A41,
	0x10A42,
	0x10B59,
	0x10B5A,
	0x10B79,
	0x10B7A,
	0x10BAA,
	0x10BAB,
	0x10E61,
	0x10E62,
	0x11053,
	0x11054,
	0x11068,
	0x11069,
	0x110F2,
	0x110F3,
	0x11138,
	0x11139,
	0x111D2,
	0x111D3,
	0x111E2,
	0x111E3,
	0x112F2,
	0x112F3,
	0x11452,
	0x11453,
	0x114D2,
	0x114D3,
	0x11652,
	0x11653,
	0x116C2,
	0x116C3,
	0x11732,
	0x11733,
	0x118E2,
	0x118E3,
	0x11C52,
	0x11C53,
	0x11C5B,
	0x11C5C,
	0x11D52,
	0x11D53,
	0x12400,
	0x12401,
	0x12416,
	0x12417,
	0x1241F,
	0x12420,
	0x12423,
	0x12424,
	0x1242D,
	0x1242E,
	0x12435,
	0x12436,
	0x1244A,
	0x1244B,
	0x12450,
	0x12451,
	0x12456,
	0x12457,
	0x12459,
	0x1245A,
	0x16A62,
	0x16A63,
	0x16B52,
	0x16B53,
	0x1D361,
	0x1D362,
	0x1D7D0,
	0x1D7D1,
	0x1D7DA,
	0x1D7DB,
	0x1D7E4,
	0x1D7E5,
	0x1D7EE,
	0x1D7EF,
	0x1D7F8,
	0x1D7F9,
	0x1E8C8,
	0x1E8C9,
	0x1E952,
	0x1E953,
	0x1F103,
	0x1F104,
	0x22390,
	0x22391
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__2_invlist[] = { /* for EBCDIC 037 */
	239,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xEA,
	0xEB,
	0xF2,
	0xF3,
	0x662,
	0x663,
	0x6F2,
	0x6F3,
	0x7C2,
	0x7C3,
	0x968,
	0x969,
	0x9E8,
	0x9E9,
	0xA68,
	0xA69,
	0xAE8,
	0xAE9,
	0xB68,
	0xB69,
	0xBE8,
	0xBE9,
	0xC68,
	0xC69,
	0xC7A,
	0xC7B,
	0xC7D,
	0xC7E,
	0xCE8,
	0xCE9,
	0xD68,
	0xD69,
	0xDE8,
	0xDE9,
	0xE52,
	0xE53,
	0xED2,
	0xED3,
	0xF22,
	0xF23,
	0x1042,
	0x1043,
	0x1092,
	0x1093,
	0x136A,
	0x136B,
	0x17E2,
	0x17E3,
	0x17F2,
	0x17F3,
	0x1812,
	0x1813,
	0x1948,
	0x1949,
	0x19D2,
	0x19D3,
	0x1A82,
	0x1A83,
	0x1A92,
	0x1A93,
	0x1B52,
	0x1B53,
	0x1BB2,
	0x1BB3,
	0x1C42,
	0x1C43,
	0x1C52,
	0x1C53,
	0x2082,
	0x2083,
	0x2161,
	0x2162,
	0x2171,
	0x2172,
	0x2461,
	0x2462,
	0x2475,
	0x2476,
	0x2489,
	0x248A,
	0x24F6,
	0x24F7,
	0x2777,
	0x2778,
	0x2781,
	0x2782,
	0x278B,
	0x278C,
	0x3022,
	0x3023,
	0x3193,
	0x3194,
	0x3221,
	0x3222,
	0x3281,
	0x3282,
	0x3483,
	0x3484,
	0x4E8C,
	0x4E8D,
	0x5169,
	0x516A,
	0x5F0D,
	0x5F0E,
	0x5F10,
	0x5F11,
	0x8CAE,
	0x8CAF,
	0x8CB3,
	0x8CB4,
	0x8D30,
	0x8D31,
	0xA622,
	0xA623,
	0xA6E7,
	0xA6E8,
	0xA8D2,
	0xA8D3,
	0xA902,
	0xA903,
	0xA9D2,
	0xA9D3,
	0xA9F2,
	0xA9F3,
	0xAA52,
	0xAA53,
	0xABF2,
	0xABF3,
	0xF978,
	0xF979,
	0xFF12,
	0xFF13,
	0x10108,
	0x10109,
	0x1015B,
	0x1015F,
	0x102E2,
	0x102E3,
	0x103D2,
	0x103D3,
	0x104A2,
	0x104A3,
	0x10859,
	0x1085A,
	0x1087A,
	0x1087B,
	0x108A8,
	0x108A9,
	0x1091A,
	0x1091B,
	0x109C1,
	0x109C2,
	0x10A41,
	0x10A42,
	0x10B59,
	0x10B5A,
	0x10B79,
	0x10B7A,
	0x10BAA,
	0x10BAB,
	0x10E61,
	0x10E62,
	0x11053,
	0x11054,
	0x11068,
	0x11069,
	0x110F2,
	0x110F3,
	0x11138,
	0x11139,
	0x111D2,
	0x111D3,
	0x111E2,
	0x111E3,
	0x112F2,
	0x112F3,
	0x11452,
	0x11453,
	0x114D2,
	0x114D3,
	0x11652,
	0x11653,
	0x116C2,
	0x116C3,
	0x11732,
	0x11733,
	0x118E2,
	0x118E3,
	0x11C52,
	0x11C53,
	0x11C5B,
	0x11C5C,
	0x11D52,
	0x11D53,
	0x12400,
	0x12401,
	0x12416,
	0x12417,
	0x1241F,
	0x12420,
	0x12423,
	0x12424,
	0x1242D,
	0x1242E,
	0x12435,
	0x12436,
	0x1244A,
	0x1244B,
	0x12450,
	0x12451,
	0x12456,
	0x12457,
	0x12459,
	0x1245A,
	0x16A62,
	0x16A63,
	0x16B52,
	0x16B53,
	0x1D361,
	0x1D362,
	0x1D7D0,
	0x1D7D1,
	0x1D7DA,
	0x1D7DB,
	0x1D7E4,
	0x1D7E5,
	0x1D7EE,
	0x1D7EF,
	0x1D7F8,
	0x1D7F9,
	0x1E8C8,
	0x1E8C9,
	0x1E952,
	0x1E953,
	0x1F103,
	0x1F104,
	0x22390,
	0x22391
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__2_SLASH_3_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2154,
	0x2155,
	0x10177,
	0x10178,
	0x109FD,
	0x109FE,
	0x10E7E,
	0x10E7F,
	0x1245B,
	0x1245C,
	0x1245E,
	0x1245F,
	0x12466,
	0x12467
};

static const UV PL_NV__2_SLASH_5_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2156,
	0x2157
};

static const UV PL_NV__20_invlist[] = { /* for all charsets */
	63,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1373,
	0x1374,
	0x2473,
	0x2474,
	0x2487,
	0x2488,
	0x249B,
	0x249C,
	0x24F4,
	0x24F5,
	0x3039,
	0x303A,
	0x3249,
	0x324A,
	0x5344,
	0x5345,
	0x5EFF,
	0x5F00,
	0x10111,
	0x10112,
	0x102EB,
	0x102EC,
	0x103D4,
	0x103D5,
	0x1085C,
	0x1085D,
	0x1087F,
	0x10880,
	0x108AE,
	0x108AF,
	0x108FE,
	0x108FF,
	0x10918,
	0x10919,
	0x109CA,
	0x109CB,
	0x10A45,
	0x10A46,
	0x10A9F,
	0x10AA0,
	0x10AEE,
	0x10AEF,
	0x10B5D,
	0x10B5E,
	0x10B7D,
	0x10B7E,
	0x10BAE,
	0x10BAF,
	0x10E6A,
	0x10E6B,
	0x1105C,
	0x1105D,
	0x111EB,
	0x111EC,
	0x1173B,
	0x1173C,
	0x118EB,
	0x118EC,
	0x11C64,
	0x11C65,
	0x1D36A,
	0x1D36B
};

static const UV PL_NV__200_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1011A,
	0x1011B,
	0x102F4,
	0x102F5,
	0x109D3,
	0x109D4,
	0x10E73,
	0x10E74
};

static const UV PL_NV__2000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10123,
	0x10124,
	0x109DC,
	0x109DD
};

static const UV PL_NV__20000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1012C,
	0x1012D,
	0x109E5,
	0x109E6
};

static const UV PL_NV__200000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109EE,
	0x109EF
};

static const UV PL_NV__21_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3251,
	0x3252
};

static const UV PL_NV__216000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x12432,
	0x12433
};

static const UV PL_NV__22_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3252,
	0x3253
};

static const UV PL_NV__23_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3253,
	0x3254
};

static const UV PL_NV__24_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3254,
	0x3255
};

static const UV PL_NV__25_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3255,
	0x3256
};

static const UV PL_NV__26_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3256,
	0x3257
};

static const UV PL_NV__27_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3257,
	0x3258
};

static const UV PL_NV__28_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3258,
	0x3259
};

static const UV PL_NV__29_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3259,
	0x325A
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__3_invlist[] = { /* for ASCII/Latin1 */
	235,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x33,
	0x34,
	0xB3,
	0xB4,
	0x663,
	0x664,
	0x6F3,
	0x6F4,
	0x7C3,
	0x7C4,
	0x969,
	0x96A,
	0x9E9,
	0x9EA,
	0xA69,
	0xA6A,
	0xAE9,
	0xAEA,
	0xB69,
	0xB6A,
	0xBE9,
	0xBEA,
	0xC69,
	0xC6A,
	0xC7B,
	0xC7C,
	0xC7E,
	0xC7F,
	0xCE9,
	0xCEA,
	0xD69,
	0xD6A,
	0xDE9,
	0xDEA,
	0xE53,
	0xE54,
	0xED3,
	0xED4,
	0xF23,
	0xF24,
	0x1043,
	0x1044,
	0x1093,
	0x1094,
	0x136B,
	0x136C,
	0x17E3,
	0x17E4,
	0x17F3,
	0x17F4,
	0x1813,
	0x1814,
	0x1949,
	0x194A,
	0x19D3,
	0x19D4,
	0x1A83,
	0x1A84,
	0x1A93,
	0x1A94,
	0x1B53,
	0x1B54,
	0x1BB3,
	0x1BB4,
	0x1C43,
	0x1C44,
	0x1C53,
	0x1C54,
	0x2083,
	0x2084,
	0x2162,
	0x2163,
	0x2172,
	0x2173,
	0x2462,
	0x2463,
	0x2476,
	0x2477,
	0x248A,
	0x248B,
	0x24F7,
	0x24F8,
	0x2778,
	0x2779,
	0x2782,
	0x2783,
	0x278C,
	0x278D,
	0x3023,
	0x3024,
	0x3194,
	0x3195,
	0x3222,
	0x3223,
	0x3282,
	0x3283,
	0x4E09,
	0x4E0A,
	0x4EE8,
	0x4EE9,
	0x53C1,
	0x53C5,
	0x5F0E,
	0x5F0F,
	0xA623,
	0xA624,
	0xA6E8,
	0xA6E9,
	0xA8D3,
	0xA8D4,
	0xA903,
	0xA904,
	0xA9D3,
	0xA9D4,
	0xA9F3,
	0xA9F4,
	0xAA53,
	0xAA54,
	0xABF3,
	0xABF4,
	0xF96B,
	0xF96C,
	0xFF13,
	0xFF14,
	0x10109,
	0x1010A,
	0x102E3,
	0x102E4,
	0x104A3,
	0x104A4,
	0x1085A,
	0x1085B,
	0x1087B,
	0x1087C,
	0x108A9,
	0x108AA,
	0x1091B,
	0x1091C,
	0x109C2,
	0x109C3,
	0x10A42,
	0x10A43,
	0x10B5A,
	0x10B5B,
	0x10B7A,
	0x10B7B,
	0x10BAB,
	0x10BAC,
	0x10E62,
	0x10E63,
	0x11054,
	0x11055,
	0x11069,
	0x1106A,
	0x110F3,
	0x110F4,
	0x11139,
	0x1113A,
	0x111D3,
	0x111D4,
	0x111E3,
	0x111E4,
	0x112F3,
	0x112F4,
	0x11453,
	0x11454,
	0x114D3,
	0x114D4,
	0x11653,
	0x11654,
	0x116C3,
	0x116C4,
	0x11733,
	0x11734,
	0x118E3,
	0x118E4,
	0x11C53,
	0x11C54,
	0x11C5C,
	0x11C5D,
	0x11D53,
	0x11D54,
	0x12401,
	0x12402,
	0x12408,
	0x12409,
	0x12417,
	0x12418,
	0x12420,
	0x12421,
	0x12424,
	0x12426,
	0x1242E,
	0x12430,
	0x12436,
	0x12438,
	0x1243A,
	0x1243C,
	0x1244B,
	0x1244C,
	0x12451,
	0x12452,
	0x12457,
	0x12458,
	0x16A63,
	0x16A64,
	0x16B53,
	0x16B54,
	0x1D362,
	0x1D363,
	0x1D7D1,
	0x1D7D2,
	0x1D7DB,
	0x1D7DC,
	0x1D7E5,
	0x1D7E6,
	0x1D7EF,
	0x1D7F0,
	0x1D7F9,
	0x1D7FA,
	0x1E8C9,
	0x1E8CA,
	0x1E953,
	0x1E954,
	0x1F104,
	0x1F105,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__3_invlist[] = { /* for EBCDIC 1047 */
	235,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF3,
	0xF4,
	0xFA,
	0xFB,
	0x663,
	0x664,
	0x6F3,
	0x6F4,
	0x7C3,
	0x7C4,
	0x969,
	0x96A,
	0x9E9,
	0x9EA,
	0xA69,
	0xA6A,
	0xAE9,
	0xAEA,
	0xB69,
	0xB6A,
	0xBE9,
	0xBEA,
	0xC69,
	0xC6A,
	0xC7B,
	0xC7C,
	0xC7E,
	0xC7F,
	0xCE9,
	0xCEA,
	0xD69,
	0xD6A,
	0xDE9,
	0xDEA,
	0xE53,
	0xE54,
	0xED3,
	0xED4,
	0xF23,
	0xF24,
	0x1043,
	0x1044,
	0x1093,
	0x1094,
	0x136B,
	0x136C,
	0x17E3,
	0x17E4,
	0x17F3,
	0x17F4,
	0x1813,
	0x1814,
	0x1949,
	0x194A,
	0x19D3,
	0x19D4,
	0x1A83,
	0x1A84,
	0x1A93,
	0x1A94,
	0x1B53,
	0x1B54,
	0x1BB3,
	0x1BB4,
	0x1C43,
	0x1C44,
	0x1C53,
	0x1C54,
	0x2083,
	0x2084,
	0x2162,
	0x2163,
	0x2172,
	0x2173,
	0x2462,
	0x2463,
	0x2476,
	0x2477,
	0x248A,
	0x248B,
	0x24F7,
	0x24F8,
	0x2778,
	0x2779,
	0x2782,
	0x2783,
	0x278C,
	0x278D,
	0x3023,
	0x3024,
	0x3194,
	0x3195,
	0x3222,
	0x3223,
	0x3282,
	0x3283,
	0x4E09,
	0x4E0A,
	0x4EE8,
	0x4EE9,
	0x53C1,
	0x53C5,
	0x5F0E,
	0x5F0F,
	0xA623,
	0xA624,
	0xA6E8,
	0xA6E9,
	0xA8D3,
	0xA8D4,
	0xA903,
	0xA904,
	0xA9D3,
	0xA9D4,
	0xA9F3,
	0xA9F4,
	0xAA53,
	0xAA54,
	0xABF3,
	0xABF4,
	0xF96B,
	0xF96C,
	0xFF13,
	0xFF14,
	0x10109,
	0x1010A,
	0x102E3,
	0x102E4,
	0x104A3,
	0x104A4,
	0x1085A,
	0x1085B,
	0x1087B,
	0x1087C,
	0x108A9,
	0x108AA,
	0x1091B,
	0x1091C,
	0x109C2,
	0x109C3,
	0x10A42,
	0x10A43,
	0x10B5A,
	0x10B5B,
	0x10B7A,
	0x10B7B,
	0x10BAB,
	0x10BAC,
	0x10E62,
	0x10E63,
	0x11054,
	0x11055,
	0x11069,
	0x1106A,
	0x110F3,
	0x110F4,
	0x11139,
	0x1113A,
	0x111D3,
	0x111D4,
	0x111E3,
	0x111E4,
	0x112F3,
	0x112F4,
	0x11453,
	0x11454,
	0x114D3,
	0x114D4,
	0x11653,
	0x11654,
	0x116C3,
	0x116C4,
	0x11733,
	0x11734,
	0x118E3,
	0x118E4,
	0x11C53,
	0x11C54,
	0x11C5C,
	0x11C5D,
	0x11D53,
	0x11D54,
	0x12401,
	0x12402,
	0x12408,
	0x12409,
	0x12417,
	0x12418,
	0x12420,
	0x12421,
	0x12424,
	0x12426,
	0x1242E,
	0x12430,
	0x12436,
	0x12438,
	0x1243A,
	0x1243C,
	0x1244B,
	0x1244C,
	0x12451,
	0x12452,
	0x12457,
	0x12458,
	0x16A63,
	0x16A64,
	0x16B53,
	0x16B54,
	0x1D362,
	0x1D363,
	0x1D7D1,
	0x1D7D2,
	0x1D7DB,
	0x1D7DC,
	0x1D7E5,
	0x1D7E6,
	0x1D7EF,
	0x1D7F0,
	0x1D7F9,
	0x1D7FA,
	0x1E8C9,
	0x1E8CA,
	0x1E953,
	0x1E954,
	0x1F104,
	0x1F105,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__3_invlist[] = { /* for EBCDIC 037 */
	235,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF3,
	0xF4,
	0xFA,
	0xFB,
	0x663,
	0x664,
	0x6F3,
	0x6F4,
	0x7C3,
	0x7C4,
	0x969,
	0x96A,
	0x9E9,
	0x9EA,
	0xA69,
	0xA6A,
	0xAE9,
	0xAEA,
	0xB69,
	0xB6A,
	0xBE9,
	0xBEA,
	0xC69,
	0xC6A,
	0xC7B,
	0xC7C,
	0xC7E,
	0xC7F,
	0xCE9,
	0xCEA,
	0xD69,
	0xD6A,
	0xDE9,
	0xDEA,
	0xE53,
	0xE54,
	0xED3,
	0xED4,
	0xF23,
	0xF24,
	0x1043,
	0x1044,
	0x1093,
	0x1094,
	0x136B,
	0x136C,
	0x17E3,
	0x17E4,
	0x17F3,
	0x17F4,
	0x1813,
	0x1814,
	0x1949,
	0x194A,
	0x19D3,
	0x19D4,
	0x1A83,
	0x1A84,
	0x1A93,
	0x1A94,
	0x1B53,
	0x1B54,
	0x1BB3,
	0x1BB4,
	0x1C43,
	0x1C44,
	0x1C53,
	0x1C54,
	0x2083,
	0x2084,
	0x2162,
	0x2163,
	0x2172,
	0x2173,
	0x2462,
	0x2463,
	0x2476,
	0x2477,
	0x248A,
	0x248B,
	0x24F7,
	0x24F8,
	0x2778,
	0x2779,
	0x2782,
	0x2783,
	0x278C,
	0x278D,
	0x3023,
	0x3024,
	0x3194,
	0x3195,
	0x3222,
	0x3223,
	0x3282,
	0x3283,
	0x4E09,
	0x4E0A,
	0x4EE8,
	0x4EE9,
	0x53C1,
	0x53C5,
	0x5F0E,
	0x5F0F,
	0xA623,
	0xA624,
	0xA6E8,
	0xA6E9,
	0xA8D3,
	0xA8D4,
	0xA903,
	0xA904,
	0xA9D3,
	0xA9D4,
	0xA9F3,
	0xA9F4,
	0xAA53,
	0xAA54,
	0xABF3,
	0xABF4,
	0xF96B,
	0xF96C,
	0xFF13,
	0xFF14,
	0x10109,
	0x1010A,
	0x102E3,
	0x102E4,
	0x104A3,
	0x104A4,
	0x1085A,
	0x1085B,
	0x1087B,
	0x1087C,
	0x108A9,
	0x108AA,
	0x1091B,
	0x1091C,
	0x109C2,
	0x109C3,
	0x10A42,
	0x10A43,
	0x10B5A,
	0x10B5B,
	0x10B7A,
	0x10B7B,
	0x10BAB,
	0x10BAC,
	0x10E62,
	0x10E63,
	0x11054,
	0x11055,
	0x11069,
	0x1106A,
	0x110F3,
	0x110F4,
	0x11139,
	0x1113A,
	0x111D3,
	0x111D4,
	0x111E3,
	0x111E4,
	0x112F3,
	0x112F4,
	0x11453,
	0x11454,
	0x114D3,
	0x114D4,
	0x11653,
	0x11654,
	0x116C3,
	0x116C4,
	0x11733,
	0x11734,
	0x118E3,
	0x118E4,
	0x11C53,
	0x11C54,
	0x11C5C,
	0x11C5D,
	0x11D53,
	0x11D54,
	0x12401,
	0x12402,
	0x12408,
	0x12409,
	0x12417,
	0x12418,
	0x12420,
	0x12421,
	0x12424,
	0x12426,
	0x1242E,
	0x12430,
	0x12436,
	0x12438,
	0x1243A,
	0x1243C,
	0x1244B,
	0x1244C,
	0x12451,
	0x12452,
	0x12457,
	0x12458,
	0x16A63,
	0x16A64,
	0x16B53,
	0x16B54,
	0x1D362,
	0x1D363,
	0x1D7D1,
	0x1D7D2,
	0x1D7DB,
	0x1D7DC,
	0x1D7E5,
	0x1D7E6,
	0x1D7EF,
	0x1D7F0,
	0x1D7F9,
	0x1D7FA,
	0x1E8C9,
	0x1E8CA,
	0x1E953,
	0x1E954,
	0x1F104,
	0x1F105,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__3_SLASH_16_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9F6,
	0x9F7,
	0xB77,
	0xB78,
	0xD78,
	0xD79,
	0xA835,
	0xA836
};

static const UV PL_NV__3_SLASH_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF2B,
	0xF2C
};

static const UV PL_NV__3_SLASH_20_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD5D,
	0xD5E
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__3_SLASH_4_invlist[] = { /* for ASCII/Latin1 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBE,
	0xBF,
	0x9F8,
	0x9F9,
	0xB74,
	0xB75,
	0xD75,
	0xD76,
	0xA832,
	0xA833,
	0x10178,
	0x10179,
	0x109FE,
	0x109FF
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__3_SLASH_4_invlist[] = { /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB9,
	0xBA,
	0x9F8,
	0x9F9,
	0xB74,
	0xB75,
	0xD75,
	0xD76,
	0xA832,
	0xA833,
	0x10178,
	0x10179,
	0x109FE,
	0x109FF
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__3_SLASH_4_invlist[] = { /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB9,
	0xBA,
	0x9F8,
	0x9F9,
	0xB74,
	0xB75,
	0xD75,
	0xD76,
	0xA832,
	0xA833,
	0x10178,
	0x10179,
	0x109FE,
	0x109FF
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__3_SLASH_5_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2157,
	0x2158
};

static const UV PL_NV__3_SLASH_8_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x215C,
	0x215D
};

static const UV PL_NV__3_SLASH_80_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD5A,
	0xD5B
};

static const UV PL_NV__30_invlist[] = { /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1374,
	0x1375,
	0x303A,
	0x303B,
	0x324A,
	0x324B,
	0x325A,
	0x325B,
	0x5345,
	0x5346,
	0x10112,
	0x10113,
	0x10165,
	0x10166,
	0x102EC,
	0x102ED,
	0x109CB,
	0x109CC,
	0x10E6B,
	0x10E6C,
	0x1105D,
	0x1105E,
	0x111EC,
	0x111ED,
	0x118EC,
	0x118ED,
	0x11C65,
	0x11C66,
	0x1D36B,
	0x1D36C,
	0x20983,
	0x20984
};

static const UV PL_NV__300_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1011B,
	0x1011C,
	0x1016B,
	0x1016C,
	0x102F5,
	0x102F6,
	0x109D4,
	0x109D5,
	0x10E74,
	0x10E75
};

static const UV PL_NV__3000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10124,
	0x10125,
	0x109DD,
	0x109DE
};

static const UV PL_NV__30000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1012D,
	0x1012E,
	0x109E6,
	0x109E7
};

static const UV PL_NV__300000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109EF,
	0x109F0
};

static const UV PL_NV__31_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325B,
	0x325C
};

static const UV PL_NV__32_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325C,
	0x325D
};

static const UV PL_NV__33_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325D,
	0x325E
};

static const UV PL_NV__34_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325E,
	0x325F
};

static const UV PL_NV__35_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325F,
	0x3260
};

static const UV PL_NV__36_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B1,
	0x32B2
};

static const UV PL_NV__37_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B2,
	0x32B3
};

static const UV PL_NV__38_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B3,
	0x32B4
};

static const UV PL_NV__39_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B4,
	0x32B5
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__4_invlist[] = { /* for ASCII/Latin1 */
	223,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x34,
	0x35,
	0x664,
	0x665,
	0x6F4,
	0x6F5,
	0x7C4,
	0x7C5,
	0x96A,
	0x96B,
	0x9EA,
	0x9EB,
	0xA6A,
	0xA6B,
	0xAEA,
	0xAEB,
	0xB6A,
	0xB6B,
	0xBEA,
	0xBEB,
	0xC6A,
	0xC6B,
	0xCEA,
	0xCEB,
	0xD6A,
	0xD6B,
	0xDEA,
	0xDEB,
	0xE54,
	0xE55,
	0xED4,
	0xED5,
	0xF24,
	0xF25,
	0x1044,
	0x1045,
	0x1094,
	0x1095,
	0x136C,
	0x136D,
	0x17E4,
	0x17E5,
	0x17F4,
	0x17F5,
	0x1814,
	0x1815,
	0x194A,
	0x194B,
	0x19D4,
	0x19D5,
	0x1A84,
	0x1A85,
	0x1A94,
	0x1A95,
	0x1B54,
	0x1B55,
	0x1BB4,
	0x1BB5,
	0x1C44,
	0x1C45,
	0x1C54,
	0x1C55,
	0x2074,
	0x2075,
	0x2084,
	0x2085,
	0x2163,
	0x2164,
	0x2173,
	0x2174,
	0x2463,
	0x2464,
	0x2477,
	0x2478,
	0x248B,
	0x248C,
	0x24F8,
	0x24F9,
	0x2779,
	0x277A,
	0x2783,
	0x2784,
	0x278D,
	0x278E,
	0x3024,
	0x3025,
	0x3195,
	0x3196,
	0x3223,
	0x3224,
	0x3283,
	0x3284,
	0x4E96,
	0x4E97,
	0x56DB,
	0x56DC,
	0x8086,
	0x8087,
	0xA624,
	0xA625,
	0xA6E9,
	0xA6EA,
	0xA8D4,
	0xA8D5,
	0xA904,
	0xA905,
	0xA9D4,
	0xA9D5,
	0xA9F4,
	0xA9F5,
	0xAA54,
	0xAA55,
	0xABF4,
	0xABF5,
	0xFF14,
	0xFF15,
	0x1010A,
	0x1010B,
	0x102E4,
	0x102E5,
	0x104A4,
	0x104A5,
	0x1087C,
	0x1087D,
	0x108AA,
	0x108AC,
	0x109C3,
	0x109C4,
	0x10A43,
	0x10A44,
	0x10B5B,
	0x10B5C,
	0x10B7B,
	0x10B7C,
	0x10BAC,
	0x10BAD,
	0x10E63,
	0x10E64,
	0x11055,
	0x11056,
	0x1106A,
	0x1106B,
	0x110F4,
	0x110F5,
	0x1113A,
	0x1113B,
	0x111D4,
	0x111D5,
	0x111E4,
	0x111E5,
	0x112F4,
	0x112F5,
	0x11454,
	0x11455,
	0x114D4,
	0x114D5,
	0x11654,
	0x11655,
	0x116C4,
	0x116C5,
	0x11734,
	0x11735,
	0x118E4,
	0x118E5,
	0x11C54,
	0x11C55,
	0x11C5D,
	0x11C5E,
	0x11D54,
	0x11D55,
	0x12402,
	0x12403,
	0x12409,
	0x1240A,
	0x1240F,
	0x12410,
	0x12418,
	0x12419,
	0x12421,
	0x12422,
	0x12426,
	0x12427,
	0x12430,
	0x12431,
	0x12438,
	0x12439,
	0x1243C,
	0x12440,
	0x1244C,
	0x1244D,
	0x12452,
	0x12454,
	0x12469,
	0x1246A,
	0x16A64,
	0x16A65,
	0x16B54,
	0x16B55,
	0x1D363,
	0x1D364,
	0x1D7D2,
	0x1D7D3,
	0x1D7DC,
	0x1D7DD,
	0x1D7E6,
	0x1D7E7,
	0x1D7F0,
	0x1D7F1,
	0x1D7FA,
	0x1D7FB,
	0x1E8CA,
	0x1E8CB,
	0x1E954,
	0x1E955,
	0x1F105,
	0x1F106,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x2626D,
	0x2626E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__4_invlist[] = { /* for EBCDIC 1047 */
	223,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF4,
	0xF5,
	0x664,
	0x665,
	0x6F4,
	0x6F5,
	0x7C4,
	0x7C5,
	0x96A,
	0x96B,
	0x9EA,
	0x9EB,
	0xA6A,
	0xA6B,
	0xAEA,
	0xAEB,
	0xB6A,
	0xB6B,
	0xBEA,
	0xBEB,
	0xC6A,
	0xC6B,
	0xCEA,
	0xCEB,
	0xD6A,
	0xD6B,
	0xDEA,
	0xDEB,
	0xE54,
	0xE55,
	0xED4,
	0xED5,
	0xF24,
	0xF25,
	0x1044,
	0x1045,
	0x1094,
	0x1095,
	0x136C,
	0x136D,
	0x17E4,
	0x17E5,
	0x17F4,
	0x17F5,
	0x1814,
	0x1815,
	0x194A,
	0x194B,
	0x19D4,
	0x19D5,
	0x1A84,
	0x1A85,
	0x1A94,
	0x1A95,
	0x1B54,
	0x1B55,
	0x1BB4,
	0x1BB5,
	0x1C44,
	0x1C45,
	0x1C54,
	0x1C55,
	0x2074,
	0x2075,
	0x2084,
	0x2085,
	0x2163,
	0x2164,
	0x2173,
	0x2174,
	0x2463,
	0x2464,
	0x2477,
	0x2478,
	0x248B,
	0x248C,
	0x24F8,
	0x24F9,
	0x2779,
	0x277A,
	0x2783,
	0x2784,
	0x278D,
	0x278E,
	0x3024,
	0x3025,
	0x3195,
	0x3196,
	0x3223,
	0x3224,
	0x3283,
	0x3284,
	0x4E96,
	0x4E97,
	0x56DB,
	0x56DC,
	0x8086,
	0x8087,
	0xA624,
	0xA625,
	0xA6E9,
	0xA6EA,
	0xA8D4,
	0xA8D5,
	0xA904,
	0xA905,
	0xA9D4,
	0xA9D5,
	0xA9F4,
	0xA9F5,
	0xAA54,
	0xAA55,
	0xABF4,
	0xABF5,
	0xFF14,
	0xFF15,
	0x1010A,
	0x1010B,
	0x102E4,
	0x102E5,
	0x104A4,
	0x104A5,
	0x1087C,
	0x1087D,
	0x108AA,
	0x108AC,
	0x109C3,
	0x109C4,
	0x10A43,
	0x10A44,
	0x10B5B,
	0x10B5C,
	0x10B7B,
	0x10B7C,
	0x10BAC,
	0x10BAD,
	0x10E63,
	0x10E64,
	0x11055,
	0x11056,
	0x1106A,
	0x1106B,
	0x110F4,
	0x110F5,
	0x1113A,
	0x1113B,
	0x111D4,
	0x111D5,
	0x111E4,
	0x111E5,
	0x112F4,
	0x112F5,
	0x11454,
	0x11455,
	0x114D4,
	0x114D5,
	0x11654,
	0x11655,
	0x116C4,
	0x116C5,
	0x11734,
	0x11735,
	0x118E4,
	0x118E5,
	0x11C54,
	0x11C55,
	0x11C5D,
	0x11C5E,
	0x11D54,
	0x11D55,
	0x12402,
	0x12403,
	0x12409,
	0x1240A,
	0x1240F,
	0x12410,
	0x12418,
	0x12419,
	0x12421,
	0x12422,
	0x12426,
	0x12427,
	0x12430,
	0x12431,
	0x12438,
	0x12439,
	0x1243C,
	0x12440,
	0x1244C,
	0x1244D,
	0x12452,
	0x12454,
	0x12469,
	0x1246A,
	0x16A64,
	0x16A65,
	0x16B54,
	0x16B55,
	0x1D363,
	0x1D364,
	0x1D7D2,
	0x1D7D3,
	0x1D7DC,
	0x1D7DD,
	0x1D7E6,
	0x1D7E7,
	0x1D7F0,
	0x1D7F1,
	0x1D7FA,
	0x1D7FB,
	0x1E8CA,
	0x1E8CB,
	0x1E954,
	0x1E955,
	0x1F105,
	0x1F106,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x2626D,
	0x2626E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__4_invlist[] = { /* for EBCDIC 037 */
	223,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF4,
	0xF5,
	0x664,
	0x665,
	0x6F4,
	0x6F5,
	0x7C4,
	0x7C5,
	0x96A,
	0x96B,
	0x9EA,
	0x9EB,
	0xA6A,
	0xA6B,
	0xAEA,
	0xAEB,
	0xB6A,
	0xB6B,
	0xBEA,
	0xBEB,
	0xC6A,
	0xC6B,
	0xCEA,
	0xCEB,
	0xD6A,
	0xD6B,
	0xDEA,
	0xDEB,
	0xE54,
	0xE55,
	0xED4,
	0xED5,
	0xF24,
	0xF25,
	0x1044,
	0x1045,
	0x1094,
	0x1095,
	0x136C,
	0x136D,
	0x17E4,
	0x17E5,
	0x17F4,
	0x17F5,
	0x1814,
	0x1815,
	0x194A,
	0x194B,
	0x19D4,
	0x19D5,
	0x1A84,
	0x1A85,
	0x1A94,
	0x1A95,
	0x1B54,
	0x1B55,
	0x1BB4,
	0x1BB5,
	0x1C44,
	0x1C45,
	0x1C54,
	0x1C55,
	0x2074,
	0x2075,
	0x2084,
	0x2085,
	0x2163,
	0x2164,
	0x2173,
	0x2174,
	0x2463,
	0x2464,
	0x2477,
	0x2478,
	0x248B,
	0x248C,
	0x24F8,
	0x24F9,
	0x2779,
	0x277A,
	0x2783,
	0x2784,
	0x278D,
	0x278E,
	0x3024,
	0x3025,
	0x3195,
	0x3196,
	0x3223,
	0x3224,
	0x3283,
	0x3284,
	0x4E96,
	0x4E97,
	0x56DB,
	0x56DC,
	0x8086,
	0x8087,
	0xA624,
	0xA625,
	0xA6E9,
	0xA6EA,
	0xA8D4,
	0xA8D5,
	0xA904,
	0xA905,
	0xA9D4,
	0xA9D5,
	0xA9F4,
	0xA9F5,
	0xAA54,
	0xAA55,
	0xABF4,
	0xABF5,
	0xFF14,
	0xFF15,
	0x1010A,
	0x1010B,
	0x102E4,
	0x102E5,
	0x104A4,
	0x104A5,
	0x1087C,
	0x1087D,
	0x108AA,
	0x108AC,
	0x109C3,
	0x109C4,
	0x10A43,
	0x10A44,
	0x10B5B,
	0x10B5C,
	0x10B7B,
	0x10B7C,
	0x10BAC,
	0x10BAD,
	0x10E63,
	0x10E64,
	0x11055,
	0x11056,
	0x1106A,
	0x1106B,
	0x110F4,
	0x110F5,
	0x1113A,
	0x1113B,
	0x111D4,
	0x111D5,
	0x111E4,
	0x111E5,
	0x112F4,
	0x112F5,
	0x11454,
	0x11455,
	0x114D4,
	0x114D5,
	0x11654,
	0x11655,
	0x116C4,
	0x116C5,
	0x11734,
	0x11735,
	0x118E4,
	0x118E5,
	0x11C54,
	0x11C55,
	0x11C5D,
	0x11C5E,
	0x11D54,
	0x11D55,
	0x12402,
	0x12403,
	0x12409,
	0x1240A,
	0x1240F,
	0x12410,
	0x12418,
	0x12419,
	0x12421,
	0x12422,
	0x12426,
	0x12427,
	0x12430,
	0x12431,
	0x12438,
	0x12439,
	0x1243C,
	0x12440,
	0x1244C,
	0x1244D,
	0x12452,
	0x12454,
	0x12469,
	0x1246A,
	0x16A64,
	0x16A65,
	0x16B54,
	0x16B55,
	0x1D363,
	0x1D364,
	0x1D7D2,
	0x1D7D3,
	0x1D7DC,
	0x1D7DD,
	0x1D7E6,
	0x1D7E7,
	0x1D7F0,
	0x1D7F1,
	0x1D7FA,
	0x1D7FB,
	0x1E8CA,
	0x1E8CB,
	0x1E954,
	0x1E955,
	0x1F105,
	0x1F106,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x2626D,
	0x2626E
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__4_SLASH_5_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2158,
	0x2159
};

static const UV PL_NV__40_invlist[] = { /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1375,
	0x1376,
	0x324B,
	0x324C,
	0x32B5,
	0x32B6,
	0x534C,
	0x534D,
	0x10113,
	0x10114,
	0x102ED,
	0x102EE,
	0x109CC,
	0x109CD,
	0x10E6C,
	0x10E6D,
	0x1105E,
	0x1105F,
	0x111ED,
	0x111EE,
	0x118ED,
	0x118EE,
	0x11C66,
	0x11C67,
	0x12467,
	0x12468,
	0x1D36C,
	0x1D36D,
	0x2098C,
	0x2098D,
	0x2099C,
	0x2099D
};

static const UV PL_NV__400_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1011C,
	0x1011D,
	0x102F6,
	0x102F7,
	0x109D5,
	0x109D6,
	0x10E75,
	0x10E76
};

static const UV PL_NV__4000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10125,
	0x10126,
	0x109DE,
	0x109DF
};

static const UV PL_NV__40000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1012E,
	0x1012F,
	0x109E7,
	0x109E8
};

static const UV PL_NV__400000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109F0,
	0x109F1
};

static const UV PL_NV__41_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B6,
	0x32B7
};

static const UV PL_NV__42_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B7,
	0x32B8
};

static const UV PL_NV__43_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B8,
	0x32B9
};

static const UV PL_NV__432000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x12433,
	0x12434
};

static const UV PL_NV__44_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B9,
	0x32BA
};

static const UV PL_NV__45_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32BA,
	0x32BB
};

static const UV PL_NV__46_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32BB,
	0x32BC
};

static const UV PL_NV__47_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32BC,
	0x32BD
};

static const UV PL_NV__48_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32BD,
	0x32BE
};

static const UV PL_NV__49_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32BE,
	0x32BF
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__5_invlist[] = { /* for ASCII/Latin1 */
	227,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x35,
	0x36,
	0x665,
	0x666,
	0x6F5,
	0x6F6,
	0x7C5,
	0x7C6,
	0x96B,
	0x96C,
	0x9EB,
	0x9EC,
	0xA6B,
	0xA6C,
	0xAEB,
	0xAEC,
	0xB6B,
	0xB6C,
	0xBEB,
	0xBEC,
	0xC6B,
	0xC6C,
	0xCEB,
	0xCEC,
	0xD6B,
	0xD6C,
	0xDEB,
	0xDEC,
	0xE55,
	0xE56,
	0xED5,
	0xED6,
	0xF25,
	0xF26,
	0x1045,
	0x1046,
	0x1095,
	0x1096,
	0x136D,
	0x136E,
	0x17E5,
	0x17E6,
	0x17F5,
	0x17F6,
	0x1815,
	0x1816,
	0x194B,
	0x194C,
	0x19D5,
	0x19D6,
	0x1A85,
	0x1A86,
	0x1A95,
	0x1A96,
	0x1B55,
	0x1B56,
	0x1BB5,
	0x1BB6,
	0x1C45,
	0x1C46,
	0x1C55,
	0x1C56,
	0x2075,
	0x2076,
	0x2085,
	0x2086,
	0x2164,
	0x2165,
	0x2174,
	0x2175,
	0x2464,
	0x2465,
	0x2478,
	0x2479,
	0x248C,
	0x248D,
	0x24F9,
	0x24FA,
	0x277A,
	0x277B,
	0x2784,
	0x2785,
	0x278E,
	0x278F,
	0x3025,
	0x3026,
	0x3224,
	0x3225,
	0x3284,
	0x3285,
	0x3405,
	0x3406,
	0x382A,
	0x382B,
	0x4E94,
	0x4E95,
	0x4F0D,
	0x4F0E,
	0xA625,
	0xA626,
	0xA6EA,
	0xA6EB,
	0xA8D5,
	0xA8D6,
	0xA905,
	0xA906,
	0xA9D5,
	0xA9D6,
	0xA9F5,
	0xA9F6,
	0xAA55,
	0xAA56,
	0xABF5,
	0xABF6,
	0xFF15,
	0xFF16,
	0x1010B,
	0x1010C,
	0x10143,
	0x10144,
	0x10148,
	0x10149,
	0x1014F,
	0x10150,
	0x1015F,
	0x10160,
	0x10173,
	0x10174,
	0x102E5,
	0x102E6,
	0x10321,
	0x10322,
	0x104A5,
	0x104A6,
	0x1087D,
	0x1087E,
	0x108AC,
	0x108AD,
	0x108FC,
	0x108FD,
	0x109C4,
	0x109C5,
	0x10AEC,
	0x10AED,
	0x10CFB,
	0x10CFC,
	0x10E64,
	0x10E65,
	0x11056,
	0x11057,
	0x1106B,
	0x1106C,
	0x110F5,
	0x110F6,
	0x1113B,
	0x1113C,
	0x111D5,
	0x111D6,
	0x111E5,
	0x111E6,
	0x112F5,
	0x112F6,
	0x11455,
	0x11456,
	0x114D5,
	0x114D6,
	0x11655,
	0x11656,
	0x116C5,
	0x116C6,
	0x11735,
	0x11736,
	0x118E5,
	0x118E6,
	0x11C55,
	0x11C56,
	0x11C5E,
	0x11C5F,
	0x11D55,
	0x11D56,
	0x12403,
	0x12404,
	0x1240A,
	0x1240B,
	0x12410,
	0x12411,
	0x12419,
	0x1241A,
	0x12422,
	0x12423,
	0x12427,
	0x12428,
	0x12431,
	0x12432,
	0x12439,
	0x1243A,
	0x1244D,
	0x1244E,
	0x12454,
	0x12456,
	0x1246A,
	0x1246B,
	0x16A65,
	0x16A66,
	0x16B55,
	0x16B56,
	0x1D364,
	0x1D365,
	0x1D7D3,
	0x1D7D4,
	0x1D7DD,
	0x1D7DE,
	0x1D7E7,
	0x1D7E8,
	0x1D7F1,
	0x1D7F2,
	0x1D7FB,
	0x1D7FC,
	0x1E8CB,
	0x1E8CC,
	0x1E955,
	0x1E956,
	0x1F106,
	0x1F107,
	0x20121,
	0x20122
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__5_invlist[] = { /* for EBCDIC 1047 */
	227,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF5,
	0xF6,
	0x665,
	0x666,
	0x6F5,
	0x6F6,
	0x7C5,
	0x7C6,
	0x96B,
	0x96C,
	0x9EB,
	0x9EC,
	0xA6B,
	0xA6C,
	0xAEB,
	0xAEC,
	0xB6B,
	0xB6C,
	0xBEB,
	0xBEC,
	0xC6B,
	0xC6C,
	0xCEB,
	0xCEC,
	0xD6B,
	0xD6C,
	0xDEB,
	0xDEC,
	0xE55,
	0xE56,
	0xED5,
	0xED6,
	0xF25,
	0xF26,
	0x1045,
	0x1046,
	0x1095,
	0x1096,
	0x136D,
	0x136E,
	0x17E5,
	0x17E6,
	0x17F5,
	0x17F6,
	0x1815,
	0x1816,
	0x194B,
	0x194C,
	0x19D5,
	0x19D6,
	0x1A85,
	0x1A86,
	0x1A95,
	0x1A96,
	0x1B55,
	0x1B56,
	0x1BB5,
	0x1BB6,
	0x1C45,
	0x1C46,
	0x1C55,
	0x1C56,
	0x2075,
	0x2076,
	0x2085,
	0x2086,
	0x2164,
	0x2165,
	0x2174,
	0x2175,
	0x2464,
	0x2465,
	0x2478,
	0x2479,
	0x248C,
	0x248D,
	0x24F9,
	0x24FA,
	0x277A,
	0x277B,
	0x2784,
	0x2785,
	0x278E,
	0x278F,
	0x3025,
	0x3026,
	0x3224,
	0x3225,
	0x3284,
	0x3285,
	0x3405,
	0x3406,
	0x382A,
	0x382B,
	0x4E94,
	0x4E95,
	0x4F0D,
	0x4F0E,
	0xA625,
	0xA626,
	0xA6EA,
	0xA6EB,
	0xA8D5,
	0xA8D6,
	0xA905,
	0xA906,
	0xA9D5,
	0xA9D6,
	0xA9F5,
	0xA9F6,
	0xAA55,
	0xAA56,
	0xABF5,
	0xABF6,
	0xFF15,
	0xFF16,
	0x1010B,
	0x1010C,
	0x10143,
	0x10144,
	0x10148,
	0x10149,
	0x1014F,
	0x10150,
	0x1015F,
	0x10160,
	0x10173,
	0x10174,
	0x102E5,
	0x102E6,
	0x10321,
	0x10322,
	0x104A5,
	0x104A6,
	0x1087D,
	0x1087E,
	0x108AC,
	0x108AD,
	0x108FC,
	0x108FD,
	0x109C4,
	0x109C5,
	0x10AEC,
	0x10AED,
	0x10CFB,
	0x10CFC,
	0x10E64,
	0x10E65,
	0x11056,
	0x11057,
	0x1106B,
	0x1106C,
	0x110F5,
	0x110F6,
	0x1113B,
	0x1113C,
	0x111D5,
	0x111D6,
	0x111E5,
	0x111E6,
	0x112F5,
	0x112F6,
	0x11455,
	0x11456,
	0x114D5,
	0x114D6,
	0x11655,
	0x11656,
	0x116C5,
	0x116C6,
	0x11735,
	0x11736,
	0x118E5,
	0x118E6,
	0x11C55,
	0x11C56,
	0x11C5E,
	0x11C5F,
	0x11D55,
	0x11D56,
	0x12403,
	0x12404,
	0x1240A,
	0x1240B,
	0x12410,
	0x12411,
	0x12419,
	0x1241A,
	0x12422,
	0x12423,
	0x12427,
	0x12428,
	0x12431,
	0x12432,
	0x12439,
	0x1243A,
	0x1244D,
	0x1244E,
	0x12454,
	0x12456,
	0x1246A,
	0x1246B,
	0x16A65,
	0x16A66,
	0x16B55,
	0x16B56,
	0x1D364,
	0x1D365,
	0x1D7D3,
	0x1D7D4,
	0x1D7DD,
	0x1D7DE,
	0x1D7E7,
	0x1D7E8,
	0x1D7F1,
	0x1D7F2,
	0x1D7FB,
	0x1D7FC,
	0x1E8CB,
	0x1E8CC,
	0x1E955,
	0x1E956,
	0x1F106,
	0x1F107,
	0x20121,
	0x20122
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__5_invlist[] = { /* for EBCDIC 037 */
	227,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF5,
	0xF6,
	0x665,
	0x666,
	0x6F5,
	0x6F6,
	0x7C5,
	0x7C6,
	0x96B,
	0x96C,
	0x9EB,
	0x9EC,
	0xA6B,
	0xA6C,
	0xAEB,
	0xAEC,
	0xB6B,
	0xB6C,
	0xBEB,
	0xBEC,
	0xC6B,
	0xC6C,
	0xCEB,
	0xCEC,
	0xD6B,
	0xD6C,
	0xDEB,
	0xDEC,
	0xE55,
	0xE56,
	0xED5,
	0xED6,
	0xF25,
	0xF26,
	0x1045,
	0x1046,
	0x1095,
	0x1096,
	0x136D,
	0x136E,
	0x17E5,
	0x17E6,
	0x17F5,
	0x17F6,
	0x1815,
	0x1816,
	0x194B,
	0x194C,
	0x19D5,
	0x19D6,
	0x1A85,
	0x1A86,
	0x1A95,
	0x1A96,
	0x1B55,
	0x1B56,
	0x1BB5,
	0x1BB6,
	0x1C45,
	0x1C46,
	0x1C55,
	0x1C56,
	0x2075,
	0x2076,
	0x2085,
	0x2086,
	0x2164,
	0x2165,
	0x2174,
	0x2175,
	0x2464,
	0x2465,
	0x2478,
	0x2479,
	0x248C,
	0x248D,
	0x24F9,
	0x24FA,
	0x277A,
	0x277B,
	0x2784,
	0x2785,
	0x278E,
	0x278F,
	0x3025,
	0x3026,
	0x3224,
	0x3225,
	0x3284,
	0x3285,
	0x3405,
	0x3406,
	0x382A,
	0x382B,
	0x4E94,
	0x4E95,
	0x4F0D,
	0x4F0E,
	0xA625,
	0xA626,
	0xA6EA,
	0xA6EB,
	0xA8D5,
	0xA8D6,
	0xA905,
	0xA906,
	0xA9D5,
	0xA9D6,
	0xA9F5,
	0xA9F6,
	0xAA55,
	0xAA56,
	0xABF5,
	0xABF6,
	0xFF15,
	0xFF16,
	0x1010B,
	0x1010C,
	0x10143,
	0x10144,
	0x10148,
	0x10149,
	0x1014F,
	0x10150,
	0x1015F,
	0x10160,
	0x10173,
	0x10174,
	0x102E5,
	0x102E6,
	0x10321,
	0x10322,
	0x104A5,
	0x104A6,
	0x1087D,
	0x1087E,
	0x108AC,
	0x108AD,
	0x108FC,
	0x108FD,
	0x109C4,
	0x109C5,
	0x10AEC,
	0x10AED,
	0x10CFB,
	0x10CFC,
	0x10E64,
	0x10E65,
	0x11056,
	0x11057,
	0x1106B,
	0x1106C,
	0x110F5,
	0x110F6,
	0x1113B,
	0x1113C,
	0x111D5,
	0x111D6,
	0x111E5,
	0x111E6,
	0x112F5,
	0x112F6,
	0x11455,
	0x11456,
	0x114D5,
	0x114D6,
	0x11655,
	0x11656,
	0x116C5,
	0x116C6,
	0x11735,
	0x11736,
	0x118E5,
	0x118E6,
	0x11C55,
	0x11C56,
	0x11C5E,
	0x11C5F,
	0x11D55,
	0x11D56,
	0x12403,
	0x12404,
	0x1240A,
	0x1240B,
	0x12410,
	0x12411,
	0x12419,
	0x1241A,
	0x12422,
	0x12423,
	0x12427,
	0x12428,
	0x12431,
	0x12432,
	0x12439,
	0x1243A,
	0x1244D,
	0x1244E,
	0x12454,
	0x12456,
	0x1246A,
	0x1246B,
	0x16A65,
	0x16A66,
	0x16B55,
	0x16B56,
	0x1D364,
	0x1D365,
	0x1D7D3,
	0x1D7D4,
	0x1D7DD,
	0x1D7DE,
	0x1D7E7,
	0x1D7E8,
	0x1D7F1,
	0x1D7F2,
	0x1D7FB,
	0x1D7FC,
	0x1E8CB,
	0x1E8CC,
	0x1E955,
	0x1E956,
	0x1F106,
	0x1F107,
	0x20121,
	0x20122
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__5_SLASH_12_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109FA,
	0x109FB
};

static const UV PL_NV__5_SLASH_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF2C,
	0xF2D
};

static const UV PL_NV__5_SLASH_6_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x215A,
	0x215B,
	0x109FF,
	0x10A00,
	0x1245C,
	0x1245D
};

static const UV PL_NV__5_SLASH_8_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x215D,
	0x215E
};

static const UV PL_NV__50_invlist[] = { /* for all charsets */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1376,
	0x1377,
	0x216C,
	0x216D,
	0x217C,
	0x217D,
	0x2186,
	0x2187,
	0x324C,
	0x324D,
	0x32BF,
	0x32C0,
	0x10114,
	0x10115,
	0x10144,
	0x10145,
	0x1014A,
	0x1014B,
	0x10151,
	0x10152,
	0x10166,
	0x1016A,
	0x10174,
	0x10175,
	0x102EE,
	0x102EF,
	0x10323,
	0x10324,
	0x109CD,
	0x109CE,
	0x10A7E,
	0x10A7F,
	0x10CFD,
	0x10CFE,
	0x10E6D,
	0x10E6E,
	0x1105F,
	0x11060,
	0x111EE,
	0x111EF,
	0x118EE,
	0x118EF,
	0x11C67,
	0x11C68,
	0x12468,
	0x12469,
	0x1D36D,
	0x1D36E
};

static const UV PL_NV__500_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x216E,
	0x216F,
	0x217E,
	0x217F,
	0x1011D,
	0x1011E,
	0x10145,
	0x10146,
	0x1014C,
	0x1014D,
	0x10153,
	0x10154,
	0x1016C,
	0x10171,
	0x102F7,
	0x102F8,
	0x109D6,
	0x109D7,
	0x10E76,
	0x10E77
};

static const UV PL_NV__5000_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2181,
	0x2182,
	0x10126,
	0x10127,
	0x10146,
	0x10147,
	0x1014E,
	0x1014F,
	0x10172,
	0x10173,
	0x109DF,
	0x109E0
};

static const UV PL_NV__50000_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2187,
	0x2188,
	0x1012F,
	0x10130,
	0x10147,
	0x10148,
	0x10156,
	0x10157,
	0x109E8,
	0x109E9
};

static const UV PL_NV__500000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109F1,
	0x109F2
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__6_invlist[] = { /* for ASCII/Latin1 */
	203,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x36,
	0x37,
	0x666,
	0x667,
	0x6F6,
	0x6F7,
	0x7C6,
	0x7C7,
	0x96C,
	0x96D,
	0x9EC,
	0x9ED,
	0xA6C,
	0xA6D,
	0xAEC,
	0xAED,
	0xB6C,
	0xB6D,
	0xBEC,
	0xBED,
	0xC6C,
	0xC6D,
	0xCEC,
	0xCED,
	0xD6C,
	0xD6D,
	0xDEC,
	0xDED,
	0xE56,
	0xE57,
	0xED6,
	0xED7,
	0xF26,
	0xF27,
	0x1046,
	0x1047,
	0x1096,
	0x1097,
	0x136E,
	0x136F,
	0x17E6,
	0x17E7,
	0x17F6,
	0x17F7,
	0x1816,
	0x1817,
	0x194C,
	0x194D,
	0x19D6,
	0x19D7,
	0x1A86,
	0x1A87,
	0x1A96,
	0x1A97,
	0x1B56,
	0x1B57,
	0x1BB6,
	0x1BB7,
	0x1C46,
	0x1C47,
	0x1C56,
	0x1C57,
	0x2076,
	0x2077,
	0x2086,
	0x2087,
	0x2165,
	0x2166,
	0x2175,
	0x2176,
	0x2185,
	0x2186,
	0x2465,
	0x2466,
	0x2479,
	0x247A,
	0x248D,
	0x248E,
	0x24FA,
	0x24FB,
	0x277B,
	0x277C,
	0x2785,
	0x2786,
	0x278F,
	0x2790,
	0x3026,
	0x3027,
	0x3225,
	0x3226,
	0x3285,
	0x3286,
	0x516D,
	0x516E,
	0x9646,
	0x9647,
	0x9678,
	0x9679,
	0xA626,
	0xA627,
	0xA6EB,
	0xA6EC,
	0xA8D6,
	0xA8D7,
	0xA906,
	0xA907,
	0xA9D6,
	0xA9D7,
	0xA9F6,
	0xA9F7,
	0xAA56,
	0xAA57,
	0xABF6,
	0xABF7,
	0xF9D1,
	0xF9D2,
	0xF9D3,
	0xF9D4,
	0xFF16,
	0xFF17,
	0x1010C,
	0x1010D,
	0x102E6,
	0x102E7,
	0x104A6,
	0x104A7,
	0x109C5,
	0x109C6,
	0x10E65,
	0x10E66,
	0x11057,
	0x11058,
	0x1106C,
	0x1106D,
	0x110F6,
	0x110F7,
	0x1113C,
	0x1113D,
	0x111D6,
	0x111D7,
	0x111E6,
	0x111E7,
	0x112F6,
	0x112F7,
	0x11456,
	0x11457,
	0x114D6,
	0x114D7,
	0x11656,
	0x11657,
	0x116C6,
	0x116C7,
	0x11736,
	0x11737,
	0x118E6,
	0x118E7,
	0x11C56,
	0x11C57,
	0x11C5F,
	0x11C60,
	0x11D56,
	0x11D57,
	0x12404,
	0x12405,
	0x1240B,
	0x1240C,
	0x12411,
	0x12412,
	0x1241A,
	0x1241B,
	0x12428,
	0x12429,
	0x12440,
	0x12441,
	0x1244E,
	0x1244F,
	0x1246B,
	0x1246C,
	0x16A66,
	0x16A67,
	0x16B56,
	0x16B57,
	0x1D365,
	0x1D366,
	0x1D7D4,
	0x1D7D5,
	0x1D7DE,
	0x1D7DF,
	0x1D7E8,
	0x1D7E9,
	0x1D7F2,
	0x1D7F3,
	0x1D7FC,
	0x1D7FD,
	0x1E8CC,
	0x1E8CD,
	0x1E956,
	0x1E957,
	0x1F107,
	0x1F108,
	0x20AEA,
	0x20AEB
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__6_invlist[] = { /* for EBCDIC 1047 */
	203,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF6,
	0xF7,
	0x666,
	0x667,
	0x6F6,
	0x6F7,
	0x7C6,
	0x7C7,
	0x96C,
	0x96D,
	0x9EC,
	0x9ED,
	0xA6C,
	0xA6D,
	0xAEC,
	0xAED,
	0xB6C,
	0xB6D,
	0xBEC,
	0xBED,
	0xC6C,
	0xC6D,
	0xCEC,
	0xCED,
	0xD6C,
	0xD6D,
	0xDEC,
	0xDED,
	0xE56,
	0xE57,
	0xED6,
	0xED7,
	0xF26,
	0xF27,
	0x1046,
	0x1047,
	0x1096,
	0x1097,
	0x136E,
	0x136F,
	0x17E6,
	0x17E7,
	0x17F6,
	0x17F7,
	0x1816,
	0x1817,
	0x194C,
	0x194D,
	0x19D6,
	0x19D7,
	0x1A86,
	0x1A87,
	0x1A96,
	0x1A97,
	0x1B56,
	0x1B57,
	0x1BB6,
	0x1BB7,
	0x1C46,
	0x1C47,
	0x1C56,
	0x1C57,
	0x2076,
	0x2077,
	0x2086,
	0x2087,
	0x2165,
	0x2166,
	0x2175,
	0x2176,
	0x2185,
	0x2186,
	0x2465,
	0x2466,
	0x2479,
	0x247A,
	0x248D,
	0x248E,
	0x24FA,
	0x24FB,
	0x277B,
	0x277C,
	0x2785,
	0x2786,
	0x278F,
	0x2790,
	0x3026,
	0x3027,
	0x3225,
	0x3226,
	0x3285,
	0x3286,
	0x516D,
	0x516E,
	0x9646,
	0x9647,
	0x9678,
	0x9679,
	0xA626,
	0xA627,
	0xA6EB,
	0xA6EC,
	0xA8D6,
	0xA8D7,
	0xA906,
	0xA907,
	0xA9D6,
	0xA9D7,
	0xA9F6,
	0xA9F7,
	0xAA56,
	0xAA57,
	0xABF6,
	0xABF7,
	0xF9D1,
	0xF9D2,
	0xF9D3,
	0xF9D4,
	0xFF16,
	0xFF17,
	0x1010C,
	0x1010D,
	0x102E6,
	0x102E7,
	0x104A6,
	0x104A7,
	0x109C5,
	0x109C6,
	0x10E65,
	0x10E66,
	0x11057,
	0x11058,
	0x1106C,
	0x1106D,
	0x110F6,
	0x110F7,
	0x1113C,
	0x1113D,
	0x111D6,
	0x111D7,
	0x111E6,
	0x111E7,
	0x112F6,
	0x112F7,
	0x11456,
	0x11457,
	0x114D6,
	0x114D7,
	0x11656,
	0x11657,
	0x116C6,
	0x116C7,
	0x11736,
	0x11737,
	0x118E6,
	0x118E7,
	0x11C56,
	0x11C57,
	0x11C5F,
	0x11C60,
	0x11D56,
	0x11D57,
	0x12404,
	0x12405,
	0x1240B,
	0x1240C,
	0x12411,
	0x12412,
	0x1241A,
	0x1241B,
	0x12428,
	0x12429,
	0x12440,
	0x12441,
	0x1244E,
	0x1244F,
	0x1246B,
	0x1246C,
	0x16A66,
	0x16A67,
	0x16B56,
	0x16B57,
	0x1D365,
	0x1D366,
	0x1D7D4,
	0x1D7D5,
	0x1D7DE,
	0x1D7DF,
	0x1D7E8,
	0x1D7E9,
	0x1D7F2,
	0x1D7F3,
	0x1D7FC,
	0x1D7FD,
	0x1E8CC,
	0x1E8CD,
	0x1E956,
	0x1E957,
	0x1F107,
	0x1F108,
	0x20AEA,
	0x20AEB
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__6_invlist[] = { /* for EBCDIC 037 */
	203,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF6,
	0xF7,
	0x666,
	0x667,
	0x6F6,
	0x6F7,
	0x7C6,
	0x7C7,
	0x96C,
	0x96D,
	0x9EC,
	0x9ED,
	0xA6C,
	0xA6D,
	0xAEC,
	0xAED,
	0xB6C,
	0xB6D,
	0xBEC,
	0xBED,
	0xC6C,
	0xC6D,
	0xCEC,
	0xCED,
	0xD6C,
	0xD6D,
	0xDEC,
	0xDED,
	0xE56,
	0xE57,
	0xED6,
	0xED7,
	0xF26,
	0xF27,
	0x1046,
	0x1047,
	0x1096,
	0x1097,
	0x136E,
	0x136F,
	0x17E6,
	0x17E7,
	0x17F6,
	0x17F7,
	0x1816,
	0x1817,
	0x194C,
	0x194D,
	0x19D6,
	0x19D7,
	0x1A86,
	0x1A87,
	0x1A96,
	0x1A97,
	0x1B56,
	0x1B57,
	0x1BB6,
	0x1BB7,
	0x1C46,
	0x1C47,
	0x1C56,
	0x1C57,
	0x2076,
	0x2077,
	0x2086,
	0x2087,
	0x2165,
	0x2166,
	0x2175,
	0x2176,
	0x2185,
	0x2186,
	0x2465,
	0x2466,
	0x2479,
	0x247A,
	0x248D,
	0x248E,
	0x24FA,
	0x24FB,
	0x277B,
	0x277C,
	0x2785,
	0x2786,
	0x278F,
	0x2790,
	0x3026,
	0x3027,
	0x3225,
	0x3226,
	0x3285,
	0x3286,
	0x516D,
	0x516E,
	0x9646,
	0x9647,
	0x9678,
	0x9679,
	0xA626,
	0xA627,
	0xA6EB,
	0xA6EC,
	0xA8D6,
	0xA8D7,
	0xA906,
	0xA907,
	0xA9D6,
	0xA9D7,
	0xA9F6,
	0xA9F7,
	0xAA56,
	0xAA57,
	0xABF6,
	0xABF7,
	0xF9D1,
	0xF9D2,
	0xF9D3,
	0xF9D4,
	0xFF16,
	0xFF17,
	0x1010C,
	0x1010D,
	0x102E6,
	0x102E7,
	0x104A6,
	0x104A7,
	0x109C5,
	0x109C6,
	0x10E65,
	0x10E66,
	0x11057,
	0x11058,
	0x1106C,
	0x1106D,
	0x110F6,
	0x110F7,
	0x1113C,
	0x1113D,
	0x111D6,
	0x111D7,
	0x111E6,
	0x111E7,
	0x112F6,
	0x112F7,
	0x11456,
	0x11457,
	0x114D6,
	0x114D7,
	0x11656,
	0x11657,
	0x116C6,
	0x116C7,
	0x11736,
	0x11737,
	0x118E6,
	0x118E7,
	0x11C56,
	0x11C57,
	0x11C5F,
	0x11C60,
	0x11D56,
	0x11D57,
	0x12404,
	0x12405,
	0x1240B,
	0x1240C,
	0x12411,
	0x12412,
	0x1241A,
	0x1241B,
	0x12428,
	0x12429,
	0x12440,
	0x12441,
	0x1244E,
	0x1244F,
	0x1246B,
	0x1246C,
	0x16A66,
	0x16A67,
	0x16B56,
	0x16B57,
	0x1D365,
	0x1D366,
	0x1D7D4,
	0x1D7D5,
	0x1D7DE,
	0x1D7DF,
	0x1D7E8,
	0x1D7E9,
	0x1D7F2,
	0x1D7F3,
	0x1D7FC,
	0x1D7FD,
	0x1E8CC,
	0x1E8CD,
	0x1E956,
	0x1E957,
	0x1F107,
	0x1F108,
	0x20AEA,
	0x20AEB
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__60_invlist[] = { /* for all charsets */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1377,
	0x1378,
	0x324D,
	0x324E,
	0x10115,
	0x10116,
	0x102EF,
	0x102F0,
	0x109CE,
	0x109CF,
	0x10E6E,
	0x10E6F,
	0x11060,
	0x11061,
	0x111EF,
	0x111F0,
	0x118EF,
	0x118F0,
	0x11C68,
	0x11C69,
	0x1D36E,
	0x1D36F
};

static const UV PL_NV__600_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1011E,
	0x1011F,
	0x102F8,
	0x102F9,
	0x109D7,
	0x109D8,
	0x10E77,
	0x10E78
};

static const UV PL_NV__6000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10127,
	0x10128,
	0x109E0,
	0x109E1
};

static const UV PL_NV__60000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10130,
	0x10131,
	0x109E9,
	0x109EA
};

static const UV PL_NV__600000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109F2,
	0x109F3
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__7_invlist[] = { /* for ASCII/Latin1 */
	197,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x37,
	0x38,
	0x667,
	0x668,
	0x6F7,
	0x6F8,
	0x7C7,
	0x7C8,
	0x96D,
	0x96E,
	0x9ED,
	0x9EE,
	0xA6D,
	0xA6E,
	0xAED,
	0xAEE,
	0xB6D,
	0xB6E,
	0xBED,
	0xBEE,
	0xC6D,
	0xC6E,
	0xCED,
	0xCEE,
	0xD6D,
	0xD6E,
	0xDED,
	0xDEE,
	0xE57,
	0xE58,
	0xED7,
	0xED8,
	0xF27,
	0xF28,
	0x1047,
	0x1048,
	0x1097,
	0x1098,
	0x136F,
	0x1370,
	0x17E7,
	0x17E8,
	0x17F7,
	0x17F8,
	0x1817,
	0x1818,
	0x194D,
	0x194E,
	0x19D7,
	0x19D8,
	0x1A87,
	0x1A88,
	0x1A97,
	0x1A98,
	0x1B57,
	0x1B58,
	0x1BB7,
	0x1BB8,
	0x1C47,
	0x1C48,
	0x1C57,
	0x1C58,
	0x2077,
	0x2078,
	0x2087,
	0x2088,
	0x2166,
	0x2167,
	0x2176,
	0x2177,
	0x2466,
	0x2467,
	0x247A,
	0x247B,
	0x248E,
	0x248F,
	0x24FB,
	0x24FC,
	0x277C,
	0x277D,
	0x2786,
	0x2787,
	0x2790,
	0x2791,
	0x3027,
	0x3028,
	0x3226,
	0x3227,
	0x3286,
	0x3287,
	0x3B4D,
	0x3B4E,
	0x4E03,
	0x4E04,
	0x67D2,
	0x67D3,
	0x6F06,
	0x6F07,
	0xA627,
	0xA628,
	0xA6EC,
	0xA6ED,
	0xA8D7,
	0xA8D8,
	0xA907,
	0xA908,
	0xA9D7,
	0xA9D8,
	0xA9F7,
	0xA9F8,
	0xAA57,
	0xAA58,
	0xABF7,
	0xABF8,
	0xFF17,
	0xFF18,
	0x1010D,
	0x1010E,
	0x102E7,
	0x102E8,
	0x104A7,
	0x104A8,
	0x109C6,
	0x109C7,
	0x10E66,
	0x10E67,
	0x11058,
	0x11059,
	0x1106D,
	0x1106E,
	0x110F7,
	0x110F8,
	0x1113D,
	0x1113E,
	0x111D7,
	0x111D8,
	0x111E7,
	0x111E8,
	0x112F7,
	0x112F8,
	0x11457,
	0x11458,
	0x114D7,
	0x114D8,
	0x11657,
	0x11658,
	0x116C7,
	0x116C8,
	0x11737,
	0x11738,
	0x118E7,
	0x118E8,
	0x11C57,
	0x11C58,
	0x11C60,
	0x11C61,
	0x11D57,
	0x11D58,
	0x12405,
	0x12406,
	0x1240C,
	0x1240D,
	0x12412,
	0x12413,
	0x1241B,
	0x1241C,
	0x12429,
	0x1242A,
	0x12441,
	0x12444,
	0x1246C,
	0x1246D,
	0x16A67,
	0x16A68,
	0x16B57,
	0x16B58,
	0x1D366,
	0x1D367,
	0x1D7D5,
	0x1D7D6,
	0x1D7DF,
	0x1D7E0,
	0x1D7E9,
	0x1D7EA,
	0x1D7F3,
	0x1D7F4,
	0x1D7FD,
	0x1D7FE,
	0x1E8CD,
	0x1E8CE,
	0x1E957,
	0x1E958,
	0x1F108,
	0x1F109,
	0x20001,
	0x20002
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__7_invlist[] = { /* for EBCDIC 1047 */
	197,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF7,
	0xF8,
	0x667,
	0x668,
	0x6F7,
	0x6F8,
	0x7C7,
	0x7C8,
	0x96D,
	0x96E,
	0x9ED,
	0x9EE,
	0xA6D,
	0xA6E,
	0xAED,
	0xAEE,
	0xB6D,
	0xB6E,
	0xBED,
	0xBEE,
	0xC6D,
	0xC6E,
	0xCED,
	0xCEE,
	0xD6D,
	0xD6E,
	0xDED,
	0xDEE,
	0xE57,
	0xE58,
	0xED7,
	0xED8,
	0xF27,
	0xF28,
	0x1047,
	0x1048,
	0x1097,
	0x1098,
	0x136F,
	0x1370,
	0x17E7,
	0x17E8,
	0x17F7,
	0x17F8,
	0x1817,
	0x1818,
	0x194D,
	0x194E,
	0x19D7,
	0x19D8,
	0x1A87,
	0x1A88,
	0x1A97,
	0x1A98,
	0x1B57,
	0x1B58,
	0x1BB7,
	0x1BB8,
	0x1C47,
	0x1C48,
	0x1C57,
	0x1C58,
	0x2077,
	0x2078,
	0x2087,
	0x2088,
	0x2166,
	0x2167,
	0x2176,
	0x2177,
	0x2466,
	0x2467,
	0x247A,
	0x247B,
	0x248E,
	0x248F,
	0x24FB,
	0x24FC,
	0x277C,
	0x277D,
	0x2786,
	0x2787,
	0x2790,
	0x2791,
	0x3027,
	0x3028,
	0x3226,
	0x3227,
	0x3286,
	0x3287,
	0x3B4D,
	0x3B4E,
	0x4E03,
	0x4E04,
	0x67D2,
	0x67D3,
	0x6F06,
	0x6F07,
	0xA627,
	0xA628,
	0xA6EC,
	0xA6ED,
	0xA8D7,
	0xA8D8,
	0xA907,
	0xA908,
	0xA9D7,
	0xA9D8,
	0xA9F7,
	0xA9F8,
	0xAA57,
	0xAA58,
	0xABF7,
	0xABF8,
	0xFF17,
	0xFF18,
	0x1010D,
	0x1010E,
	0x102E7,
	0x102E8,
	0x104A7,
	0x104A8,
	0x109C6,
	0x109C7,
	0x10E66,
	0x10E67,
	0x11058,
	0x11059,
	0x1106D,
	0x1106E,
	0x110F7,
	0x110F8,
	0x1113D,
	0x1113E,
	0x111D7,
	0x111D8,
	0x111E7,
	0x111E8,
	0x112F7,
	0x112F8,
	0x11457,
	0x11458,
	0x114D7,
	0x114D8,
	0x11657,
	0x11658,
	0x116C7,
	0x116C8,
	0x11737,
	0x11738,
	0x118E7,
	0x118E8,
	0x11C57,
	0x11C58,
	0x11C60,
	0x11C61,
	0x11D57,
	0x11D58,
	0x12405,
	0x12406,
	0x1240C,
	0x1240D,
	0x12412,
	0x12413,
	0x1241B,
	0x1241C,
	0x12429,
	0x1242A,
	0x12441,
	0x12444,
	0x1246C,
	0x1246D,
	0x16A67,
	0x16A68,
	0x16B57,
	0x16B58,
	0x1D366,
	0x1D367,
	0x1D7D5,
	0x1D7D6,
	0x1D7DF,
	0x1D7E0,
	0x1D7E9,
	0x1D7EA,
	0x1D7F3,
	0x1D7F4,
	0x1D7FD,
	0x1D7FE,
	0x1E8CD,
	0x1E8CE,
	0x1E957,
	0x1E958,
	0x1F108,
	0x1F109,
	0x20001,
	0x20002
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__7_invlist[] = { /* for EBCDIC 037 */
	197,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF7,
	0xF8,
	0x667,
	0x668,
	0x6F7,
	0x6F8,
	0x7C7,
	0x7C8,
	0x96D,
	0x96E,
	0x9ED,
	0x9EE,
	0xA6D,
	0xA6E,
	0xAED,
	0xAEE,
	0xB6D,
	0xB6E,
	0xBED,
	0xBEE,
	0xC6D,
	0xC6E,
	0xCED,
	0xCEE,
	0xD6D,
	0xD6E,
	0xDED,
	0xDEE,
	0xE57,
	0xE58,
	0xED7,
	0xED8,
	0xF27,
	0xF28,
	0x1047,
	0x1048,
	0x1097,
	0x1098,
	0x136F,
	0x1370,
	0x17E7,
	0x17E8,
	0x17F7,
	0x17F8,
	0x1817,
	0x1818,
	0x194D,
	0x194E,
	0x19D7,
	0x19D8,
	0x1A87,
	0x1A88,
	0x1A97,
	0x1A98,
	0x1B57,
	0x1B58,
	0x1BB7,
	0x1BB8,
	0x1C47,
	0x1C48,
	0x1C57,
	0x1C58,
	0x2077,
	0x2078,
	0x2087,
	0x2088,
	0x2166,
	0x2167,
	0x2176,
	0x2177,
	0x2466,
	0x2467,
	0x247A,
	0x247B,
	0x248E,
	0x248F,
	0x24FB,
	0x24FC,
	0x277C,
	0x277D,
	0x2786,
	0x2787,
	0x2790,
	0x2791,
	0x3027,
	0x3028,
	0x3226,
	0x3227,
	0x3286,
	0x3287,
	0x3B4D,
	0x3B4E,
	0x4E03,
	0x4E04,
	0x67D2,
	0x67D3,
	0x6F06,
	0x6F07,
	0xA627,
	0xA628,
	0xA6EC,
	0xA6ED,
	0xA8D7,
	0xA8D8,
	0xA907,
	0xA908,
	0xA9D7,
	0xA9D8,
	0xA9F7,
	0xA9F8,
	0xAA57,
	0xAA58,
	0xABF7,
	0xABF8,
	0xFF17,
	0xFF18,
	0x1010D,
	0x1010E,
	0x102E7,
	0x102E8,
	0x104A7,
	0x104A8,
	0x109C6,
	0x109C7,
	0x10E66,
	0x10E67,
	0x11058,
	0x11059,
	0x1106D,
	0x1106E,
	0x110F7,
	0x110F8,
	0x1113D,
	0x1113E,
	0x111D7,
	0x111D8,
	0x111E7,
	0x111E8,
	0x112F7,
	0x112F8,
	0x11457,
	0x11458,
	0x114D7,
	0x114D8,
	0x11657,
	0x11658,
	0x116C7,
	0x116C8,
	0x11737,
	0x11738,
	0x118E7,
	0x118E8,
	0x11C57,
	0x11C58,
	0x11C60,
	0x11C61,
	0x11D57,
	0x11D58,
	0x12405,
	0x12406,
	0x1240C,
	0x1240D,
	0x12412,
	0x12413,
	0x1241B,
	0x1241C,
	0x12429,
	0x1242A,
	0x12441,
	0x12444,
	0x1246C,
	0x1246D,
	0x16A67,
	0x16A68,
	0x16B57,
	0x16B58,
	0x1D366,
	0x1D367,
	0x1D7D5,
	0x1D7D6,
	0x1D7DF,
	0x1D7E0,
	0x1D7E9,
	0x1D7EA,
	0x1D7F3,
	0x1D7F4,
	0x1D7FD,
	0x1D7FE,
	0x1E8CD,
	0x1E8CE,
	0x1E957,
	0x1E958,
	0x1F108,
	0x1F109,
	0x20001,
	0x20002
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__7_SLASH_12_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109FC,
	0x109FD
};

static const UV PL_NV__7_SLASH_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF2D,
	0xF2E
};

static const UV PL_NV__7_SLASH_8_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x215E,
	0x215F
};

static const UV PL_NV__70_invlist[] = { /* for all charsets */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1378,
	0x1379,
	0x324E,
	0x324F,
	0x10116,
	0x10117,
	0x102F0,
	0x102F1,
	0x109CF,
	0x109D0,
	0x10E6F,
	0x10E70,
	0x11061,
	0x11062,
	0x111F0,
	0x111F1,
	0x118F0,
	0x118F1,
	0x11C69,
	0x11C6A,
	0x1D36F,
	0x1D370
};

static const UV PL_NV__700_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1011F,
	0x10120,
	0x102F9,
	0x102FA,
	0x109D8,
	0x109D9,
	0x10E78,
	0x10E79
};

static const UV PL_NV__7000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10128,
	0x10129,
	0x109E1,
	0x109E2
};

static const UV PL_NV__70000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10131,
	0x10132,
	0x109EA,
	0x109EB
};

static const UV PL_NV__700000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109F3,
	0x109F4
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__8_invlist[] = { /* for ASCII/Latin1 */
	191,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x38,
	0x39,
	0x668,
	0x669,
	0x6F8,
	0x6F9,
	0x7C8,
	0x7C9,
	0x96E,
	0x96F,
	0x9EE,
	0x9EF,
	0xA6E,
	0xA6F,
	0xAEE,
	0xAEF,
	0xB6E,
	0xB6F,
	0xBEE,
	0xBEF,
	0xC6E,
	0xC6F,
	0xCEE,
	0xCEF,
	0xD6E,
	0xD6F,
	0xDEE,
	0xDEF,
	0xE58,
	0xE59,
	0xED8,
	0xED9,
	0xF28,
	0xF29,
	0x1048,
	0x1049,
	0x1098,
	0x1099,
	0x1370,
	0x1371,
	0x17E8,
	0x17E9,
	0x17F8,
	0x17F9,
	0x1818,
	0x1819,
	0x194E,
	0x194F,
	0x19D8,
	0x19D9,
	0x1A88,
	0x1A89,
	0x1A98,
	0x1A99,
	0x1B58,
	0x1B59,
	0x1BB8,
	0x1BB9,
	0x1C48,
	0x1C49,
	0x1C58,
	0x1C59,
	0x2078,
	0x2079,
	0x2088,
	0x2089,
	0x2167,
	0x2168,
	0x2177,
	0x2178,
	0x2467,
	0x2468,
	0x247B,
	0x247C,
	0x248F,
	0x2490,
	0x24FC,
	0x24FD,
	0x277D,
	0x277E,
	0x2787,
	0x2788,
	0x2791,
	0x2792,
	0x3028,
	0x3029,
	0x3227,
	0x3228,
	0x3287,
	0x3288,
	0x516B,
	0x516C,
	0x634C,
	0x634D,
	0xA628,
	0xA629,
	0xA6ED,
	0xA6EE,
	0xA8D8,
	0xA8D9,
	0xA908,
	0xA909,
	0xA9D8,
	0xA9D9,
	0xA9F8,
	0xA9F9,
	0xAA58,
	0xAA59,
	0xABF8,
	0xABF9,
	0xFF18,
	0xFF19,
	0x1010E,
	0x1010F,
	0x102E8,
	0x102E9,
	0x104A8,
	0x104A9,
	0x109C7,
	0x109C8,
	0x10E67,
	0x10E68,
	0x11059,
	0x1105A,
	0x1106E,
	0x1106F,
	0x110F8,
	0x110F9,
	0x1113E,
	0x1113F,
	0x111D8,
	0x111D9,
	0x111E8,
	0x111E9,
	0x112F8,
	0x112F9,
	0x11458,
	0x11459,
	0x114D8,
	0x114D9,
	0x11658,
	0x11659,
	0x116C8,
	0x116C9,
	0x11738,
	0x11739,
	0x118E8,
	0x118E9,
	0x11C58,
	0x11C59,
	0x11C61,
	0x11C62,
	0x11D58,
	0x11D59,
	0x12406,
	0x12407,
	0x1240D,
	0x1240E,
	0x12413,
	0x12414,
	0x1241C,
	0x1241D,
	0x1242A,
	0x1242B,
	0x12444,
	0x12446,
	0x1246D,
	0x1246E,
	0x16A68,
	0x16A69,
	0x16B58,
	0x16B59,
	0x1D367,
	0x1D368,
	0x1D7D6,
	0x1D7D7,
	0x1D7E0,
	0x1D7E1,
	0x1D7EA,
	0x1D7EB,
	0x1D7F4,
	0x1D7F5,
	0x1D7FE,
	0x1D7FF,
	0x1E8CE,
	0x1E8CF,
	0x1E958,
	0x1E959,
	0x1F109,
	0x1F10A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__8_invlist[] = { /* for EBCDIC 1047 */
	191,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF8,
	0xF9,
	0x668,
	0x669,
	0x6F8,
	0x6F9,
	0x7C8,
	0x7C9,
	0x96E,
	0x96F,
	0x9EE,
	0x9EF,
	0xA6E,
	0xA6F,
	0xAEE,
	0xAEF,
	0xB6E,
	0xB6F,
	0xBEE,
	0xBEF,
	0xC6E,
	0xC6F,
	0xCEE,
	0xCEF,
	0xD6E,
	0xD6F,
	0xDEE,
	0xDEF,
	0xE58,
	0xE59,
	0xED8,
	0xED9,
	0xF28,
	0xF29,
	0x1048,
	0x1049,
	0x1098,
	0x1099,
	0x1370,
	0x1371,
	0x17E8,
	0x17E9,
	0x17F8,
	0x17F9,
	0x1818,
	0x1819,
	0x194E,
	0x194F,
	0x19D8,
	0x19D9,
	0x1A88,
	0x1A89,
	0x1A98,
	0x1A99,
	0x1B58,
	0x1B59,
	0x1BB8,
	0x1BB9,
	0x1C48,
	0x1C49,
	0x1C58,
	0x1C59,
	0x2078,
	0x2079,
	0x2088,
	0x2089,
	0x2167,
	0x2168,
	0x2177,
	0x2178,
	0x2467,
	0x2468,
	0x247B,
	0x247C,
	0x248F,
	0x2490,
	0x24FC,
	0x24FD,
	0x277D,
	0x277E,
	0x2787,
	0x2788,
	0x2791,
	0x2792,
	0x3028,
	0x3029,
	0x3227,
	0x3228,
	0x3287,
	0x3288,
	0x516B,
	0x516C,
	0x634C,
	0x634D,
	0xA628,
	0xA629,
	0xA6ED,
	0xA6EE,
	0xA8D8,
	0xA8D9,
	0xA908,
	0xA909,
	0xA9D8,
	0xA9D9,
	0xA9F8,
	0xA9F9,
	0xAA58,
	0xAA59,
	0xABF8,
	0xABF9,
	0xFF18,
	0xFF19,
	0x1010E,
	0x1010F,
	0x102E8,
	0x102E9,
	0x104A8,
	0x104A9,
	0x109C7,
	0x109C8,
	0x10E67,
	0x10E68,
	0x11059,
	0x1105A,
	0x1106E,
	0x1106F,
	0x110F8,
	0x110F9,
	0x1113E,
	0x1113F,
	0x111D8,
	0x111D9,
	0x111E8,
	0x111E9,
	0x112F8,
	0x112F9,
	0x11458,
	0x11459,
	0x114D8,
	0x114D9,
	0x11658,
	0x11659,
	0x116C8,
	0x116C9,
	0x11738,
	0x11739,
	0x118E8,
	0x118E9,
	0x11C58,
	0x11C59,
	0x11C61,
	0x11C62,
	0x11D58,
	0x11D59,
	0x12406,
	0x12407,
	0x1240D,
	0x1240E,
	0x12413,
	0x12414,
	0x1241C,
	0x1241D,
	0x1242A,
	0x1242B,
	0x12444,
	0x12446,
	0x1246D,
	0x1246E,
	0x16A68,
	0x16A69,
	0x16B58,
	0x16B59,
	0x1D367,
	0x1D368,
	0x1D7D6,
	0x1D7D7,
	0x1D7E0,
	0x1D7E1,
	0x1D7EA,
	0x1D7EB,
	0x1D7F4,
	0x1D7F5,
	0x1D7FE,
	0x1D7FF,
	0x1E8CE,
	0x1E8CF,
	0x1E958,
	0x1E959,
	0x1F109,
	0x1F10A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__8_invlist[] = { /* for EBCDIC 037 */
	191,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF8,
	0xF9,
	0x668,
	0x669,
	0x6F8,
	0x6F9,
	0x7C8,
	0x7C9,
	0x96E,
	0x96F,
	0x9EE,
	0x9EF,
	0xA6E,
	0xA6F,
	0xAEE,
	0xAEF,
	0xB6E,
	0xB6F,
	0xBEE,
	0xBEF,
	0xC6E,
	0xC6F,
	0xCEE,
	0xCEF,
	0xD6E,
	0xD6F,
	0xDEE,
	0xDEF,
	0xE58,
	0xE59,
	0xED8,
	0xED9,
	0xF28,
	0xF29,
	0x1048,
	0x1049,
	0x1098,
	0x1099,
	0x1370,
	0x1371,
	0x17E8,
	0x17E9,
	0x17F8,
	0x17F9,
	0x1818,
	0x1819,
	0x194E,
	0x194F,
	0x19D8,
	0x19D9,
	0x1A88,
	0x1A89,
	0x1A98,
	0x1A99,
	0x1B58,
	0x1B59,
	0x1BB8,
	0x1BB9,
	0x1C48,
	0x1C49,
	0x1C58,
	0x1C59,
	0x2078,
	0x2079,
	0x2088,
	0x2089,
	0x2167,
	0x2168,
	0x2177,
	0x2178,
	0x2467,
	0x2468,
	0x247B,
	0x247C,
	0x248F,
	0x2490,
	0x24FC,
	0x24FD,
	0x277D,
	0x277E,
	0x2787,
	0x2788,
	0x2791,
	0x2792,
	0x3028,
	0x3029,
	0x3227,
	0x3228,
	0x3287,
	0x3288,
	0x516B,
	0x516C,
	0x634C,
	0x634D,
	0xA628,
	0xA629,
	0xA6ED,
	0xA6EE,
	0xA8D8,
	0xA8D9,
	0xA908,
	0xA909,
	0xA9D8,
	0xA9D9,
	0xA9F8,
	0xA9F9,
	0xAA58,
	0xAA59,
	0xABF8,
	0xABF9,
	0xFF18,
	0xFF19,
	0x1010E,
	0x1010F,
	0x102E8,
	0x102E9,
	0x104A8,
	0x104A9,
	0x109C7,
	0x109C8,
	0x10E67,
	0x10E68,
	0x11059,
	0x1105A,
	0x1106E,
	0x1106F,
	0x110F8,
	0x110F9,
	0x1113E,
	0x1113F,
	0x111D8,
	0x111D9,
	0x111E8,
	0x111E9,
	0x112F8,
	0x112F9,
	0x11458,
	0x11459,
	0x114D8,
	0x114D9,
	0x11658,
	0x11659,
	0x116C8,
	0x116C9,
	0x11738,
	0x11739,
	0x118E8,
	0x118E9,
	0x11C58,
	0x11C59,
	0x11C61,
	0x11C62,
	0x11D58,
	0x11D59,
	0x12406,
	0x12407,
	0x1240D,
	0x1240E,
	0x12413,
	0x12414,
	0x1241C,
	0x1241D,
	0x1242A,
	0x1242B,
	0x12444,
	0x12446,
	0x1246D,
	0x1246E,
	0x16A68,
	0x16A69,
	0x16B58,
	0x16B59,
	0x1D367,
	0x1D368,
	0x1D7D6,
	0x1D7D7,
	0x1D7E0,
	0x1D7E1,
	0x1D7EA,
	0x1D7EB,
	0x1D7F4,
	0x1D7F5,
	0x1D7FE,
	0x1D7FF,
	0x1E8CE,
	0x1E8CF,
	0x1E958,
	0x1E959,
	0x1F109,
	0x1F10A
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__80_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1379,
	0x137A,
	0x324F,
	0x3250,
	0x10117,
	0x10118,
	0x102F1,
	0x102F2,
	0x10E70,
	0x10E71,
	0x11062,
	0x11063,
	0x111F1,
	0x111F2,
	0x118F1,
	0x118F2,
	0x11C6A,
	0x11C6B,
	0x1D370,
	0x1D371
};

static const UV PL_NV__800_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10120,
	0x10121,
	0x102FA,
	0x102FB,
	0x109D9,
	0x109DA,
	0x10E79,
	0x10E7A
};

static const UV PL_NV__8000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10129,
	0x1012A,
	0x109E2,
	0x109E3
};

static const UV PL_NV__80000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10132,
	0x10133,
	0x109EB,
	0x109EC
};

static const UV PL_NV__800000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109F4,
	0x109F5
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__9_invlist[] = { /* for ASCII/Latin1 */
	195,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x39,
	0x3A,
	0x669,
	0x66A,
	0x6F9,
	0x6FA,
	0x7C9,
	0x7CA,
	0x96F,
	0x970,
	0x9EF,
	0x9F0,
	0xA6F,
	0xA70,
	0xAEF,
	0xAF0,
	0xB6F,
	0xB70,
	0xBEF,
	0xBF0,
	0xC6F,
	0xC70,
	0xCEF,
	0xCF0,
	0xD6F,
	0xD70,
	0xDEF,
	0xDF0,
	0xE59,
	0xE5A,
	0xED9,
	0xEDA,
	0xF29,
	0xF2A,
	0x1049,
	0x104A,
	0x1099,
	0x109A,
	0x1371,
	0x1372,
	0x17E9,
	0x17EA,
	0x17F9,
	0x17FA,
	0x1819,
	0x181A,
	0x194F,
	0x1950,
	0x19D9,
	0x19DA,
	0x1A89,
	0x1A8A,
	0x1A99,
	0x1A9A,
	0x1B59,
	0x1B5A,
	0x1BB9,
	0x1BBA,
	0x1C49,
	0x1C4A,
	0x1C59,
	0x1C5A,
	0x2079,
	0x207A,
	0x2089,
	0x208A,
	0x2168,
	0x2169,
	0x2178,
	0x2179,
	0x2468,
	0x2469,
	0x247C,
	0x247D,
	0x2490,
	0x2491,
	0x24FD,
	0x24FE,
	0x277E,
	0x277F,
	0x2788,
	0x2789,
	0x2792,
	0x2793,
	0x3029,
	0x302A,
	0x3228,
	0x3229,
	0x3288,
	0x3289,
	0x4E5D,
	0x4E5E,
	0x5EFE,
	0x5EFF,
	0x7396,
	0x7397,
	0xA629,
	0xA62A,
	0xA6EE,
	0xA6EF,
	0xA8D9,
	0xA8DA,
	0xA909,
	0xA90A,
	0xA9D9,
	0xA9DA,
	0xA9F9,
	0xA9FA,
	0xAA59,
	0xAA5A,
	0xABF9,
	0xABFA,
	0xFF19,
	0xFF1A,
	0x1010F,
	0x10110,
	0x102E9,
	0x102EA,
	0x104A9,
	0x104AA,
	0x109C8,
	0x109C9,
	0x10E68,
	0x10E69,
	0x1105A,
	0x1105B,
	0x1106F,
	0x11070,
	0x110F9,
	0x110FA,
	0x1113F,
	0x11140,
	0x111D9,
	0x111DA,
	0x111E9,
	0x111EA,
	0x112F9,
	0x112FA,
	0x11459,
	0x1145A,
	0x114D9,
	0x114DA,
	0x11659,
	0x1165A,
	0x116C9,
	0x116CA,
	0x11739,
	0x1173A,
	0x118E9,
	0x118EA,
	0x11C59,
	0x11C5A,
	0x11C62,
	0x11C63,
	0x11D59,
	0x11D5A,
	0x12407,
	0x12408,
	0x1240E,
	0x1240F,
	0x12414,
	0x12415,
	0x1241D,
	0x1241E,
	0x1242B,
	0x1242C,
	0x12446,
	0x1244A,
	0x1246E,
	0x1246F,
	0x16A69,
	0x16A6A,
	0x16B59,
	0x16B5A,
	0x1D368,
	0x1D369,
	0x1D7D7,
	0x1D7D8,
	0x1D7E1,
	0x1D7E2,
	0x1D7EB,
	0x1D7EC,
	0x1D7F5,
	0x1D7F6,
	0x1D7FF,
	0x1D800,
	0x1E8CF,
	0x1E8D0,
	0x1E959,
	0x1E95A,
	0x1F10A,
	0x1F10B,
	0x2F890,
	0x2F891
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__9_invlist[] = { /* for EBCDIC 1047 */
	195,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF9,
	0xFA,
	0x669,
	0x66A,
	0x6F9,
	0x6FA,
	0x7C9,
	0x7CA,
	0x96F,
	0x970,
	0x9EF,
	0x9F0,
	0xA6F,
	0xA70,
	0xAEF,
	0xAF0,
	0xB6F,
	0xB70,
	0xBEF,
	0xBF0,
	0xC6F,
	0xC70,
	0xCEF,
	0xCF0,
	0xD6F,
	0xD70,
	0xDEF,
	0xDF0,
	0xE59,
	0xE5A,
	0xED9,
	0xEDA,
	0xF29,
	0xF2A,
	0x1049,
	0x104A,
	0x1099,
	0x109A,
	0x1371,
	0x1372,
	0x17E9,
	0x17EA,
	0x17F9,
	0x17FA,
	0x1819,
	0x181A,
	0x194F,
	0x1950,
	0x19D9,
	0x19DA,
	0x1A89,
	0x1A8A,
	0x1A99,
	0x1A9A,
	0x1B59,
	0x1B5A,
	0x1BB9,
	0x1BBA,
	0x1C49,
	0x1C4A,
	0x1C59,
	0x1C5A,
	0x2079,
	0x207A,
	0x2089,
	0x208A,
	0x2168,
	0x2169,
	0x2178,
	0x2179,
	0x2468,
	0x2469,
	0x247C,
	0x247D,
	0x2490,
	0x2491,
	0x24FD,
	0x24FE,
	0x277E,
	0x277F,
	0x2788,
	0x2789,
	0x2792,
	0x2793,
	0x3029,
	0x302A,
	0x3228,
	0x3229,
	0x3288,
	0x3289,
	0x4E5D,
	0x4E5E,
	0x5EFE,
	0x5EFF,
	0x7396,
	0x7397,
	0xA629,
	0xA62A,
	0xA6EE,
	0xA6EF,
	0xA8D9,
	0xA8DA,
	0xA909,
	0xA90A,
	0xA9D9,
	0xA9DA,
	0xA9F9,
	0xA9FA,
	0xAA59,
	0xAA5A,
	0xABF9,
	0xABFA,
	0xFF19,
	0xFF1A,
	0x1010F,
	0x10110,
	0x102E9,
	0x102EA,
	0x104A9,
	0x104AA,
	0x109C8,
	0x109C9,
	0x10E68,
	0x10E69,
	0x1105A,
	0x1105B,
	0x1106F,
	0x11070,
	0x110F9,
	0x110FA,
	0x1113F,
	0x11140,
	0x111D9,
	0x111DA,
	0x111E9,
	0x111EA,
	0x112F9,
	0x112FA,
	0x11459,
	0x1145A,
	0x114D9,
	0x114DA,
	0x11659,
	0x1165A,
	0x116C9,
	0x116CA,
	0x11739,
	0x1173A,
	0x118E9,
	0x118EA,
	0x11C59,
	0x11C5A,
	0x11C62,
	0x11C63,
	0x11D59,
	0x11D5A,
	0x12407,
	0x12408,
	0x1240E,
	0x1240F,
	0x12414,
	0x12415,
	0x1241D,
	0x1241E,
	0x1242B,
	0x1242C,
	0x12446,
	0x1244A,
	0x1246E,
	0x1246F,
	0x16A69,
	0x16A6A,
	0x16B59,
	0x16B5A,
	0x1D368,
	0x1D369,
	0x1D7D7,
	0x1D7D8,
	0x1D7E1,
	0x1D7E2,
	0x1D7EB,
	0x1D7EC,
	0x1D7F5,
	0x1D7F6,
	0x1D7FF,
	0x1D800,
	0x1E8CF,
	0x1E8D0,
	0x1E959,
	0x1E95A,
	0x1F10A,
	0x1F10B,
	0x2F890,
	0x2F891
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__9_invlist[] = { /* for EBCDIC 037 */
	195,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF9,
	0xFA,
	0x669,
	0x66A,
	0x6F9,
	0x6FA,
	0x7C9,
	0x7CA,
	0x96F,
	0x970,
	0x9EF,
	0x9F0,
	0xA6F,
	0xA70,
	0xAEF,
	0xAF0,
	0xB6F,
	0xB70,
	0xBEF,
	0xBF0,
	0xC6F,
	0xC70,
	0xCEF,
	0xCF0,
	0xD6F,
	0xD70,
	0xDEF,
	0xDF0,
	0xE59,
	0xE5A,
	0xED9,
	0xEDA,
	0xF29,
	0xF2A,
	0x1049,
	0x104A,
	0x1099,
	0x109A,
	0x1371,
	0x1372,
	0x17E9,
	0x17EA,
	0x17F9,
	0x17FA,
	0x1819,
	0x181A,
	0x194F,
	0x1950,
	0x19D9,
	0x19DA,
	0x1A89,
	0x1A8A,
	0x1A99,
	0x1A9A,
	0x1B59,
	0x1B5A,
	0x1BB9,
	0x1BBA,
	0x1C49,
	0x1C4A,
	0x1C59,
	0x1C5A,
	0x2079,
	0x207A,
	0x2089,
	0x208A,
	0x2168,
	0x2169,
	0x2178,
	0x2179,
	0x2468,
	0x2469,
	0x247C,
	0x247D,
	0x2490,
	0x2491,
	0x24FD,
	0x24FE,
	0x277E,
	0x277F,
	0x2788,
	0x2789,
	0x2792,
	0x2793,
	0x3029,
	0x302A,
	0x3228,
	0x3229,
	0x3288,
	0x3289,
	0x4E5D,
	0x4E5E,
	0x5EFE,
	0x5EFF,
	0x7396,
	0x7397,
	0xA629,
	0xA62A,
	0xA6EE,
	0xA6EF,
	0xA8D9,
	0xA8DA,
	0xA909,
	0xA90A,
	0xA9D9,
	0xA9DA,
	0xA9F9,
	0xA9FA,
	0xAA59,
	0xAA5A,
	0xABF9,
	0xABFA,
	0xFF19,
	0xFF1A,
	0x1010F,
	0x10110,
	0x102E9,
	0x102EA,
	0x104A9,
	0x104AA,
	0x109C8,
	0x109C9,
	0x10E68,
	0x10E69,
	0x1105A,
	0x1105B,
	0x1106F,
	0x11070,
	0x110F9,
	0x110FA,
	0x1113F,
	0x11140,
	0x111D9,
	0x111DA,
	0x111E9,
	0x111EA,
	0x112F9,
	0x112FA,
	0x11459,
	0x1145A,
	0x114D9,
	0x114DA,
	0x11659,
	0x1165A,
	0x116C9,
	0x116CA,
	0x11739,
	0x1173A,
	0x118E9,
	0x118EA,
	0x11C59,
	0x11C5A,
	0x11C62,
	0x11C63,
	0x11D59,
	0x11D5A,
	0x12407,
	0x12408,
	0x1240E,
	0x1240F,
	0x12414,
	0x12415,
	0x1241D,
	0x1241E,
	0x1242B,
	0x1242C,
	0x12446,
	0x1244A,
	0x1246E,
	0x1246F,
	0x16A69,
	0x16A6A,
	0x16B59,
	0x16B5A,
	0x1D368,
	0x1D369,
	0x1D7D7,
	0x1D7D8,
	0x1D7E1,
	0x1D7E2,
	0x1D7EB,
	0x1D7EC,
	0x1D7F5,
	0x1D7F6,
	0x1D7FF,
	0x1D800,
	0x1E8CF,
	0x1E8D0,
	0x1E959,
	0x1E95A,
	0x1F10A,
	0x1F10B,
	0x2F890,
	0x2F891
};

#   endif	/* EBCDIC 037 */

static const UV PL_NV__9_SLASH_2_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF2E,
	0xF2F
};

static const UV PL_NV__90_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x137A,
	0x137B,
	0x10118,
	0x10119,
	0x102F2,
	0x102F3,
	0x10341,
	0x10342,
	0x10E71,
	0x10E72,
	0x11063,
	0x11064,
	0x111F2,
	0x111F3,
	0x118F2,
	0x118F3,
	0x11C6B,
	0x11C6C,
	0x1D371,
	0x1D372
};

static const UV PL_NV__900_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10121,
	0x10122,
	0x102FB,
	0x102FC,
	0x1034A,
	0x1034B,
	0x109DA,
	0x109DB,
	0x10E7A,
	0x10E7B
};

static const UV PL_NV__9000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1012A,
	0x1012B,
	0x109E3,
	0x109E4
};

static const UV PL_NV__90000_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10133,
	0x10134,
	0x109EC,
	0x109ED
};

static const UV PL_NV__900000_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109F5,
	0x109F6
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_NV__NAN_invlist[] = { /* for ASCII/Latin1 */
	377,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0xB2,
	0xB4,
	0xB9,
	0xBA,
	0xBC,
	0xBF,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0x9F4,
	0x9FA,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xB72,
	0xB78,
	0xBE6,
	0xBF3,
	0xC66,
	0xC70,
	0xC78,
	0xC7F,
	0xCE6,
	0xCF0,
	0xD58,
	0xD5F,
	0xD66,
	0xD79,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x1369,
	0x137D,
	0x16EE,
	0x16F1,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DB,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2150,
	0x2183,
	0x2185,
	0x218A,
	0x2460,
	0x249C,
	0x24EA,
	0x2500,
	0x2776,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3405,
	0x3406,
	0x3483,
	0x3484,
	0x382A,
	0x382B,
	0x3B4D,
	0x3B4E,
	0x4E00,
	0x4E01,
	0x4E03,
	0x4E04,
	0x4E07,
	0x4E08,
	0x4E09,
	0x4E0A,
	0x4E5D,
	0x4E5E,
	0x4E8C,
	0x4E8D,
	0x4E94,
	0x4E95,
	0x4E96,
	0x4E97,
	0x4EBF,
	0x4EC1,
	0x4EDF,
	0x4EE0,
	0x4EE8,
	0x4EE9,
	0x4F0D,
	0x4F0E,
	0x4F70,
	0x4F71,
	0x5104,
	0x5105,
	0x5146,
	0x5147,
	0x5169,
	0x516A,
	0x516B,
	0x516C,
	0x516D,
	0x516E,
	0x5341,
	0x5342,
	0x5343,
	0x5346,
	0x534C,
	0x534D,
	0x53C1,
	0x53C5,
	0x56DB,
	0x56DC,
	0x58F1,
	0x58F2,
	0x58F9,
	0x58FA,
	0x5E7A,
	0x5E7B,
	0x5EFE,
	0x5F00,
	0x5F0C,
	0x5F0F,
	0x5F10,
	0x5F11,
	0x62FE,
	0x62FF,
	0x634C,
	0x634D,
	0x67D2,
	0x67D3,
	0x6F06,
	0x6F07,
	0x7396,
	0x7397,
	0x767E,
	0x767F,
	0x8086,
	0x8087,
	0x842C,
	0x842D,
	0x8CAE,
	0x8CAF,
	0x8CB3,
	0x8CB4,
	0x8D30,
	0x8D31,
	0x9621,
	0x9622,
	0x9646,
	0x9647,
	0x964C,
	0x964D,
	0x9678,
	0x9679,
	0x96F6,
	0x96F7,
	0xA620,
	0xA62A,
	0xA6E6,
	0xA6F0,
	0xA830,
	0xA836,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xF96B,
	0xF96C,
	0xF973,
	0xF974,
	0xF978,
	0xF979,
	0xF9B2,
	0xF9B3,
	0xF9D1,
	0xF9D2,
	0xF9D3,
	0xF9D4,
	0xF9FD,
	0xF9FE,
	0xFF10,
	0xFF1A,
	0x10107,
	0x10134,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x104A0,
	0x104AA,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A40,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11052,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x118E0,
	0x118F3,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A,
	0x12400,
	0x1246F,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1D7CE,
	0x1D800,
	0x1E8C7,
	0x1E8D0,
	0x1E950,
	0x1E95A,
	0x1F100,
	0x1F10D,
	0x20001,
	0x20002,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x20121,
	0x20122,
	0x2092A,
	0x2092B,
	0x20983,
	0x20984,
	0x2098C,
	0x2098D,
	0x2099C,
	0x2099D,
	0x20AEA,
	0x20AEB,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22390,
	0x22391,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C,
	0x2626D,
	0x2626E,
	0x2F890,
	0x2F891
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__NAN_invlist[] = { /* for EBCDIC 1047 */
	377,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0x9F4,
	0x9FA,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xB72,
	0xB78,
	0xBE6,
	0xBF3,
	0xC66,
	0xC70,
	0xC78,
	0xC7F,
	0xCE6,
	0xCF0,
	0xD58,
	0xD5F,
	0xD66,
	0xD79,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x1369,
	0x137D,
	0x16EE,
	0x16F1,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DB,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2150,
	0x2183,
	0x2185,
	0x218A,
	0x2460,
	0x249C,
	0x24EA,
	0x2500,
	0x2776,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3405,
	0x3406,
	0x3483,
	0x3484,
	0x382A,
	0x382B,
	0x3B4D,
	0x3B4E,
	0x4E00,
	0x4E01,
	0x4E03,
	0x4E04,
	0x4E07,
	0x4E08,
	0x4E09,
	0x4E0A,
	0x4E5D,
	0x4E5E,
	0x4E8C,
	0x4E8D,
	0x4E94,
	0x4E95,
	0x4E96,
	0x4E97,
	0x4EBF,
	0x4EC1,
	0x4EDF,
	0x4EE0,
	0x4EE8,
	0x4EE9,
	0x4F0D,
	0x4F0E,
	0x4F70,
	0x4F71,
	0x5104,
	0x5105,
	0x5146,
	0x5147,
	0x5169,
	0x516A,
	0x516B,
	0x516C,
	0x516D,
	0x516E,
	0x5341,
	0x5342,
	0x5343,
	0x5346,
	0x534C,
	0x534D,
	0x53C1,
	0x53C5,
	0x56DB,
	0x56DC,
	0x58F1,
	0x58F2,
	0x58F9,
	0x58FA,
	0x5E7A,
	0x5E7B,
	0x5EFE,
	0x5F00,
	0x5F0C,
	0x5F0F,
	0x5F10,
	0x5F11,
	0x62FE,
	0x62FF,
	0x634C,
	0x634D,
	0x67D2,
	0x67D3,
	0x6F06,
	0x6F07,
	0x7396,
	0x7397,
	0x767E,
	0x767F,
	0x8086,
	0x8087,
	0x842C,
	0x842D,
	0x8CAE,
	0x8CAF,
	0x8CB3,
	0x8CB4,
	0x8D30,
	0x8D31,
	0x9621,
	0x9622,
	0x9646,
	0x9647,
	0x964C,
	0x964D,
	0x9678,
	0x9679,
	0x96F6,
	0x96F7,
	0xA620,
	0xA62A,
	0xA6E6,
	0xA6F0,
	0xA830,
	0xA836,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xF96B,
	0xF96C,
	0xF973,
	0xF974,
	0xF978,
	0xF979,
	0xF9B2,
	0xF9B3,
	0xF9D1,
	0xF9D2,
	0xF9D3,
	0xF9D4,
	0xF9FD,
	0xF9FE,
	0xFF10,
	0xFF1A,
	0x10107,
	0x10134,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x104A0,
	0x104AA,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A40,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11052,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x118E0,
	0x118F3,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A,
	0x12400,
	0x1246F,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1D7CE,
	0x1D800,
	0x1E8C7,
	0x1E8D0,
	0x1E950,
	0x1E95A,
	0x1F100,
	0x1F10D,
	0x20001,
	0x20002,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x20121,
	0x20122,
	0x2092A,
	0x2092B,
	0x20983,
	0x20984,
	0x2098C,
	0x2098D,
	0x2099C,
	0x2099D,
	0x20AEA,
	0x20AEB,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22390,
	0x22391,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C,
	0x2626D,
	0x2626E,
	0x2F890,
	0x2F891
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_NV__NAN_invlist[] = { /* for EBCDIC 037 */
	377,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB7,
	0xBA,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0x660,
	0x66A,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0x9F4,
	0x9FA,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xB72,
	0xB78,
	0xBE6,
	0xBF3,
	0xC66,
	0xC70,
	0xC78,
	0xC7F,
	0xCE6,
	0xCF0,
	0xD58,
	0xD5F,
	0xD66,
	0xD79,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x1369,
	0x137D,
	0x16EE,
	0x16F1,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DB,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0x2070,
	0x2071,
	0x2074,
	0x207A,
	0x2080,
	0x208A,
	0x2150,
	0x2183,
	0x2185,
	0x218A,
	0x2460,
	0x249C,
	0x24EA,
	0x2500,
	0x2776,
	0x2794,
	0x2CFD,
	0x2CFE,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303B,
	0x3192,
	0x3196,
	0x3220,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3405,
	0x3406,
	0x3483,
	0x3484,
	0x382A,
	0x382B,
	0x3B4D,
	0x3B4E,
	0x4E00,
	0x4E01,
	0x4E03,
	0x4E04,
	0x4E07,
	0x4E08,
	0x4E09,
	0x4E0A,
	0x4E5D,
	0x4E5E,
	0x4E8C,
	0x4E8D,
	0x4E94,
	0x4E95,
	0x4E96,
	0x4E97,
	0x4EBF,
	0x4EC1,
	0x4EDF,
	0x4EE0,
	0x4EE8,
	0x4EE9,
	0x4F0D,
	0x4F0E,
	0x4F70,
	0x4F71,
	0x5104,
	0x5105,
	0x5146,
	0x5147,
	0x5169,
	0x516A,
	0x516B,
	0x516C,
	0x516D,
	0x516E,
	0x5341,
	0x5342,
	0x5343,
	0x5346,
	0x534C,
	0x534D,
	0x53C1,
	0x53C5,
	0x56DB,
	0x56DC,
	0x58F1,
	0x58F2,
	0x58F9,
	0x58FA,
	0x5E7A,
	0x5E7B,
	0x5EFE,
	0x5F00,
	0x5F0C,
	0x5F0F,
	0x5F10,
	0x5F11,
	0x62FE,
	0x62FF,
	0x634C,
	0x634D,
	0x67D2,
	0x67D3,
	0x6F06,
	0x6F07,
	0x7396,
	0x7397,
	0x767E,
	0x767F,
	0x8086,
	0x8087,
	0x842C,
	0x842D,
	0x8CAE,
	0x8CAF,
	0x8CB3,
	0x8CB4,
	0x8D30,
	0x8D31,
	0x9621,
	0x9622,
	0x9646,
	0x9647,
	0x964C,
	0x964D,
	0x9678,
	0x9679,
	0x96F6,
	0x96F7,
	0xA620,
	0xA62A,
	0xA6E6,
	0xA6F0,
	0xA830,
	0xA836,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xF96B,
	0xF96C,
	0xF973,
	0xF974,
	0xF978,
	0xF979,
	0xF9B2,
	0xF9B3,
	0xF9D1,
	0xF9D2,
	0xF9D3,
	0xF9D4,
	0xF9FD,
	0xF9FE,
	0xFF10,
	0xFF1A,
	0x10107,
	0x10134,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x102E1,
	0x102FC,
	0x10320,
	0x10324,
	0x10341,
	0x10342,
	0x1034A,
	0x1034B,
	0x103D1,
	0x103D6,
	0x104A0,
	0x104AA,
	0x10858,
	0x10860,
	0x10879,
	0x10880,
	0x108A7,
	0x108B0,
	0x108FB,
	0x10900,
	0x10916,
	0x1091C,
	0x109BC,
	0x109BE,
	0x109C0,
	0x109D0,
	0x109D2,
	0x10A00,
	0x10A40,
	0x10A48,
	0x10A7D,
	0x10A7F,
	0x10A9D,
	0x10AA0,
	0x10AEB,
	0x10AF0,
	0x10B58,
	0x10B60,
	0x10B78,
	0x10B80,
	0x10BA9,
	0x10BB0,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11052,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x118E0,
	0x118F3,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A,
	0x12400,
	0x1246F,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x1D360,
	0x1D372,
	0x1D7CE,
	0x1D800,
	0x1E8C7,
	0x1E8D0,
	0x1E950,
	0x1E95A,
	0x1F100,
	0x1F10D,
	0x20001,
	0x20002,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x20121,
	0x20122,
	0x2092A,
	0x2092B,
	0x20983,
	0x20984,
	0x2098C,
	0x2098D,
	0x2099C,
	0x2099D,
	0x20AEA,
	0x20AEB,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22390,
	0x22391,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C,
	0x2626D,
	0x2626E,
	0x2F890,
	0x2F891
};

#   endif	/* EBCDIC 037 */

static const UV PL_OCR_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2440,
	0x2460
};

static const UV PL_OGAM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1680,
	0x169D
};

static const UV PL_OLCK_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1C50,
	0x1C80
};

static const UV PL_ORKH_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10C00,
	0x10C49
};

static const UV PL_ORNAMENTALDINGBATS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F650,
	0x1F680
};

static const UV PL_ORYA_invlist[] = { /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78
};

static const UV PL_OSGE_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC
};

static const UV PL_OSMA_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10480,
	0x1049E,
	0x104A0,
	0x104AA
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_P_invlist[] = { /* for ASCII/Latin1 */
	345,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x24,
	0x25,
	0x2B,
	0x2C,
	0x30,
	0x3A,
	0x3C,
	0x3F,
	0x41,
	0x5B,
	0x5E,
	0x5F,
	0x60,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0xA1,
	0xA2,
	0xA7,
	0xA8,
	0xAB,
	0xAC,
	0xB6,
	0xB8,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58B,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166D,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E4A,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x1173C,
	0x1173F,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_P_invlist[] = { /* for EBCDIC 1047 */
	353,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x51,
	0x5A,
	0x5B,
	0x5C,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x6E,
	0x6F,
	0x70,
	0x7A,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB3,
	0xB4,
	0xB5,
	0xB7,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58B,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166D,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E4A,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x1173C,
	0x1173F,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_P_invlist[] = { /* for EBCDIC 037 */
	351,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x51,
	0x5A,
	0x5B,
	0x5C,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x6E,
	0x6F,
	0x70,
	0x7A,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0xAA,
	0xAC,
	0xB3,
	0xB4,
	0xB5,
	0xB7,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE1,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58B,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166D,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E4A,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x1173C,
	0x1173F,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#   endif	/* EBCDIC 037 */

static const UV PL_PALM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10860,
	0x10880
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_PATSYN_invlist[] = { /* for ASCII/Latin1 */
	57,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0x7F,
	0xA1,
	0xA8,
	0xA9,
	0xAA,
	0xAB,
	0xAD,
	0xAE,
	0xAF,
	0xB0,
	0xB2,
	0xB6,
	0xB7,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2010,
	0x2028,
	0x2030,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x205F,
	0x2190,
	0x2460,
	0x2500,
	0x2776,
	0x2794,
	0x2C00,
	0x2E00,
	0x2E80,
	0x3001,
	0x3004,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0xFD3E,
	0xFD40,
	0xFE45,
	0xFE47
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PATSYN_invlist[] = { /* for EBCDIC 1047 */
	61,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB3,
	0xB4,
	0xB7,
	0xBD,
	0xBE,
	0xBF,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE2,
	0x2010,
	0x2028,
	0x2030,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x205F,
	0x2190,
	0x2460,
	0x2500,
	0x2776,
	0x2794,
	0x2C00,
	0x2E00,
	0x2E80,
	0x3001,
	0x3004,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0xFD3E,
	0xFD40,
	0xFE45,
	0xFE47
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PATSYN_invlist[] = { /* for EBCDIC 037 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB3,
	0xB4,
	0xB7,
	0xBA,
	0xBC,
	0xBF,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE2,
	0x2010,
	0x2028,
	0x2030,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x205F,
	0x2190,
	0x2460,
	0x2500,
	0x2776,
	0x2794,
	0x2C00,
	0x2E00,
	0x2E80,
	0x3001,
	0x3004,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0xFD3E,
	0xFD40,
	0xFE45,
	0xFE47
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_PATWS_invlist[] = { /* for ASCII/Latin1 */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xE,
	0x20,
	0x21,
	0x85,
	0x86,
	0x200E,
	0x2010,
	0x2028,
	0x202A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PATWS_invlist[] = { /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x41,
	0x200E,
	0x2010,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PATWS_invlist[] = { /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x41,
	0x200E,
	0x2010,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 037 */

static const UV PL_PAUC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11AC0,
	0x11AF9
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_PC_invlist[] = { /* for ASCII/Latin1 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5F,
	0x60,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFF3F,
	0xFF40
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PC_invlist[] = { /* for EBCDIC 1047 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D,
	0x6E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFF3F,
	0xFF40
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PC_invlist[] = { /* for EBCDIC 037 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D,
	0x6E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFF3F,
	0xFF40
};

#   endif	/* EBCDIC 037 */

static const UV PL_PCM_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x600,
	0x606,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x110BD,
	0x110BE
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_PD_invlist[] = { /* for ASCII/Latin1 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PD_invlist[] = { /* for EBCDIC 1047 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PD_invlist[] = { /* for EBCDIC 037 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_PE_invlist[] = { /* for ASCII/Latin1 */
	145,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x29,
	0x2A,
	0x5D,
	0x5E,
	0x7D,
	0x7E,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF61,
	0xFF63,
	0xFF64
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PE_invlist[] = { /* for EBCDIC 1047 */
	145,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5D,
	0x5E,
	0xBD,
	0xBE,
	0xD0,
	0xD1,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF61,
	0xFF63,
	0xFF64
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PE_invlist[] = { /* for EBCDIC 037 */
	145,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5D,
	0x5E,
	0xBB,
	0xBC,
	0xD0,
	0xD1,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF61,
	0xFF63,
	0xFF64
};

#   endif	/* EBCDIC 037 */

static const UV PL_PERM_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x483,
	0x484,
	0x10350,
	0x1037B
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_PF_invlist[] = { /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBB,
	0xBC,
	0x2019,
	0x201A,
	0x201D,
	0x201E,
	0x203A,
	0x203B,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E06,
	0x2E0A,
	0x2E0B,
	0x2E0D,
	0x2E0E,
	0x2E1D,
	0x2E1E,
	0x2E21,
	0x2E22
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PF_invlist[] = { /* for EBCDIC 1047 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8B,
	0x8C,
	0x2019,
	0x201A,
	0x201D,
	0x201E,
	0x203A,
	0x203B,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E06,
	0x2E0A,
	0x2E0B,
	0x2E0D,
	0x2E0E,
	0x2E1D,
	0x2E1E,
	0x2E21,
	0x2E22
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PF_invlist[] = { /* for EBCDIC 037 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8B,
	0x8C,
	0x2019,
	0x201A,
	0x201D,
	0x201E,
	0x203A,
	0x203B,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E06,
	0x2E0A,
	0x2E0B,
	0x2E0D,
	0x2E0E,
	0x2E1D,
	0x2E1E,
	0x2E21,
	0x2E22
};

#   endif	/* EBCDIC 037 */

static const UV PL_PHAG_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1802,
	0x1804,
	0x1805,
	0x1806,
	0xA840,
	0xA878
};

static const UV PL_PHAISTOS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x101D0,
	0x10200
};

static const UV PL_PHLI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B60,
	0x10B73,
	0x10B78,
	0x10B80
};

static const UV PL_PHLP_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x640,
	0x641,
	0x10B80,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0
};

static const UV PL_PHNX_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10900,
	0x1091C,
	0x1091F,
	0x10920
};

static const UV PL_PHONETICEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D00,
	0x1D80
};

static const UV PL_PHONETICEXTSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D80,
	0x1DC0
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_PI_invlist[] = { /* for ASCII/Latin1 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAB,
	0xAC,
	0x2018,
	0x2019,
	0x201B,
	0x201D,
	0x201F,
	0x2020,
	0x2039,
	0x203A,
	0x2E02,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E09,
	0x2E0A,
	0x2E0C,
	0x2E0D,
	0x2E1C,
	0x2E1D,
	0x2E20,
	0x2E21
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PI_invlist[] = { /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8A,
	0x8B,
	0x2018,
	0x2019,
	0x201B,
	0x201D,
	0x201F,
	0x2020,
	0x2039,
	0x203A,
	0x2E02,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E09,
	0x2E0A,
	0x2E0C,
	0x2E0D,
	0x2E1C,
	0x2E1D,
	0x2E20,
	0x2E21
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PI_invlist[] = { /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8A,
	0x8B,
	0x2018,
	0x2019,
	0x201B,
	0x201D,
	0x201F,
	0x2020,
	0x2039,
	0x203A,
	0x2E02,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E09,
	0x2E0A,
	0x2E0C,
	0x2E0D,
	0x2E1C,
	0x2E1D,
	0x2E20,
	0x2E21
};

#   endif	/* EBCDIC 037 */

static const UV PL_PLAYINGCARDS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F0A0,
	0x1F100
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_PO_invlist[] = { /* for ASCII/Latin1 */
	339,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x24,
	0x25,
	0x28,
	0x2A,
	0x2B,
	0x2C,
	0x2D,
	0x2E,
	0x30,
	0x3A,
	0x3C,
	0x3F,
	0x41,
	0x5C,
	0x5D,
	0xA1,
	0xA2,
	0xA7,
	0xA8,
	0xB6,
	0xB8,
	0xBF,
	0xC0,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58A,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x166D,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x1806,
	0x1807,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2016,
	0x2018,
	0x2020,
	0x2028,
	0x2030,
	0x2039,
	0x203B,
	0x203F,
	0x2041,
	0x2044,
	0x2047,
	0x2052,
	0x2053,
	0x2054,
	0x2055,
	0x205F,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E02,
	0x2E06,
	0x2E09,
	0x2E0B,
	0x2E0C,
	0x2E0E,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2F,
	0x2E30,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E42,
	0x2E43,
	0x2E4A,
	0x3001,
	0x3004,
	0x303D,
	0x303E,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE10,
	0xFE17,
	0xFE19,
	0xFE1A,
	0xFE30,
	0xFE31,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE4D,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFE5F,
	0xFE62,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF08,
	0xFF0A,
	0xFF0B,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3C,
	0xFF3D,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x1173C,
	0x1173F,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PO_invlist[] = { /* for EBCDIC 1047 */
	343,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x50,
	0x51,
	0x5A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x5F,
	0x61,
	0x62,
	0x6B,
	0x6D,
	0x6F,
	0x70,
	0x7A,
	0x7E,
	0x7F,
	0x80,
	0xAA,
	0xAC,
	0xB3,
	0xB4,
	0xB5,
	0xB7,
	0xE0,
	0xE1,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58A,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x166D,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x1806,
	0x1807,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2016,
	0x2018,
	0x2020,
	0x2028,
	0x2030,
	0x2039,
	0x203B,
	0x203F,
	0x2041,
	0x2044,
	0x2047,
	0x2052,
	0x2053,
	0x2054,
	0x2055,
	0x205F,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E02,
	0x2E06,
	0x2E09,
	0x2E0B,
	0x2E0C,
	0x2E0E,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2F,
	0x2E30,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E42,
	0x2E43,
	0x2E4A,
	0x3001,
	0x3004,
	0x303D,
	0x303E,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE10,
	0xFE17,
	0xFE19,
	0xFE1A,
	0xFE30,
	0xFE31,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE4D,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFE5F,
	0xFE62,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF08,
	0xFF0A,
	0xFF0B,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3C,
	0xFF3D,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x1173C,
	0x1173F,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PO_invlist[] = { /* for EBCDIC 037 */
	343,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x50,
	0x51,
	0x5A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x5F,
	0x61,
	0x62,
	0x6B,
	0x6D,
	0x6F,
	0x70,
	0x7A,
	0x7E,
	0x7F,
	0x80,
	0xAA,
	0xAC,
	0xB3,
	0xB4,
	0xB5,
	0xB7,
	0xE0,
	0xE1,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58A,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61E,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xAF0,
	0xAF1,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x166D,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x1806,
	0x1807,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2016,
	0x2018,
	0x2020,
	0x2028,
	0x2030,
	0x2039,
	0x203B,
	0x203F,
	0x2041,
	0x2044,
	0x2047,
	0x2052,
	0x2053,
	0x2054,
	0x2055,
	0x205F,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E02,
	0x2E06,
	0x2E09,
	0x2E0B,
	0x2E0C,
	0x2E0E,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2F,
	0x2E30,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E42,
	0x2E43,
	0x2E4A,
	0x3001,
	0x3004,
	0x303D,
	0x303E,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE10,
	0xFE17,
	0xFE19,
	0xFE1A,
	0xFE30,
	0xFE31,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE4D,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFE5F,
	0xFE62,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF08,
	0xFF0A,
	0xFF0B,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3C,
	0xFF3D,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x1173C,
	0x1173F,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#   endif	/* EBCDIC 037 */

static const UV PL_PRTI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B40,
	0x10B56,
	0x10B58,
	0x10B60
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_PS_invlist[] = { /* for ASCII/Latin1 */
	151,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x28,
	0x29,
	0x5B,
	0x5C,
	0x7B,
	0x7C,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E42,
	0x2E43,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301D,
	0x301E,
	0xFD3F,
	0xFD40,
	0xFE17,
	0xFE18,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE47,
	0xFE48,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PS_invlist[] = { /* for EBCDIC 1047 */
	151,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0xAD,
	0xAE,
	0xC0,
	0xC1,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E42,
	0x2E43,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301D,
	0x301E,
	0xFD3F,
	0xFD40,
	0xFE17,
	0xFE18,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE47,
	0xFE48,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_PS_invlist[] = { /* for EBCDIC 037 */
	151,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0xBA,
	0xBB,
	0xC0,
	0xC1,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E42,
	0x2E43,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301D,
	0x301E,
	0xFD3F,
	0xFD40,
	0xFE17,
	0xFE18,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE47,
	0xFE48,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63
};

#   endif	/* EBCDIC 037 */

static const UV PL_PUA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE000,
	0xF900
};

static const UV PL_QAAI_invlist[] = { /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x342,
	0x343,
	0x345,
	0x346,
	0x363,
	0x1AB0,
	0x1ABF,
	0x1DC2,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200C,
	0x200E,
	0x20D0,
	0x20F0,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE2E,
	0x101FD,
	0x101FE,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0xE0100,
	0xE01F0
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_QMARK_invlist[] = { /* for ASCII/Latin1 */
	27,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x22,
	0x23,
	0x27,
	0x28,
	0xAB,
	0xAC,
	0xBB,
	0xBC,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2E42,
	0x2E43,
	0x300C,
	0x3010,
	0x301D,
	0x3020,
	0xFE41,
	0xFE45,
	0xFF02,
	0xFF03,
	0xFF07,
	0xFF08,
	0xFF62,
	0xFF64
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_QMARK_invlist[] = { /* for EBCDIC 1047 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2E42,
	0x2E43,
	0x300C,
	0x3010,
	0x301D,
	0x3020,
	0xFE41,
	0xFE45,
	0xFF02,
	0xFF03,
	0xFF07,
	0xFF08,
	0xFF62,
	0xFF64
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_QMARK_invlist[] = { /* for EBCDIC 037 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2E42,
	0x2E43,
	0x300C,
	0x3010,
	0x301D,
	0x3020,
	0xFE41,
	0xFE45,
	0xFF02,
	0xFF03,
	0xFF07,
	0xFF08,
	0xFF62,
	0xFF64
};

#   endif	/* EBCDIC 037 */

static const UV PL_RADICAL_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6
};

static const UV PL_RI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F1E6,
	0x1F200
};

static const UV PL_RJNG_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA930,
	0xA954,
	0xA95F,
	0xA960
};

static const UV PL_RUMI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10E60,
	0x10E80
};

static const UV PL_RUNR_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_S_invlist[] = { /* for ASCII/Latin1 */
	435,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x24,
	0x25,
	0x2B,
	0x2C,
	0x3C,
	0x3F,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0x7C,
	0x7D,
	0x7E,
	0x7F,
	0xA2,
	0xA7,
	0xA8,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB2,
	0xB4,
	0xB5,
	0xB8,
	0xB9,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x384,
	0x386,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x58D,
	0x590,
	0x606,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x7F6,
	0x7F7,
	0x9F2,
	0x9F4,
	0x9FA,
	0x9FC,
	0xAF1,
	0xAF2,
	0xB70,
	0xB71,
	0xBF3,
	0xBFB,
	0xC7F,
	0xC80,
	0xD4F,
	0xD50,
	0xD79,
	0xD7A,
	0xE3F,
	0xE40,
	0xF01,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD5,
	0xFD9,
	0x109E,
	0x10A0,
	0x1390,
	0x139A,
	0x17DB,
	0x17DC,
	0x1940,
	0x1941,
	0x19DE,
	0x1A00,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x207A,
	0x207D,
	0x208A,
	0x208D,
	0x20A0,
	0x20C0,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2150,
	0x218A,
	0x218C,
	0x2190,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x2768,
	0x2794,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x309B,
	0x309D,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x32FF,
	0x3300,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA700,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA828,
	0xA82C,
	0xA836,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xAB5B,
	0xAB5C,
	0xFB29,
	0xFB2A,
	0xFBB2,
	0xFBC2,
	0xFDFC,
	0xFDFE,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE67,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_S_invlist[] = { /* for EBCDIC 1047 */
	441,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x5B,
	0x5C,
	0x5F,
	0x60,
	0x6A,
	0x6B,
	0x6E,
	0x6F,
	0x79,
	0x7A,
	0x7E,
	0x7F,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAF,
	0xB3,
	0xB4,
	0xB5,
	0xBB,
	0xBD,
	0xBE,
	0xC0,
	0xE1,
	0xE2,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x384,
	0x386,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x58D,
	0x590,
	0x606,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x7F6,
	0x7F7,
	0x9F2,
	0x9F4,
	0x9FA,
	0x9FC,
	0xAF1,
	0xAF2,
	0xB70,
	0xB71,
	0xBF3,
	0xBFB,
	0xC7F,
	0xC80,
	0xD4F,
	0xD50,
	0xD79,
	0xD7A,
	0xE3F,
	0xE40,
	0xF01,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD5,
	0xFD9,
	0x109E,
	0x10A0,
	0x1390,
	0x139A,
	0x17DB,
	0x17DC,
	0x1940,
	0x1941,
	0x19DE,
	0x1A00,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x207A,
	0x207D,
	0x208A,
	0x208D,
	0x20A0,
	0x20C0,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2150,
	0x218A,
	0x218C,
	0x2190,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x2768,
	0x2794,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x309B,
	0x309D,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x32FF,
	0x3300,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA700,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA828,
	0xA82C,
	0xA836,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xAB5B,
	0xAB5C,
	0xFB29,
	0xFB2A,
	0xFBB2,
	0xFBC2,
	0xFDFC,
	0xFDFE,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE67,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_S_invlist[] = { /* for EBCDIC 037 */
	439,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x5B,
	0x5C,
	0x5F,
	0x60,
	0x6A,
	0x6B,
	0x6E,
	0x6F,
	0x79,
	0x7A,
	0x7E,
	0x7F,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAF,
	0xB3,
	0xB4,
	0xB5,
	0xBC,
	0xC0,
	0xE1,
	0xE2,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x384,
	0x386,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x58D,
	0x590,
	0x606,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x7F6,
	0x7F7,
	0x9F2,
	0x9F4,
	0x9FA,
	0x9FC,
	0xAF1,
	0xAF2,
	0xB70,
	0xB71,
	0xBF3,
	0xBFB,
	0xC7F,
	0xC80,
	0xD4F,
	0xD50,
	0xD79,
	0xD7A,
	0xE3F,
	0xE40,
	0xF01,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD5,
	0xFD9,
	0x109E,
	0x10A0,
	0x1390,
	0x139A,
	0x17DB,
	0x17DC,
	0x1940,
	0x1941,
	0x19DE,
	0x1A00,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x207A,
	0x207D,
	0x208A,
	0x208D,
	0x20A0,
	0x20C0,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2150,
	0x218A,
	0x218C,
	0x2190,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x2768,
	0x2794,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x309B,
	0x309D,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x32FF,
	0x3300,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA700,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA828,
	0xA82C,
	0xA836,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xAB5B,
	0xAB5C,
	0xFB29,
	0xFB2A,
	0xFBB2,
	0xFBC2,
	0xFDFC,
	0xFDFE,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE67,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7
};

#   endif	/* EBCDIC 037 */

static const UV PL_SAMR_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x800,
	0x82E,
	0x830,
	0x83F
};

static const UV PL_SARB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10A60,
	0x10A80
};

static const UV PL_SAUR_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__AT_invlist[] = { /* for ASCII/Latin1 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E,
	0x2F,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF0E,
	0xFF0F
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__AT_invlist[] = { /* for EBCDIC 1047 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF0E,
	0xFF0F
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__AT_invlist[] = { /* for EBCDIC 037 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF0E,
	0xFF0F
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__CL_invlist[] = { /* for ASCII/Latin1 */
	89,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x22,
	0x23,
	0x27,
	0x2A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0xAB,
	0xAC,
	0xBB,
	0xBC,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E42,
	0x2E43,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0xFD3E,
	0xFD40,
	0xFE17,
	0xFE19,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1F676,
	0x1F679
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__CL_invlist[] = { /* for EBCDIC 1047 */
	91,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0x5D,
	0x5E,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E42,
	0x2E43,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0xFD3E,
	0xFD40,
	0xFE17,
	0xFE19,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1F676,
	0x1F679
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__CL_invlist[] = { /* for EBCDIC 037 */
	89,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0x5D,
	0x5E,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E42,
	0x2E43,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0xFD3E,
	0xFD40,
	0xFE17,
	0xFE19,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1F676,
	0x1F679
};

#   endif	/* EBCDIC 037 */

static const UV PL_SB__EX_invlist[] = { /* for all charsets */
	533,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200C,
	0x200E,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFF9E,
	0xFFA0,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111CA,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x1171D,
	0x1172C,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__FO_invlist[] = { /* for ASCII/Latin1 */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__FO_invlist[] = { /* for EBCDIC 1047 */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__FO_invlist[] = { /* for EBCDIC 037 */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#   endif	/* EBCDIC 037 */

static const UV PL_SB__LE_invlist[] = { /* for all charsets */
	965,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C6,
	0x2D2,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x374,
	0x375,
	0x559,
	0x55A,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x2135,
	0x2139,
	0x2180,
	0x2183,
	0x2185,
	0x2189,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA66E,
	0xA66F,
	0xA67F,
	0xA680,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA788,
	0xA789,
	0xA78F,
	0xA790,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xABC0,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10450,
	0x1049E,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1E800,
	0x1E8C5,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__LO_invlist[] = { /* for ASCII/Latin1 */
	1279,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xDF,
	0xF7,
	0xF8,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1DC0,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1E922,
	0x1E944
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__LO_invlist[] = { /* for EBCDIC 1047 */
	1287,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1DC0,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__LO_invlist[] = { /* for EBCDIC 037 */
	1287,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x70,
	0x71,
	0x81,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BB,
	0x1BD,
	0x1C0,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x371,
	0x372,
	0x373,
	0x374,
	0x377,
	0x378,
	0x37A,
	0x37E,
	0x390,
	0x391,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F6,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x482,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x530,
	0x561,
	0x588,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1D00,
	0x1DC0,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2170,
	0x2180,
	0x2184,
	0x2185,
	0x24D0,
	0x24EA,
	0x2C30,
	0x2C5F,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69E,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1E922,
	0x1E944
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__SC_invlist[] = { /* for ASCII/Latin1 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C,
	0x2E,
	0x3A,
	0x3B,
	0x55D,
	0x55E,
	0x60C,
	0x60E,
	0x7F8,
	0x7F9,
	0x1802,
	0x1803,
	0x1808,
	0x1809,
	0x2013,
	0x2015,
	0x3001,
	0x3002,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE31,
	0xFE33,
	0xFE50,
	0xFE52,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0C,
	0xFF0E,
	0xFF1A,
	0xFF1B,
	0xFF64,
	0xFF65
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__SC_invlist[] = { /* for EBCDIC 1047 */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x6B,
	0x6C,
	0x7A,
	0x7B,
	0x55D,
	0x55E,
	0x60C,
	0x60E,
	0x7F8,
	0x7F9,
	0x1802,
	0x1803,
	0x1808,
	0x1809,
	0x2013,
	0x2015,
	0x3001,
	0x3002,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE31,
	0xFE33,
	0xFE50,
	0xFE52,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0C,
	0xFF0E,
	0xFF1A,
	0xFF1B,
	0xFF64,
	0xFF65
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__SC_invlist[] = { /* for EBCDIC 037 */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x6B,
	0x6C,
	0x7A,
	0x7B,
	0x55D,
	0x55E,
	0x60C,
	0x60E,
	0x7F8,
	0x7F9,
	0x1802,
	0x1803,
	0x1808,
	0x1809,
	0x2013,
	0x2015,
	0x3001,
	0x3002,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE31,
	0xFE33,
	0xFE50,
	0xFE52,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0C,
	0xFF0E,
	0xFF1A,
	0xFF1B,
	0xFF64,
	0xFF65
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__SE_invlist[] = { /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x85,
	0x86,
	0x2028,
	0x202A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__SE_invlist[] = { /* for EBCDIC 1047 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x25,
	0x26,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__SE_invlist[] = { /* for EBCDIC 037 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x15,
	0x16,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__SP_invlist[] = { /* for ASCII/Latin1 */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xD,
	0x20,
	0x21,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__SP_invlist[] = { /* for EBCDIC 1047 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__SP_invlist[] = { /* for EBCDIC 037 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__ST_invlist[] = { /* for ASCII/Latin1 */
	131,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x22,
	0x3F,
	0x40,
	0x589,
	0x58A,
	0x61F,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__ST_invlist[] = { /* for EBCDIC 1047 */
	131,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x589,
	0x58A,
	0x61F,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__ST_invlist[] = { /* for EBCDIC 037 */
	131,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x589,
	0x58A,
	0x61F,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__UP_invlist[] = { /* for ASCII/Latin1 */
	1271,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBD,
	0x1FC8,
	0x1FCD,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFD,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1E900,
	0x1E922,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__UP_invlist[] = { /* for EBCDIC 1047 */
	1289,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBD,
	0x1FC8,
	0x1FCD,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFD,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1E900,
	0x1E922,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__UP_invlist[] = { /* for EBCDIC 037 */
	1285,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x80,
	0x81,
	0x9E,
	0x9F,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C6,
	0x1C7,
	0x1C9,
	0x1CA,
	0x1CC,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F3,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
	0x1E1F,
	0x1E20,
	0x1E21,
	0x1E22,
	0x1E23,
	0x1E24,
	0x1E25,
	0x1E26,
	0x1E27,
	0x1E28,
	0x1E29,
	0x1E2A,
	0x1E2B,
	0x1E2C,
	0x1E2D,
	0x1E2E,
	0x1E2F,
	0x1E30,
	0x1E31,
	0x1E32,
	0x1E33,
	0x1E34,
	0x1E35,
	0x1E36,
	0x1E37,
	0x1E38,
	0x1E39,
	0x1E3A,
	0x1E3B,
	0x1E3C,
	0x1E3D,
	0x1E3E,
	0x1E3F,
	0x1E40,
	0x1E41,
	0x1E42,
	0x1E43,
	0x1E44,
	0x1E45,
	0x1E46,
	0x1E47,
	0x1E48,
	0x1E49,
	0x1E4A,
	0x1E4B,
	0x1E4C,
	0x1E4D,
	0x1E4E,
	0x1E4F,
	0x1E50,
	0x1E51,
	0x1E52,
	0x1E53,
	0x1E54,
	0x1E55,
	0x1E56,
	0x1E57,
	0x1E58,
	0x1E59,
	0x1E5A,
	0x1E5B,
	0x1E5C,
	0x1E5D,
	0x1E5E,
	0x1E5F,
	0x1E60,
	0x1E61,
	0x1E62,
	0x1E63,
	0x1E64,
	0x1E65,
	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F18,
	0x1F1E,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F48,
	0x1F4E,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB8,
	0x1FBD,
	0x1FC8,
	0x1FCD,
	0x1FD8,
	0x1FDC,
	0x1FE8,
	0x1FED,
	0x1FF8,
	0x1FFD,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x2130,
	0x2134,
	0x213E,
	0x2140,
	0x2145,
	0x2146,
	0x2160,
	0x2170,
	0x2183,
	0x2184,
	0x24B6,
	0x24D0,
	0x2C00,
	0x2C2F,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x1D400,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4B6,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D538,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A8,
	0x1D6C1,
	0x1D6E2,
	0x1D6FB,
	0x1D71C,
	0x1D735,
	0x1D756,
	0x1D76F,
	0x1D790,
	0x1D7A9,
	0x1D7CA,
	0x1D7CB,
	0x1E900,
	0x1E922,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SB__XX_invlist[] = { /* for ASCII/Latin1 */
	1523,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xE,
	0x20,
	0x23,
	0x27,
	0x2A,
	0x2C,
	0x2F,
	0x30,
	0x3B,
	0x3F,
	0x40,
	0x41,
	0x5C,
	0x5D,
	0x5E,
	0x61,
	0x7C,
	0x7D,
	0x7E,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB5,
	0xB6,
	0xBA,
	0xBC,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x55D,
	0x55E,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61F,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x703,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7F8,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104C,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166E,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1804,
	0x1808,
	0x180A,
	0x180B,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AAC,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C3D,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2000,
	0x2010,
	0x2013,
	0x2015,
	0x2018,
	0x2020,
	0x2024,
	0x2025,
	0x2028,
	0x2030,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2045,
	0x204A,
	0x205F,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207D,
	0x2080,
	0x208D,
	0x208F,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x24B6,
	0x24EA,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2E,
	0x2E30,
	0x2E3C,
	0x2E3D,
	0x2E42,
	0x2E43,
	0x3000,
	0x3003,
	0x3005,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA4FF,
	0xA60D,
	0xA60E,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA92F,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9C8,
	0xA9CA,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE17,
	0xFE19,
	0xFE20,
	0xFE30,
	0xFE31,
	0xFE33,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE53,
	0xFE55,
	0xFE5F,
	0xFE63,
	0xFE64,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1F,
	0xFF20,
	0xFF21,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF41,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF65,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A56,
	0x10A58,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110BD,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11141,
	0x11144,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C7,
	0x111CA,
	0x111CE,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111DE,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144D,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115DE,
	0x11600,
	0x11643,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A42,
	0x11A44,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11A9B,
	0x11A9D,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C43,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B39,
	0x16B40,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA88,
	0x1DA89,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F676,
	0x1F679,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__XX_invlist[] = { /* for EBCDIC 1047 */
	1543,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x51,
	0x5B,
	0x5D,
	0x5E,
	0x60,
	0x61,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6F,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xBA,
	0xBB,
	0xBD,
	0xBE,
	0xC0,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x55D,
	0x55E,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61F,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x703,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7F8,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104C,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166E,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1804,
	0x1808,
	0x180A,
	0x180B,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AAC,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C3D,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2000,
	0x2010,
	0x2013,
	0x2015,
	0x2018,
	0x2020,
	0x2024,
	0x2025,
	0x2028,
	0x2030,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2045,
	0x204A,
	0x205F,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207D,
	0x2080,
	0x208D,
	0x208F,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x24B6,
	0x24EA,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2E,
	0x2E30,
	0x2E3C,
	0x2E3D,
	0x2E42,
	0x2E43,
	0x3000,
	0x3003,
	0x3005,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA4FF,
	0xA60D,
	0xA60E,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA92F,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9C8,
	0xA9CA,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE17,
	0xFE19,
	0xFE20,
	0xFE30,
	0xFE31,
	0xFE33,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE53,
	0xFE55,
	0xFE5F,
	0xFE63,
	0xFE64,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1F,
	0xFF20,
	0xFF21,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF41,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF65,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A56,
	0x10A58,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110BD,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11141,
	0x11144,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C7,
	0x111CA,
	0x111CE,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111DE,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144D,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115DE,
	0x11600,
	0x11643,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A42,
	0x11A44,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11A9B,
	0x11A9D,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C43,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B39,
	0x16B40,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA88,
	0x1DA89,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F676,
	0x1F679,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SB__XX_invlist[] = { /* for EBCDIC 037 */
	1541,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x51,
	0x5B,
	0x5D,
	0x5E,
	0x60,
	0x61,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6F,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xBA,
	0xBC,
	0xC0,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x55D,
	0x55E,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F4,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x61F,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x703,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7F8,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104C,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166E,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1802,
	0x1804,
	0x1808,
	0x180A,
	0x180B,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AAC,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C3D,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2000,
	0x2010,
	0x2013,
	0x2015,
	0x2018,
	0x2020,
	0x2024,
	0x2025,
	0x2028,
	0x2030,
	0x2039,
	0x203B,
	0x203C,
	0x203E,
	0x2045,
	0x204A,
	0x205F,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207D,
	0x2080,
	0x208D,
	0x208F,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x24B6,
	0x24EA,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2E,
	0x2E30,
	0x2E3C,
	0x2E3D,
	0x2E42,
	0x2E43,
	0x3000,
	0x3003,
	0x3005,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA4FF,
	0xA60D,
	0xA60E,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA876,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA92F,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9C8,
	0xA9CA,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5D,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE17,
	0xFE19,
	0xFE20,
	0xFE30,
	0xFE31,
	0xFE33,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE50,
	0xFE53,
	0xFE55,
	0xFE5F,
	0xFE63,
	0xFE64,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0F,
	0xFF1A,
	0xFF1B,
	0xFF1F,
	0xFF20,
	0xFF21,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF41,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF65,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A56,
	0x10A58,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11049,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110BD,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11141,
	0x11144,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C7,
	0x111CA,
	0x111CE,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111DE,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1123A,
	0x1123B,
	0x1123D,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144D,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115DE,
	0x11600,
	0x11643,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x1173C,
	0x1173F,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A42,
	0x11A44,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11A9B,
	0x11A9D,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C43,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B39,
	0x16B40,
	0x16B45,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA88,
	0x1DA89,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F676,
	0x1F679,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SC_invlist[] = { /* for ASCII/Latin1 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x24,
	0x25,
	0xA2,
	0xA6,
	0x58F,
	0x590,
	0x60B,
	0x60C,
	0x9F2,
	0x9F4,
	0x9FB,
	0x9FC,
	0xAF1,
	0xAF2,
	0xBF9,
	0xBFA,
	0xE3F,
	0xE40,
	0x17DB,
	0x17DC,
	0x20A0,
	0x20C0,
	0xA838,
	0xA839,
	0xFDFC,
	0xFDFD,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFFE0,
	0xFFE2,
	0xFFE5,
	0xFFE7
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SC_invlist[] = { /* for EBCDIC 1047 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x4B,
	0x5B,
	0x5C,
	0x9F,
	0xA0,
	0xB1,
	0xB3,
	0x58F,
	0x590,
	0x60B,
	0x60C,
	0x9F2,
	0x9F4,
	0x9FB,
	0x9FC,
	0xAF1,
	0xAF2,
	0xBF9,
	0xBFA,
	0xE3F,
	0xE40,
	0x17DB,
	0x17DC,
	0x20A0,
	0x20C0,
	0xA838,
	0xA839,
	0xFDFC,
	0xFDFD,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFFE0,
	0xFFE2,
	0xFFE5,
	0xFFE7
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SC_invlist[] = { /* for EBCDIC 037 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x4B,
	0x5B,
	0x5C,
	0x9F,
	0xA0,
	0xB1,
	0xB3,
	0x58F,
	0x590,
	0x60B,
	0x60C,
	0x9F2,
	0x9F4,
	0x9FB,
	0x9FC,
	0xAF1,
	0xAF2,
	0xBF9,
	0xBFA,
	0xE3F,
	0xE40,
	0x17DB,
	0x17DC,
	0x20A0,
	0x20C0,
	0xA838,
	0xA839,
	0xFDFC,
	0xFDFD,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFFE0,
	0xFFE2,
	0xFFE5,
	0xFFE7
};

#   endif	/* EBCDIC 037 */

static const UV PL_SC__ADLM_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960
};

static const UV PL_SC__ARAB_invlist[] = { /* for all charsets */
	115,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x600,
	0x605,
	0x606,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61D,
	0x61E,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x64B,
	0x656,
	0x670,
	0x671,
	0x6DD,
	0x6DE,
	0x700,
	0x750,
	0x780,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x900,
	0xFB50,
	0xFBC2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0x10E60,
	0x10E7F,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2
};

static const UV PL_SC__ARMN_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x58A,
	0x58B,
	0x58D,
	0x590,
	0xFB13,
	0xFB18
};

static const UV PL_SC__BENG_invlist[] = { /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x980,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE
};

static const UV PL_SC__BOPO_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2EA,
	0x2EC,
	0x3105,
	0x312F,
	0x31A0,
	0x31BB
};

static const UV PL_SC__BUGI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1A00,
	0x1A1C,
	0x1A1E,
	0x1A20
};

static const UV PL_SC__BUHD_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1740,
	0x1754
};

static const UV PL_SC__CAKM_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11100,
	0x11135,
	0x11136,
	0x11144
};

static const UV PL_SC__COPT_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3E2,
	0x3F0,
	0x2C80,
	0x2CF4,
	0x2CF9,
	0x2D00
};

static const UV PL_SC__CPRT_invlist[] = { /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10840
};

static const UV PL_SC__CYRL_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x400,
	0x485,
	0x487,
	0x530,
	0x1C80,
	0x1C89,
	0x1D2B,
	0x1D2C,
	0x1D78,
	0x1D79,
	0x2DE0,
	0x2E00,
	0xA640,
	0xA6A0,
	0xFE2E,
	0xFE30
};

static const UV PL_SC__DEVA_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x900,
	0x951,
	0x953,
	0x964,
	0x966,
	0x980,
	0xA8E0,
	0xA8FE
};

static const UV PL_SC__DUPL_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA0
};

static const UV PL_SC__GEOR_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1100,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E
};

static const UV PL_SC__GLAG_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B
};

static const UV PL_SC__GRAN_invlist[] = { /* for all charsets */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375
};

static const UV PL_SC__GREK_invlist[] = { /* for all charsets */
	73,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x370,
	0x374,
	0x375,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x384,
	0x385,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3E2,
	0x3F0,
	0x400,
	0x1D26,
	0x1D2B,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1DBF,
	0x1DC0,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2126,
	0x2127,
	0xAB65,
	0xAB66,
	0x10140,
	0x1018F,
	0x101A0,
	0x101A1,
	0x1D200,
	0x1D246
};

static const UV PL_SC__GUJR_invlist[] = { /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00
};

static const UV PL_SC__GURU_invlist[] = { /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76
};

static const UV PL_SC__HAN_invlist[] = { /* for all charsets */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3005,
	0x3006,
	0x3007,
	0x3008,
	0x3021,
	0x302A,
	0x3038,
	0x303C,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

static const UV PL_SC__HANG_invlist[] = { /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1200,
	0x302E,
	0x3030,
	0x3131,
	0x318F,
	0x3200,
	0x321F,
	0x3260,
	0x327F,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD
};

static const UV PL_SC__HANO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1720,
	0x1735
};

static const UV PL_SC__HIRA_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x1B001,
	0x1B11F,
	0x1F200,
	0x1F201
};

static const UV PL_SC__JAVA_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA980,
	0xA9CE,
	0xA9D0,
	0xA9DA,
	0xA9DE,
	0xA9E0
};

static const UV PL_SC__KALI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA900,
	0xA92E,
	0xA92F,
	0xA930
};

static const UV PL_SC__KANA_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30A1,
	0x30FB,
	0x30FD,
	0x3100,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0x1B000,
	0x1B001
};

static const UV PL_SC__KHOJ_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11200,
	0x11212,
	0x11213,
	0x1123F
};

static const UV PL_SC__KNDA_invlist[] = { /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3
};

static const UV PL_SC__KTHI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11080,
	0x110C2
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SC__LATN_invlist[] = { /* for ASCII/Latin1 */
	63,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2B9,
	0x2E0,
	0x2E5,
	0x1D00,
	0x1D26,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1E00,
	0x1F00,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C60,
	0x2C80,
	0xA722,
	0xA788,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA800,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xFB00,
	0xFB07,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SC__LATN_invlist[] = { /* for EBCDIC 1047 */
	89,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x1D00,
	0x1D26,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1E00,
	0x1F00,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C60,
	0x2C80,
	0xA722,
	0xA788,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA800,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xFB00,
	0xFB07,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SC__LATN_invlist[] = { /* for EBCDIC 037 */
	85,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x1D00,
	0x1D26,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1E00,
	0x1F00,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C60,
	0x2C80,
	0xA722,
	0xA788,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA800,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xFB00,
	0xFB07,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B
};

#   endif	/* EBCDIC 037 */

static const UV PL_SC__LIMB_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x1950
};

static const UV PL_SC__LINA_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768
};

static const UV PL_SC__LINB_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB
};

static const UV PL_SC__MAHJ_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11150,
	0x11177
};

static const UV PL_SC__MAND_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x840,
	0x85C,
	0x85E,
	0x85F
};

static const UV PL_SC__MANI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7
};

static const UV PL_SC__MLYM_invlist[] = { /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80
};

static const UV PL_SC__MODI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11600,
	0x11645,
	0x11650,
	0x1165A
};

static const UV PL_SC__MONG_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1800,
	0x1802,
	0x1804,
	0x1805,
	0x1806,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x11660,
	0x1166D
};

static const UV PL_SC__MULT_invlist[] = { /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA
};

static const UV PL_SC__MYMR_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1000,
	0x10A0,
	0xA9E0,
	0xA9FF,
	0xAA60,
	0xAA80
};

static const UV PL_SC__ORYA_invlist[] = { /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78
};

static const UV PL_SC__PERM_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10350,
	0x1037B
};

static const UV PL_SC__PHAG_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA840,
	0xA878
};

static const UV PL_SC__PHLP_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B80,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0
};

static const UV PL_SC__QAAI_invlist[] = { /* for all charsets */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x485,
	0x487,
	0x64B,
	0x656,
	0x670,
	0x671,
	0x951,
	0x953,
	0x1AB0,
	0x1ABF,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200C,
	0x200E,
	0x20D0,
	0x20F1,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE2E,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0xE0100,
	0xE01F0
};

static const UV PL_SC__SHRD_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0
};

static const UV PL_SC__SIND_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA
};

static const UV PL_SC__SINH_invlist[] = { /* for all charsets */
	27,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0x111E1,
	0x111F5
};

static const UV PL_SC__SYLO_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA800,
	0xA82C
};

static const UV PL_SC__SYRC_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x700,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x750,
	0x860,
	0x86B
};

static const UV PL_SC__TAGB_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774
};

static const UV PL_SC__TAKR_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA
};

static const UV PL_SC__TALE_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1950,
	0x196E,
	0x1970,
	0x1975
};

static const UV PL_SC__TAML_invlist[] = { /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB
};

static const UV PL_SC__TELU_invlist[] = { /* for all charsets */
	27,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80
};

static const UV PL_SC__TGLG_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1700,
	0x170D,
	0x170E,
	0x1715
};

static const UV PL_SC__THAA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x780,
	0x7B2
};

static const UV PL_SC__TIRH_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA
};

static const UV PL_SC__YI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SC__ZYYY_invlist[] = { /* for ASCII/Latin1 */
	328,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2B9,
	0x2E0,
	0x2E5,
	0x2EA,
	0x2EC,
	0x300,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x386,
	0x387,
	0x388,
	0x589,
	0x58A,
	0x605,
	0x606,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x6DD,
	0x6DE,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0xE3F,
	0xE40,
	0xFD5,
	0xFD9,
	0x10FB,
	0x10FC,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x1802,
	0x1804,
	0x1805,
	0x1806,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x2000,
	0x200C,
	0x200E,
	0x2065,
	0x2066,
	0x2071,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x20A0,
	0x20C0,
	0x2100,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2E00,
	0x2E4A,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3005,
	0x3006,
	0x3007,
	0x3008,
	0x3021,
	0x3030,
	0x3038,
	0x303C,
	0x3040,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FD,
	0x3190,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3220,
	0x3260,
	0x327F,
	0x32D0,
	0x3358,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xA830,
	0xA83A,
	0xA92E,
	0xA92F,
	0xA9CF,
	0xA9D0,
	0xAB5B,
	0xAB5C,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FD,
	0x102E1,
	0x102FC,
	0x1BCA0,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SC__ZYYY_invlist[] = { /* for EBCDIC 1047 */
	354,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x2EA,
	0x2EC,
	0x300,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x386,
	0x387,
	0x388,
	0x589,
	0x58A,
	0x605,
	0x606,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x6DD,
	0x6DE,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0xE3F,
	0xE40,
	0xFD5,
	0xFD9,
	0x10FB,
	0x10FC,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x1802,
	0x1804,
	0x1805,
	0x1806,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x2000,
	0x200C,
	0x200E,
	0x2065,
	0x2066,
	0x2071,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x20A0,
	0x20C0,
	0x2100,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2E00,
	0x2E4A,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3005,
	0x3006,
	0x3007,
	0x3008,
	0x3021,
	0x3030,
	0x3038,
	0x303C,
	0x3040,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FD,
	0x3190,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3220,
	0x3260,
	0x327F,
	0x32D0,
	0x3358,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xA830,
	0xA83A,
	0xA92E,
	0xA92F,
	0xA9CF,
	0xA9D0,
	0xAB5B,
	0xAB5C,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FD,
	0x102E1,
	0x102FC,
	0x1BCA0,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SC__ZYYY_invlist[] = { /* for EBCDIC 037 */
	350,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x2EA,
	0x2EC,
	0x300,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x386,
	0x387,
	0x388,
	0x589,
	0x58A,
	0x605,
	0x606,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x6DD,
	0x6DE,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0xE3F,
	0xE40,
	0xFD5,
	0xFD9,
	0x10FB,
	0x10FC,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x1802,
	0x1804,
	0x1805,
	0x1806,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x2000,
	0x200C,
	0x200E,
	0x2065,
	0x2066,
	0x2071,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x20A0,
	0x20C0,
	0x2100,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2E00,
	0x2E4A,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3005,
	0x3006,
	0x3007,
	0x3008,
	0x3021,
	0x3030,
	0x3038,
	0x303C,
	0x3040,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FD,
	0x3190,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3220,
	0x3260,
	0x327F,
	0x32D0,
	0x3358,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xA830,
	0xA83A,
	0xA92E,
	0xA92F,
	0xA9CF,
	0xA9D0,
	0xAB5B,
	0xAB5C,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FD,
	0x102E1,
	0x102FC,
	0x1BCA0,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SD_invlist[] = { /* for ASCII/Latin1 */
	63,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x69,
	0x6B,
	0x12F,
	0x130,
	0x249,
	0x24A,
	0x268,
	0x269,
	0x29D,
	0x29E,
	0x2B2,
	0x2B3,
	0x3F3,
	0x3F4,
	0x456,
	0x457,
	0x458,
	0x459,
	0x1D62,
	0x1D63,
	0x1D96,
	0x1D97,
	0x1DA4,
	0x1DA5,
	0x1DA8,
	0x1DA9,
	0x1E2D,
	0x1E2E,
	0x1ECB,
	0x1ECC,
	0x2071,
	0x2072,
	0x2148,
	0x214A,
	0x2C7C,
	0x2C7D,
	0x1D422,
	0x1D424,
	0x1D456,
	0x1D458,
	0x1D48A,
	0x1D48C,
	0x1D4BE,
	0x1D4C0,
	0x1D4F2,
	0x1D4F4,
	0x1D526,
	0x1D528,
	0x1D55A,
	0x1D55C,
	0x1D58E,
	0x1D590,
	0x1D5C2,
	0x1D5C4,
	0x1D5F6,
	0x1D5F8,
	0x1D62A,
	0x1D62C,
	0x1D65E,
	0x1D660,
	0x1D692,
	0x1D694
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SD_invlist[] = { /* for EBCDIC 1047 */
	65,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x89,
	0x8A,
	0x91,
	0x92,
	0x12F,
	0x130,
	0x249,
	0x24A,
	0x268,
	0x269,
	0x29D,
	0x29E,
	0x2B2,
	0x2B3,
	0x3F3,
	0x3F4,
	0x456,
	0x457,
	0x458,
	0x459,
	0x1D62,
	0x1D63,
	0x1D96,
	0x1D97,
	0x1DA4,
	0x1DA5,
	0x1DA8,
	0x1DA9,
	0x1E2D,
	0x1E2E,
	0x1ECB,
	0x1ECC,
	0x2071,
	0x2072,
	0x2148,
	0x214A,
	0x2C7C,
	0x2C7D,
	0x1D422,
	0x1D424,
	0x1D456,
	0x1D458,
	0x1D48A,
	0x1D48C,
	0x1D4BE,
	0x1D4C0,
	0x1D4F2,
	0x1D4F4,
	0x1D526,
	0x1D528,
	0x1D55A,
	0x1D55C,
	0x1D58E,
	0x1D590,
	0x1D5C2,
	0x1D5C4,
	0x1D5F6,
	0x1D5F8,
	0x1D62A,
	0x1D62C,
	0x1D65E,
	0x1D660,
	0x1D692,
	0x1D694
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SD_invlist[] = { /* for EBCDIC 037 */
	65,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x89,
	0x8A,
	0x91,
	0x92,
	0x12F,
	0x130,
	0x249,
	0x24A,
	0x268,
	0x269,
	0x29D,
	0x29E,
	0x2B2,
	0x2B3,
	0x3F3,
	0x3F4,
	0x456,
	0x457,
	0x458,
	0x459,
	0x1D62,
	0x1D63,
	0x1D96,
	0x1D97,
	0x1DA4,
	0x1DA5,
	0x1DA8,
	0x1DA9,
	0x1E2D,
	0x1E2E,
	0x1ECB,
	0x1ECC,
	0x2071,
	0x2072,
	0x2148,
	0x214A,
	0x2C7C,
	0x2C7D,
	0x1D422,
	0x1D424,
	0x1D456,
	0x1D458,
	0x1D48A,
	0x1D48C,
	0x1D4BE,
	0x1D4C0,
	0x1D4F2,
	0x1D4F4,
	0x1D526,
	0x1D528,
	0x1D55A,
	0x1D55C,
	0x1D58E,
	0x1D590,
	0x1D5C2,
	0x1D5C4,
	0x1D5F6,
	0x1D5F8,
	0x1D62A,
	0x1D62C,
	0x1D65E,
	0x1D660,
	0x1D692,
	0x1D694
};

#   endif	/* EBCDIC 037 */

static const UV PL_SGNW_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D800,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0
};

static const UV PL_SHAW_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10450,
	0x10480
};

static const UV PL_SHORTHANDFORMATCONTROLS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BCA0,
	0x1BCB0
};

static const UV PL_SHRD_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x952,
	0x1CD7,
	0x1CD8,
	0x1CD9,
	0x1CDA,
	0x1CDC,
	0x1CDE,
	0x1CE0,
	0x1CE1,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0
};

static const UV PL_SIDD_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE
};

static const UV PL_SIND_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x966,
	0xA830,
	0xA83A,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA
};

static const UV PL_SINH_invlist[] = { /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x966,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0x111E1,
	0x111F5
};

static const UV PL_SINHALAARCHAICNUMBERS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x111E0,
	0x11200
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SK_invlist[] = { /* for ASCII/Latin1 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0xA8,
	0xA9,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0xB8,
	0xB9,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x384,
	0x386,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x309B,
	0x309D,
	0xA700,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xAB5B,
	0xAB5C,
	0xFBB2,
	0xFBC2,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFFE3,
	0xFFE4,
	0x1F3FB,
	0x1F400
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SK_invlist[] = { /* for EBCDIC 1047 */
	57,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5F,
	0x60,
	0x79,
	0x7A,
	0x9D,
	0x9E,
	0xBB,
	0xBD,
	0xBE,
	0xBF,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x384,
	0x386,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x309B,
	0x309D,
	0xA700,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xAB5B,
	0xAB5C,
	0xFBB2,
	0xFBC2,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFFE3,
	0xFFE4,
	0x1F3FB,
	0x1F400
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SK_invlist[] = { /* for EBCDIC 037 */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x79,
	0x7A,
	0x9D,
	0x9E,
	0xB0,
	0xB1,
	0xBC,
	0xBF,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x384,
	0x386,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x309B,
	0x309D,
	0xA700,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xAB5B,
	0xAB5C,
	0xFBB2,
	0xFBC2,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFFE3,
	0xFFE4,
	0x1F3FB,
	0x1F400
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SM_invlist[] = { /* for ASCII/Latin1 */
	129,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2B,
	0x2C,
	0x3C,
	0x3F,
	0x7C,
	0x7D,
	0x7E,
	0x7F,
	0xAC,
	0xAD,
	0xB1,
	0xB2,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x3F6,
	0x3F7,
	0x606,
	0x609,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x207A,
	0x207D,
	0x208A,
	0x208D,
	0x2118,
	0x2119,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x2190,
	0x2195,
	0x219A,
	0x219C,
	0x21A0,
	0x21A1,
	0x21A3,
	0x21A4,
	0x21A6,
	0x21A7,
	0x21AE,
	0x21AF,
	0x21CE,
	0x21D0,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21F4,
	0x2300,
	0x2320,
	0x2322,
	0x237C,
	0x237D,
	0x239B,
	0x23B4,
	0x23DC,
	0x23E2,
	0x25B7,
	0x25B8,
	0x25C1,
	0x25C2,
	0x25F8,
	0x2600,
	0x266F,
	0x2670,
	0x27C0,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2800,
	0x2900,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0xFB29,
	0xFB2A,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE67,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE2,
	0xFFE3,
	0xFFE9,
	0xFFED,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1EEF0,
	0x1EEF2
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SM_invlist[] = { /* for EBCDIC 1047 */
	131,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x6E,
	0x6F,
	0x7E,
	0x7F,
	0x8F,
	0x90,
	0xA1,
	0xA2,
	0xB0,
	0xB1,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x3F6,
	0x3F7,
	0x606,
	0x609,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x207A,
	0x207D,
	0x208A,
	0x208D,
	0x2118,
	0x2119,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x2190,
	0x2195,
	0x219A,
	0x219C,
	0x21A0,
	0x21A1,
	0x21A3,
	0x21A4,
	0x21A6,
	0x21A7,
	0x21AE,
	0x21AF,
	0x21CE,
	0x21D0,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21F4,
	0x2300,
	0x2320,
	0x2322,
	0x237C,
	0x237D,
	0x239B,
	0x23B4,
	0x23DC,
	0x23E2,
	0x25B7,
	0x25B8,
	0x25C1,
	0x25C2,
	0x25F8,
	0x2600,
	0x266F,
	0x2670,
	0x27C0,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2800,
	0x2900,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0xFB29,
	0xFB2A,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE67,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE2,
	0xFFE3,
	0xFFE9,
	0xFFED,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1EEF0,
	0x1EEF2
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SM_invlist[] = { /* for EBCDIC 037 */
	131,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x5F,
	0x60,
	0x6E,
	0x6F,
	0x7E,
	0x7F,
	0x8F,
	0x90,
	0xA1,
	0xA2,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x3F6,
	0x3F7,
	0x606,
	0x609,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x207A,
	0x207D,
	0x208A,
	0x208D,
	0x2118,
	0x2119,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x2190,
	0x2195,
	0x219A,
	0x219C,
	0x21A0,
	0x21A1,
	0x21A3,
	0x21A4,
	0x21A6,
	0x21A7,
	0x21AE,
	0x21AF,
	0x21CE,
	0x21D0,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21F4,
	0x2300,
	0x2320,
	0x2322,
	0x237C,
	0x237D,
	0x239B,
	0x23B4,
	0x23DC,
	0x23E2,
	0x25B7,
	0x25B8,
	0x25C1,
	0x25C2,
	0x25F8,
	0x2600,
	0x266F,
	0x2670,
	0x27C0,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2800,
	0x2900,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0xFB29,
	0xFB2A,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE67,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE2,
	0xFFE3,
	0xFFE9,
	0xFFED,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1EEF0,
	0x1EEF2
};

#   endif	/* EBCDIC 037 */

static const UV PL_SMALLFORMS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE50,
	0xFE70
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_SO_invlist[] = { /* for ASCII/Latin1 */
	347,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA6,
	0xA7,
	0xA9,
	0xAA,
	0xAE,
	0xAF,
	0xB0,
	0xB1,
	0x482,
	0x483,
	0x58D,
	0x58F,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x7F6,
	0x7F7,
	0x9FA,
	0x9FB,
	0xB70,
	0xB71,
	0xBF3,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC7F,
	0xC80,
	0xD4F,
	0xD50,
	0xD79,
	0xD7A,
	0xF01,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD5,
	0xFD9,
	0x109E,
	0x10A0,
	0x1390,
	0x139A,
	0x1940,
	0x1941,
	0x19DE,
	0x1A00,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x214A,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x2150,
	0x218A,
	0x218C,
	0x2195,
	0x219A,
	0x219C,
	0x21A0,
	0x21A1,
	0x21A3,
	0x21A4,
	0x21A6,
	0x21A7,
	0x21AE,
	0x21AF,
	0x21CE,
	0x21D0,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x2329,
	0x232B,
	0x237C,
	0x237D,
	0x239B,
	0x23B4,
	0x23DC,
	0x23E2,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x25B7,
	0x25B8,
	0x25C1,
	0x25C2,
	0x25F8,
	0x2600,
	0x266F,
	0x2670,
	0x2768,
	0x2794,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x32FF,
	0x3300,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA828,
	0xA82C,
	0xA836,
	0xA838,
	0xA839,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xFDFD,
	0xFDFE,
	0xFFE4,
	0xFFE5,
	0xFFE8,
	0xFFE9,
	0xFFED,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F3FB,
	0x1F400,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SO_invlist[] = { /* for EBCDIC 1047 */
	347,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6A,
	0x6B,
	0x90,
	0x91,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0x482,
	0x483,
	0x58D,
	0x58F,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x7F6,
	0x7F7,
	0x9FA,
	0x9FB,
	0xB70,
	0xB71,
	0xBF3,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC7F,
	0xC80,
	0xD4F,
	0xD50,
	0xD79,
	0xD7A,
	0xF01,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD5,
	0xFD9,
	0x109E,
	0x10A0,
	0x1390,
	0x139A,
	0x1940,
	0x1941,
	0x19DE,
	0x1A00,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x214A,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x2150,
	0x218A,
	0x218C,
	0x2195,
	0x219A,
	0x219C,
	0x21A0,
	0x21A1,
	0x21A3,
	0x21A4,
	0x21A6,
	0x21A7,
	0x21AE,
	0x21AF,
	0x21CE,
	0x21D0,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x2329,
	0x232B,
	0x237C,
	0x237D,
	0x239B,
	0x23B4,
	0x23DC,
	0x23E2,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x25B7,
	0x25B8,
	0x25C1,
	0x25C2,
	0x25F8,
	0x2600,
	0x266F,
	0x2670,
	0x2768,
	0x2794,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x32FF,
	0x3300,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA828,
	0xA82C,
	0xA836,
	0xA838,
	0xA839,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xFDFD,
	0xFDFE,
	0xFFE4,
	0xFFE5,
	0xFFE8,
	0xFFE9,
	0xFFED,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F3FB,
	0x1F400,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_SO_invlist[] = { /* for EBCDIC 037 */
	347,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6A,
	0x6B,
	0x90,
	0x91,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0x482,
	0x483,
	0x58D,
	0x58F,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x7F6,
	0x7F7,
	0x9FA,
	0x9FB,
	0xB70,
	0xB71,
	0xBF3,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC7F,
	0xC80,
	0xD4F,
	0xD50,
	0xD79,
	0xD7A,
	0xF01,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD5,
	0xFD9,
	0x109E,
	0x10A0,
	0x1390,
	0x139A,
	0x1940,
	0x1941,
	0x19DE,
	0x1A00,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x214A,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x2150,
	0x218A,
	0x218C,
	0x2195,
	0x219A,
	0x219C,
	0x21A0,
	0x21A1,
	0x21A3,
	0x21A4,
	0x21A6,
	0x21A7,
	0x21AE,
	0x21AF,
	0x21CE,
	0x21D0,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x2329,
	0x232B,
	0x237C,
	0x237D,
	0x239B,
	0x23B4,
	0x23DC,
	0x23E2,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x25B7,
	0x25B8,
	0x25C1,
	0x25C2,
	0x25F8,
	0x2600,
	0x266F,
	0x2670,
	0x2768,
	0x2794,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2CE5,
	0x2CEB,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x32FF,
	0x3300,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA828,
	0xA82C,
	0xA836,
	0xA838,
	0xA839,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xFDFD,
	0xFDFE,
	0xFFE4,
	0xFFE5,
	0xFFE8,
	0xFFE9,
	0xFFED,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F3FB,
	0x1F400,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7
};

#   endif	/* EBCDIC 037 */

static const UV PL_SORA_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA
};

static const UV PL_SOYO_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3
};

static const UV PL_SPECIALS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFFF0,
	0x10000
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_STERM_invlist[] = { /* for ASCII/Latin1 */
	137,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x22,
	0x2E,
	0x2F,
	0x3F,
	0x40,
	0x589,
	0x58A,
	0x61F,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE52,
	0xFE53,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0E,
	0xFF0F,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_STERM_invlist[] = { /* for EBCDIC 1047 */
	137,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x589,
	0x58A,
	0x61F,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE52,
	0xFE53,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0E,
	0xFF0F,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_STERM_invlist[] = { /* for EBCDIC 037 */
	137,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x589,
	0x58A,
	0x61F,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE52,
	0xFE53,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0E,
	0xFF0F,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#   endif	/* EBCDIC 037 */

static const UV PL_SUND_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B80,
	0x1BC0,
	0x1CC0,
	0x1CC8
};

static const UV PL_SUNDANESESUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1CC0,
	0x1CD0
};

static const UV PL_SUPARROWSA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x27F0,
	0x2800
};

static const UV PL_SUPARROWSB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2900,
	0x2980
};

static const UV PL_SUPARROWSC_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F800,
	0x1F900
};

static const UV PL_SUPERANDSUB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2070,
	0x20A0
};

static const UV PL_SUPMATHOPERATORS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2A00,
	0x2B00
};

static const UV PL_SUPPUAA_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0000,
	0x100000
};

static const UV PL_SUPPUAB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100000,
	0x110000
};

static const UV PL_SUPPUNCTUATION_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E00,
	0x2E80
};

static const UV PL_SUPSYMBOLSANDPICTOGRAPHS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F900,
	0x1FA00
};

static const UV PL_SUTTONSIGNWRITING_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D800,
	0x1DAB0
};

static const UV PL_SYLO_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x966,
	0x9E6,
	0x9F0,
	0xA800,
	0xA82C
};

static const UV PL_SYRC_invlist[] = { /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60C,
	0x60D,
	0x61B,
	0x61D,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x64B,
	0x656,
	0x670,
	0x671,
	0x700,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x750,
	0x860,
	0x86B
};

static const UV PL_SYRIACSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x860,
	0x870
};

static const UV PL_TAGB_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1735,
	0x1737,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774
};

static const UV PL_TAGS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE0000,
	0xE0080
};

static const UV PL_TAIXUANJING_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D300,
	0x1D360
};

static const UV PL_TAKR_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x966,
	0xA830,
	0xA83A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA
};

static const UV PL_TALE_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1040,
	0x104A,
	0x1950,
	0x196E,
	0x1970,
	0x1975
};

static const UV PL_TALU_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x19E0
};

static const UV PL_TAML_invlist[] = { /* for all charsets */
	47,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0x1CDA,
	0x1CDB,
	0xA8F3,
	0xA8F4,
	0x11301,
	0x11302,
	0x11303,
	0x11304,
	0x1133C,
	0x1133D
};

static const UV PL_TANG_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16FE0,
	0x16FE1,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3
};

static const UV PL_TANGUTCOMPONENTS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x18800,
	0x18B00
};

static const UV PL_TAVT_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAE0
};

static const UV PL_TELU_invlist[] = { /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC80,
	0x1CDA,
	0x1CDB
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_TERM_invlist[] = { /* for ASCII/Latin1 */
	195,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x22,
	0x2C,
	0x2D,
	0x2E,
	0x2F,
	0x3A,
	0x3C,
	0x3F,
	0x40,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x589,
	0x58A,
	0x5C3,
	0x5C4,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x70B,
	0x70C,
	0x70D,
	0x7F8,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF08,
	0xF09,
	0xF0D,
	0xF13,
	0x104A,
	0x104C,
	0x1361,
	0x1369,
	0x166D,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17DA,
	0x17DB,
	0x1802,
	0x1806,
	0x1808,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B60,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E41,
	0x2E42,
	0x3001,
	0x3003,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAADF,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A56,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B3A,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144E,
	0x1145B,
	0x1145C,
	0x115C2,
	0x115C6,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C44,
	0x11C71,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_TERM_invlist[] = { /* for EBCDIC 1047 */
	197,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5A,
	0x5B,
	0x5E,
	0x5F,
	0x6B,
	0x6C,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x589,
	0x58A,
	0x5C3,
	0x5C4,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x70B,
	0x70C,
	0x70D,
	0x7F8,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF08,
	0xF09,
	0xF0D,
	0xF13,
	0x104A,
	0x104C,
	0x1361,
	0x1369,
	0x166D,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17DA,
	0x17DB,
	0x1802,
	0x1806,
	0x1808,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B60,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E41,
	0x2E42,
	0x3001,
	0x3003,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAADF,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A56,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B3A,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144E,
	0x1145B,
	0x1145C,
	0x115C2,
	0x115C6,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C44,
	0x11C71,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_TERM_invlist[] = { /* for EBCDIC 037 */
	197,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5A,
	0x5B,
	0x5E,
	0x5F,
	0x6B,
	0x6C,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x589,
	0x58A,
	0x5C3,
	0x5C4,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x70B,
	0x70C,
	0x70D,
	0x7F8,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF08,
	0xF09,
	0xF0D,
	0xF13,
	0x104A,
	0x104C,
	0x1361,
	0x1369,
	0x166D,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17DA,
	0x17DB,
	0x1802,
	0x1806,
	0x1808,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B60,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E41,
	0x2E42,
	0x3001,
	0x3003,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAADF,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A56,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B3A,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x11047,
	0x1104E,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144E,
	0x1145B,
	0x1145C,
	0x115C2,
	0x115C6,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C44,
	0x11C71,
	0x11C72,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#   endif	/* EBCDIC 037 */

static const UV PL_TFNG_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D80
};

static const UV PL_TGLG_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1735,
	0x1737
};

static const UV PL_THAA_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60C,
	0x60D,
	0x61B,
	0x61D,
	0x61F,
	0x620,
	0x660,
	0x66A,
	0x780,
	0x7B2,
	0xFDF2,
	0xFDF3,
	0xFDFD,
	0xFDFE
};

static const UV PL_THAI_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE01,
	0xE3B,
	0xE40,
	0xE5C
};

static const UV PL_TIBT_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFD5,
	0xFD9,
	0xFDB
};

static const UV PL_TIRH_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x966,
	0xA830,
	0xA83A,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA
};

static const UV PL_TRANSPORTANDMAP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F680,
	0x1F700
};

static const UV PL_UCAS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1400,
	0x1680
};

static const UV PL_UCASEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x18B0,
	0x1900
};

static const UV PL_UGAR_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10380,
	0x1039E,
	0x1039F,
	0x103A0
};

static const UV PL_UIDEO_invlist[] = { /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1
};

static const UV PL_VAI_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA500,
	0xA62C
};

static const UV PL_VEDICEXT_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1CD0,
	0x1D00
};

static const UV PL_VERTICALFORMS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE10,
	0xFE20
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_VO__R_invlist[] = { /* for ASCII/Latin1 */
	175,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA7,
	0xA8,
	0xA9,
	0xAA,
	0xAE,
	0xAF,
	0xB1,
	0xB2,
	0xBC,
	0xBF,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E80,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE50,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF01,
	0xFF0D,
	0xFF0E,
	0xFF1C,
	0xFF1F,
	0xFF61,
	0xFFE0,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AB0,
	0x13000,
	0x13430,
	0x14400,
	0x14680,
	0x16FE0,
	0x18B00,
	0x1B000,
	0x1B130,
	0x1B170,
	0x1B300,
	0x1D000,
	0x1D200,
	0x1D300,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F800,
	0x1F900,
	0x1FA00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_VO__R_invlist[] = { /* for EBCDIC 1047 */
	173,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8F,
	0x90,
	0xAF,
	0xB0,
	0xB4,
	0xB6,
	0xB7,
	0xBA,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E80,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE50,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF01,
	0xFF0D,
	0xFF0E,
	0xFF1C,
	0xFF1F,
	0xFF61,
	0xFFE0,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AB0,
	0x13000,
	0x13430,
	0x14400,
	0x14680,
	0x16FE0,
	0x18B00,
	0x1B000,
	0x1B130,
	0x1B170,
	0x1B300,
	0x1D000,
	0x1D200,
	0x1D300,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F800,
	0x1F900,
	0x1FA00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_VO__R_invlist[] = { /* for EBCDIC 037 */
	173,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8F,
	0x90,
	0xAF,
	0xB0,
	0xB4,
	0xB6,
	0xB7,
	0xBA,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E80,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE50,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF01,
	0xFF0D,
	0xFF0E,
	0xFF1C,
	0xFF1F,
	0xFF61,
	0xFFE0,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AB0,
	0x13000,
	0x13430,
	0x14400,
	0x14680,
	0x16FE0,
	0x18B00,
	0x1B000,
	0x1B130,
	0x1B170,
	0x1B300,
	0x1D000,
	0x1D200,
	0x1D300,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F800,
	0x1F900,
	0x1FA00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 037 */

static const UV PL_VO__TR_invlist[] = { /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2329,
	0x232B,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0x30FC,
	0x30FD,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF1A,
	0xFF1C,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF61,
	0xFFE3,
	0xFFE4
};

static const UV PL_VO__TU_invlist[] = { /* for all charsets */
	69,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3001,
	0x3003,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x309B,
	0x309D,
	0x30A1,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x3127,
	0x3128,
	0x31F0,
	0x3200,
	0x3300,
	0x3358,
	0x337B,
	0x3380,
	0xFE50,
	0xFE53,
	0xFF01,
	0xFF02,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1F,
	0xFF20,
	0x1F200,
	0x1F202
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_VO__U_invlist[] = { /* for ASCII/Latin1 */
	253,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA7,
	0xA8,
	0xA9,
	0xAA,
	0xAE,
	0xAF,
	0xB1,
	0xB2,
	0xBC,
	0xBF,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x2329,
	0x232B,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E80,
	0x3001,
	0x3003,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x309B,
	0x309D,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FC,
	0x30FD,
	0x3127,
	0x3128,
	0x31F0,
	0x3200,
	0x3300,
	0x3358,
	0x337B,
	0x3380,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE53,
	0xFE58,
	0xFE5F,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0F,
	0xFF1A,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFFE0,
	0xFFE3,
	0xFFE4,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AB0,
	0x13000,
	0x13430,
	0x14400,
	0x14680,
	0x16FE0,
	0x18B00,
	0x1B000,
	0x1B130,
	0x1B170,
	0x1B300,
	0x1D000,
	0x1D200,
	0x1D300,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F200,
	0x1F202,
	0x1F800,
	0x1F900,
	0x1FA00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_VO__U_invlist[] = { /* for EBCDIC 1047 */
	251,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8F,
	0x90,
	0xAF,
	0xB0,
	0xB4,
	0xB6,
	0xB7,
	0xBA,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x2329,
	0x232B,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E80,
	0x3001,
	0x3003,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x309B,
	0x309D,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FC,
	0x30FD,
	0x3127,
	0x3128,
	0x31F0,
	0x3200,
	0x3300,
	0x3358,
	0x337B,
	0x3380,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE53,
	0xFE58,
	0xFE5F,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0F,
	0xFF1A,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFFE0,
	0xFFE3,
	0xFFE4,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AB0,
	0x13000,
	0x13430,
	0x14400,
	0x14680,
	0x16FE0,
	0x18B00,
	0x1B000,
	0x1B130,
	0x1B170,
	0x1B300,
	0x1D000,
	0x1D200,
	0x1D300,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F200,
	0x1F202,
	0x1F800,
	0x1F900,
	0x1FA00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_VO__U_invlist[] = { /* for EBCDIC 037 */
	251,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8F,
	0x90,
	0xAF,
	0xB0,
	0xB4,
	0xB6,
	0xB7,
	0xBA,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x2329,
	0x232B,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E80,
	0x3001,
	0x3003,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x309B,
	0x309D,
	0x30A0,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FC,
	0x30FD,
	0x3127,
	0x3128,
	0x31F0,
	0x3200,
	0x3300,
	0x3358,
	0x337B,
	0x3380,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE53,
	0xFE58,
	0xFE5F,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF02,
	0xFF08,
	0xFF0A,
	0xFF0C,
	0xFF0F,
	0xFF1A,
	0xFF20,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFFE0,
	0xFFE3,
	0xFFE4,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AB0,
	0x13000,
	0x13430,
	0x14400,
	0x14680,
	0x16FE0,
	0x18B00,
	0x1B000,
	0x1B130,
	0x1B170,
	0x1B300,
	0x1D000,
	0x1D200,
	0x1D300,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F200,
	0x1F202,
	0x1F800,
	0x1F900,
	0x1FA00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#   endif	/* EBCDIC 037 */

static const UV PL_VS_invlist[] = { /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x180B,
	0x180E,
	0xFE00,
	0xFE10,
	0xE0100,
	0xE01F0
};

static const UV PL_VSSUP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE0100,
	0xE01F0
};

static const UV PL_WARA_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__DQ_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x22,
	0x23
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__DQ_invlist[] = { /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7F,
	0x80
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__DQ_invlist[] = { /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7F,
	0x80
};

#   endif	/* EBCDIC 037 */

static const UV PL_WB__EB_invlist[] = { /* for all charsets */
	63,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x261D,
	0x261E,
	0x26F9,
	0x26FA,
	0x270A,
	0x270E,
	0x1F385,
	0x1F386,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F4AA,
	0x1F4AB,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE
};

static const UV PL_WB__EBG_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F466,
	0x1F46A
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__EX_invlist[] = { /* for ASCII/Latin1 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5F,
	0x60,
	0x202F,
	0x2030,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFF3F,
	0xFF40
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__EX_invlist[] = { /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D,
	0x6E,
	0x202F,
	0x2030,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFF3F,
	0xFF40
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__EX_invlist[] = { /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D,
	0x6E,
	0x202F,
	0x2030,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFF3F,
	0xFF40
};

#   endif	/* EBCDIC 037 */

static const UV PL_WB__EXTEND_invlist[] = { /* for all charsets */
	533,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x8D4,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC04,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD82,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200C,
	0x200D,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFF9E,
	0xFFA0,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111CA,
	0x111CD,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133C,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x1171D,
	0x1172C,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F51,
	0x16F7F,
	0x16F8F,
	0x16F93,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__FO_invlist[] = { /* for ASCII/Latin1 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__FO_invlist[] = { /* for EBCDIC 1047 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__FO_invlist[] = { /* for EBCDIC 037 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#   endif	/* EBCDIC 037 */

static const UV PL_WB__GAZ_invlist[] = { /* for all charsets */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x2708,
	0x2709,
	0x2764,
	0x2765,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F48B,
	0x1F48C,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F5E8,
	0x1F5E9,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693
};

static const UV PL_WB__KA_invlist[] = { /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3031,
	0x3036,
	0x309B,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xFF66,
	0xFF9E,
	0x1B000,
	0x1B001
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__LE_invlist[] = { /* for ASCII/Latin1 */
	1015,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2D8,
	0x2DE,
	0x2E5,
	0x2EC,
	0x300,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5F3,
	0x5F4,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1A00,
	0x1A17,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x303B,
	0x303D,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB50,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__LE_invlist[] = { /* for EBCDIC 1047 */
	1041,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2D8,
	0x2DE,
	0x2E5,
	0x2EC,
	0x300,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5F3,
	0x5F4,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1A00,
	0x1A17,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x303B,
	0x303D,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB50,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__LE_invlist[] = { /* for EBCDIC 037 */
	1037,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2D8,
	0x2DE,
	0x2E5,
	0x2EC,
	0x300,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5F3,
	0x5F4,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1820,
	0x1878,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1A00,
	0x1A17,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x303B,
	0x303D,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB50,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__MB_invlist[] = { /* for ASCII/Latin1 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E,
	0x2F,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF07,
	0xFF08,
	0xFF0E,
	0xFF0F
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__MB_invlist[] = { /* for EBCDIC 1047 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF07,
	0xFF08,
	0xFF0E,
	0xFF0F
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__MB_invlist[] = { /* for EBCDIC 037 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF07,
	0xFF08,
	0xFF0E,
	0xFF0F
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__ML_invlist[] = { /* for ASCII/Latin1 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3A,
	0x3B,
	0xB7,
	0xB8,
	0x387,
	0x388,
	0x5F4,
	0x5F5,
	0x2027,
	0x2028,
	0xFE13,
	0xFE14,
	0xFE55,
	0xFE56,
	0xFF1A,
	0xFF1B
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__ML_invlist[] = { /* for EBCDIC 1047 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7A,
	0x7B,
	0xB3,
	0xB4,
	0x387,
	0x388,
	0x5F4,
	0x5F5,
	0x2027,
	0x2028,
	0xFE13,
	0xFE14,
	0xFE55,
	0xFE56,
	0xFF1A,
	0xFF1B
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__ML_invlist[] = { /* for EBCDIC 037 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7A,
	0x7B,
	0xB3,
	0xB4,
	0x387,
	0x388,
	0x5F4,
	0x5F5,
	0x2027,
	0x2028,
	0xFE13,
	0xFE14,
	0xFE55,
	0xFE56,
	0xFF1A,
	0xFF1B
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__MN_invlist[] = { /* for ASCII/Latin1 */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C,
	0x2D,
	0x3B,
	0x3C,
	0x37E,
	0x37F,
	0x589,
	0x58A,
	0x60C,
	0x60E,
	0x66C,
	0x66D,
	0x7F8,
	0x7F9,
	0x2044,
	0x2045,
	0xFE10,
	0xFE11,
	0xFE14,
	0xFE15,
	0xFE50,
	0xFE51,
	0xFE54,
	0xFE55,
	0xFF0C,
	0xFF0D,
	0xFF1B,
	0xFF1C
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__MN_invlist[] = { /* for EBCDIC 1047 */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5E,
	0x5F,
	0x6B,
	0x6C,
	0x37E,
	0x37F,
	0x589,
	0x58A,
	0x60C,
	0x60E,
	0x66C,
	0x66D,
	0x7F8,
	0x7F9,
	0x2044,
	0x2045,
	0xFE10,
	0xFE11,
	0xFE14,
	0xFE15,
	0xFE50,
	0xFE51,
	0xFE54,
	0xFE55,
	0xFF0C,
	0xFF0D,
	0xFF1B,
	0xFF1C
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__MN_invlist[] = { /* for EBCDIC 037 */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5E,
	0x5F,
	0x6B,
	0x6C,
	0x37E,
	0x37F,
	0x589,
	0x58A,
	0x60C,
	0x60E,
	0x66C,
	0x66D,
	0x7F8,
	0x7F9,
	0x2044,
	0x2045,
	0xFE10,
	0xFE11,
	0xFE14,
	0xFE15,
	0xFE50,
	0xFE51,
	0xFE54,
	0xFE55,
	0xFF0C,
	0xFF0D,
	0xFF1B,
	0xFF1C
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__NL_invlist[] = { /* for ASCII/Latin1 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xD,
	0x85,
	0x86,
	0x2028,
	0x202A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__NL_invlist[] = { /* for EBCDIC 1047 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xD,
	0x25,
	0x26,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__NL_invlist[] = { /* for EBCDIC 037 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xD,
	0x15,
	0x16,
	0x2028,
	0x202A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__NU_invlist[] = { /* for ASCII/Latin1 */
	111,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E950,
	0x1E95A
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__NU_invlist[] = { /* for EBCDIC 1047 */
	111,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E950,
	0x1E95A
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__NU_invlist[] = { /* for EBCDIC 037 */
	111,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x104A0,
	0x104AA,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x16A60,
	0x16A6A,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E950,
	0x1E95A
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__SQ_invlist[] = { /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x27,
	0x28
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__SQ_invlist[] = { /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__SQ_invlist[] = { /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_WB__XX_invlist[] = { /* for ASCII/Latin1 */
	1499,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xE,
	0x22,
	0x23,
	0x27,
	0x28,
	0x2C,
	0x2D,
	0x2E,
	0x2F,
	0x30,
	0x3C,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0x85,
	0x86,
	0xAA,
	0xAB,
	0xAD,
	0xAE,
	0xB5,
	0xB6,
	0xB7,
	0xB8,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2D8,
	0x2DE,
	0x2E5,
	0x2EC,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x200C,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2030,
	0x203F,
	0x2041,
	0x2044,
	0x2045,
	0x2054,
	0x2055,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3099,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE11,
	0xFE13,
	0xFE15,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE56,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1B000,
	0x1B001,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__XX_invlist[] = { /* for EBCDIC 1047 */
	1523,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x51,
	0x5A,
	0x5E,
	0x5F,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB3,
	0xB4,
	0xBA,
	0xBB,
	0xC1,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2D8,
	0x2DE,
	0x2E5,
	0x2EC,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x200C,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2030,
	0x203F,
	0x2041,
	0x2044,
	0x2045,
	0x2054,
	0x2055,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3099,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE11,
	0xFE13,
	0xFE15,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE56,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1B000,
	0x1B001,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_WB__XX_invlist[] = { /* for EBCDIC 037 */
	1519,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x42,
	0x4A,
	0x4B,
	0x4C,
	0x51,
	0x5A,
	0x5E,
	0x5F,
	0x62,
	0x6A,
	0x6B,
	0x6C,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0x7F,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB3,
	0xB4,
	0xC1,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2D8,
	0x2DE,
	0x2E5,
	0x2EC,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x589,
	0x58A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBA,
	0xEBB,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A00,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x200C,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2030,
	0x203F,
	0x2041,
	0x2044,
	0x2045,
	0x2054,
	0x2055,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x24B6,
	0x24EA,
	0x261D,
	0x261E,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2695,
	0x2697,
	0x26F9,
	0x26FA,
	0x2708,
	0x2709,
	0x270A,
	0x270E,
	0x2764,
	0x2765,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x302A,
	0x3030,
	0x3031,
	0x3036,
	0x303B,
	0x303D,
	0x3099,
	0x309D,
	0x30A0,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x32D0,
	0x32FF,
	0x3300,
	0x3358,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFC,
	0xFE00,
	0xFE11,
	0xFE13,
	0xFE15,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE54,
	0xFE56,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF07,
	0xFF08,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFF9,
	0xFFFC,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x1B000,
	0x1B001,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1BCA0,
	0x1BCA4,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A,
	0x1F1E6,
	0x1F200,
	0x1F308,
	0x1F309,
	0x1F33E,
	0x1F33F,
	0x1F373,
	0x1F374,
	0x1F385,
	0x1F386,
	0x1F393,
	0x1F394,
	0x1F3A4,
	0x1F3A5,
	0x1F3A8,
	0x1F3A9,
	0x1F3C2,
	0x1F3C5,
	0x1F3C7,
	0x1F3C8,
	0x1F3CA,
	0x1F3CD,
	0x1F3EB,
	0x1F3EC,
	0x1F3ED,
	0x1F3EE,
	0x1F3FB,
	0x1F400,
	0x1F442,
	0x1F444,
	0x1F446,
	0x1F451,
	0x1F466,
	0x1F46A,
	0x1F46E,
	0x1F46F,
	0x1F470,
	0x1F479,
	0x1F47C,
	0x1F47D,
	0x1F481,
	0x1F484,
	0x1F485,
	0x1F488,
	0x1F48B,
	0x1F48C,
	0x1F4AA,
	0x1F4AB,
	0x1F4BB,
	0x1F4BD,
	0x1F527,
	0x1F528,
	0x1F52C,
	0x1F52D,
	0x1F574,
	0x1F576,
	0x1F57A,
	0x1F57B,
	0x1F590,
	0x1F591,
	0x1F595,
	0x1F597,
	0x1F5E8,
	0x1F5E9,
	0x1F645,
	0x1F648,
	0x1F64B,
	0x1F650,
	0x1F680,
	0x1F681,
	0x1F692,
	0x1F693,
	0x1F6A3,
	0x1F6A4,
	0x1F6B4,
	0x1F6B7,
	0x1F6C0,
	0x1F6C1,
	0x1F6CC,
	0x1F6CD,
	0x1F918,
	0x1F91D,
	0x1F91E,
	0x1F920,
	0x1F926,
	0x1F927,
	0x1F930,
	0x1F93A,
	0x1F93D,
	0x1F93F,
	0x1F9D1,
	0x1F9DE,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XIDC_invlist[] = { /* for ASCII/Latin1 */
	1393,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xB7,
	0xB8,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1369,
	0x1372,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XIDC_invlist[] = { /* for EBCDIC 1047 */
	1417,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB3,
	0xB4,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1369,
	0x1372,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XIDC_invlist[] = { /* for EBCDIC 037 */
	1413,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB3,
	0xB4,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1369,
	0x1372,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x180B,
	0x180E,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ABE,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B5A,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20F1,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E00,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA62C,
	0xA640,
	0xA670,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA828,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA900,
	0xA92E,
	0xA930,
	0xA954,
	0xA960,
	0xA97D,
	0xA980,
	0xA9C1,
	0xA9CF,
	0xA9DA,
	0xA9E0,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF10,
	0xFF1A,
	0xFF21,
	0xFF3B,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x101FD,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102E1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE7,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11000,
	0x11047,
	0x11066,
	0x11070,
	0x1107F,
	0x110BB,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11150,
	0x11174,
	0x11176,
	0x11177,
	0x11180,
	0x111C5,
	0x111CA,
	0x111CD,
	0x111D0,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1144B,
	0x11450,
	0x1145A,
	0x11480,
	0x114C6,
	0x114C7,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11644,
	0x11645,
	0x11650,
	0x1165A,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173A,
	0x118A0,
	0x118EA,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C5A,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF5,
	0x16B00,
	0x16B37,
	0x16B40,
	0x16B44,
	0x16B50,
	0x16B5A,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9D,
	0x1BC9F,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8D0,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0100,
	0xE01F0
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_XIDS_invlist[] = { /* for ASCII/Latin1 */
	1185,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XIDS_invlist[] = { /* for EBCDIC 1047 */
	1211,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_XIDS_invlist[] = { /* for EBCDIC 037 */
	1207,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x370,
	0x375,
	0x376,
	0x378,
	0x37B,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x561,
	0x588,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F3,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE33,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1712,
	0x1720,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1878,
	0x1880,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4C,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C80,
	0x1C89,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF5,
	0x1CF7,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x31A0,
	0x31BB,
	0x31F0,
	0x3200,
	0x3400,
	0x4DB6,
	0x4E00,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA640,
	0xA66F,
	0xA67F,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FE,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB66,
	0xAB70,
	0xABE3,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFC5E,
	0xFC64,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFA,
	0xFE71,
	0xFE72,
	0xFE73,
	0xFE74,
	0xFE77,
	0xFE78,
	0xFE79,
	0xFE7A,
	0xFE7B,
	0xFE7C,
	0xFE7D,
	0xFE7E,
	0xFE7F,
	0xFEFD,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFF9E,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10140,
	0x10175,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10320,
	0x1032D,
	0x1034B,
	0x10350,
	0x10376,
	0x10380,
	0x1039E,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D0,
	0x103D1,
	0x103D6,
	0x10400,
	0x1049E,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x11003,
	0x11038,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x11700,
	0x1171A,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A84,
	0x11A86,
	0x11A8A,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E
};

#   endif	/* EBCDIC 037 */

static const UV PL_XPEO_invlist[] = { /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x103A0,
	0x103C4,
	0x103C8,
	0x103D6
};

static const UV PL_XSUX_invlist[] = { /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544
};

static const UV PL_YI_invlist[] = { /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3001,
	0x3003,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x30FB,
	0x30FC,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xFF61,
	0xFF66
};

static const UV PL_YIJING_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4DC0,
	0x4E00
};

static const UV PL_YIRADICALS_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA490,
	0xA4D0
};

static const UV PL_YISYLLABLES_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA000,
	0xA490
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_Z_invlist[] = { /* for ASCII/Latin1 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x21,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_Z_invlist[] = { /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_Z_invlist[] = { /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 037 */

static const UV PL_ZANB_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11A00,
	0x11A48
};

static const UV PL_ZL_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2028,
	0x2029
};

static const UV PL_ZP_invlist[] = { /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2029,
	0x202A
};

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_ZS_invlist[] = { /* for ASCII/Latin1 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x21,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_ZS_invlist[] = { /* for EBCDIC 1047 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_ZS_invlist[] = { /* for EBCDIC 037 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#   endif	/* EBCDIC 037 */

#   if 'A' == 65 /* ASCII/Latin1 */

static const UV PL_ZYYY_invlist[] = { /* for ASCII/Latin1 */
	276,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2B9,
	0x2E0,
	0x2E5,
	0x2EA,
	0x2EC,
	0x300,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x386,
	0x387,
	0x388,
	0x605,
	0x606,
	0x6DD,
	0x6DE,
	0x8E2,
	0x8E3,
	0xE3F,
	0xE40,
	0xFD5,
	0xFD9,
	0x16EB,
	0x16EE,
	0x2000,
	0x200C,
	0x200E,
	0x2065,
	0x2066,
	0x2071,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x20A0,
	0x20C0,
	0x2100,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2E00,
	0x2E43,
	0x2E44,
	0x2E4A,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3004,
	0x3005,
	0x3012,
	0x3013,
	0x3020,
	0x3021,
	0x3036,
	0x3037,
	0x3248,
	0x3260,
	0x327F,
	0x3280,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3371,
	0x337B,
	0x3380,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xAB5B,
	0xAB5C,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF61,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FD,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D300,
	0x1D357,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#   endif	/* ASCII/Latin1 */

#   if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_ZYYY_invlist[] = { /* for EBCDIC 1047 */
	302,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x2EA,
	0x2EC,
	0x300,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x386,
	0x387,
	0x388,
	0x605,
	0x606,
	0x6DD,
	0x6DE,
	0x8E2,
	0x8E3,
	0xE3F,
	0xE40,
	0xFD5,
	0xFD9,
	0x16EB,
	0x16EE,
	0x2000,
	0x200C,
	0x200E,
	0x2065,
	0x2066,
	0x2071,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x20A0,
	0x20C0,
	0x2100,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2E00,
	0x2E43,
	0x2E44,
	0x2E4A,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3004,
	0x3005,
	0x3012,
	0x3013,
	0x3020,
	0x3021,
	0x3036,
	0x3037,
	0x3248,
	0x3260,
	0x327F,
	0x3280,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3371,
	0x337B,
	0x3380,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xAB5B,
	0xAB5C,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF61,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FD,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D300,
	0x1D357,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#   endif	/* EBCDIC 1047 */

#   if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121

static const UV PL_ZYYY_invlist[] = { /* for EBCDIC 037 */
	298,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x2EA,
	0x2EC,
	0x300,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x386,
	0x387,
	0x388,
	0x605,
	0x606,
	0x6DD,
	0x6DE,
	0x8E2,
	0x8E3,
	0xE3F,
	0xE40,
	0xFD5,
	0xFD9,
	0x16EB,
	0x16EE,
	0x2000,
	0x200C,
	0x200E,
	0x2065,
	0x2066,
	0x2071,
	0x2074,
	0x207F,
	0x2080,
	0x208F,
	0x20A0,
	0x20C0,
	0x2100,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2E00,
	0x2E43,
	0x2E44,
	0x2E4A,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3001,
	0x3004,
	0x3005,
	0x3012,
	0x3013,
	0x3020,
	0x3021,
	0x3036,
	0x3037,
	0x3248,
	0x3260,
	0x327F,
	0x3280,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3371,
	0x337B,
	0x3380,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xAB5B,
	0xAB5C,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF61,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FD,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1E9,
	0x1D300,
	0x1D357,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#   endif	/* EBCDIC 037 */

static const UV PL_ZZZZ_invlist[] = { /* for all charsets */
	1294,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x560,
	0x561,
	0x588,
	0x589,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5F0,
	0x5F5,
	0x600,
	0x61D,
	0x61E,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x8A0,
	0x8B5,
	0x8B6,
	0x8BE,
	0x8D4,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FE,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC78,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDE,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD04,
	0xD05,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
	0xE3F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE87,
	0xE89,
	0xE8A,
	0xE8B,
	0xE8D,
	0xE8E,
	0xE94,
	0xE98,
	0xE99,
	0xEA0,
	0xEA1,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEA8,
	0xEAA,
	0xEAC,
	0xEAD,
	0xEBA,
	0xEBB,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x170D,
	0x170E,
	0x1715,
	0x1720,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17DE,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180F,
	0x1810,
	0x181A,
	0x1820,
	0x1878,
	0x1880,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A1C,
	0x1A1E,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1AB0,
	0x1ABF,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1B80,
	0x1BF4,
	0x1BFC,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1CC0,
	0x1CC8,
	0x1CD0,
	0x1CFA,
	0x1D00,
	0x1DFA,
	0x1DFB,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x2065,
	0x2066,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C0,
	0x20D0,
	0x20F1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2C2F,
	0x2C30,
	0x2C5F,
	0x2C60,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2DE0,
	0x2E4A,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x3040,
	0x3041,
	0x3097,
	0x3099,
	0x3100,
	0x3105,
	0x312F,
	0x3131,
	0x318F,
	0x3190,
	0x31BB,
	0x31C0,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0x32FF,
	0x3300,
	0x4DB6,
	0x4DC0,
	0x9FEB,
	0xA000,
	0xA48D,
	0xA490,
	0xA4C7,
	0xA4D0,
	0xA62C,
	0xA640,
	0xA6F8,
	0xA700,
	0xA7AF,
	0xA7B0,
	0xA7B8,
	0xA7F7,
	0xA82C,
	0xA830,
	0xA83A,
	0xA840,
	0xA878,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA,
	0xA8E0,
	0xA8FE,
	0xA900,
	0xA954,
	0xA95F,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAAC3,
	0xAADB,
	0xAAF7,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB30,
	0xAB66,
	0xAB70,
	0xABEE,
	0xABF0,
	0xABFA,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBC2,
	0xFBD3,
	0xFD40,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFE,
	0xFE00,
	0xFE1A,
	0xFE20,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFEFF,
	0xFF00,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x1018F,
	0x10190,
	0x1019C,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x102E0,
	0x102FC,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A34,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A48,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E60,
	0x10E7F,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x1107F,
	0x110C2,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11150,
	0x11177,
	0x11180,
	0x111CE,
	0x111D0,
	0x111E0,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133C,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x1145A,
	0x1145B,
	0x1145C,
	0x1145D,
	0x1145E,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171A,
	0x1171D,
	0x1172C,
	0x11730,
	0x11740,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11900,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11A84,
	0x11A86,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16A70,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x17000,
	0x187ED,
	0x18800,
	0x18AF3,
	0x1B000,
	0x1B11F,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D1E9,
	0x1D200,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D360,
	0x1D372,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7,
	0x1E900,
	0x1E94B,
	0x1E950,
	0x1E95A,
	0x1E95E,
	0x1E960,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F170,
	0x1F1AD,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D5,
	0x1F6E0,
	0x1F6ED,
	0x1F6F0,
	0x1F6F9,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F910,
	0x1F93F,
	0x1F940,
	0x1F94D,
	0x1F950,
	0x1F96C,
	0x1F980,
	0x1F998,
	0x1F9C0,
	0x1F9C1,
	0x1F9D0,
	0x1F9E7,
	0x20000,
	0x2A6D7,
	0x2A700,
	0x2B735,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

const char * deprecated_property_msgs[] = {
	"",
	"Deprecated by Unicode because surrogates should never appear in well-formed text, and therefore shouldn't be the basis for line breaking",
	"Supplanted by Line_Break property values; see www.unicode.org/reports/tr14"
};

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UNI_KEYWORDS_C) || defined(PERL_IN_UTF8_C)

#define PL_HYPHEN (PL_HYPHEN_perl_aux + (MAX_UNI_KEYWORD_INDEX * 2))
#define PL_LB__SG (PL_LB__SG_perl_aux + (MAX_UNI_KEYWORD_INDEX * 1))

typedef enum {
	PERL_BIN_PLACEHOLDER = 0,
	PL_ADLM,
	PL_AEGEANNUMBERS,
	PL_AGE__10,
	PL_AGE__2,
	PL_AGE__2_DOT_1,
	PL_AGE__3,
	PL_AGE__3_DOT_1,
	PL_AGE__3_DOT_2,
	PL_AGE__4,
	PL_AGE__4_DOT_1,
	PL_AGE__5,
	PL_AGE__5_DOT_1,
	PL_AGE__5_DOT_2,
	PL_AGE__6,
	PL_AGE__6_DOT_1,
	PL_AGE__6_DOT_2,
	PL_AGE__6_DOT_3,
	PL_AGE__7,
	PL_AGE__8,
	PL_AGE__9,
	PL_AGE__NA,
	PL_AGHB,
	PL_AHOM,
	PL_ALCHEMICAL,
	PL_ALL,
	PL_ALPHABETICPF,
	PL_ANCIENTGREEKMUSIC,
	PL_ANCIENTGREEKNUMBERS,
	PL_ANCIENTSYMBOLS,
	PL_ANY,
	PL_ARAB,
	PL_ARABICEXTA,
	PL_ARABICMATH,
	PL_ARABICPFA,
	PL_ARABICPFB,
	PL_ARABICSUP,
	PL_ARMI,
	PL_ARMN,
	PL_ARROWS,
	PL_ASCII,
	PL_ASSIGNED,
	PL_AVST,
	PL_BALI,
	PL_BAMU,
	PL_BAMUMSUP,
	PL_BASS,
	PL_BATK,
	PL_BC__AL,
	PL_BC__AN,
	PL_BC__B,
	PL_BC__BN,
	PL_BC__CS,
	PL_BC__EN,
	PL_BC__ES,
	PL_BC__ET,
	PL_BC__FSI,
	PL_BC__L,
	PL_BC__LRE,
	PL_BC__LRI,
	PL_BC__LRO,
	PL_BC__NSM,
	PL_BC__ON,
	PL_BC__PDF,
	PL_BC__PDI,
	PL_BC__R,
	PL_BC__RLE,
	PL_BC__RLI,
	PL_BC__RLO,
	PL_BC__S,
	PL_BC__WS,
	PL_BENG,
	PL_BHKS,
	PL_BIDIC,
	PL_BIDIM,
	PL_BLOCKELEMENTS,
	PL_BOPO,
	PL_BOPOMOFOEXT,
	PL_BOXDRAWING,
	PL_BPT__C,
	PL_BPT__N,
	PL_BPT__O,
	PL_BRAH,
	PL_BRAI,
	PL_BUGI,
	PL_BUHD,
	PL_BYZANTINEMUSIC,
	PL_C,
	PL_CAKM,
	PL_CANS,
	PL_CARI,
	PL_CASED,
	PL_CCC__0,
	PL_CCC__1,
	PL_CCC__10,
	PL_CCC__103,
	PL_CCC__107,
	PL_CCC__11,
	PL_CCC__118,
	PL_CCC__12,
	PL_CCC__122,
	PL_CCC__129,
	PL_CCC__13,
	PL_CCC__130,
	PL_CCC__132,
	PL_CCC__133,
	PL_CCC__14,
	PL_CCC__15,
	PL_CCC__16,
	PL_CCC__17,
	PL_CCC__18,
	PL_CCC__19,
	PL_CCC__20,
	PL_CCC__202,
	PL_CCC__21,
	PL_CCC__214,
	PL_CCC__216,
	PL_CCC__22,
	PL_CCC__23,
	PL_CCC__24,
	PL_CCC__25,
	PL_CCC__26,
	PL_CCC__27,
	PL_CCC__28,
	PL_CCC__29,
	PL_CCC__30,
	PL_CCC__31,
	PL_CCC__32,
	PL_CCC__33,
	PL_CCC__34,
	PL_CCC__35,
	PL_CCC__36,
	PL_CCC__7,
	PL_CCC__8,
	PL_CCC__84,
	PL_CCC__9,
	PL_CCC__91,
	PL_CCC__A,
	PL_CCC__AL,
	PL_CCC__AR,
	PL_CCC__B,
	PL_CCC__BL,
	PL_CCC__BR,
	PL_CCC__DA,
	PL_CCC__DB,
	PL_CCC__IS,
	PL_CCC__L,
	PL_CCC__R,
	PL_CE,
	PL_CF,
	PL_CHAM,
	PL_CHER,
	PL_CHEROKEESUP,
	PL_CI,
	PL_CJK,
	PL_CJKCOMPAT,
	PL_CJKCOMPATFORMS,
	PL_CJKCOMPATIDEOGRAPHS,
	PL_CJKCOMPATIDEOGRAPHSSUP,
	PL_CJKEXTA,
	PL_CJKEXTB,
	PL_CJKEXTC,
	PL_CJKEXTD,
	PL_CJKEXTE,
	PL_CJKEXTF,
	PL_CJKRADICALSSUP,
	PL_CJKSTROKES,
	PL_CJKSYMBOLS,
	PL_CN,
	PL_CO,
	PL_COMPATJAMO,
	PL_COMPEX,
	PL_CONTROLPICTURES,
	PL_COPT,
	PL_COPTICEPACTNUMBERS,
	PL_COUNTINGROD,
	PL_CPRT,
	PL_CS,
	PL_CUNEIFORMNUMBERS,
	PL_CURRENCYSYMBOLS,
	PL_CWCF,
	PL_CWCM,
	PL_CWKCF,
	PL_CWL,
	PL_CWT,
	PL_CWU,
	PL_CYPRIOTSYLLABARY,
	PL_CYRILLICEXTA,
	PL_CYRILLICEXTB,
	PL_CYRILLICEXTC,
	PL_CYRILLICSUP,
	PL_CYRL,
	PL_DASH,
	PL_DEP,
	PL_DEVA,
	PL_DEVANAGARIEXT,
	PL_DI,
	PL_DIA,
	PL_DIACRITICALS,
	PL_DIACRITICALSEXT,
	PL_DIACRITICALSFORSYMBOLS,
	PL_DIACRITICALSSUP,
	PL_DINGBATS,
	PL_DOMINO,
	PL_DSRT,
	PL_DT__CAN,
	PL_DT__COM,
	PL_DT__ENC,
	PL_DT__FIN,
	PL_DT__FONT,
	PL_DT__FRA,
	PL_DT__INIT,
	PL_DT__ISO,
	PL_DT__MED,
	PL_DT__NAR,
	PL_DT__NB,
	PL_DT__NONCANON,
	PL_DT__NONE,
	PL_DT__SML,
	PL_DT__SQR,
	PL_DT__SUB,
	PL_DT__SUP,
	PL_DT__VERT,
	PL_DUPL,
	PL_EARLYDYNASTICCUNEIFORM,
	PL_EA__A,
	PL_EA__F,
	PL_EA__H,
	PL_EA__N,
	PL_EA__NA,
	PL_EA__W,
	PL_EGYP,
	PL_ELBA,
	PL_EMOTICONS,
	PL_ENCLOSEDALPHANUM,
	PL_ENCLOSEDALPHANUMSUP,
	PL_ENCLOSEDCJK,
	PL_ENCLOSEDIDEOGRAPHICSUP,
	PL_ETHI,
	PL_ETHIOPICEXT,
	PL_ETHIOPICEXTA,
	PL_ETHIOPICSUP,
	PL_EXT,
	PL_GCB__CN,
	PL_GCB__L,
	PL_GCB__PP,
	PL_GCB__SM,
	PL_GCB__T,
	PL_GCB__V,
	PL_GCB__XX,
	PL_GEOMETRICSHAPES,
	PL_GEOMETRICSHAPESEXT,
	PL_GEOR,
	PL_GEORGIANSUP,
	PL_GLAG,
	PL_GLAGOLITICSUP,
	PL_GONM,
	PL_GOTH,
	PL_GRAN,
	PL_GRBASE,
	PL_GREEKEXT,
	PL_GREK,
	PL_GREXT,
	PL_GUJR,
	PL_GURU,
	PL_HALFANDFULLFORMS,
	PL_HALFMARKS,
	PL_HAN,
	PL_HANG,
	PL_HANO,
	PL_HATR,
	PL_HEBR,
	PL_HIGHPUSURROGATES,
	PL_HIGHSURROGATES,
	PL_HIRA,
	PL_HLUW,
	PL_HMNG,
	PL_HST__NA,
	PL_HUNG,
	PL_HYPHEN_perl_aux,
	PL_IDC,
	PL_IDEO,
	PL_IDEOGRAPHICSYMBOLS,
	PL_IDS,
	PL_IDSB,
	PL_IDST,
	PL_INADLAM,
	PL_INAHOM,
	PL_INANATOLIANHIEROGLYPHS,
	PL_INARABIC,
	PL_INARMENIAN,
	PL_INAVESTAN,
	PL_INBALINESE,
	PL_INBAMUM,
	PL_INBASSAVAH,
	PL_INBATAK,
	PL_INBENGALI,
	PL_INBHAIKSUKI,
	PL_INBOPOMOFO,
	PL_INBRAHMI,
	PL_INBUGINESE,
	PL_INBUHID,
	PL_INCARIAN,
	PL_INCAUCASIANALBANIAN,
	PL_INCHAKMA,
	PL_INCHAM,
	PL_INCHEROKEE,
	PL_INCOPTIC,
	PL_INCUNEIFORM,
	PL_INCYRILLIC,
	PL_INDEVANAGARI,
	PL_INDICNUMBERFORMS,
	PL_INDUPLOYAN,
	PL_INEGYPTIANHIEROGLYPHS,
	PL_INELBASAN,
	PL_INETHIOPIC,
	PL_INGEORGIAN,
	PL_INGLAGOLITIC,
	PL_INGOTHIC,
	PL_INGRANTHA,
	PL_INGREEK,
	PL_INGUJARATI,
	PL_INGURMUKHI,
	PL_INHANGUL,
	PL_INHANUNOO,
	PL_INHATRAN,
	PL_INHEBREW,
	PL_INHIRAGANA,
	PL_INIDC,
	PL_INIMPERIALARAMAIC,
	PL_ININSCRIPTIONALPAHLAVI,
	PL_ININSCRIPTIONALPARTHIAN,
	PL_INJAVANESE,
	PL_INKAITHI,
	PL_INKANNADA,
	PL_INKATAKANA,
	PL_INKHAROSHTHI,
	PL_INKHMER,
	PL_INKHOJKI,
	PL_INKHUDAWADI,
	PL_INLAO,
	PL_INLEPCHA,
	PL_INLIMBU,
	PL_INLINEARA,
	PL_INLYCIAN,
	PL_INLYDIAN,
	PL_INMAHAJANI,
	PL_INMALAYALAM,
	PL_INMANDAIC,
	PL_INMANICHAEAN,
	PL_INMARCHEN,
	PL_INMASARAMGONDI,
	PL_INMEETEIMAYEK,
	PL_INMENDEKIKAKUI,
	PL_INMEROITICCURSIVE,
	PL_INMIAO,
	PL_INMODI,
	PL_INMONGOLIAN,
	PL_INMRO,
	PL_INMULTANI,
	PL_INMYANMAR,
	PL_INNABATAEAN,
	PL_INNEWA,
	PL_INNEWTAILUE,
	PL_INNKO,
	PL_INNUSHU,
	PL_INOGHAM,
	PL_INOLDHUNGARIAN,
	PL_INOLDITALIC,
	PL_INOLDPERMIC,
	PL_INOLDPERSIAN,
	PL_INOLDTURKIC,
	PL_INORIYA,
	PL_INOSAGE,
	PL_INOSMANYA,
	PL_INPAHAWHHMONG,
	PL_INPAUCINHAU,
	PL_INPC__BOTTOM,
	PL_INPC__BOTTOMANDLEFT,
	PL_INPC__BOTTOMANDRIGHT,
	PL_INPC__LEFT,
	PL_INPC__LEFTANDRIGHT,
	PL_INPC__NA,
	PL_INPC__OVERSTRUCK,
	PL_INPC__RIGHT,
	PL_INPC__TOP,
	PL_INPC__TOPANDBOTTOM,
	PL_INPC__TOPANDBOTTOMANDRIGHT,
	PL_INPC__TOPANDLEFT,
	PL_INPC__TOPANDLEFTANDRIGHT,
	PL_INPC__TOPANDRIGHT,
	PL_INPHAGSPA,
	PL_INPHOENICIAN,
	PL_INPSALTERPAHLAVI,
	PL_INPUNCTUATION,
	PL_INREJANG,
	PL_INRUNIC,
	PL_INSAMARITAN,
	PL_INSAURASHTRA,
	PL_INSC__AVAGRAHA,
	PL_INSC__BINDU,
	PL_INSC__BRAHMIJOININGNUMBER,
	PL_INSC__CANTILLATIONMARK,
	PL_INSC__CONSONANT,
	PL_INSC__CONSONANTDEAD,
	PL_INSC__CONSONANTFINAL,
	PL_INSC__CONSONANTHEADLETTER,
	PL_INSC__CONSONANTKILLER,
	PL_INSC__CONSONANTMEDIAL,
	PL_INSC__CONSONANTPLACEHOLDER,
	PL_INSC__CONSONANTPRECEDINGREPHA,
	PL_INSC__CONSONANTPREFIXED,
	PL_INSC__CONSONANTSUBJOINED,
	PL_INSC__CONSONANTSUCCEEDINGREPHA,
	PL_INSC__CONSONANTWITHSTACKER,
	PL_INSC__GEMINATIONMARK,
	PL_INSC__INVISIBLESTACKER,
	PL_INSC__MODIFYINGLETTER,
	PL_INSC__NONJOINER,
	PL_INSC__NUKTA,
	PL_INSC__NUMBER,
	PL_INSC__NUMBERJOINER,
	PL_INSC__OTHER,
	PL_INSC__PUREKILLER,
	PL_INSC__REGISTERSHIFTER,
	PL_INSC__SYLLABLEMODIFIER,
	PL_INSC__TONELETTER,
	PL_INSC__TONEMARK,
	PL_INSC__VIRAMA,
	PL_INSC__VISARGA,
	PL_INSC__VOWEL,
	PL_INSC__VOWELDEPENDENT,
	PL_INSC__VOWELINDEPENDENT,
	PL_INSHARADA,
	PL_INSIDDHAM,
	PL_INSINHALA,
	PL_INSORASOMPENG,
	PL_INSOYOMBO,
	PL_INSUNDANESE,
	PL_INSYLOTINAGRI,
	PL_INSYRIAC,
	PL_INTAGALOG,
	PL_INTAGBANWA,
	PL_INTAILE,
	PL_INTAITHAM,
	PL_INTAIVIET,
	PL_INTAKRI,
	PL_INTAMIL,
	PL_INTANGUT,
	PL_INTELUGU,
	PL_INTHAANA,
	PL_INTHAI,
	PL_INTIBETAN,
	PL_INTIFINAGH,
	PL_INTIRHUTA,
	PL_INUGARITIC,
	PL_INVAI,
	PL_INVS,
	PL_INWARANGCITI,
	PL_INZANABAZARSQUARE,
	PL_IN__10,
	PL_IN__1_DOT_1,
	PL_IN__2,
	PL_IN__2_DOT_1,
	PL_IN__3,
	PL_IN__3_DOT_1,
	PL_IN__3_DOT_2,
	PL_IN__4,
	PL_IN__4_DOT_1,
	PL_IN__5,
	PL_IN__5_DOT_1,
	PL_IN__5_DOT_2,
	PL_IN__6,
	PL_IN__6_DOT_1,
	PL_IN__6_DOT_2,
	PL_IN__6_DOT_3,
	PL_IN__7,
	PL_IN__8,
	PL_IN__9,
	PL_IPAEXT,
	PL_ITAL,
	PL_JAMO,
	PL_JAMOEXTA,
	PL_JAMOEXTB,
	PL_JAVA,
	PL_JG__AFRICANFEH,
	PL_JG__AFRICANNOON,
	PL_JG__AFRICANQAF,
	PL_JG__AIN,
	PL_JG__ALAPH,
	PL_JG__ALEF,
	PL_JG__BEH,
	PL_JG__BETH,
	PL_JG__BURUSHASKIYEHBARREE,
	PL_JG__DAL,
	PL_JG__DALATHRISH,
	PL_JG__E,
	PL_JG__FARSIYEH,
	PL_JG__FE,
	PL_JG__FEH,
	PL_JG__FINALSEMKATH,
	PL_JG__GAF,
	PL_JG__GAMAL,
	PL_JG__HAH,
	PL_JG__HAMZAONHEHGOAL,
	PL_JG__HE,
	PL_JG__HEH,
	PL_JG__HEHGOAL,
	PL_JG__HETH,
	PL_JG__KAF,
	PL_JG__KAPH,
	PL_JG__KHAPH,
	PL_JG__KNOTTEDHEH,
	PL_JG__LAM,
	PL_JG__LAMADH,
	PL_JG__MALAYALAMBHA,
	PL_JG__MALAYALAMJA,
	PL_JG__MALAYALAMLLA,
	PL_JG__MALAYALAMLLLA,
	PL_JG__MALAYALAMNGA,
	PL_JG__MALAYALAMNNA,
	PL_JG__MALAYALAMNNNA,
	PL_JG__MALAYALAMNYA,
	PL_JG__MALAYALAMRA,
	PL_JG__MALAYALAMSSA,
	PL_JG__MALAYALAMTTA,
	PL_JG__MANICHAEANALEPH,
	PL_JG__MANICHAEANAYIN,
	PL_JG__MANICHAEANBETH,
	PL_JG__MANICHAEANDALETH,
	PL_JG__MANICHAEANDHAMEDH,
	PL_JG__MANICHAEANFIVE,
	PL_JG__MANICHAEANGIMEL,
	PL_JG__MANICHAEANHETH,
	PL_JG__MANICHAEANHUNDRED,
	PL_JG__MANICHAEANKAPH,
	PL_JG__MANICHAEANLAMEDH,
	PL_JG__MANICHAEANMEM,
	PL_JG__MANICHAEANNUN,
	PL_JG__MANICHAEANONE,
	PL_JG__MANICHAEANPE,
	PL_JG__MANICHAEANQOPH,
	PL_JG__MANICHAEANRESH,
	PL_JG__MANICHAEANSADHE,
	PL_JG__MANICHAEANSAMEKH,
	PL_JG__MANICHAEANTAW,
	PL_JG__MANICHAEANTEN,
	PL_JG__MANICHAEANTETH,
	PL_JG__MANICHAEANTHAMEDH,
	PL_JG__MANICHAEANTWENTY,
	PL_JG__MANICHAEANWAW,
	PL_JG__MANICHAEANYODH,
	PL_JG__MANICHAEANZAYIN,
	PL_JG__MEEM,
	PL_JG__MIM,
	PL_JG__NOJOININGGROUP,
	PL_JG__NOON,
	PL_JG__NUN,
	PL_JG__NYA,
	PL_JG__PE,
	PL_JG__QAF,
	PL_JG__QAPH,
	PL_JG__REH,
	PL_JG__REVERSEDPE,
	PL_JG__ROHINGYAYEH,
	PL_JG__SAD,
	PL_JG__SADHE,
	PL_JG__SEEN,
	PL_JG__SEMKATH,
	PL_JG__SHIN,
	PL_JG__STRAIGHTWAW,
	PL_JG__SWASHKAF,
	PL_JG__SYRIACWAW,
	PL_JG__TAH,
	PL_JG__TAW,
	PL_JG__TEHMARBUTA,
	PL_JG__TETH,
	PL_JG__WAW,
	PL_JG__YEH,
	PL_JG__YEHBARREE,
	PL_JG__YEHWITHTAIL,
	PL_JG__YUDH,
	PL_JG__YUDHHE,
	PL_JG__ZAIN,
	PL_JG__ZHAIN,
	PL_JOINC,
	PL_JT__C,
	PL_JT__D,
	PL_JT__L,
	PL_JT__R,
	PL_JT__T,
	PL_JT__U,
	PL_KALI,
	PL_KANA,
	PL_KANAEXTA,
	PL_KANASUP,
	PL_KANBUN,
	PL_KANGXI,
	PL_KATAKANAEXT,
	PL_KHAR,
	PL_KHMERSYMBOLS,
	PL_KHMR,
	PL_KHOJ,
	PL_KNDA,
	PL_KTHI,
	PL_L,
	PL_LANA,
	PL_LAO,
	PL_LATIN1,
	PL_LATINEXTA,
	PL_LATINEXTADDITIONAL,
	PL_LATINEXTB,
	PL_LATINEXTC,
	PL_LATINEXTD,
	PL_LATINEXTE,
	PL_LATN,
	PL_LB__AI,
	PL_LB__AL,
	PL_LB__B2,
	PL_LB__BA,
	PL_LB__BB,
	PL_LB__BK,
	PL_LB__CB,
	PL_LB__CJ,
	PL_LB__CL,
	PL_LB__CM,
	PL_LB__CP,
	PL_LB__CR,
	PL_LB__EB,
	PL_LB__EM,
	PL_LB__EX,
	PL_LB__GL,
	PL_LB__H2,
	PL_LB__H3,
	PL_LB__HL,
	PL_LB__HY,
	PL_LB__ID,
	PL_LB__IN,
	PL_LB__IS,
	PL_LB__LF,
	PL_LB__NL,
	PL_LB__NS,
	PL_LB__NU,
	PL_LB__OP,
	PL_LB__PO,
	PL_LB__PR,
	PL_LB__QU,
	PL_LB__SA,
	PL_LB__SG_perl_aux,
	PL_LB__SP,
	PL_LB__SY,
	PL_LB__WJ,
	PL_LB__XX,
	PL_LB__ZW,
	PL_LB__ZWJ,
	PL_LEPC,
	PL_LETTERLIKESYMBOLS,
	PL_LIMB,
	PL_LINA,
	PL_LINB,
	PL_LINEARBIDEOGRAMS,
	PL_LINEARBSYLLABARY,
	PL_LISU,
	PL_LL,
	PL_LM,
	PL_LO,
	PL_LOE,
	PL_LOWSURROGATES,
	PL_LT,
	PL_LU,
	PL_LYCI,
	PL_LYDI,
	PL_L_AMP_,
	PL_M,
	PL_MAHJ,
	PL_MAHJONG,
	PL_MAND,
	PL_MANI,
	PL_MARC,
	PL_MATH,
	PL_MATHALPHANUM,
	PL_MATHOPERATORS,
	PL_MC,
	PL_ME,
	PL_MEETEIMAYEKEXT,
	PL_MEND,
	PL_MERC,
	PL_MERO,
	PL_MIAO,
	PL_MISCARROWS,
	PL_MISCMATHSYMBOLSA,
	PL_MISCMATHSYMBOLSB,
	PL_MISCPICTOGRAPHS,
	PL_MISCSYMBOLS,
	PL_MISCTECHNICAL,
	PL_MLYM,
	PL_MN,
	PL_MODI,
	PL_MODIFIERLETTERS,
	PL_MODIFIERTONELETTERS,
	PL_MONG,
	PL_MONGOLIANSUP,
	PL_MRO,
	PL_MTEI,
	PL_MULT,
	PL_MUSIC,
	PL_MYANMAREXTA,
	PL_MYANMAREXTB,
	PL_MYMR,
	PL_N,
	PL_NARB,
	PL_NB,
	PL_NBAT,
	PL_NCHAR,
	PL_NEWA,
	PL_NFCQC__M,
	PL_NFCQC__Y,
	PL_NFDQC__Y,
	PL_NFKCQC__N,
	PL_NFKCQC__Y,
	PL_NFKDQC__N,
	PL_NKO,
	PL_NL,
	PL_NO,
	PL_NSHU,
	PL_NT__DI,
	PL_NT__NU,
	PL_NUMBERFORMS,
	PL_NV__0,
	PL_NV__1,
	PL_NV__10,
	PL_NV__100,
	PL_NV__1000,
	PL_NV__10000,
	PL_NV__100000,
	PL_NV__1000000,
	PL_NV__100000000,
	PL_NV__10000000000,
	PL_NV__1000000000000,
	PL_NV__11,
	PL_NV__11_SLASH_12,
	PL_NV__11_SLASH_2,
	PL_NV__12,
	PL_NV__13,
	PL_NV__13_SLASH_2,
	PL_NV__14,
	PL_NV__15,
	PL_NV__15_SLASH_2,
	PL_NV__16,
	PL_NV__17,
	PL_NV__17_SLASH_2,
	PL_NV__18,
	PL_NV__19,
	PL_NV__1_SLASH_10,
	PL_NV__1_SLASH_12,
	PL_NV__1_SLASH_16,
	PL_NV__1_SLASH_160,
	PL_NV__1_SLASH_2,
	PL_NV__1_SLASH_20,
	PL_NV__1_SLASH_3,
	PL_NV__1_SLASH_4,
	PL_NV__1_SLASH_40,
	PL_NV__1_SLASH_5,
	PL_NV__1_SLASH_6,
	PL_NV__1_SLASH_7,
	PL_NV__1_SLASH_8,
	PL_NV__1_SLASH_9,
	PL_NV__2,
	PL_NV__20,
	PL_NV__200,
	PL_NV__2000,
	PL_NV__20000,
	PL_NV__200000,
	PL_NV__21,
	PL_NV__216000,
	PL_NV__22,
	PL_NV__23,
	PL_NV__24,
	PL_NV__25,
	PL_NV__26,
	PL_NV__27,
	PL_NV__28,
	PL_NV__29,
	PL_NV__2_SLASH_3,
	PL_NV__2_SLASH_5,
	PL_NV__3,
	PL_NV__30,
	PL_NV__300,
	PL_NV__3000,
	PL_NV__30000,
	PL_NV__300000,
	PL_NV__31,
	PL_NV__32,
	PL_NV__33,
	PL_NV__34,
	PL_NV__35,
	PL_NV__36,
	PL_NV__37,
	PL_NV__38,
	PL_NV__39,
	PL_NV__3_SLASH_16,
	PL_NV__3_SLASH_2,
	PL_NV__3_SLASH_20,
	PL_NV__3_SLASH_4,
	PL_NV__3_SLASH_5,
	PL_NV__3_SLASH_8,
	PL_NV__3_SLASH_80,
	PL_NV__4,
	PL_NV__40,
	PL_NV__400,
	PL_NV__4000,
	PL_NV__40000,
	PL_NV__400000,
	PL_NV__41,
	PL_NV__42,
	PL_NV__43,
	PL_NV__432000,
	PL_NV__44,
	PL_NV__45,
	PL_NV__46,
	PL_NV__47,
	PL_NV__48,
	PL_NV__49,
	PL_NV__4_SLASH_5,
	PL_NV__5,
	PL_NV__50,
	PL_NV__500,
	PL_NV__5000,
	PL_NV__50000,
	PL_NV__500000,
	PL_NV__5_SLASH_12,
	PL_NV__5_SLASH_2,
	PL_NV__5_SLASH_6,
	PL_NV__5_SLASH_8,
	PL_NV__6,
	PL_NV__60,
	PL_NV__600,
	PL_NV__6000,
	PL_NV__60000,
	PL_NV__600000,
	PL_NV__7,
	PL_NV__70,
	PL_NV__700,
	PL_NV__7000,
	PL_NV__70000,
	PL_NV__700000,
	PL_NV__7_SLASH_12,
	PL_NV__7_SLASH_2,
	PL_NV__7_SLASH_8,
	PL_NV__8,
	PL_NV__80,
	PL_NV__800,
	PL_NV__8000,
	PL_NV__80000,
	PL_NV__800000,
	PL_NV__9,
	PL_NV__90,
	PL_NV__900,
	PL_NV__9000,
	PL_NV__90000,
	PL_NV__900000,
	PL_NV__9_SLASH_2,
	PL_NV__NAN,
	PL_NV___MINUS_1_SLASH_2,
	PL_OCR,
	PL_OGAM,
	PL_OLCK,
	PL_ORKH,
	PL_ORNAMENTALDINGBATS,
	PL_ORYA,
	PL_OSGE,
	PL_OSMA,
	PL_P,
	PL_PALM,
	PL_PATSYN,
	PL_PATWS,
	PL_PAUC,
	PL_PC,
	PL_PCM,
	PL_PD,
	PL_PE,
	PL_PERM,
	PL_PF,
	PL_PHAG,
	PL_PHAISTOS,
	PL_PHLI,
	PL_PHLP,
	PL_PHNX,
	PL_PHONETICEXT,
	PL_PHONETICEXTSUP,
	PL_PI,
	PL_PLAYINGCARDS,
	PL_PO,
	PL_POSIXALNUM,
	PL_POSIXALPHA,
	PL_POSIXBLANK,
	PL_POSIXCNTRL,
	PL_POSIXDIGIT,
	PL_POSIXGRAPH,
	PL_POSIXLOWER,
	PL_POSIXPRINT,
	PL_POSIXPUNCT,
	PL_POSIXSPACE,
	PL_POSIXUPPER,
	PL_POSIXWORD,
	PL_POSIXXDIGIT,
	PL_PRTI,
	PL_PS,
	PL_PUA,
	PL_QAAI,
	PL_QMARK,
	PL_RADICAL,
	PL_RI,
	PL_RJNG,
	PL_RUMI,
	PL_RUNR,
	PL_S,
	PL_SAMR,
	PL_SARB,
	PL_SAUR,
	PL_SB__AT,
	PL_SB__CL,
	PL_SB__EX,
	PL_SB__FO,
	PL_SB__LE,
	PL_SB__LO,
	PL_SB__SC,
	PL_SB__SE,
	PL_SB__SP,
	PL_SB__ST,
	PL_SB__UP,
	PL_SB__XX,
	PL_SC,
	PL_SC__ADLM,
	PL_SC__ARAB,
	PL_SC__ARMN,
	PL_SC__BENG,
	PL_SC__BOPO,
	PL_SC__BUGI,
	PL_SC__BUHD,
	PL_SC__CAKM,
	PL_SC__COPT,
	PL_SC__CPRT,
	PL_SC__CYRL,
	PL_SC__DEVA,
	PL_SC__DUPL,
	PL_SC__GEOR,
	PL_SC__GLAG,
	PL_SC__GRAN,
	PL_SC__GREK,
	PL_SC__GUJR,
	PL_SC__GURU,
	PL_SC__HAN,
	PL_SC__HANG,
	PL_SC__HANO,
	PL_SC__HIRA,
	PL_SC__JAVA,
	PL_SC__KALI,
	PL_SC__KANA,
	PL_SC__KHOJ,
	PL_SC__KNDA,
	PL_SC__KTHI,
	PL_SC__LATN,
	PL_SC__LIMB,
	PL_SC__LINA,
	PL_SC__LINB,
	PL_SC__MAHJ,
	PL_SC__MAND,
	PL_SC__MANI,
	PL_SC__MLYM,
	PL_SC__MODI,
	PL_SC__MONG,
	PL_SC__MULT,
	PL_SC__MYMR,
	PL_SC__ORYA,
	PL_SC__PERM,
	PL_SC__PHAG,
	PL_SC__PHLP,
	PL_SC__QAAI,
	PL_SC__SHRD,
	PL_SC__SIND,
	PL_SC__SINH,
	PL_SC__SYLO,
	PL_SC__SYRC,
	PL_SC__TAGB,
	PL_SC__TAKR,
	PL_SC__TALE,
	PL_SC__TAML,
	PL_SC__TELU,
	PL_SC__TGLG,
	PL_SC__THAA,
	PL_SC__TIRH,
	PL_SC__YI,
	PL_SC__ZYYY,
	PL_SD,
	PL_SGNW,
	PL_SHAW,
	PL_SHORTHANDFORMATCONTROLS,
	PL_SHRD,
	PL_SIDD,
	PL_SIND,
	PL_SINH,
	PL_SINHALAARCHAICNUMBERS,
	PL_SK,
	PL_SM,
	PL_SMALLFORMS,
	PL_SO,
	PL_SORA,
	PL_SOYO,
	PL_SPECIALS,
	PL_STERM,
	PL_SUND,
	PL_SUNDANESESUP,
	PL_SUPARROWSA,
	PL_SUPARROWSB,
	PL_SUPARROWSC,
	PL_SUPERANDSUB,
	PL_SUPMATHOPERATORS,
	PL_SUPPUAA,
	PL_SUPPUAB,
	PL_SUPPUNCTUATION,
	PL_SUPSYMBOLSANDPICTOGRAPHS,
	PL_SUTTONSIGNWRITING,
	PL_SYLO,
	PL_SYRC,
	PL_SYRIACSUP,
	PL_TAGB,
	PL_TAGS,
	PL_TAIXUANJING,
	PL_TAKR,
	PL_TALE,
	PL_TALU,
	PL_TAML,
	PL_TANG,
	PL_TANGUTCOMPONENTS,
	PL_TAVT,
	PL_TELU,
	PL_TERM,
	PL_TFNG,
	PL_TGLG,
	PL_THAA,
	PL_THAI,
	PL_TIBT,
	PL_TIRH,
	PL_TRANSPORTANDMAP,
	PL_UCAS,
	PL_UCASEXT,
	PL_UGAR,
	PL_UIDEO,
	PL_VAI,
	PL_VEDICEXT,
	PL_VERTICALFORMS,
	PL_VERTSPACE,
	PL_VO__R,
	PL_VO__TR,
	PL_VO__TU,
	PL_VO__U,
	PL_VS,
	PL_VSSUP,
	PL_WARA,
	PL_WB__DQ,
	PL_WB__EB,
	PL_WB__EBG,
	PL_WB__EX,
	PL_WB__EXTEND,
	PL_WB__FO,
	PL_WB__GAZ,
	PL_WB__KA,
	PL_WB__LE,
	PL_WB__MB,
	PL_WB__ML,
	PL_WB__MN,
	PL_WB__NL,
	PL_WB__NU,
	PL_WB__SQ,
	PL_WB__XX,
	PL_XIDC,
	PL_XIDS,
	PL_XPEO,
	PL_XPOSIXALNUM,
	PL_XPOSIXALPHA,
	PL_XPOSIXBLANK,
	PL_XPOSIXCNTRL,
	PL_XPOSIXDIGIT,
	PL_XPOSIXGRAPH,
	PL_XPOSIXLOWER,
	PL_XPOSIXPRINT,
	PL_XPOSIXPUNCT,
	PL_XPOSIXSPACE,
	PL_XPOSIXUPPER,
	PL_XPOSIXWORD,
	PL_XPOSIXXDIGIT,
	PL_XSUX,
	PL_YI,
	PL_YIJING,
	PL_YIRADICALS,
	PL_YISYLLABLES,
	PL_Z,
	PL_ZANB,
	PL_ZL,
	PL_ZP,
	PL_ZS,
	PL_ZYYY,
	PL_ZZZZ,
	PL__PERL_ANY_FOLDS,
	PL__PERL_CHARNAME_BEGIN,
	PL__PERL_CHARNAME_CONTINUE,
	PL__PERL_FOLDS_TO_MULTI_CHAR,
	PL__PERL_IDCONT,
	PL__PERL_IDSTART,
	PL__PERL_PROBLEMATIC_LOCALE_FOLDEDS_START,
	PL__PERL_PROBLEMATIC_LOCALE_FOLDS,
	PL__PERL_QUOTEMETA
} binary_invlist_enum;

#define MAX_UNI_KEYWORD_INDEX PL__PERL_QUOTEMETA

#define PL_ADLAM   PL_ADLM
#define PL_AGE__10_DOT_0   PL_AGE__10
#define PL_AGE__1_DOT_1   PL_IN__1_DOT_1
#define PL_AGE__2_DOT_0   PL_AGE__2
#define PL_AGE__3_DOT_0   PL_AGE__3
#define PL_AGE__4_DOT_0   PL_AGE__4
#define PL_AGE__5_DOT_0   PL_AGE__5
#define PL_AGE__6_DOT_0   PL_AGE__6
#define PL_AGE__7_DOT_0   PL_AGE__7
#define PL_AGE__8_DOT_0   PL_AGE__8
#define PL_AGE__9_DOT_0   PL_AGE__9
#define PL_AGE__UNASSIGNED   PL_AGE__NA
#define PL_AGE__V100   PL_AGE__10
#define PL_AGE__V11   PL_IN__1_DOT_1
#define PL_AGE__V20   PL_AGE__2
#define PL_AGE__V21   PL_AGE__2_DOT_1
#define PL_AGE__V30   PL_AGE__3
#define PL_AGE__V31   PL_AGE__3_DOT_1
#define PL_AGE__V32   PL_AGE__3_DOT_2
#define PL_AGE__V40   PL_AGE__4
#define PL_AGE__V41   PL_AGE__4_DOT_1
#define PL_AGE__V50   PL_AGE__5
#define PL_AGE__V51   PL_AGE__5_DOT_1
#define PL_AGE__V52   PL_AGE__5_DOT_2
#define PL_AGE__V60   PL_AGE__6
#define PL_AGE__V61   PL_AGE__6_DOT_1
#define PL_AGE__V62   PL_AGE__6_DOT_2
#define PL_AGE__V63   PL_AGE__6_DOT_3
#define PL_AGE__V70   PL_AGE__7
#define PL_AGE__V80   PL_AGE__8
#define PL_AGE__V90   PL_AGE__9
#define PL_AHEX   PL_POSIXXDIGIT
#define PL_AHEX__F   -PL_POSIXXDIGIT
#define PL_AHEX__FALSE   -PL_POSIXXDIGIT
#define PL_AHEX__N   -PL_POSIXXDIGIT
#define PL_AHEX__NO   -PL_POSIXXDIGIT
#define PL_AHEX__T   PL_POSIXXDIGIT
#define PL_AHEX__TRUE   PL_POSIXXDIGIT
#define PL_AHEX__Y   PL_POSIXXDIGIT
#define PL_AHEX__YES   PL_POSIXXDIGIT
#define PL_ALCHEMICALSYMBOLS   PL_ALCHEMICAL
#define PL_ALNUM   PL_XPOSIXALNUM
#define PL_ALPHA   PL_XPOSIXALPHA
#define PL_ALPHABETIC   PL_XPOSIXALPHA
#define PL_ALPHABETIC   PL_XPOSIXALPHA
#define PL_ALPHABETICPRESENTATIONFORMS   PL_ALPHABETICPF
#define PL_ALPHABETIC__F   -PL_XPOSIXALPHA
#define PL_ALPHABETIC__FALSE   -PL_XPOSIXALPHA
#define PL_ALPHABETIC__N   -PL_XPOSIXALPHA
#define PL_ALPHABETIC__NO   -PL_XPOSIXALPHA
#define PL_ALPHABETIC__T   PL_XPOSIXALPHA
#define PL_ALPHABETIC__TRUE   PL_XPOSIXALPHA
#define PL_ALPHABETIC__Y   PL_XPOSIXALPHA
#define PL_ALPHABETIC__YES   PL_XPOSIXALPHA
#define PL_ALPHA__F   -PL_XPOSIXALPHA
#define PL_ALPHA__FALSE   -PL_XPOSIXALPHA
#define PL_ALPHA__N   -PL_XPOSIXALPHA
#define PL_ALPHA__NO   -PL_XPOSIXALPHA
#define PL_ALPHA__T   PL_XPOSIXALPHA
#define PL_ALPHA__TRUE   PL_XPOSIXALPHA
#define PL_ALPHA__Y   PL_XPOSIXALPHA
#define PL_ALPHA__YES   PL_XPOSIXALPHA
#define PL_ANATOLIANHIEROGLYPHS   PL_HLUW
#define PL_ANCIENTGREEKMUSICALNOTATION   PL_ANCIENTGREEKMUSIC
#define PL_ARABIC   PL_ARAB
#define PL_ARABICEXTENDEDA   PL_ARABICEXTA
#define PL_ARABICMATHEMATICALALPHABETICSYMBOLS   PL_ARABICMATH
#define PL_ARABICPRESENTATIONFORMSA   PL_ARABICPFA
#define PL_ARABICPRESENTATIONFORMSB   PL_ARABICPFB
#define PL_ARABICSUPPLEMENT   PL_ARABICSUP
#define PL_ARMENIAN   PL_ARMN
#define PL_ASCIIHEXDIGIT   PL_POSIXXDIGIT
#define PL_ASCIIHEXDIGIT   PL_POSIXXDIGIT
#define PL_ASCIIHEXDIGIT__F   -PL_POSIXXDIGIT
#define PL_ASCIIHEXDIGIT__FALSE   -PL_POSIXXDIGIT
#define PL_ASCIIHEXDIGIT__N   -PL_POSIXXDIGIT
#define PL_ASCIIHEXDIGIT__NO   -PL_POSIXXDIGIT
#define PL_ASCIIHEXDIGIT__T   PL_POSIXXDIGIT
#define PL_ASCIIHEXDIGIT__TRUE   PL_POSIXXDIGIT
#define PL_ASCIIHEXDIGIT__Y   PL_POSIXXDIGIT
#define PL_ASCIIHEXDIGIT__YES   PL_POSIXXDIGIT
#define PL_AVESTAN   PL_AVST
#define PL_BALINESE   PL_BALI
#define PL_BAMUM   PL_BAMU
#define PL_BAMUMSUPPLEMENT   PL_BAMUMSUP
#define PL_BASICLATIN   PL_ASCII
#define PL_BASSAVAH   PL_BASS
#define PL_BATAK   PL_BATK
#define PL_BC__ARABICLETTER   PL_BC__AL
#define PL_BC__ARABICNUMBER   PL_BC__AN
#define PL_BC__BOUNDARYNEUTRAL   PL_BC__BN
#define PL_BC__COMMONSEPARATOR   PL_BC__CS
#define PL_BC__EUROPEANNUMBER   PL_BC__EN
#define PL_BC__EUROPEANSEPARATOR   PL_BC__ES
#define PL_BC__EUROPEANTERMINATOR   PL_BC__ET
#define PL_BC__FIRSTSTRONGISOLATE   PL_BC__FSI
#define PL_BC__LEFTTORIGHT   PL_BC__L
#define PL_BC__LEFTTORIGHTEMBEDDING   PL_BC__LRE
#define PL_BC__LEFTTORIGHTISOLATE   PL_BC__LRI
#define PL_BC__LEFTTORIGHTOVERRIDE   PL_BC__LRO
#define PL_BC__NONSPACINGMARK   PL_BC__NSM
#define PL_BC__OTHERNEUTRAL   PL_BC__ON
#define PL_BC__PARAGRAPHSEPARATOR   PL_BC__B
#define PL_BC__POPDIRECTIONALFORMAT   PL_BC__PDF
#define PL_BC__POPDIRECTIONALISOLATE   PL_BC__PDI
#define PL_BC__RIGHTTOLEFT   PL_BC__R
#define PL_BC__RIGHTTOLEFTEMBEDDING   PL_BC__RLE
#define PL_BC__RIGHTTOLEFTISOLATE   PL_BC__RLI
#define PL_BC__RIGHTTOLEFTOVERRIDE   PL_BC__RLO
#define PL_BC__SEGMENTSEPARATOR   PL_BC__S
#define PL_BC__WHITESPACE   PL_BC__WS
#define PL_BENGALI   PL_BENG
#define PL_BHAIKSUKI   PL_BHKS
#define PL_BIDICLASS__AL   PL_BC__AL
#define PL_BIDICLASS__AN   PL_BC__AN
#define PL_BIDICLASS__ARABICLETTER   PL_BC__AL
#define PL_BIDICLASS__ARABICNUMBER   PL_BC__AN
#define PL_BIDICLASS__B   PL_BC__B
#define PL_BIDICLASS__BN   PL_BC__BN
#define PL_BIDICLASS__BOUNDARYNEUTRAL   PL_BC__BN
#define PL_BIDICLASS__COMMONSEPARATOR   PL_BC__CS
#define PL_BIDICLASS__CS   PL_BC__CS
#define PL_BIDICLASS__EN   PL_BC__EN
#define PL_BIDICLASS__ES   PL_BC__ES
#define PL_BIDICLASS__ET   PL_BC__ET
#define PL_BIDICLASS__EUROPEANNUMBER   PL_BC__EN
#define PL_BIDICLASS__EUROPEANSEPARATOR   PL_BC__ES
#define PL_BIDICLASS__EUROPEANTERMINATOR   PL_BC__ET
#define PL_BIDICLASS__FIRSTSTRONGISOLATE   PL_BC__FSI
#define PL_BIDICLASS__FSI   PL_BC__FSI
#define PL_BIDICLASS__L   PL_BC__L
#define PL_BIDICLASS__LEFTTORIGHT   PL_BC__L
#define PL_BIDICLASS__LEFTTORIGHTEMBEDDING   PL_BC__LRE
#define PL_BIDICLASS__LEFTTORIGHTISOLATE   PL_BC__LRI
#define PL_BIDICLASS__LEFTTORIGHTOVERRIDE   PL_BC__LRO
#define PL_BIDICLASS__LRE   PL_BC__LRE
#define PL_BIDICLASS__LRI   PL_BC__LRI
#define PL_BIDICLASS__LRO   PL_BC__LRO
#define PL_BIDICLASS__NONSPACINGMARK   PL_BC__NSM
#define PL_BIDICLASS__NSM   PL_BC__NSM
#define PL_BIDICLASS__ON   PL_BC__ON
#define PL_BIDICLASS__OTHERNEUTRAL   PL_BC__ON
#define PL_BIDICLASS__PARAGRAPHSEPARATOR   PL_BC__B
#define PL_BIDICLASS__PDF   PL_BC__PDF
#define PL_BIDICLASS__PDI   PL_BC__PDI
#define PL_BIDICLASS__POPDIRECTIONALFORMAT   PL_BC__PDF
#define PL_BIDICLASS__POPDIRECTIONALISOLATE   PL_BC__PDI
#define PL_BIDICLASS__R   PL_BC__R
#define PL_BIDICLASS__RIGHTTOLEFT   PL_BC__R
#define PL_BIDICLASS__RIGHTTOLEFTEMBEDDING   PL_BC__RLE
#define PL_BIDICLASS__RIGHTTOLEFTISOLATE   PL_BC__RLI
#define PL_BIDICLASS__RIGHTTOLEFTOVERRIDE   PL_BC__RLO
#define PL_BIDICLASS__RLE   PL_BC__RLE
#define PL_BIDICLASS__RLI   PL_BC__RLI
#define PL_BIDICLASS__RLO   PL_BC__RLO
#define PL_BIDICLASS__S   PL_BC__S
#define PL_BIDICLASS__SEGMENTSEPARATOR   PL_BC__S
#define PL_BIDICLASS__WHITESPACE   PL_BC__WS
#define PL_BIDICLASS__WS   PL_BC__WS
#define PL_BIDICONTROL   PL_BIDIC
#define PL_BIDICONTROL   PL_BIDIC
#define PL_BIDICONTROL__F   -PL_BIDIC
#define PL_BIDICONTROL__FALSE   -PL_BIDIC
#define PL_BIDICONTROL__N   -PL_BIDIC
#define PL_BIDICONTROL__NO   -PL_BIDIC
#define PL_BIDICONTROL__T   PL_BIDIC
#define PL_BIDICONTROL__TRUE   PL_BIDIC
#define PL_BIDICONTROL__Y   PL_BIDIC
#define PL_BIDICONTROL__YES   PL_BIDIC
#define PL_BIDIC__F   -PL_BIDIC
#define PL_BIDIC__FALSE   -PL_BIDIC
#define PL_BIDIC__N   -PL_BIDIC
#define PL_BIDIC__NO   -PL_BIDIC
#define PL_BIDIC__T   PL_BIDIC
#define PL_BIDIC__TRUE   PL_BIDIC
#define PL_BIDIC__Y   PL_BIDIC
#define PL_BIDIC__YES   PL_BIDIC
#define PL_BIDIMIRRORED   PL_BIDIM
#define PL_BIDIMIRRORED   PL_BIDIM
#define PL_BIDIMIRRORED__F   -PL_BIDIM
#define PL_BIDIMIRRORED__FALSE   -PL_BIDIM
#define PL_BIDIMIRRORED__N   -PL_BIDIM
#define PL_BIDIMIRRORED__NO   -PL_BIDIM
#define PL_BIDIMIRRORED__T   PL_BIDIM
#define PL_BIDIMIRRORED__TRUE   PL_BIDIM
#define PL_BIDIMIRRORED__Y   PL_BIDIM
#define PL_BIDIMIRRORED__YES   PL_BIDIM
#define PL_BIDIM__F   -PL_BIDIM
#define PL_BIDIM__FALSE   -PL_BIDIM
#define PL_BIDIM__N   -PL_BIDIM
#define PL_BIDIM__NO   -PL_BIDIM
#define PL_BIDIM__T   PL_BIDIM
#define PL_BIDIM__TRUE   PL_BIDIM
#define PL_BIDIM__Y   PL_BIDIM
#define PL_BIDIM__YES   PL_BIDIM
#define PL_BIDIPAIREDBRACKETTYPE__C   PL_BPT__C
#define PL_BIDIPAIREDBRACKETTYPE__CLOSE   PL_BPT__C
#define PL_BIDIPAIREDBRACKETTYPE__N   PL_BPT__N
#define PL_BIDIPAIREDBRACKETTYPE__NONE   PL_BPT__N
#define PL_BIDIPAIREDBRACKETTYPE__O   PL_BPT__O
#define PL_BIDIPAIREDBRACKETTYPE__OPEN   PL_BPT__O
#define PL_BLANK   PL_XPOSIXBLANK
#define PL_BLK__ADLAM   PL_INADLAM
#define PL_BLK__AEGEANNUMBERS   PL_AEGEANNUMBERS
#define PL_BLK__AHOM   PL_INAHOM
#define PL_BLK__ALCHEMICAL   PL_ALCHEMICAL
#define PL_BLK__ALCHEMICALSYMBOLS   PL_ALCHEMICAL
#define PL_BLK__ALPHABETICPF   PL_ALPHABETICPF
#define PL_BLK__ALPHABETICPRESENTATIONFORMS   PL_ALPHABETICPF
#define PL_BLK__ANATOLIANHIEROGLYPHS   PL_INANATOLIANHIEROGLYPHS
#define PL_BLK__ANCIENTGREEKMUSIC   PL_ANCIENTGREEKMUSIC
#define PL_BLK__ANCIENTGREEKMUSICALNOTATION   PL_ANCIENTGREEKMUSIC
#define PL_BLK__ANCIENTGREEKNUMBERS   PL_ANCIENTGREEKNUMBERS
#define PL_BLK__ANCIENTSYMBOLS   PL_ANCIENTSYMBOLS
#define PL_BLK__ARABIC   PL_INARABIC
#define PL_BLK__ARABICEXTA   PL_ARABICEXTA
#define PL_BLK__ARABICEXTENDEDA   PL_ARABICEXTA
#define PL_BLK__ARABICMATH   PL_ARABICMATH
#define PL_BLK__ARABICMATHEMATICALALPHABETICSYMBOLS   PL_ARABICMATH
#define PL_BLK__ARABICPFA   PL_ARABICPFA
#define PL_BLK__ARABICPFB   PL_ARABICPFB
#define PL_BLK__ARABICPRESENTATIONFORMSA   PL_ARABICPFA
#define PL_BLK__ARABICPRESENTATIONFORMSB   PL_ARABICPFB
#define PL_BLK__ARABICSUP   PL_ARABICSUP
#define PL_BLK__ARABICSUPPLEMENT   PL_ARABICSUP
#define PL_BLK__ARMENIAN   PL_INARMENIAN
#define PL_BLK__ARROWS   PL_ARROWS
#define PL_BLK__ASCII   PL_ASCII
#define PL_BLK__AVESTAN   PL_INAVESTAN
#define PL_BLK__BALINESE   PL_INBALINESE
#define PL_BLK__BAMUM   PL_INBAMUM
#define PL_BLK__BAMUMSUP   PL_BAMUMSUP
#define PL_BLK__BAMUMSUPPLEMENT   PL_BAMUMSUP
#define PL_BLK__BASICLATIN   PL_ASCII
#define PL_BLK__BASSAVAH   PL_INBASSAVAH
#define PL_BLK__BATAK   PL_INBATAK
#define PL_BLK__BENGALI   PL_INBENGALI
#define PL_BLK__BHAIKSUKI   PL_INBHAIKSUKI
#define PL_BLK__BLOCKELEMENTS   PL_BLOCKELEMENTS
#define PL_BLK__BOPOMOFO   PL_INBOPOMOFO
#define PL_BLK__BOPOMOFOEXT   PL_BOPOMOFOEXT
#define PL_BLK__BOPOMOFOEXTENDED   PL_BOPOMOFOEXT
#define PL_BLK__BOXDRAWING   PL_BOXDRAWING
#define PL_BLK__BRAHMI   PL_INBRAHMI
#define PL_BLK__BRAILLE   PL_BRAI
#define PL_BLK__BRAILLEPATTERNS   PL_BRAI
#define PL_BLK__BUGINESE   PL_INBUGINESE
#define PL_BLK__BUHID   PL_INBUHID
#define PL_BLK__BYZANTINEMUSIC   PL_BYZANTINEMUSIC
#define PL_BLK__BYZANTINEMUSICALSYMBOLS   PL_BYZANTINEMUSIC
#define PL_BLK__CANADIANSYLLABICS   PL_UCAS
#define PL_BLK__CARIAN   PL_INCARIAN
#define PL_BLK__CAUCASIANALBANIAN   PL_INCAUCASIANALBANIAN
#define PL_BLK__CHAKMA   PL_INCHAKMA
#define PL_BLK__CHAM   PL_INCHAM
#define PL_BLK__CHEROKEE   PL_INCHEROKEE
#define PL_BLK__CHEROKEESUP   PL_CHEROKEESUP
#define PL_BLK__CHEROKEESUPPLEMENT   PL_CHEROKEESUP
#define PL_BLK__CJK   PL_CJK
#define PL_BLK__CJKCOMPAT   PL_CJKCOMPAT
#define PL_BLK__CJKCOMPATFORMS   PL_CJKCOMPATFORMS
#define PL_BLK__CJKCOMPATIBILITY   PL_CJKCOMPAT
#define PL_BLK__CJKCOMPATIBILITYFORMS   PL_CJKCOMPATFORMS
#define PL_BLK__CJKCOMPATIBILITYIDEOGRAPHS   PL_CJKCOMPATIDEOGRAPHS
#define PL_BLK__CJKCOMPATIBILITYIDEOGRAPHSSUPPLEMENT   PL_CJKCOMPATIDEOGRAPHSSUP
#define PL_BLK__CJKCOMPATIDEOGRAPHS   PL_CJKCOMPATIDEOGRAPHS
#define PL_BLK__CJKCOMPATIDEOGRAPHSSUP   PL_CJKCOMPATIDEOGRAPHSSUP
#define PL_BLK__CJKEXTA   PL_CJKEXTA
#define PL_BLK__CJKEXTB   PL_CJKEXTB
#define PL_BLK__CJKEXTC   PL_CJKEXTC
#define PL_BLK__CJKEXTD   PL_CJKEXTD
#define PL_BLK__CJKEXTE   PL_CJKEXTE
#define PL_BLK__CJKEXTF   PL_CJKEXTF
#define PL_BLK__CJKRADICALSSUP   PL_CJKRADICALSSUP
#define PL_BLK__CJKRADICALSSUPPLEMENT   PL_CJKRADICALSSUP
#define PL_BLK__CJKSTROKES   PL_CJKSTROKES
#define PL_BLK__CJKSYMBOLS   PL_CJKSYMBOLS
#define PL_BLK__CJKSYMBOLSANDPUNCTUATION   PL_CJKSYMBOLS
#define PL_BLK__CJKUNIFIEDIDEOGRAPHS   PL_CJK
#define PL_BLK__CJKUNIFIEDIDEOGRAPHSEXTENSIONA   PL_CJKEXTA
#define PL_BLK__CJKUNIFIEDIDEOGRAPHSEXTENSIONB   PL_CJKEXTB
#define PL_BLK__CJKUNIFIEDIDEOGRAPHSEXTENSIONC   PL_CJKEXTC
#define PL_BLK__CJKUNIFIEDIDEOGRAPHSEXTENSIOND   PL_CJKEXTD
#define PL_BLK__CJKUNIFIEDIDEOGRAPHSEXTENSIONE   PL_CJKEXTE
#define PL_BLK__CJKUNIFIEDIDEOGRAPHSEXTENSIONF   PL_CJKEXTF
#define PL_BLK__COMBININGDIACRITICALMARKS   PL_DIACRITICALS
#define PL_BLK__COMBININGDIACRITICALMARKSEXTENDED   PL_DIACRITICALSEXT
#define PL_BLK__COMBININGDIACRITICALMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_BLK__COMBININGDIACRITICALMARKSSUPPLEMENT   PL_DIACRITICALSSUP
#define PL_BLK__COMBININGHALFMARKS   PL_HALFMARKS
#define PL_BLK__COMBININGMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_BLK__COMMONINDICNUMBERFORMS   PL_INDICNUMBERFORMS
#define PL_BLK__COMPATJAMO   PL_COMPATJAMO
#define PL_BLK__CONTROLPICTURES   PL_CONTROLPICTURES
#define PL_BLK__COPTIC   PL_INCOPTIC
#define PL_BLK__COPTICEPACTNUMBERS   PL_COPTICEPACTNUMBERS
#define PL_BLK__COUNTINGROD   PL_COUNTINGROD
#define PL_BLK__COUNTINGRODNUMERALS   PL_COUNTINGROD
#define PL_BLK__CUNEIFORM   PL_INCUNEIFORM
#define PL_BLK__CUNEIFORMNUMBERS   PL_CUNEIFORMNUMBERS
#define PL_BLK__CUNEIFORMNUMBERSANDPUNCTUATION   PL_CUNEIFORMNUMBERS
#define PL_BLK__CURRENCYSYMBOLS   PL_CURRENCYSYMBOLS
#define PL_BLK__CYPRIOTSYLLABARY   PL_CYPRIOTSYLLABARY
#define PL_BLK__CYRILLIC   PL_INCYRILLIC
#define PL_BLK__CYRILLICEXTA   PL_CYRILLICEXTA
#define PL_BLK__CYRILLICEXTB   PL_CYRILLICEXTB
#define PL_BLK__CYRILLICEXTC   PL_CYRILLICEXTC
#define PL_BLK__CYRILLICEXTENDEDA   PL_CYRILLICEXTA
#define PL_BLK__CYRILLICEXTENDEDB   PL_CYRILLICEXTB
#define PL_BLK__CYRILLICEXTENDEDC   PL_CYRILLICEXTC
#define PL_BLK__CYRILLICSUP   PL_CYRILLICSUP
#define PL_BLK__CYRILLICSUPPLEMENT   PL_CYRILLICSUP
#define PL_BLK__CYRILLICSUPPLEMENTARY   PL_CYRILLICSUP
#define PL_BLK__DESERET   PL_DSRT
#define PL_BLK__DEVANAGARI   PL_INDEVANAGARI
#define PL_BLK__DEVANAGARIEXT   PL_DEVANAGARIEXT
#define PL_BLK__DEVANAGARIEXTENDED   PL_DEVANAGARIEXT
#define PL_BLK__DIACRITICALS   PL_DIACRITICALS
#define PL_BLK__DIACRITICALSEXT   PL_DIACRITICALSEXT
#define PL_BLK__DIACRITICALSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_BLK__DIACRITICALSSUP   PL_DIACRITICALSSUP
#define PL_BLK__DINGBATS   PL_DINGBATS
#define PL_BLK__DOMINO   PL_DOMINO
#define PL_BLK__DOMINOTILES   PL_DOMINO
#define PL_BLK__DUPLOYAN   PL_INDUPLOYAN
#define PL_BLK__EARLYDYNASTICCUNEIFORM   PL_EARLYDYNASTICCUNEIFORM
#define PL_BLK__EGYPTIANHIEROGLYPHS   PL_INEGYPTIANHIEROGLYPHS
#define PL_BLK__ELBASAN   PL_INELBASAN
#define PL_BLK__EMOTICONS   PL_EMOTICONS
#define PL_BLK__ENCLOSEDALPHANUM   PL_ENCLOSEDALPHANUM
#define PL_BLK__ENCLOSEDALPHANUMERICS   PL_ENCLOSEDALPHANUM
#define PL_BLK__ENCLOSEDALPHANUMERICSUPPLEMENT   PL_ENCLOSEDALPHANUMSUP
#define PL_BLK__ENCLOSEDALPHANUMSUP   PL_ENCLOSEDALPHANUMSUP
#define PL_BLK__ENCLOSEDCJK   PL_ENCLOSEDCJK
#define PL_BLK__ENCLOSEDCJKLETTERSANDMONTHS   PL_ENCLOSEDCJK
#define PL_BLK__ENCLOSEDIDEOGRAPHICSUP   PL_ENCLOSEDIDEOGRAPHICSUP
#define PL_BLK__ENCLOSEDIDEOGRAPHICSUPPLEMENT   PL_ENCLOSEDIDEOGRAPHICSUP
#define PL_BLK__ETHIOPIC   PL_INETHIOPIC
#define PL_BLK__ETHIOPICEXT   PL_ETHIOPICEXT
#define PL_BLK__ETHIOPICEXTA   PL_ETHIOPICEXTA
#define PL_BLK__ETHIOPICEXTENDED   PL_ETHIOPICEXT
#define PL_BLK__ETHIOPICEXTENDEDA   PL_ETHIOPICEXTA
#define PL_BLK__ETHIOPICSUP   PL_ETHIOPICSUP
#define PL_BLK__ETHIOPICSUPPLEMENT   PL_ETHIOPICSUP
#define PL_BLK__GENERALPUNCTUATION   PL_INPUNCTUATION
#define PL_BLK__GEOMETRICSHAPES   PL_GEOMETRICSHAPES
#define PL_BLK__GEOMETRICSHAPESEXT   PL_GEOMETRICSHAPESEXT
#define PL_BLK__GEOMETRICSHAPESEXTENDED   PL_GEOMETRICSHAPESEXT
#define PL_BLK__GEORGIAN   PL_INGEORGIAN
#define PL_BLK__GEORGIANSUP   PL_GEORGIANSUP
#define PL_BLK__GEORGIANSUPPLEMENT   PL_GEORGIANSUP
#define PL_BLK__GLAGOLITIC   PL_INGLAGOLITIC
#define PL_BLK__GLAGOLITICSUP   PL_GLAGOLITICSUP
#define PL_BLK__GLAGOLITICSUPPLEMENT   PL_GLAGOLITICSUP
#define PL_BLK__GOTHIC   PL_INGOTHIC
#define PL_BLK__GRANTHA   PL_INGRANTHA
#define PL_BLK__GREEK   PL_INGREEK
#define PL_BLK__GREEKANDCOPTIC   PL_INGREEK
#define PL_BLK__GREEKEXT   PL_GREEKEXT
#define PL_BLK__GREEKEXTENDED   PL_GREEKEXT
#define PL_BLK__GUJARATI   PL_INGUJARATI
#define PL_BLK__GURMUKHI   PL_INGURMUKHI
#define PL_BLK__HALFANDFULLFORMS   PL_HALFANDFULLFORMS
#define PL_BLK__HALFMARKS   PL_HALFMARKS
#define PL_BLK__HALFWIDTHANDFULLWIDTHFORMS   PL_HALFANDFULLFORMS
#define PL_BLK__HANGUL   PL_INHANGUL
#define PL_BLK__HANGULCOMPATIBILITYJAMO   PL_COMPATJAMO
#define PL_BLK__HANGULJAMO   PL_JAMO
#define PL_BLK__HANGULJAMOEXTENDEDA   PL_JAMOEXTA
#define PL_BLK__HANGULJAMOEXTENDEDB   PL_JAMOEXTB
#define PL_BLK__HANGULSYLLABLES   PL_INHANGUL
#define PL_BLK__HANUNOO   PL_INHANUNOO
#define PL_BLK__HATRAN   PL_INHATRAN
#define PL_BLK__HEBREW   PL_INHEBREW
#define PL_BLK__HIGHPRIVATEUSESURROGATES   PL_HIGHPUSURROGATES
#define PL_BLK__HIGHPUSURROGATES   PL_HIGHPUSURROGATES
#define PL_BLK__HIGHSURROGATES   PL_HIGHSURROGATES
#define PL_BLK__HIRAGANA   PL_INHIRAGANA
#define PL_BLK__IDC   PL_INIDC
#define PL_BLK__IDEOGRAPHICDESCRIPTIONCHARACTERS   PL_INIDC
#define PL_BLK__IDEOGRAPHICSYMBOLS   PL_IDEOGRAPHICSYMBOLS
#define PL_BLK__IDEOGRAPHICSYMBOLSANDPUNCTUATION   PL_IDEOGRAPHICSYMBOLS
#define PL_BLK__IMPERIALARAMAIC   PL_INIMPERIALARAMAIC
#define PL_BLK__INDICNUMBERFORMS   PL_INDICNUMBERFORMS
#define PL_BLK__INSCRIPTIONALPAHLAVI   PL_ININSCRIPTIONALPAHLAVI
#define PL_BLK__INSCRIPTIONALPARTHIAN   PL_ININSCRIPTIONALPARTHIAN
#define PL_BLK__IPAEXT   PL_IPAEXT
#define PL_BLK__IPAEXTENSIONS   PL_IPAEXT
#define PL_BLK__JAMO   PL_JAMO
#define PL_BLK__JAMOEXTA   PL_JAMOEXTA
#define PL_BLK__JAMOEXTB   PL_JAMOEXTB
#define PL_BLK__JAVANESE   PL_INJAVANESE
#define PL_BLK__KAITHI   PL_INKAITHI
#define PL_BLK__KANAEXTA   PL_KANAEXTA
#define PL_BLK__KANAEXTENDEDA   PL_KANAEXTA
#define PL_BLK__KANASUP   PL_KANASUP
#define PL_BLK__KANASUPPLEMENT   PL_KANASUP
#define PL_BLK__KANBUN   PL_KANBUN
#define PL_BLK__KANGXI   PL_KANGXI
#define PL_BLK__KANGXIRADICALS   PL_KANGXI
#define PL_BLK__KANNADA   PL_INKANNADA
#define PL_BLK__KATAKANA   PL_INKATAKANA
#define PL_BLK__KATAKANAEXT   PL_KATAKANAEXT
#define PL_BLK__KATAKANAPHONETICEXTENSIONS   PL_KATAKANAEXT
#define PL_BLK__KAYAHLI   PL_KALI
#define PL_BLK__KHAROSHTHI   PL_INKHAROSHTHI
#define PL_BLK__KHMER   PL_INKHMER
#define PL_BLK__KHMERSYMBOLS   PL_KHMERSYMBOLS
#define PL_BLK__KHOJKI   PL_INKHOJKI
#define PL_BLK__KHUDAWADI   PL_INKHUDAWADI
#define PL_BLK__LAO   PL_INLAO
#define PL_BLK__LATIN1   PL_LATIN1
#define PL_BLK__LATIN1SUP   PL_LATIN1
#define PL_BLK__LATIN1SUPPLEMENT   PL_LATIN1
#define PL_BLK__LATINEXTA   PL_LATINEXTA
#define PL_BLK__LATINEXTADDITIONAL   PL_LATINEXTADDITIONAL
#define PL_BLK__LATINEXTB   PL_LATINEXTB
#define PL_BLK__LATINEXTC   PL_LATINEXTC
#define PL_BLK__LATINEXTD   PL_LATINEXTD
#define PL_BLK__LATINEXTE   PL_LATINEXTE
#define PL_BLK__LATINEXTENDEDA   PL_LATINEXTA
#define PL_BLK__LATINEXTENDEDADDITIONAL   PL_LATINEXTADDITIONAL
#define PL_BLK__LATINEXTENDEDB   PL_LATINEXTB
#define PL_BLK__LATINEXTENDEDC   PL_LATINEXTC
#define PL_BLK__LATINEXTENDEDD   PL_LATINEXTD
#define PL_BLK__LATINEXTENDEDE   PL_LATINEXTE
#define PL_BLK__LEPCHA   PL_INLEPCHA
#define PL_BLK__LETTERLIKESYMBOLS   PL_LETTERLIKESYMBOLS
#define PL_BLK__LIMBU   PL_INLIMBU
#define PL_BLK__LINEARA   PL_INLINEARA
#define PL_BLK__LINEARBIDEOGRAMS   PL_LINEARBIDEOGRAMS
#define PL_BLK__LINEARBSYLLABARY   PL_LINEARBSYLLABARY
#define PL_BLK__LISU   PL_LISU
#define PL_BLK__LOWSURROGATES   PL_LOWSURROGATES
#define PL_BLK__LYCIAN   PL_INLYCIAN
#define PL_BLK__LYDIAN   PL_INLYDIAN
#define PL_BLK__MAHAJANI   PL_INMAHAJANI
#define PL_BLK__MAHJONG   PL_MAHJONG
#define PL_BLK__MAHJONGTILES   PL_MAHJONG
#define PL_BLK__MALAYALAM   PL_INMALAYALAM
#define PL_BLK__MANDAIC   PL_INMANDAIC
#define PL_BLK__MANICHAEAN   PL_INMANICHAEAN
#define PL_BLK__MARCHEN   PL_INMARCHEN
#define PL_BLK__MASARAMGONDI   PL_INMASARAMGONDI
#define PL_BLK__MATHALPHANUM   PL_MATHALPHANUM
#define PL_BLK__MATHEMATICALALPHANUMERICSYMBOLS   PL_MATHALPHANUM
#define PL_BLK__MATHEMATICALOPERATORS   PL_MATHOPERATORS
#define PL_BLK__MATHOPERATORS   PL_MATHOPERATORS
#define PL_BLK__MEETEIMAYEK   PL_INMEETEIMAYEK
#define PL_BLK__MEETEIMAYEKEXT   PL_MEETEIMAYEKEXT
#define PL_BLK__MEETEIMAYEKEXTENSIONS   PL_MEETEIMAYEKEXT
#define PL_BLK__MENDEKIKAKUI   PL_INMENDEKIKAKUI
#define PL_BLK__MEROITICCURSIVE   PL_INMEROITICCURSIVE
#define PL_BLK__MEROITICHIEROGLYPHS   PL_MERO
#define PL_BLK__MIAO   PL_INMIAO
#define PL_BLK__MISCARROWS   PL_MISCARROWS
#define PL_BLK__MISCELLANEOUSMATHEMATICALSYMBOLSA   PL_MISCMATHSYMBOLSA
#define PL_BLK__MISCELLANEOUSMATHEMATICALSYMBOLSB   PL_MISCMATHSYMBOLSB
#define PL_BLK__MISCELLANEOUSSYMBOLS   PL_MISCSYMBOLS
#define PL_BLK__MISCELLANEOUSSYMBOLSANDARROWS   PL_MISCARROWS
#define PL_BLK__MISCELLANEOUSSYMBOLSANDPICTOGRAPHS   PL_MISCPICTOGRAPHS
#define PL_BLK__MISCELLANEOUSTECHNICAL   PL_MISCTECHNICAL
#define PL_BLK__MISCMATHSYMBOLSA   PL_MISCMATHSYMBOLSA
#define PL_BLK__MISCMATHSYMBOLSB   PL_MISCMATHSYMBOLSB
#define PL_BLK__MISCPICTOGRAPHS   PL_MISCPICTOGRAPHS
#define PL_BLK__MISCSYMBOLS   PL_MISCSYMBOLS
#define PL_BLK__MISCTECHNICAL   PL_MISCTECHNICAL
#define PL_BLK__MODI   PL_INMODI
#define PL_BLK__MODIFIERLETTERS   PL_MODIFIERLETTERS
#define PL_BLK__MODIFIERTONELETTERS   PL_MODIFIERTONELETTERS
#define PL_BLK__MONGOLIAN   PL_INMONGOLIAN
#define PL_BLK__MONGOLIANSUP   PL_MONGOLIANSUP
#define PL_BLK__MONGOLIANSUPPLEMENT   PL_MONGOLIANSUP
#define PL_BLK__MRO   PL_INMRO
#define PL_BLK__MULTANI   PL_INMULTANI
#define PL_BLK__MUSIC   PL_MUSIC
#define PL_BLK__MUSICALSYMBOLS   PL_MUSIC
#define PL_BLK__MYANMAR   PL_INMYANMAR
#define PL_BLK__MYANMAREXTA   PL_MYANMAREXTA
#define PL_BLK__MYANMAREXTB   PL_MYANMAREXTB
#define PL_BLK__MYANMAREXTENDEDA   PL_MYANMAREXTA
#define PL_BLK__MYANMAREXTENDEDB   PL_MYANMAREXTB
#define PL_BLK__NABATAEAN   PL_INNABATAEAN
#define PL_BLK__NB   PL_NB
#define PL_BLK__NEWA   PL_INNEWA
#define PL_BLK__NEWTAILUE   PL_INNEWTAILUE
#define PL_BLK__NKO   PL_INNKO
#define PL_BLK__NOBLOCK   PL_NB
#define PL_BLK__NUMBERFORMS   PL_NUMBERFORMS
#define PL_BLK__NUSHU   PL_INNUSHU
#define PL_BLK__OCR   PL_OCR
#define PL_BLK__OGHAM   PL_INOGHAM
#define PL_BLK__OLCHIKI   PL_OLCK
#define PL_BLK__OLDHUNGARIAN   PL_INOLDHUNGARIAN
#define PL_BLK__OLDITALIC   PL_INOLDITALIC
#define PL_BLK__OLDNORTHARABIAN   PL_NARB
#define PL_BLK__OLDPERMIC   PL_INOLDPERMIC
#define PL_BLK__OLDPERSIAN   PL_INOLDPERSIAN
#define PL_BLK__OLDSOUTHARABIAN   PL_SARB
#define PL_BLK__OLDTURKIC   PL_INOLDTURKIC
#define PL_BLK__OPTICALCHARACTERRECOGNITION   PL_OCR
#define PL_BLK__ORIYA   PL_INORIYA
#define PL_BLK__ORNAMENTALDINGBATS   PL_ORNAMENTALDINGBATS
#define PL_BLK__OSAGE   PL_INOSAGE
#define PL_BLK__OSMANYA   PL_INOSMANYA
#define PL_BLK__PAHAWHHMONG   PL_INPAHAWHHMONG
#define PL_BLK__PALMYRENE   PL_PALM
#define PL_BLK__PAUCINHAU   PL_INPAUCINHAU
#define PL_BLK__PHAGSPA   PL_INPHAGSPA
#define PL_BLK__PHAISTOS   PL_PHAISTOS
#define PL_BLK__PHAISTOSDISC   PL_PHAISTOS
#define PL_BLK__PHOENICIAN   PL_INPHOENICIAN
#define PL_BLK__PHONETICEXT   PL_PHONETICEXT
#define PL_BLK__PHONETICEXTENSIONS   PL_PHONETICEXT
#define PL_BLK__PHONETICEXTENSIONSSUPPLEMENT   PL_PHONETICEXTSUP
#define PL_BLK__PHONETICEXTSUP   PL_PHONETICEXTSUP
#define PL_BLK__PLAYINGCARDS   PL_PLAYINGCARDS
#define PL_BLK__PRIVATEUSE   PL_PUA
#define PL_BLK__PRIVATEUSEAREA   PL_PUA
#define PL_BLK__PSALTERPAHLAVI   PL_INPSALTERPAHLAVI
#define PL_BLK__PUA   PL_PUA
#define PL_BLK__PUNCTUATION   PL_INPUNCTUATION
#define PL_BLK__REJANG   PL_INREJANG
#define PL_BLK__RUMI   PL_RUMI
#define PL_BLK__RUMINUMERALSYMBOLS   PL_RUMI
#define PL_BLK__RUNIC   PL_INRUNIC
#define PL_BLK__SAMARITAN   PL_INSAMARITAN
#define PL_BLK__SAURASHTRA   PL_INSAURASHTRA
#define PL_BLK__SHARADA   PL_INSHARADA
#define PL_BLK__SHAVIAN   PL_SHAW
#define PL_BLK__SHORTHANDFORMATCONTROLS   PL_SHORTHANDFORMATCONTROLS
#define PL_BLK__SIDDHAM   PL_INSIDDHAM
#define PL_BLK__SINHALA   PL_INSINHALA
#define PL_BLK__SINHALAARCHAICNUMBERS   PL_SINHALAARCHAICNUMBERS
#define PL_BLK__SMALLFORMS   PL_SMALLFORMS
#define PL_BLK__SMALLFORMVARIANTS   PL_SMALLFORMS
#define PL_BLK__SORASOMPENG   PL_INSORASOMPENG
#define PL_BLK__SOYOMBO   PL_INSOYOMBO
#define PL_BLK__SPACINGMODIFIERLETTERS   PL_MODIFIERLETTERS
#define PL_BLK__SPECIALS   PL_SPECIALS
#define PL_BLK__SUNDANESE   PL_INSUNDANESE
#define PL_BLK__SUNDANESESUP   PL_SUNDANESESUP
#define PL_BLK__SUNDANESESUPPLEMENT   PL_SUNDANESESUP
#define PL_BLK__SUPARROWSA   PL_SUPARROWSA
#define PL_BLK__SUPARROWSB   PL_SUPARROWSB
#define PL_BLK__SUPARROWSC   PL_SUPARROWSC
#define PL_BLK__SUPERANDSUB   PL_SUPERANDSUB
#define PL_BLK__SUPERSCRIPTSANDSUBSCRIPTS   PL_SUPERANDSUB
#define PL_BLK__SUPMATHOPERATORS   PL_SUPMATHOPERATORS
#define PL_BLK__SUPPLEMENTALARROWSA   PL_SUPARROWSA
#define PL_BLK__SUPPLEMENTALARROWSB   PL_SUPARROWSB
#define PL_BLK__SUPPLEMENTALARROWSC   PL_SUPARROWSC
#define PL_BLK__SUPPLEMENTALMATHEMATICALOPERATORS   PL_SUPMATHOPERATORS
#define PL_BLK__SUPPLEMENTALPUNCTUATION   PL_SUPPUNCTUATION
#define PL_BLK__SUPPLEMENTALSYMBOLSANDPICTOGRAPHS   PL_SUPSYMBOLSANDPICTOGRAPHS
#define PL_BLK__SUPPLEMENTARYPRIVATEUSEAREAA   PL_SUPPUAA
#define PL_BLK__SUPPLEMENTARYPRIVATEUSEAREAB   PL_SUPPUAB
#define PL_BLK__SUPPUAA   PL_SUPPUAA
#define PL_BLK__SUPPUAB   PL_SUPPUAB
#define PL_BLK__SUPPUNCTUATION   PL_SUPPUNCTUATION
#define PL_BLK__SUPSYMBOLSANDPICTOGRAPHS   PL_SUPSYMBOLSANDPICTOGRAPHS
#define PL_BLK__SUTTONSIGNWRITING   PL_SUTTONSIGNWRITING
#define PL_BLK__SYLOTINAGRI   PL_INSYLOTINAGRI
#define PL_BLK__SYRIAC   PL_INSYRIAC
#define PL_BLK__SYRIACSUP   PL_SYRIACSUP
#define PL_BLK__SYRIACSUPPLEMENT   PL_SYRIACSUP
#define PL_BLK__TAGALOG   PL_INTAGALOG
#define PL_BLK__TAGBANWA   PL_INTAGBANWA
#define PL_BLK__TAGS   PL_TAGS
#define PL_BLK__TAILE   PL_INTAILE
#define PL_BLK__TAITHAM   PL_INTAITHAM
#define PL_BLK__TAIVIET   PL_INTAIVIET
#define PL_BLK__TAIXUANJING   PL_TAIXUANJING
#define PL_BLK__TAIXUANJINGSYMBOLS   PL_TAIXUANJING
#define PL_BLK__TAKRI   PL_INTAKRI
#define PL_BLK__TAMIL   PL_INTAMIL
#define PL_BLK__TANGUT   PL_INTANGUT
#define PL_BLK__TANGUTCOMPONENTS   PL_TANGUTCOMPONENTS
#define PL_BLK__TELUGU   PL_INTELUGU
#define PL_BLK__THAANA   PL_INTHAANA
#define PL_BLK__THAI   PL_INTHAI
#define PL_BLK__TIBETAN   PL_INTIBETAN
#define PL_BLK__TIFINAGH   PL_INTIFINAGH
#define PL_BLK__TIRHUTA   PL_INTIRHUTA
#define PL_BLK__TRANSPORTANDMAP   PL_TRANSPORTANDMAP
#define PL_BLK__TRANSPORTANDMAPSYMBOLS   PL_TRANSPORTANDMAP
#define PL_BLK__UCAS   PL_UCAS
#define PL_BLK__UCASEXT   PL_UCASEXT
#define PL_BLK__UGARITIC   PL_INUGARITIC
#define PL_BLK__UNIFIEDCANADIANABORIGINALSYLLABICS   PL_UCAS
#define PL_BLK__UNIFIEDCANADIANABORIGINALSYLLABICSEXTENDED   PL_UCASEXT
#define PL_BLK__VAI   PL_INVAI
#define PL_BLK__VARIATIONSELECTORS   PL_INVS
#define PL_BLK__VARIATIONSELECTORSSUPPLEMENT   PL_VSSUP
#define PL_BLK__VEDICEXT   PL_VEDICEXT
#define PL_BLK__VEDICEXTENSIONS   PL_VEDICEXT
#define PL_BLK__VERTICALFORMS   PL_VERTICALFORMS
#define PL_BLK__VS   PL_INVS
#define PL_BLK__VSSUP   PL_VSSUP
#define PL_BLK__WARANGCITI   PL_INWARANGCITI
#define PL_BLK__YIJING   PL_YIJING
#define PL_BLK__YIJINGHEXAGRAMSYMBOLS   PL_YIJING
#define PL_BLK__YIRADICALS   PL_YIRADICALS
#define PL_BLK__YISYLLABLES   PL_YISYLLABLES
#define PL_BLK__ZANABAZARSQUARE   PL_INZANABAZARSQUARE
#define PL_BLOCK__ADLAM   PL_INADLAM
#define PL_BLOCK__AEGEANNUMBERS   PL_AEGEANNUMBERS
#define PL_BLOCK__AHOM   PL_INAHOM
#define PL_BLOCK__ALCHEMICAL   PL_ALCHEMICAL
#define PL_BLOCK__ALCHEMICALSYMBOLS   PL_ALCHEMICAL
#define PL_BLOCK__ALPHABETICPF   PL_ALPHABETICPF
#define PL_BLOCK__ALPHABETICPRESENTATIONFORMS   PL_ALPHABETICPF
#define PL_BLOCK__ANATOLIANHIEROGLYPHS   PL_INANATOLIANHIEROGLYPHS
#define PL_BLOCK__ANCIENTGREEKMUSIC   PL_ANCIENTGREEKMUSIC
#define PL_BLOCK__ANCIENTGREEKMUSICALNOTATION   PL_ANCIENTGREEKMUSIC
#define PL_BLOCK__ANCIENTGREEKNUMBERS   PL_ANCIENTGREEKNUMBERS
#define PL_BLOCK__ANCIENTSYMBOLS   PL_ANCIENTSYMBOLS
#define PL_BLOCK__ARABIC   PL_INARABIC
#define PL_BLOCK__ARABICEXTA   PL_ARABICEXTA
#define PL_BLOCK__ARABICEXTENDEDA   PL_ARABICEXTA
#define PL_BLOCK__ARABICMATH   PL_ARABICMATH
#define PL_BLOCK__ARABICMATHEMATICALALPHABETICSYMBOLS   PL_ARABICMATH
#define PL_BLOCK__ARABICPFA   PL_ARABICPFA
#define PL_BLOCK__ARABICPFB   PL_ARABICPFB
#define PL_BLOCK__ARABICPRESENTATIONFORMSA   PL_ARABICPFA
#define PL_BLOCK__ARABICPRESENTATIONFORMSB   PL_ARABICPFB
#define PL_BLOCK__ARABICSUP   PL_ARABICSUP
#define PL_BLOCK__ARABICSUPPLEMENT   PL_ARABICSUP
#define PL_BLOCK__ARMENIAN   PL_INARMENIAN
#define PL_BLOCK__ARROWS   PL_ARROWS
#define PL_BLOCK__ASCII   PL_ASCII
#define PL_BLOCK__AVESTAN   PL_INAVESTAN
#define PL_BLOCK__BALINESE   PL_INBALINESE
#define PL_BLOCK__BAMUM   PL_INBAMUM
#define PL_BLOCK__BAMUMSUP   PL_BAMUMSUP
#define PL_BLOCK__BAMUMSUPPLEMENT   PL_BAMUMSUP
#define PL_BLOCK__BASICLATIN   PL_ASCII
#define PL_BLOCK__BASSAVAH   PL_INBASSAVAH
#define PL_BLOCK__BATAK   PL_INBATAK
#define PL_BLOCK__BENGALI   PL_INBENGALI
#define PL_BLOCK__BHAIKSUKI   PL_INBHAIKSUKI
#define PL_BLOCK__BLOCKELEMENTS   PL_BLOCKELEMENTS
#define PL_BLOCK__BOPOMOFO   PL_INBOPOMOFO
#define PL_BLOCK__BOPOMOFOEXT   PL_BOPOMOFOEXT
#define PL_BLOCK__BOPOMOFOEXTENDED   PL_BOPOMOFOEXT
#define PL_BLOCK__BOXDRAWING   PL_BOXDRAWING
#define PL_BLOCK__BRAHMI   PL_INBRAHMI
#define PL_BLOCK__BRAILLE   PL_BRAI
#define PL_BLOCK__BRAILLEPATTERNS   PL_BRAI
#define PL_BLOCK__BUGINESE   PL_INBUGINESE
#define PL_BLOCK__BUHID   PL_INBUHID
#define PL_BLOCK__BYZANTINEMUSIC   PL_BYZANTINEMUSIC
#define PL_BLOCK__BYZANTINEMUSICALSYMBOLS   PL_BYZANTINEMUSIC
#define PL_BLOCK__CANADIANSYLLABICS   PL_UCAS
#define PL_BLOCK__CARIAN   PL_INCARIAN
#define PL_BLOCK__CAUCASIANALBANIAN   PL_INCAUCASIANALBANIAN
#define PL_BLOCK__CHAKMA   PL_INCHAKMA
#define PL_BLOCK__CHAM   PL_INCHAM
#define PL_BLOCK__CHEROKEE   PL_INCHEROKEE
#define PL_BLOCK__CHEROKEESUP   PL_CHEROKEESUP
#define PL_BLOCK__CHEROKEESUPPLEMENT   PL_CHEROKEESUP
#define PL_BLOCK__CJK   PL_CJK
#define PL_BLOCK__CJKCOMPAT   PL_CJKCOMPAT
#define PL_BLOCK__CJKCOMPATFORMS   PL_CJKCOMPATFORMS
#define PL_BLOCK__CJKCOMPATIBILITY   PL_CJKCOMPAT
#define PL_BLOCK__CJKCOMPATIBILITYFORMS   PL_CJKCOMPATFORMS
#define PL_BLOCK__CJKCOMPATIBILITYIDEOGRAPHS   PL_CJKCOMPATIDEOGRAPHS
#define PL_BLOCK__CJKCOMPATIBILITYIDEOGRAPHSSUPPLEMENT   PL_CJKCOMPATIDEOGRAPHSSUP
#define PL_BLOCK__CJKCOMPATIDEOGRAPHS   PL_CJKCOMPATIDEOGRAPHS
#define PL_BLOCK__CJKCOMPATIDEOGRAPHSSUP   PL_CJKCOMPATIDEOGRAPHSSUP
#define PL_BLOCK__CJKEXTA   PL_CJKEXTA
#define PL_BLOCK__CJKEXTB   PL_CJKEXTB
#define PL_BLOCK__CJKEXTC   PL_CJKEXTC
#define PL_BLOCK__CJKEXTD   PL_CJKEXTD
#define PL_BLOCK__CJKEXTE   PL_CJKEXTE
#define PL_BLOCK__CJKEXTF   PL_CJKEXTF
#define PL_BLOCK__CJKRADICALSSUP   PL_CJKRADICALSSUP
#define PL_BLOCK__CJKRADICALSSUPPLEMENT   PL_CJKRADICALSSUP
#define PL_BLOCK__CJKSTROKES   PL_CJKSTROKES
#define PL_BLOCK__CJKSYMBOLS   PL_CJKSYMBOLS
#define PL_BLOCK__CJKSYMBOLSANDPUNCTUATION   PL_CJKSYMBOLS
#define PL_BLOCK__CJKUNIFIEDIDEOGRAPHS   PL_CJK
#define PL_BLOCK__CJKUNIFIEDIDEOGRAPHSEXTENSIONA   PL_CJKEXTA
#define PL_BLOCK__CJKUNIFIEDIDEOGRAPHSEXTENSIONB   PL_CJKEXTB
#define PL_BLOCK__CJKUNIFIEDIDEOGRAPHSEXTENSIONC   PL_CJKEXTC
#define PL_BLOCK__CJKUNIFIEDIDEOGRAPHSEXTENSIOND   PL_CJKEXTD
#define PL_BLOCK__CJKUNIFIEDIDEOGRAPHSEXTENSIONE   PL_CJKEXTE
#define PL_BLOCK__CJKUNIFIEDIDEOGRAPHSEXTENSIONF   PL_CJKEXTF
#define PL_BLOCK__COMBININGDIACRITICALMARKS   PL_DIACRITICALS
#define PL_BLOCK__COMBININGDIACRITICALMARKSEXTENDED   PL_DIACRITICALSEXT
#define PL_BLOCK__COMBININGDIACRITICALMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_BLOCK__COMBININGDIACRITICALMARKSSUPPLEMENT   PL_DIACRITICALSSUP
#define PL_BLOCK__COMBININGHALFMARKS   PL_HALFMARKS
#define PL_BLOCK__COMBININGMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_BLOCK__COMMONINDICNUMBERFORMS   PL_INDICNUMBERFORMS
#define PL_BLOCK__COMPATJAMO   PL_COMPATJAMO
#define PL_BLOCK__CONTROLPICTURES   PL_CONTROLPICTURES
#define PL_BLOCK__COPTIC   PL_INCOPTIC
#define PL_BLOCK__COPTICEPACTNUMBERS   PL_COPTICEPACTNUMBERS
#define PL_BLOCK__COUNTINGROD   PL_COUNTINGROD
#define PL_BLOCK__COUNTINGRODNUMERALS   PL_COUNTINGROD
#define PL_BLOCK__CUNEIFORM   PL_INCUNEIFORM
#define PL_BLOCK__CUNEIFORMNUMBERS   PL_CUNEIFORMNUMBERS
#define PL_BLOCK__CUNEIFORMNUMBERSANDPUNCTUATION   PL_CUNEIFORMNUMBERS
#define PL_BLOCK__CURRENCYSYMBOLS   PL_CURRENCYSYMBOLS
#define PL_BLOCK__CYPRIOTSYLLABARY   PL_CYPRIOTSYLLABARY
#define PL_BLOCK__CYRILLIC   PL_INCYRILLIC
#define PL_BLOCK__CYRILLICEXTA   PL_CYRILLICEXTA
#define PL_BLOCK__CYRILLICEXTB   PL_CYRILLICEXTB
#define PL_BLOCK__CYRILLICEXTC   PL_CYRILLICEXTC
#define PL_BLOCK__CYRILLICEXTENDEDA   PL_CYRILLICEXTA
#define PL_BLOCK__CYRILLICEXTENDEDB   PL_CYRILLICEXTB
#define PL_BLOCK__CYRILLICEXTENDEDC   PL_CYRILLICEXTC
#define PL_BLOCK__CYRILLICSUP   PL_CYRILLICSUP
#define PL_BLOCK__CYRILLICSUPPLEMENT   PL_CYRILLICSUP
#define PL_BLOCK__CYRILLICSUPPLEMENTARY   PL_CYRILLICSUP
#define PL_BLOCK__DESERET   PL_DSRT
#define PL_BLOCK__DEVANAGARI   PL_INDEVANAGARI
#define PL_BLOCK__DEVANAGARIEXT   PL_DEVANAGARIEXT
#define PL_BLOCK__DEVANAGARIEXTENDED   PL_DEVANAGARIEXT
#define PL_BLOCK__DIACRITICALS   PL_DIACRITICALS
#define PL_BLOCK__DIACRITICALSEXT   PL_DIACRITICALSEXT
#define PL_BLOCK__DIACRITICALSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_BLOCK__DIACRITICALSSUP   PL_DIACRITICALSSUP
#define PL_BLOCK__DINGBATS   PL_DINGBATS
#define PL_BLOCK__DOMINO   PL_DOMINO
#define PL_BLOCK__DOMINOTILES   PL_DOMINO
#define PL_BLOCK__DUPLOYAN   PL_INDUPLOYAN
#define PL_BLOCK__EARLYDYNASTICCUNEIFORM   PL_EARLYDYNASTICCUNEIFORM
#define PL_BLOCK__EGYPTIANHIEROGLYPHS   PL_INEGYPTIANHIEROGLYPHS
#define PL_BLOCK__ELBASAN   PL_INELBASAN
#define PL_BLOCK__EMOTICONS   PL_EMOTICONS
#define PL_BLOCK__ENCLOSEDALPHANUM   PL_ENCLOSEDALPHANUM
#define PL_BLOCK__ENCLOSEDALPHANUMERICS   PL_ENCLOSEDALPHANUM
#define PL_BLOCK__ENCLOSEDALPHANUMERICSUPPLEMENT   PL_ENCLOSEDALPHANUMSUP
#define PL_BLOCK__ENCLOSEDALPHANUMSUP   PL_ENCLOSEDALPHANUMSUP
#define PL_BLOCK__ENCLOSEDCJK   PL_ENCLOSEDCJK
#define PL_BLOCK__ENCLOSEDCJKLETTERSANDMONTHS   PL_ENCLOSEDCJK
#define PL_BLOCK__ENCLOSEDIDEOGRAPHICSUP   PL_ENCLOSEDIDEOGRAPHICSUP
#define PL_BLOCK__ENCLOSEDIDEOGRAPHICSUPPLEMENT   PL_ENCLOSEDIDEOGRAPHICSUP
#define PL_BLOCK__ETHIOPIC   PL_INETHIOPIC
#define PL_BLOCK__ETHIOPICEXT   PL_ETHIOPICEXT
#define PL_BLOCK__ETHIOPICEXTA   PL_ETHIOPICEXTA
#define PL_BLOCK__ETHIOPICEXTENDED   PL_ETHIOPICEXT
#define PL_BLOCK__ETHIOPICEXTENDEDA   PL_ETHIOPICEXTA
#define PL_BLOCK__ETHIOPICSUP   PL_ETHIOPICSUP
#define PL_BLOCK__ETHIOPICSUPPLEMENT   PL_ETHIOPICSUP
#define PL_BLOCK__GENERALPUNCTUATION   PL_INPUNCTUATION
#define PL_BLOCK__GEOMETRICSHAPES   PL_GEOMETRICSHAPES
#define PL_BLOCK__GEOMETRICSHAPESEXT   PL_GEOMETRICSHAPESEXT
#define PL_BLOCK__GEOMETRICSHAPESEXTENDED   PL_GEOMETRICSHAPESEXT
#define PL_BLOCK__GEORGIAN   PL_INGEORGIAN
#define PL_BLOCK__GEORGIANSUP   PL_GEORGIANSUP
#define PL_BLOCK__GEORGIANSUPPLEMENT   PL_GEORGIANSUP
#define PL_BLOCK__GLAGOLITIC   PL_INGLAGOLITIC
#define PL_BLOCK__GLAGOLITICSUP   PL_GLAGOLITICSUP
#define PL_BLOCK__GLAGOLITICSUPPLEMENT   PL_GLAGOLITICSUP
#define PL_BLOCK__GOTHIC   PL_INGOTHIC
#define PL_BLOCK__GRANTHA   PL_INGRANTHA
#define PL_BLOCK__GREEK   PL_INGREEK
#define PL_BLOCK__GREEKANDCOPTIC   PL_INGREEK
#define PL_BLOCK__GREEKEXT   PL_GREEKEXT
#define PL_BLOCK__GREEKEXTENDED   PL_GREEKEXT
#define PL_BLOCK__GUJARATI   PL_INGUJARATI
#define PL_BLOCK__GURMUKHI   PL_INGURMUKHI
#define PL_BLOCK__HALFANDFULLFORMS   PL_HALFANDFULLFORMS
#define PL_BLOCK__HALFMARKS   PL_HALFMARKS
#define PL_BLOCK__HALFWIDTHANDFULLWIDTHFORMS   PL_HALFANDFULLFORMS
#define PL_BLOCK__HANGUL   PL_INHANGUL
#define PL_BLOCK__HANGULCOMPATIBILITYJAMO   PL_COMPATJAMO
#define PL_BLOCK__HANGULJAMO   PL_JAMO
#define PL_BLOCK__HANGULJAMOEXTENDEDA   PL_JAMOEXTA
#define PL_BLOCK__HANGULJAMOEXTENDEDB   PL_JAMOEXTB
#define PL_BLOCK__HANGULSYLLABLES   PL_INHANGUL
#define PL_BLOCK__HANUNOO   PL_INHANUNOO
#define PL_BLOCK__HATRAN   PL_INHATRAN
#define PL_BLOCK__HEBREW   PL_INHEBREW
#define PL_BLOCK__HIGHPRIVATEUSESURROGATES   PL_HIGHPUSURROGATES
#define PL_BLOCK__HIGHPUSURROGATES   PL_HIGHPUSURROGATES
#define PL_BLOCK__HIGHSURROGATES   PL_HIGHSURROGATES
#define PL_BLOCK__HIRAGANA   PL_INHIRAGANA
#define PL_BLOCK__IDC   PL_INIDC
#define PL_BLOCK__IDEOGRAPHICDESCRIPTIONCHARACTERS   PL_INIDC
#define PL_BLOCK__IDEOGRAPHICSYMBOLS   PL_IDEOGRAPHICSYMBOLS
#define PL_BLOCK__IDEOGRAPHICSYMBOLSANDPUNCTUATION   PL_IDEOGRAPHICSYMBOLS
#define PL_BLOCK__IMPERIALARAMAIC   PL_INIMPERIALARAMAIC
#define PL_BLOCK__INDICNUMBERFORMS   PL_INDICNUMBERFORMS
#define PL_BLOCK__INSCRIPTIONALPAHLAVI   PL_ININSCRIPTIONALPAHLAVI
#define PL_BLOCK__INSCRIPTIONALPARTHIAN   PL_ININSCRIPTIONALPARTHIAN
#define PL_BLOCK__IPAEXT   PL_IPAEXT
#define PL_BLOCK__IPAEXTENSIONS   PL_IPAEXT
#define PL_BLOCK__JAMO   PL_JAMO
#define PL_BLOCK__JAMOEXTA   PL_JAMOEXTA
#define PL_BLOCK__JAMOEXTB   PL_JAMOEXTB
#define PL_BLOCK__JAVANESE   PL_INJAVANESE
#define PL_BLOCK__KAITHI   PL_INKAITHI
#define PL_BLOCK__KANAEXTA   PL_KANAEXTA
#define PL_BLOCK__KANAEXTENDEDA   PL_KANAEXTA
#define PL_BLOCK__KANASUP   PL_KANASUP
#define PL_BLOCK__KANASUPPLEMENT   PL_KANASUP
#define PL_BLOCK__KANBUN   PL_KANBUN
#define PL_BLOCK__KANGXI   PL_KANGXI
#define PL_BLOCK__KANGXIRADICALS   PL_KANGXI
#define PL_BLOCK__KANNADA   PL_INKANNADA
#define PL_BLOCK__KATAKANA   PL_INKATAKANA
#define PL_BLOCK__KATAKANAEXT   PL_KATAKANAEXT
#define PL_BLOCK__KATAKANAPHONETICEXTENSIONS   PL_KATAKANAEXT
#define PL_BLOCK__KAYAHLI   PL_KALI
#define PL_BLOCK__KHAROSHTHI   PL_INKHAROSHTHI
#define PL_BLOCK__KHMER   PL_INKHMER
#define PL_BLOCK__KHMERSYMBOLS   PL_KHMERSYMBOLS
#define PL_BLOCK__KHOJKI   PL_INKHOJKI
#define PL_BLOCK__KHUDAWADI   PL_INKHUDAWADI
#define PL_BLOCK__LAO   PL_INLAO
#define PL_BLOCK__LATIN1   PL_LATIN1
#define PL_BLOCK__LATIN1SUP   PL_LATIN1
#define PL_BLOCK__LATIN1SUPPLEMENT   PL_LATIN1
#define PL_BLOCK__LATINEXTA   PL_LATINEXTA
#define PL_BLOCK__LATINEXTADDITIONAL   PL_LATINEXTADDITIONAL
#define PL_BLOCK__LATINEXTB   PL_LATINEXTB
#define PL_BLOCK__LATINEXTC   PL_LATINEXTC
#define PL_BLOCK__LATINEXTD   PL_LATINEXTD
#define PL_BLOCK__LATINEXTE   PL_LATINEXTE
#define PL_BLOCK__LATINEXTENDEDA   PL_LATINEXTA
#define PL_BLOCK__LATINEXTENDEDADDITIONAL   PL_LATINEXTADDITIONAL
#define PL_BLOCK__LATINEXTENDEDB   PL_LATINEXTB
#define PL_BLOCK__LATINEXTENDEDC   PL_LATINEXTC
#define PL_BLOCK__LATINEXTENDEDD   PL_LATINEXTD
#define PL_BLOCK__LATINEXTENDEDE   PL_LATINEXTE
#define PL_BLOCK__LEPCHA   PL_INLEPCHA
#define PL_BLOCK__LETTERLIKESYMBOLS   PL_LETTERLIKESYMBOLS
#define PL_BLOCK__LIMBU   PL_INLIMBU
#define PL_BLOCK__LINEARA   PL_INLINEARA
#define PL_BLOCK__LINEARBIDEOGRAMS   PL_LINEARBIDEOGRAMS
#define PL_BLOCK__LINEARBSYLLABARY   PL_LINEARBSYLLABARY
#define PL_BLOCK__LISU   PL_LISU
#define PL_BLOCK__LOWSURROGATES   PL_LOWSURROGATES
#define PL_BLOCK__LYCIAN   PL_INLYCIAN
#define PL_BLOCK__LYDIAN   PL_INLYDIAN
#define PL_BLOCK__MAHAJANI   PL_INMAHAJANI
#define PL_BLOCK__MAHJONG   PL_MAHJONG
#define PL_BLOCK__MAHJONGTILES   PL_MAHJONG
#define PL_BLOCK__MALAYALAM   PL_INMALAYALAM
#define PL_BLOCK__MANDAIC   PL_INMANDAIC
#define PL_BLOCK__MANICHAEAN   PL_INMANICHAEAN
#define PL_BLOCK__MARCHEN   PL_INMARCHEN
#define PL_BLOCK__MASARAMGONDI   PL_INMASARAMGONDI
#define PL_BLOCK__MATHALPHANUM   PL_MATHALPHANUM
#define PL_BLOCK__MATHEMATICALALPHANUMERICSYMBOLS   PL_MATHALPHANUM
#define PL_BLOCK__MATHEMATICALOPERATORS   PL_MATHOPERATORS
#define PL_BLOCK__MATHOPERATORS   PL_MATHOPERATORS
#define PL_BLOCK__MEETEIMAYEK   PL_INMEETEIMAYEK
#define PL_BLOCK__MEETEIMAYEKEXT   PL_MEETEIMAYEKEXT
#define PL_BLOCK__MEETEIMAYEKEXTENSIONS   PL_MEETEIMAYEKEXT
#define PL_BLOCK__MENDEKIKAKUI   PL_INMENDEKIKAKUI
#define PL_BLOCK__MEROITICCURSIVE   PL_INMEROITICCURSIVE
#define PL_BLOCK__MEROITICHIEROGLYPHS   PL_MERO
#define PL_BLOCK__MIAO   PL_INMIAO
#define PL_BLOCK__MISCARROWS   PL_MISCARROWS
#define PL_BLOCK__MISCELLANEOUSMATHEMATICALSYMBOLSA   PL_MISCMATHSYMBOLSA
#define PL_BLOCK__MISCELLANEOUSMATHEMATICALSYMBOLSB   PL_MISCMATHSYMBOLSB
#define PL_BLOCK__MISCELLANEOUSSYMBOLS   PL_MISCSYMBOLS
#define PL_BLOCK__MISCELLANEOUSSYMBOLSANDARROWS   PL_MISCARROWS
#define PL_BLOCK__MISCELLANEOUSSYMBOLSANDPICTOGRAPHS   PL_MISCPICTOGRAPHS
#define PL_BLOCK__MISCELLANEOUSTECHNICAL   PL_MISCTECHNICAL
#define PL_BLOCK__MISCMATHSYMBOLSA   PL_MISCMATHSYMBOLSA
#define PL_BLOCK__MISCMATHSYMBOLSB   PL_MISCMATHSYMBOLSB
#define PL_BLOCK__MISCPICTOGRAPHS   PL_MISCPICTOGRAPHS
#define PL_BLOCK__MISCSYMBOLS   PL_MISCSYMBOLS
#define PL_BLOCK__MISCTECHNICAL   PL_MISCTECHNICAL
#define PL_BLOCK__MODI   PL_INMODI
#define PL_BLOCK__MODIFIERLETTERS   PL_MODIFIERLETTERS
#define PL_BLOCK__MODIFIERTONELETTERS   PL_MODIFIERTONELETTERS
#define PL_BLOCK__MONGOLIAN   PL_INMONGOLIAN
#define PL_BLOCK__MONGOLIANSUP   PL_MONGOLIANSUP
#define PL_BLOCK__MONGOLIANSUPPLEMENT   PL_MONGOLIANSUP
#define PL_BLOCK__MRO   PL_INMRO
#define PL_BLOCK__MULTANI   PL_INMULTANI
#define PL_BLOCK__MUSIC   PL_MUSIC
#define PL_BLOCK__MUSICALSYMBOLS   PL_MUSIC
#define PL_BLOCK__MYANMAR   PL_INMYANMAR
#define PL_BLOCK__MYANMAREXTA   PL_MYANMAREXTA
#define PL_BLOCK__MYANMAREXTB   PL_MYANMAREXTB
#define PL_BLOCK__MYANMAREXTENDEDA   PL_MYANMAREXTA
#define PL_BLOCK__MYANMAREXTENDEDB   PL_MYANMAREXTB
#define PL_BLOCK__NABATAEAN   PL_INNABATAEAN
#define PL_BLOCK__NB   PL_NB
#define PL_BLOCK__NEWA   PL_INNEWA
#define PL_BLOCK__NEWTAILUE   PL_INNEWTAILUE
#define PL_BLOCK__NKO   PL_INNKO
#define PL_BLOCK__NOBLOCK   PL_NB
#define PL_BLOCK__NUMBERFORMS   PL_NUMBERFORMS
#define PL_BLOCK__NUSHU   PL_INNUSHU
#define PL_BLOCK__OCR   PL_OCR
#define PL_BLOCK__OGHAM   PL_INOGHAM
#define PL_BLOCK__OLCHIKI   PL_OLCK
#define PL_BLOCK__OLDHUNGARIAN   PL_INOLDHUNGARIAN
#define PL_BLOCK__OLDITALIC   PL_INOLDITALIC
#define PL_BLOCK__OLDNORTHARABIAN   PL_NARB
#define PL_BLOCK__OLDPERMIC   PL_INOLDPERMIC
#define PL_BLOCK__OLDPERSIAN   PL_INOLDPERSIAN
#define PL_BLOCK__OLDSOUTHARABIAN   PL_SARB
#define PL_BLOCK__OLDTURKIC   PL_INOLDTURKIC
#define PL_BLOCK__OPTICALCHARACTERRECOGNITION   PL_OCR
#define PL_BLOCK__ORIYA   PL_INORIYA
#define PL_BLOCK__ORNAMENTALDINGBATS   PL_ORNAMENTALDINGBATS
#define PL_BLOCK__OSAGE   PL_INOSAGE
#define PL_BLOCK__OSMANYA   PL_INOSMANYA
#define PL_BLOCK__PAHAWHHMONG   PL_INPAHAWHHMONG
#define PL_BLOCK__PALMYRENE   PL_PALM
#define PL_BLOCK__PAUCINHAU   PL_INPAUCINHAU
#define PL_BLOCK__PHAGSPA   PL_INPHAGSPA
#define PL_BLOCK__PHAISTOS   PL_PHAISTOS
#define PL_BLOCK__PHAISTOSDISC   PL_PHAISTOS
#define PL_BLOCK__PHOENICIAN   PL_INPHOENICIAN
#define PL_BLOCK__PHONETICEXT   PL_PHONETICEXT
#define PL_BLOCK__PHONETICEXTENSIONS   PL_PHONETICEXT
#define PL_BLOCK__PHONETICEXTENSIONSSUPPLEMENT   PL_PHONETICEXTSUP
#define PL_BLOCK__PHONETICEXTSUP   PL_PHONETICEXTSUP
#define PL_BLOCK__PLAYINGCARDS   PL_PLAYINGCARDS
#define PL_BLOCK__PRIVATEUSE   PL_PUA
#define PL_BLOCK__PRIVATEUSEAREA   PL_PUA
#define PL_BLOCK__PSALTERPAHLAVI   PL_INPSALTERPAHLAVI
#define PL_BLOCK__PUA   PL_PUA
#define PL_BLOCK__PUNCTUATION   PL_INPUNCTUATION
#define PL_BLOCK__REJANG   PL_INREJANG
#define PL_BLOCK__RUMI   PL_RUMI
#define PL_BLOCK__RUMINUMERALSYMBOLS   PL_RUMI
#define PL_BLOCK__RUNIC   PL_INRUNIC
#define PL_BLOCK__SAMARITAN   PL_INSAMARITAN
#define PL_BLOCK__SAURASHTRA   PL_INSAURASHTRA
#define PL_BLOCK__SHARADA   PL_INSHARADA
#define PL_BLOCK__SHAVIAN   PL_SHAW
#define PL_BLOCK__SHORTHANDFORMATCONTROLS   PL_SHORTHANDFORMATCONTROLS
#define PL_BLOCK__SIDDHAM   PL_INSIDDHAM
#define PL_BLOCK__SINHALA   PL_INSINHALA
#define PL_BLOCK__SINHALAARCHAICNUMBERS   PL_SINHALAARCHAICNUMBERS
#define PL_BLOCK__SMALLFORMS   PL_SMALLFORMS
#define PL_BLOCK__SMALLFORMVARIANTS   PL_SMALLFORMS
#define PL_BLOCK__SORASOMPENG   PL_INSORASOMPENG
#define PL_BLOCK__SOYOMBO   PL_INSOYOMBO
#define PL_BLOCK__SPACINGMODIFIERLETTERS   PL_MODIFIERLETTERS
#define PL_BLOCK__SPECIALS   PL_SPECIALS
#define PL_BLOCK__SUNDANESE   PL_INSUNDANESE
#define PL_BLOCK__SUNDANESESUP   PL_SUNDANESESUP
#define PL_BLOCK__SUNDANESESUPPLEMENT   PL_SUNDANESESUP
#define PL_BLOCK__SUPARROWSA   PL_SUPARROWSA
#define PL_BLOCK__SUPARROWSB   PL_SUPARROWSB
#define PL_BLOCK__SUPARROWSC   PL_SUPARROWSC
#define PL_BLOCK__SUPERANDSUB   PL_SUPERANDSUB
#define PL_BLOCK__SUPERSCRIPTSANDSUBSCRIPTS   PL_SUPERANDSUB
#define PL_BLOCK__SUPMATHOPERATORS   PL_SUPMATHOPERATORS
#define PL_BLOCK__SUPPLEMENTALARROWSA   PL_SUPARROWSA
#define PL_BLOCK__SUPPLEMENTALARROWSB   PL_SUPARROWSB
#define PL_BLOCK__SUPPLEMENTALARROWSC   PL_SUPARROWSC
#define PL_BLOCK__SUPPLEMENTALMATHEMATICALOPERATORS   PL_SUPMATHOPERATORS
#define PL_BLOCK__SUPPLEMENTALPUNCTUATION   PL_SUPPUNCTUATION
#define PL_BLOCK__SUPPLEMENTALSYMBOLSANDPICTOGRAPHS   PL_SUPSYMBOLSANDPICTOGRAPHS
#define PL_BLOCK__SUPPLEMENTARYPRIVATEUSEAREAA   PL_SUPPUAA
#define PL_BLOCK__SUPPLEMENTARYPRIVATEUSEAREAB   PL_SUPPUAB
#define PL_BLOCK__SUPPUAA   PL_SUPPUAA
#define PL_BLOCK__SUPPUAB   PL_SUPPUAB
#define PL_BLOCK__SUPPUNCTUATION   PL_SUPPUNCTUATION
#define PL_BLOCK__SUPSYMBOLSANDPICTOGRAPHS   PL_SUPSYMBOLSANDPICTOGRAPHS
#define PL_BLOCK__SUTTONSIGNWRITING   PL_SUTTONSIGNWRITING
#define PL_BLOCK__SYLOTINAGRI   PL_INSYLOTINAGRI
#define PL_BLOCK__SYRIAC   PL_INSYRIAC
#define PL_BLOCK__SYRIACSUP   PL_SYRIACSUP
#define PL_BLOCK__SYRIACSUPPLEMENT   PL_SYRIACSUP
#define PL_BLOCK__TAGALOG   PL_INTAGALOG
#define PL_BLOCK__TAGBANWA   PL_INTAGBANWA
#define PL_BLOCK__TAGS   PL_TAGS
#define PL_BLOCK__TAILE   PL_INTAILE
#define PL_BLOCK__TAITHAM   PL_INTAITHAM
#define PL_BLOCK__TAIVIET   PL_INTAIVIET
#define PL_BLOCK__TAIXUANJING   PL_TAIXUANJING
#define PL_BLOCK__TAIXUANJINGSYMBOLS   PL_TAIXUANJING
#define PL_BLOCK__TAKRI   PL_INTAKRI
#define PL_BLOCK__TAMIL   PL_INTAMIL
#define PL_BLOCK__TANGUT   PL_INTANGUT
#define PL_BLOCK__TANGUTCOMPONENTS   PL_TANGUTCOMPONENTS
#define PL_BLOCK__TELUGU   PL_INTELUGU
#define PL_BLOCK__THAANA   PL_INTHAANA
#define PL_BLOCK__THAI   PL_INTHAI
#define PL_BLOCK__TIBETAN   PL_INTIBETAN
#define PL_BLOCK__TIFINAGH   PL_INTIFINAGH
#define PL_BLOCK__TIRHUTA   PL_INTIRHUTA
#define PL_BLOCK__TRANSPORTANDMAP   PL_TRANSPORTANDMAP
#define PL_BLOCK__TRANSPORTANDMAPSYMBOLS   PL_TRANSPORTANDMAP
#define PL_BLOCK__UCAS   PL_UCAS
#define PL_BLOCK__UCASEXT   PL_UCASEXT
#define PL_BLOCK__UGARITIC   PL_INUGARITIC
#define PL_BLOCK__UNIFIEDCANADIANABORIGINALSYLLABICS   PL_UCAS
#define PL_BLOCK__UNIFIEDCANADIANABORIGINALSYLLABICSEXTENDED   PL_UCASEXT
#define PL_BLOCK__VAI   PL_INVAI
#define PL_BLOCK__VARIATIONSELECTORS   PL_INVS
#define PL_BLOCK__VARIATIONSELECTORSSUPPLEMENT   PL_VSSUP
#define PL_BLOCK__VEDICEXT   PL_VEDICEXT
#define PL_BLOCK__VEDICEXTENSIONS   PL_VEDICEXT
#define PL_BLOCK__VERTICALFORMS   PL_VERTICALFORMS
#define PL_BLOCK__VS   PL_INVS
#define PL_BLOCK__VSSUP   PL_VSSUP
#define PL_BLOCK__WARANGCITI   PL_INWARANGCITI
#define PL_BLOCK__YIJING   PL_YIJING
#define PL_BLOCK__YIJINGHEXAGRAMSYMBOLS   PL_YIJING
#define PL_BLOCK__YIRADICALS   PL_YIRADICALS
#define PL_BLOCK__YISYLLABLES   PL_YISYLLABLES
#define PL_BLOCK__ZANABAZARSQUARE   PL_INZANABAZARSQUARE
#define PL_BOPOMOFO   PL_BOPO
#define PL_BOPOMOFOEXTENDED   PL_BOPOMOFOEXT
#define PL_BPT__CLOSE   PL_BPT__C
#define PL_BPT__NONE   PL_BPT__N
#define PL_BPT__OPEN   PL_BPT__O
#define PL_BRAHMI   PL_BRAH
#define PL_BRAILLE   PL_BRAI
#define PL_BRAILLEPATTERNS   PL_BRAI
#define PL_BUGINESE   PL_BUGI
#define PL_BUHID   PL_BUHD
#define PL_BYZANTINEMUSICALSYMBOLS   PL_BYZANTINEMUSIC
#define PL_CANADIANABORIGINAL   PL_CANS
#define PL_CANADIANSYLLABICS   PL_UCAS
#define PL_CANONICALCOMBININGCLASS__0   PL_CCC__0
#define PL_CANONICALCOMBININGCLASS__1   PL_CCC__1
#define PL_CANONICALCOMBININGCLASS__10   PL_CCC__10
#define PL_CANONICALCOMBININGCLASS__103   PL_CCC__103
#define PL_CANONICALCOMBININGCLASS__107   PL_CCC__107
#define PL_CANONICALCOMBININGCLASS__11   PL_CCC__11
#define PL_CANONICALCOMBININGCLASS__118   PL_CCC__118
#define PL_CANONICALCOMBININGCLASS__12   PL_CCC__12
#define PL_CANONICALCOMBININGCLASS__122   PL_CCC__122
#define PL_CANONICALCOMBININGCLASS__129   PL_CCC__129
#define PL_CANONICALCOMBININGCLASS__13   PL_CCC__13
#define PL_CANONICALCOMBININGCLASS__130   PL_CCC__130
#define PL_CANONICALCOMBININGCLASS__132   PL_CCC__132
#define PL_CANONICALCOMBININGCLASS__133   PL_CCC__133
#define PL_CANONICALCOMBININGCLASS__14   PL_CCC__14
#define PL_CANONICALCOMBININGCLASS__15   PL_CCC__15
#define PL_CANONICALCOMBININGCLASS__16   PL_CCC__16
#define PL_CANONICALCOMBININGCLASS__17   PL_CCC__17
#define PL_CANONICALCOMBININGCLASS__18   PL_CCC__18
#define PL_CANONICALCOMBININGCLASS__19   PL_CCC__19
#define PL_CANONICALCOMBININGCLASS__20   PL_CCC__20
#define PL_CANONICALCOMBININGCLASS__200   PL_CCC__133
#define PL_CANONICALCOMBININGCLASS__202   PL_CCC__202
#define PL_CANONICALCOMBININGCLASS__21   PL_CCC__21
#define PL_CANONICALCOMBININGCLASS__214   PL_CCC__214
#define PL_CANONICALCOMBININGCLASS__216   PL_CCC__216
#define PL_CANONICALCOMBININGCLASS__218   PL_CCC__BL
#define PL_CANONICALCOMBININGCLASS__22   PL_CCC__22
#define PL_CANONICALCOMBININGCLASS__220   PL_CCC__B
#define PL_CANONICALCOMBININGCLASS__222   PL_CCC__BR
#define PL_CANONICALCOMBININGCLASS__224   PL_CCC__L
#define PL_CANONICALCOMBININGCLASS__226   PL_CCC__R
#define PL_CANONICALCOMBININGCLASS__228   PL_CCC__AL
#define PL_CANONICALCOMBININGCLASS__23   PL_CCC__23
#define PL_CANONICALCOMBININGCLASS__230   PL_CCC__A
#define PL_CANONICALCOMBININGCLASS__232   PL_CCC__AR
#define PL_CANONICALCOMBININGCLASS__233   PL_CCC__DB
#define PL_CANONICALCOMBININGCLASS__234   PL_CCC__DA
#define PL_CANONICALCOMBININGCLASS__24   PL_CCC__24
#define PL_CANONICALCOMBININGCLASS__240   PL_CCC__IS
#define PL_CANONICALCOMBININGCLASS__25   PL_CCC__25
#define PL_CANONICALCOMBININGCLASS__26   PL_CCC__26
#define PL_CANONICALCOMBININGCLASS__27   PL_CCC__27
#define PL_CANONICALCOMBININGCLASS__28   PL_CCC__28
#define PL_CANONICALCOMBININGCLASS__29   PL_CCC__29
#define PL_CANONICALCOMBININGCLASS__30   PL_CCC__30
#define PL_CANONICALCOMBININGCLASS__31   PL_CCC__31
#define PL_CANONICALCOMBININGCLASS__32   PL_CCC__32
#define PL_CANONICALCOMBININGCLASS__33   PL_CCC__33
#define PL_CANONICALCOMBININGCLASS__34   PL_CCC__34
#define PL_CANONICALCOMBININGCLASS__35   PL_CCC__35
#define PL_CANONICALCOMBININGCLASS__36   PL_CCC__36
#define PL_CANONICALCOMBININGCLASS__7   PL_CCC__7
#define PL_CANONICALCOMBININGCLASS__8   PL_CCC__8
#define PL_CANONICALCOMBININGCLASS__84   PL_CCC__84
#define PL_CANONICALCOMBININGCLASS__9   PL_CCC__9
#define PL_CANONICALCOMBININGCLASS__91   PL_CCC__91
#define PL_CANONICALCOMBININGCLASS__A   PL_CCC__A
#define PL_CANONICALCOMBININGCLASS__ABOVE   PL_CCC__A
#define PL_CANONICALCOMBININGCLASS__ABOVELEFT   PL_CCC__AL
#define PL_CANONICALCOMBININGCLASS__ABOVERIGHT   PL_CCC__AR
#define PL_CANONICALCOMBININGCLASS__AL   PL_CCC__AL
#define PL_CANONICALCOMBININGCLASS__AR   PL_CCC__AR
#define PL_CANONICALCOMBININGCLASS__ATA   PL_CCC__214
#define PL_CANONICALCOMBININGCLASS__ATAR   PL_CCC__216
#define PL_CANONICALCOMBININGCLASS__ATB   PL_CCC__202
#define PL_CANONICALCOMBININGCLASS__ATBL   PL_CCC__133
#define PL_CANONICALCOMBININGCLASS__ATTACHEDABOVE   PL_CCC__214
#define PL_CANONICALCOMBININGCLASS__ATTACHEDABOVERIGHT   PL_CCC__216
#define PL_CANONICALCOMBININGCLASS__ATTACHEDBELOW   PL_CCC__202
#define PL_CANONICALCOMBININGCLASS__ATTACHEDBELOWLEFT   PL_CCC__133
#define PL_CANONICALCOMBININGCLASS__B   PL_CCC__B
#define PL_CANONICALCOMBININGCLASS__BELOW   PL_CCC__B
#define PL_CANONICALCOMBININGCLASS__BELOWLEFT   PL_CCC__BL
#define PL_CANONICALCOMBININGCLASS__BELOWRIGHT   PL_CCC__BR
#define PL_CANONICALCOMBININGCLASS__BL   PL_CCC__BL
#define PL_CANONICALCOMBININGCLASS__BR   PL_CCC__BR
#define PL_CANONICALCOMBININGCLASS__CCC10   PL_CCC__10
#define PL_CANONICALCOMBININGCLASS__CCC103   PL_CCC__103
#define PL_CANONICALCOMBININGCLASS__CCC107   PL_CCC__107
#define PL_CANONICALCOMBININGCLASS__CCC11   PL_CCC__11
#define PL_CANONICALCOMBININGCLASS__CCC118   PL_CCC__118
#define PL_CANONICALCOMBININGCLASS__CCC12   PL_CCC__12
#define PL_CANONICALCOMBININGCLASS__CCC122   PL_CCC__122
#define PL_CANONICALCOMBININGCLASS__CCC129   PL_CCC__129
#define PL_CANONICALCOMBININGCLASS__CCC13   PL_CCC__13
#define PL_CANONICALCOMBININGCLASS__CCC130   PL_CCC__130
#define PL_CANONICALCOMBININGCLASS__CCC132   PL_CCC__132
#define PL_CANONICALCOMBININGCLASS__CCC133   PL_CCC__133
#define PL_CANONICALCOMBININGCLASS__CCC14   PL_CCC__14
#define PL_CANONICALCOMBININGCLASS__CCC15   PL_CCC__15
#define PL_CANONICALCOMBININGCLASS__CCC16   PL_CCC__16
#define PL_CANONICALCOMBININGCLASS__CCC17   PL_CCC__17
#define PL_CANONICALCOMBININGCLASS__CCC18   PL_CCC__18
#define PL_CANONICALCOMBININGCLASS__CCC19   PL_CCC__19
#define PL_CANONICALCOMBININGCLASS__CCC20   PL_CCC__20
#define PL_CANONICALCOMBININGCLASS__CCC21   PL_CCC__21
#define PL_CANONICALCOMBININGCLASS__CCC22   PL_CCC__22
#define PL_CANONICALCOMBININGCLASS__CCC23   PL_CCC__23
#define PL_CANONICALCOMBININGCLASS__CCC24   PL_CCC__24
#define PL_CANONICALCOMBININGCLASS__CCC25   PL_CCC__25
#define PL_CANONICALCOMBININGCLASS__CCC26   PL_CCC__26
#define PL_CANONICALCOMBININGCLASS__CCC27   PL_CCC__27
#define PL_CANONICALCOMBININGCLASS__CCC28   PL_CCC__28
#define PL_CANONICALCOMBININGCLASS__CCC29   PL_CCC__29
#define PL_CANONICALCOMBININGCLASS__CCC30   PL_CCC__30
#define PL_CANONICALCOMBININGCLASS__CCC31   PL_CCC__31
#define PL_CANONICALCOMBININGCLASS__CCC32   PL_CCC__32
#define PL_CANONICALCOMBININGCLASS__CCC33   PL_CCC__33
#define PL_CANONICALCOMBININGCLASS__CCC34   PL_CCC__34
#define PL_CANONICALCOMBININGCLASS__CCC35   PL_CCC__35
#define PL_CANONICALCOMBININGCLASS__CCC36   PL_CCC__36
#define PL_CANONICALCOMBININGCLASS__CCC84   PL_CCC__84
#define PL_CANONICALCOMBININGCLASS__CCC91   PL_CCC__91
#define PL_CANONICALCOMBININGCLASS__DA   PL_CCC__DA
#define PL_CANONICALCOMBININGCLASS__DB   PL_CCC__DB
#define PL_CANONICALCOMBININGCLASS__DOUBLEABOVE   PL_CCC__DA
#define PL_CANONICALCOMBININGCLASS__DOUBLEBELOW   PL_CCC__DB
#define PL_CANONICALCOMBININGCLASS__IOTASUBSCRIPT   PL_CCC__IS
#define PL_CANONICALCOMBININGCLASS__IS   PL_CCC__IS
#define PL_CANONICALCOMBININGCLASS__KANAVOICING   PL_CCC__8
#define PL_CANONICALCOMBININGCLASS__KV   PL_CCC__8
#define PL_CANONICALCOMBININGCLASS__L   PL_CCC__L
#define PL_CANONICALCOMBININGCLASS__LEFT   PL_CCC__L
#define PL_CANONICALCOMBININGCLASS__NK   PL_CCC__7
#define PL_CANONICALCOMBININGCLASS__NOTREORDERED   PL_CCC__0
#define PL_CANONICALCOMBININGCLASS__NR   PL_CCC__0
#define PL_CANONICALCOMBININGCLASS__NUKTA   PL_CCC__7
#define PL_CANONICALCOMBININGCLASS__OV   PL_CCC__1
#define PL_CANONICALCOMBININGCLASS__OVERLAY   PL_CCC__1
#define PL_CANONICALCOMBININGCLASS__R   PL_CCC__R
#define PL_CANONICALCOMBININGCLASS__RIGHT   PL_CCC__R
#define PL_CANONICALCOMBININGCLASS__VIRAMA   PL_CCC__9
#define PL_CANONICALCOMBININGCLASS__VR   PL_CCC__9
#define PL_CARIAN   PL_CARI
#define PL_CASEDLETTER   PL_L_AMP_
#define PL_CASED__F   -PL_CASED
#define PL_CASED__FALSE   -PL_CASED
#define PL_CASED__N   -PL_CASED
#define PL_CASED__NO   -PL_CASED
#define PL_CASED__T   PL_CASED
#define PL_CASED__TRUE   PL_CASED
#define PL_CASED__Y   PL_CASED
#define PL_CASED__YES   PL_CASED
#define PL_CASEIGNORABLE   PL_CI
#define PL_CASEIGNORABLE   PL_CI
#define PL_CASEIGNORABLE__F   -PL_CI
#define PL_CASEIGNORABLE__FALSE   -PL_CI
#define PL_CASEIGNORABLE__N   -PL_CI
#define PL_CASEIGNORABLE__NO   -PL_CI
#define PL_CASEIGNORABLE__T   PL_CI
#define PL_CASEIGNORABLE__TRUE   PL_CI
#define PL_CASEIGNORABLE__Y   PL_CI
#define PL_CASEIGNORABLE__YES   PL_CI
#define PL_CATEGORY__C   PL_C
#define PL_CATEGORY__CASEDLETTER   PL_L_AMP_
#define PL_CATEGORY__CC   PL_XPOSIXCNTRL
#define PL_CATEGORY__CF   PL_CF
#define PL_CATEGORY__CLOSEPUNCTUATION   PL_PE
#define PL_CATEGORY__CN   PL_CN
#define PL_CATEGORY__CNTRL   PL_XPOSIXCNTRL
#define PL_CATEGORY__CO   PL_CO
#define PL_CATEGORY__COMBININGMARK   PL_M
#define PL_CATEGORY__CONNECTORPUNCTUATION   PL_PC
#define PL_CATEGORY__CONTROL   PL_XPOSIXCNTRL
#define PL_CATEGORY__CS   PL_CS
#define PL_CATEGORY__CURRENCYSYMBOL   PL_SC
#define PL_CATEGORY__DASHPUNCTUATION   PL_PD
#define PL_CATEGORY__DECIMALNUMBER   PL_XPOSIXDIGIT
#define PL_CATEGORY__DIGIT   PL_XPOSIXDIGIT
#define PL_CATEGORY__ENCLOSINGMARK   PL_ME
#define PL_CATEGORY__FINALPUNCTUATION   PL_PF
#define PL_CATEGORY__FORMAT   PL_CF
#define PL_CATEGORY__INITIALPUNCTUATION   PL_PI
#define PL_CATEGORY__L   PL_L
#define PL_CATEGORY__LC   PL_L_AMP_
#define PL_CATEGORY__LETTER   PL_L
#define PL_CATEGORY__LETTERNUMBER   PL_NL
#define PL_CATEGORY__LINESEPARATOR   PL_ZL
#define PL_CATEGORY__LL   PL_LL
#define PL_CATEGORY__LM   PL_LM
#define PL_CATEGORY__LO   PL_LO
#define PL_CATEGORY__LOWERCASELETTER   PL_LL
#define PL_CATEGORY__LT   PL_LT
#define PL_CATEGORY__LU   PL_LU
#define PL_CATEGORY__L_   PL_L_AMP_
#define PL_CATEGORY__L_AMP_   PL_L_AMP_
#define PL_CATEGORY__M   PL_M
#define PL_CATEGORY__MARK   PL_M
#define PL_CATEGORY__MATHSYMBOL   PL_SM
#define PL_CATEGORY__MC   PL_MC
#define PL_CATEGORY__ME   PL_ME
#define PL_CATEGORY__MN   PL_MN
#define PL_CATEGORY__MODIFIERLETTER   PL_LM
#define PL_CATEGORY__MODIFIERSYMBOL   PL_SK
#define PL_CATEGORY__N   PL_N
#define PL_CATEGORY__ND   PL_XPOSIXDIGIT
#define PL_CATEGORY__NL   PL_NL
#define PL_CATEGORY__NO   PL_NO
#define PL_CATEGORY__NONSPACINGMARK   PL_MN
#define PL_CATEGORY__NUMBER   PL_N
#define PL_CATEGORY__OPENPUNCTUATION   PL_PS
#define PL_CATEGORY__OTHER   PL_C
#define PL_CATEGORY__OTHERLETTER   PL_LO
#define PL_CATEGORY__OTHERNUMBER   PL_NO
#define PL_CATEGORY__OTHERPUNCTUATION   PL_PO
#define PL_CATEGORY__OTHERSYMBOL   PL_SO
#define PL_CATEGORY__P   PL_P
#define PL_CATEGORY__PARAGRAPHSEPARATOR   PL_ZP
#define PL_CATEGORY__PC   PL_PC
#define PL_CATEGORY__PD   PL_PD
#define PL_CATEGORY__PE   PL_PE
#define PL_CATEGORY__PF   PL_PF
#define PL_CATEGORY__PI   PL_PI
#define PL_CATEGORY__PO   PL_PO
#define PL_CATEGORY__PRIVATEUSE   PL_CO
#define PL_CATEGORY__PS   PL_PS
#define PL_CATEGORY__PUNCT   PL_P
#define PL_CATEGORY__PUNCTUATION   PL_P
#define PL_CATEGORY__S   PL_S
#define PL_CATEGORY__SC   PL_SC
#define PL_CATEGORY__SEPARATOR   PL_Z
#define PL_CATEGORY__SK   PL_SK
#define PL_CATEGORY__SM   PL_SM
#define PL_CATEGORY__SO   PL_SO
#define PL_CATEGORY__SPACESEPARATOR   PL_ZS
#define PL_CATEGORY__SPACINGMARK   PL_MC
#define PL_CATEGORY__SURROGATE   PL_CS
#define PL_CATEGORY__SYMBOL   PL_S
#define PL_CATEGORY__TITLECASELETTER   PL_LT
#define PL_CATEGORY__UNASSIGNED   PL_CN
#define PL_CATEGORY__UPPERCASELETTER   PL_LU
#define PL_CATEGORY__Z   PL_Z
#define PL_CATEGORY__ZL   PL_ZL
#define PL_CATEGORY__ZP   PL_ZP
#define PL_CATEGORY__ZS   PL_ZS
#define PL_CAUCASIANALBANIAN   PL_AGHB
#define PL_CC   PL_XPOSIXCNTRL
#define PL_CCC__200   PL_CCC__133
#define PL_CCC__218   PL_CCC__BL
#define PL_CCC__220   PL_CCC__B
#define PL_CCC__222   PL_CCC__BR
#define PL_CCC__224   PL_CCC__L
#define PL_CCC__226   PL_CCC__R
#define PL_CCC__228   PL_CCC__AL
#define PL_CCC__230   PL_CCC__A
#define PL_CCC__232   PL_CCC__AR
#define PL_CCC__233   PL_CCC__DB
#define PL_CCC__234   PL_CCC__DA
#define PL_CCC__240   PL_CCC__IS
#define PL_CCC__ABOVE   PL_CCC__A
#define PL_CCC__ABOVELEFT   PL_CCC__AL
#define PL_CCC__ABOVERIGHT   PL_CCC__AR
#define PL_CCC__ATA   PL_CCC__214
#define PL_CCC__ATAR   PL_CCC__216
#define PL_CCC__ATB   PL_CCC__202
#define PL_CCC__ATBL   PL_CCC__133
#define PL_CCC__ATTACHEDABOVE   PL_CCC__214
#define PL_CCC__ATTACHEDABOVERIGHT   PL_CCC__216
#define PL_CCC__ATTACHEDBELOW   PL_CCC__202
#define PL_CCC__ATTACHEDBELOWLEFT   PL_CCC__133
#define PL_CCC__BELOW   PL_CCC__B
#define PL_CCC__BELOWLEFT   PL_CCC__BL
#define PL_CCC__BELOWRIGHT   PL_CCC__BR
#define PL_CCC__CCC10   PL_CCC__10
#define PL_CCC__CCC103   PL_CCC__103
#define PL_CCC__CCC107   PL_CCC__107
#define PL_CCC__CCC11   PL_CCC__11
#define PL_CCC__CCC118   PL_CCC__118
#define PL_CCC__CCC12   PL_CCC__12
#define PL_CCC__CCC122   PL_CCC__122
#define PL_CCC__CCC129   PL_CCC__129
#define PL_CCC__CCC13   PL_CCC__13
#define PL_CCC__CCC130   PL_CCC__130
#define PL_CCC__CCC132   PL_CCC__132
#define PL_CCC__CCC133   PL_CCC__133
#define PL_CCC__CCC14   PL_CCC__14
#define PL_CCC__CCC15   PL_CCC__15
#define PL_CCC__CCC16   PL_CCC__16
#define PL_CCC__CCC17   PL_CCC__17
#define PL_CCC__CCC18   PL_CCC__18
#define PL_CCC__CCC19   PL_CCC__19
#define PL_CCC__CCC20   PL_CCC__20
#define PL_CCC__CCC21   PL_CCC__21
#define PL_CCC__CCC22   PL_CCC__22
#define PL_CCC__CCC23   PL_CCC__23
#define PL_CCC__CCC24   PL_CCC__24
#define PL_CCC__CCC25   PL_CCC__25
#define PL_CCC__CCC26   PL_CCC__26
#define PL_CCC__CCC27   PL_CCC__27
#define PL_CCC__CCC28   PL_CCC__28
#define PL_CCC__CCC29   PL_CCC__29
#define PL_CCC__CCC30   PL_CCC__30
#define PL_CCC__CCC31   PL_CCC__31
#define PL_CCC__CCC32   PL_CCC__32
#define PL_CCC__CCC33   PL_CCC__33
#define PL_CCC__CCC34   PL_CCC__34
#define PL_CCC__CCC35   PL_CCC__35
#define PL_CCC__CCC36   PL_CCC__36
#define PL_CCC__CCC84   PL_CCC__84
#define PL_CCC__CCC91   PL_CCC__91
#define PL_CCC__DOUBLEABOVE   PL_CCC__DA
#define PL_CCC__DOUBLEBELOW   PL_CCC__DB
#define PL_CCC__IOTASUBSCRIPT   PL_CCC__IS
#define PL_CCC__KANAVOICING   PL_CCC__8
#define PL_CCC__KV   PL_CCC__8
#define PL_CCC__LEFT   PL_CCC__L
#define PL_CCC__NK   PL_CCC__7
#define PL_CCC__NOTREORDERED   PL_CCC__0
#define PL_CCC__NR   PL_CCC__0
#define PL_CCC__NUKTA   PL_CCC__7
#define PL_CCC__OV   PL_CCC__1
#define PL_CCC__OVERLAY   PL_CCC__1
#define PL_CCC__RIGHT   PL_CCC__R
#define PL_CCC__VIRAMA   PL_CCC__9
#define PL_CCC__VR   PL_CCC__9
#define PL_CE__F   -PL_CE
#define PL_CE__FALSE   -PL_CE
#define PL_CE__N   -PL_CE
#define PL_CE__NO   -PL_CE
#define PL_CE__T   PL_CE
#define PL_CE__TRUE   PL_CE
#define PL_CE__Y   PL_CE
#define PL_CE__YES   PL_CE
#define PL_CHAKMA   PL_CAKM
#define PL_CHANGESWHENCASEFOLDED   PL_CWCF
#define PL_CHANGESWHENCASEFOLDED   PL_CWCF
#define PL_CHANGESWHENCASEFOLDED__F   -PL_CWCF
#define PL_CHANGESWHENCASEFOLDED__FALSE   -PL_CWCF
#define PL_CHANGESWHENCASEFOLDED__N   -PL_CWCF
#define PL_CHANGESWHENCASEFOLDED__NO   -PL_CWCF
#define PL_CHANGESWHENCASEFOLDED__T   PL_CWCF
#define PL_CHANGESWHENCASEFOLDED__TRUE   PL_CWCF
#define PL_CHANGESWHENCASEFOLDED__Y   PL_CWCF
#define PL_CHANGESWHENCASEFOLDED__YES   PL_CWCF
#define PL_CHANGESWHENCASEMAPPED   PL_CWCM
#define PL_CHANGESWHENCASEMAPPED   PL_CWCM
#define PL_CHANGESWHENCASEMAPPED__F   -PL_CWCM
#define PL_CHANGESWHENCASEMAPPED__FALSE   -PL_CWCM
#define PL_CHANGESWHENCASEMAPPED__N   -PL_CWCM
#define PL_CHANGESWHENCASEMAPPED__NO   -PL_CWCM
#define PL_CHANGESWHENCASEMAPPED__T   PL_CWCM
#define PL_CHANGESWHENCASEMAPPED__TRUE   PL_CWCM
#define PL_CHANGESWHENCASEMAPPED__Y   PL_CWCM
#define PL_CHANGESWHENCASEMAPPED__YES   PL_CWCM
#define PL_CHANGESWHENLOWERCASED   PL_CWL
#define PL_CHANGESWHENLOWERCASED   PL_CWL
#define PL_CHANGESWHENLOWERCASED__F   -PL_CWL
#define PL_CHANGESWHENLOWERCASED__FALSE   -PL_CWL
#define PL_CHANGESWHENLOWERCASED__N   -PL_CWL
#define PL_CHANGESWHENLOWERCASED__NO   -PL_CWL
#define PL_CHANGESWHENLOWERCASED__T   PL_CWL
#define PL_CHANGESWHENLOWERCASED__TRUE   PL_CWL
#define PL_CHANGESWHENLOWERCASED__Y   PL_CWL
#define PL_CHANGESWHENLOWERCASED__YES   PL_CWL
#define PL_CHANGESWHENNFKCCASEFOLDED   PL_CWKCF
#define PL_CHANGESWHENNFKCCASEFOLDED   PL_CWKCF
#define PL_CHANGESWHENNFKCCASEFOLDED__F   -PL_CWKCF
#define PL_CHANGESWHENNFKCCASEFOLDED__FALSE   -PL_CWKCF
#define PL_CHANGESWHENNFKCCASEFOLDED__N   -PL_CWKCF
#define PL_CHANGESWHENNFKCCASEFOLDED__NO   -PL_CWKCF
#define PL_CHANGESWHENNFKCCASEFOLDED__T   PL_CWKCF
#define PL_CHANGESWHENNFKCCASEFOLDED__TRUE   PL_CWKCF
#define PL_CHANGESWHENNFKCCASEFOLDED__Y   PL_CWKCF
#define PL_CHANGESWHENNFKCCASEFOLDED__YES   PL_CWKCF
#define PL_CHANGESWHENTITLECASED   PL_CWT
#define PL_CHANGESWHENTITLECASED   PL_CWT
#define PL_CHANGESWHENTITLECASED__F   -PL_CWT
#define PL_CHANGESWHENTITLECASED__FALSE   -PL_CWT
#define PL_CHANGESWHENTITLECASED__N   -PL_CWT
#define PL_CHANGESWHENTITLECASED__NO   -PL_CWT
#define PL_CHANGESWHENTITLECASED__T   PL_CWT
#define PL_CHANGESWHENTITLECASED__TRUE   PL_CWT
#define PL_CHANGESWHENTITLECASED__Y   PL_CWT
#define PL_CHANGESWHENTITLECASED__YES   PL_CWT
#define PL_CHANGESWHENUPPERCASED   PL_CWU
#define PL_CHANGESWHENUPPERCASED   PL_CWU
#define PL_CHANGESWHENUPPERCASED__F   -PL_CWU
#define PL_CHANGESWHENUPPERCASED__FALSE   -PL_CWU
#define PL_CHANGESWHENUPPERCASED__N   -PL_CWU
#define PL_CHANGESWHENUPPERCASED__NO   -PL_CWU
#define PL_CHANGESWHENUPPERCASED__T   PL_CWU
#define PL_CHANGESWHENUPPERCASED__TRUE   PL_CWU
#define PL_CHANGESWHENUPPERCASED__Y   PL_CWU
#define PL_CHANGESWHENUPPERCASED__YES   PL_CWU
#define PL_CHEROKEE   PL_CHER
#define PL_CHEROKEESUPPLEMENT   PL_CHEROKEESUP
#define PL_CI__F   -PL_CI
#define PL_CI__FALSE   -PL_CI
#define PL_CI__N   -PL_CI
#define PL_CI__NO   -PL_CI
#define PL_CI__T   PL_CI
#define PL_CI__TRUE   PL_CI
#define PL_CI__Y   PL_CI
#define PL_CI__YES   PL_CI
#define PL_CJKCOMPATIBILITY   PL_CJKCOMPAT
#define PL_CJKCOMPATIBILITYFORMS   PL_CJKCOMPATFORMS
#define PL_CJKCOMPATIBILITYIDEOGRAPHS   PL_CJKCOMPATIDEOGRAPHS
#define PL_CJKCOMPATIBILITYIDEOGRAPHSSUPPLEMENT   PL_CJKCOMPATIDEOGRAPHSSUP
#define PL_CJKRADICALSSUPPLEMENT   PL_CJKRADICALSSUP
#define PL_CJKSYMBOLSANDPUNCTUATION   PL_CJKSYMBOLS
#define PL_CJKUNIFIEDIDEOGRAPHS   PL_CJK
#define PL_CJKUNIFIEDIDEOGRAPHSEXTENSIONA   PL_CJKEXTA
#define PL_CJKUNIFIEDIDEOGRAPHSEXTENSIONB   PL_CJKEXTB
#define PL_CJKUNIFIEDIDEOGRAPHSEXTENSIONC   PL_CJKEXTC
#define PL_CJKUNIFIEDIDEOGRAPHSEXTENSIOND   PL_CJKEXTD
#define PL_CJKUNIFIEDIDEOGRAPHSEXTENSIONE   PL_CJKEXTE
#define PL_CJKUNIFIEDIDEOGRAPHSEXTENSIONF   PL_CJKEXTF
#define PL_CLOSEPUNCTUATION   PL_PE
#define PL_CNTRL   PL_XPOSIXCNTRL
#define PL_COMBININGDIACRITICALMARKS   PL_DIACRITICALS
#define PL_COMBININGDIACRITICALMARKSEXTENDED   PL_DIACRITICALSEXT
#define PL_COMBININGDIACRITICALMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_COMBININGDIACRITICALMARKSSUPPLEMENT   PL_DIACRITICALSSUP
#define PL_COMBININGHALFMARKS   PL_HALFMARKS
#define PL_COMBININGMARK   PL_M
#define PL_COMBININGMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_COMMON   PL_ZYYY
#define PL_COMMONINDICNUMBERFORMS   PL_INDICNUMBERFORMS
#define PL_COMPEX__F   -PL_COMPEX
#define PL_COMPEX__FALSE   -PL_COMPEX
#define PL_COMPEX__N   -PL_COMPEX
#define PL_COMPEX__NO   -PL_COMPEX
#define PL_COMPEX__T   PL_COMPEX
#define PL_COMPEX__TRUE   PL_COMPEX
#define PL_COMPEX__Y   PL_COMPEX
#define PL_COMPEX__YES   PL_COMPEX
#define PL_COMPOSITIONEXCLUSION   PL_CE
#define PL_COMPOSITIONEXCLUSION   PL_CE
#define PL_COMPOSITIONEXCLUSION__F   -PL_CE
#define PL_COMPOSITIONEXCLUSION__FALSE   -PL_CE
#define PL_COMPOSITIONEXCLUSION__N   -PL_CE
#define PL_COMPOSITIONEXCLUSION__NO   -PL_CE
#define PL_COMPOSITIONEXCLUSION__T   PL_CE
#define PL_COMPOSITIONEXCLUSION__TRUE   PL_CE
#define PL_COMPOSITIONEXCLUSION__Y   PL_CE
#define PL_COMPOSITIONEXCLUSION__YES   PL_CE
#define PL_CONNECTORPUNCTUATION   PL_PC
#define PL_CONTROL   PL_XPOSIXCNTRL
#define PL_COPTIC   PL_COPT
#define PL_COUNTINGRODNUMERALS   PL_COUNTINGROD
#define PL_CUNEIFORM   PL_XSUX
#define PL_CUNEIFORMNUMBERSANDPUNCTUATION   PL_CUNEIFORMNUMBERS
#define PL_CURRENCYSYMBOL   PL_SC
#define PL_CWCF__F   -PL_CWCF
#define PL_CWCF__FALSE   -PL_CWCF
#define PL_CWCF__N   -PL_CWCF
#define PL_CWCF__NO   -PL_CWCF
#define PL_CWCF__T   PL_CWCF
#define PL_CWCF__TRUE   PL_CWCF
#define PL_CWCF__Y   PL_CWCF
#define PL_CWCF__YES   PL_CWCF
#define PL_CWCM__F   -PL_CWCM
#define PL_CWCM__FALSE   -PL_CWCM
#define PL_CWCM__N   -PL_CWCM
#define PL_CWCM__NO   -PL_CWCM
#define PL_CWCM__T   PL_CWCM
#define PL_CWCM__TRUE   PL_CWCM
#define PL_CWCM__Y   PL_CWCM
#define PL_CWCM__YES   PL_CWCM
#define PL_CWKCF__F   -PL_CWKCF
#define PL_CWKCF__FALSE   -PL_CWKCF
#define PL_CWKCF__N   -PL_CWKCF
#define PL_CWKCF__NO   -PL_CWKCF
#define PL_CWKCF__T   PL_CWKCF
#define PL_CWKCF__TRUE   PL_CWKCF
#define PL_CWKCF__Y   PL_CWKCF
#define PL_CWKCF__YES   PL_CWKCF
#define PL_CWL__F   -PL_CWL
#define PL_CWL__FALSE   -PL_CWL
#define PL_CWL__N   -PL_CWL
#define PL_CWL__NO   -PL_CWL
#define PL_CWL__T   PL_CWL
#define PL_CWL__TRUE   PL_CWL
#define PL_CWL__Y   PL_CWL
#define PL_CWL__YES   PL_CWL
#define PL_CWT__F   -PL_CWT
#define PL_CWT__FALSE   -PL_CWT
#define PL_CWT__N   -PL_CWT
#define PL_CWT__NO   -PL_CWT
#define PL_CWT__T   PL_CWT
#define PL_CWT__TRUE   PL_CWT
#define PL_CWT__Y   PL_CWT
#define PL_CWT__YES   PL_CWT
#define PL_CWU__F   -PL_CWU
#define PL_CWU__FALSE   -PL_CWU
#define PL_CWU__N   -PL_CWU
#define PL_CWU__NO   -PL_CWU
#define PL_CWU__T   PL_CWU
#define PL_CWU__TRUE   PL_CWU
#define PL_CWU__Y   PL_CWU
#define PL_CWU__YES   PL_CWU
#define PL_CYPRIOT   PL_CPRT
#define PL_CYRILLIC   PL_CYRL
#define PL_CYRILLICEXTENDEDA   PL_CYRILLICEXTA
#define PL_CYRILLICEXTENDEDB   PL_CYRILLICEXTB
#define PL_CYRILLICEXTENDEDC   PL_CYRILLICEXTC
#define PL_CYRILLICSUPPLEMENT   PL_CYRILLICSUP
#define PL_CYRILLICSUPPLEMENTARY   PL_CYRILLICSUP
#define PL_DASHPUNCTUATION   PL_PD
#define PL_DASH__F   -PL_DASH
#define PL_DASH__FALSE   -PL_DASH
#define PL_DASH__N   -PL_DASH
#define PL_DASH__NO   -PL_DASH
#define PL_DASH__T   PL_DASH
#define PL_DASH__TRUE   PL_DASH
#define PL_DASH__Y   PL_DASH
#define PL_DASH__YES   PL_DASH
#define PL_DECIMALNUMBER   PL_XPOSIXDIGIT
#define PL_DECOMPOSITIONTYPE__CAN   PL_DT__CAN
#define PL_DECOMPOSITIONTYPE__CANONICAL   PL_DT__CAN
#define PL_DECOMPOSITIONTYPE__CIRCLE   PL_DT__ENC
#define PL_DECOMPOSITIONTYPE__COM   PL_DT__COM
#define PL_DECOMPOSITIONTYPE__COMPAT   PL_DT__COM
#define PL_DECOMPOSITIONTYPE__ENC   PL_DT__ENC
#define PL_DECOMPOSITIONTYPE__FIN   PL_DT__FIN
#define PL_DECOMPOSITIONTYPE__FINAL   PL_DT__FIN
#define PL_DECOMPOSITIONTYPE__FONT   PL_DT__FONT
#define PL_DECOMPOSITIONTYPE__FRA   PL_DT__FRA
#define PL_DECOMPOSITIONTYPE__FRACTION   PL_DT__FRA
#define PL_DECOMPOSITIONTYPE__INIT   PL_DT__INIT
#define PL_DECOMPOSITIONTYPE__INITIAL   PL_DT__INIT
#define PL_DECOMPOSITIONTYPE__ISO   PL_DT__ISO
#define PL_DECOMPOSITIONTYPE__ISOLATED   PL_DT__ISO
#define PL_DECOMPOSITIONTYPE__MED   PL_DT__MED
#define PL_DECOMPOSITIONTYPE__MEDIAL   PL_DT__MED
#define PL_DECOMPOSITIONTYPE__NAR   PL_DT__NAR
#define PL_DECOMPOSITIONTYPE__NARROW   PL_DT__NAR
#define PL_DECOMPOSITIONTYPE__NB   PL_DT__NB
#define PL_DECOMPOSITIONTYPE__NOBREAK   PL_DT__NB
#define PL_DECOMPOSITIONTYPE__NONCANON   PL_DT__NONCANON
#define PL_DECOMPOSITIONTYPE__NONCANONICAL   PL_DT__NONCANON
#define PL_DECOMPOSITIONTYPE__NONE   PL_DT__NONE
#define PL_DECOMPOSITIONTYPE__SMALL   PL_DT__SML
#define PL_DECOMPOSITIONTYPE__SML   PL_DT__SML
#define PL_DECOMPOSITIONTYPE__SQR   PL_DT__SQR
#define PL_DECOMPOSITIONTYPE__SQUARE   PL_DT__SQR
#define PL_DECOMPOSITIONTYPE__SUB   PL_DT__SUB
#define PL_DECOMPOSITIONTYPE__SUP   PL_DT__SUP
#define PL_DECOMPOSITIONTYPE__SUPER   PL_DT__SUP
#define PL_DECOMPOSITIONTYPE__VERT   PL_DT__VERT
#define PL_DECOMPOSITIONTYPE__VERTICAL   PL_DT__VERT
#define PL_DECOMPOSITIONTYPE__WIDE   PL_EA__F
#define PL_DEFAULTIGNORABLECODEPOINT   PL_DI
#define PL_DEFAULTIGNORABLECODEPOINT   PL_DI
#define PL_DEFAULTIGNORABLECODEPOINT__F   -PL_DI
#define PL_DEFAULTIGNORABLECODEPOINT__FALSE   -PL_DI
#define PL_DEFAULTIGNORABLECODEPOINT__N   -PL_DI
#define PL_DEFAULTIGNORABLECODEPOINT__NO   -PL_DI
#define PL_DEFAULTIGNORABLECODEPOINT__T   PL_DI
#define PL_DEFAULTIGNORABLECODEPOINT__TRUE   PL_DI
#define PL_DEFAULTIGNORABLECODEPOINT__Y   PL_DI
#define PL_DEFAULTIGNORABLECODEPOINT__YES   PL_DI
#define PL_DEPRECATED   PL_DEP
#define PL_DEPRECATED   PL_DEP
#define PL_DEPRECATED__F   -PL_DEP
#define PL_DEPRECATED__FALSE   -PL_DEP
#define PL_DEPRECATED__N   -PL_DEP
#define PL_DEPRECATED__NO   -PL_DEP
#define PL_DEPRECATED__T   PL_DEP
#define PL_DEPRECATED__TRUE   PL_DEP
#define PL_DEPRECATED__Y   PL_DEP
#define PL_DEPRECATED__YES   PL_DEP
#define PL_DEP__F   -PL_DEP
#define PL_DEP__FALSE   -PL_DEP
#define PL_DEP__N   -PL_DEP
#define PL_DEP__NO   -PL_DEP
#define PL_DEP__T   PL_DEP
#define PL_DEP__TRUE   PL_DEP
#define PL_DEP__Y   PL_DEP
#define PL_DEP__YES   PL_DEP
#define PL_DESERET   PL_DSRT
#define PL_DEVANAGARI   PL_DEVA
#define PL_DEVANAGARIEXTENDED   PL_DEVANAGARIEXT
#define PL_DIACRITIC   PL_DIA
#define PL_DIACRITIC   PL_DIA
#define PL_DIACRITIC__F   -PL_DIA
#define PL_DIACRITIC__FALSE   -PL_DIA
#define PL_DIACRITIC__N   -PL_DIA
#define PL_DIACRITIC__NO   -PL_DIA
#define PL_DIACRITIC__T   PL_DIA
#define PL_DIACRITIC__TRUE   PL_DIA
#define PL_DIACRITIC__Y   PL_DIA
#define PL_DIACRITIC__YES   PL_DIA
#define PL_DIA__F   -PL_DIA
#define PL_DIA__FALSE   -PL_DIA
#define PL_DIA__N   -PL_DIA
#define PL_DIA__NO   -PL_DIA
#define PL_DIA__T   PL_DIA
#define PL_DIA__TRUE   PL_DIA
#define PL_DIA__Y   PL_DIA
#define PL_DIA__YES   PL_DIA
#define PL_DIGIT   PL_XPOSIXDIGIT
#define PL_DI__F   -PL_DI
#define PL_DI__FALSE   -PL_DI
#define PL_DI__N   -PL_DI
#define PL_DI__NO   -PL_DI
#define PL_DI__T   PL_DI
#define PL_DI__TRUE   PL_DI
#define PL_DI__Y   PL_DI
#define PL_DI__YES   PL_DI
#define PL_DOMINOTILES   PL_DOMINO
#define PL_DT__CANONICAL   PL_DT__CAN
#define PL_DT__CIRCLE   PL_DT__ENC
#define PL_DT__COMPAT   PL_DT__COM
#define PL_DT__FINAL   PL_DT__FIN
#define PL_DT__FRACTION   PL_DT__FRA
#define PL_DT__INITIAL   PL_DT__INIT
#define PL_DT__ISOLATED   PL_DT__ISO
#define PL_DT__MEDIAL   PL_DT__MED
#define PL_DT__NARROW   PL_DT__NAR
#define PL_DT__NOBREAK   PL_DT__NB
#define PL_DT__NONCANONICAL   PL_DT__NONCANON
#define PL_DT__SMALL   PL_DT__SML
#define PL_DT__SQUARE   PL_DT__SQR
#define PL_DT__SUPER   PL_DT__SUP
#define PL_DT__VERTICAL   PL_DT__VERT
#define PL_DT__WIDE   PL_EA__F
#define PL_DUPLOYAN   PL_DUPL
#define PL_EASTASIANWIDTH__A   PL_EA__A
#define PL_EASTASIANWIDTH__AMBIGUOUS   PL_EA__A
#define PL_EASTASIANWIDTH__F   PL_EA__F
#define PL_EASTASIANWIDTH__FULLWIDTH   PL_EA__F
#define PL_EASTASIANWIDTH__H   PL_EA__H
#define PL_EASTASIANWIDTH__HALFWIDTH   PL_EA__H
#define PL_EASTASIANWIDTH__N   PL_EA__N
#define PL_EASTASIANWIDTH__NA   PL_EA__NA
#define PL_EASTASIANWIDTH__NARROW   PL_EA__NA
#define PL_EASTASIANWIDTH__NEUTRAL   PL_EA__N
#define PL_EASTASIANWIDTH__W   PL_EA__W
#define PL_EASTASIANWIDTH__WIDE   PL_EA__W
#define PL_EA__AMBIGUOUS   PL_EA__A
#define PL_EA__FULLWIDTH   PL_EA__F
#define PL_EA__HALFWIDTH   PL_EA__H
#define PL_EA__NARROW   PL_EA__NA
#define PL_EA__NEUTRAL   PL_EA__N
#define PL_EA__WIDE   PL_EA__W
#define PL_EGYPTIANHIEROGLYPHS   PL_EGYP
#define PL_ELBASAN   PL_ELBA
#define PL_ENCLOSEDALPHANUMERICS   PL_ENCLOSEDALPHANUM
#define PL_ENCLOSEDALPHANUMERICSUPPLEMENT   PL_ENCLOSEDALPHANUMSUP
#define PL_ENCLOSEDCJKLETTERSANDMONTHS   PL_ENCLOSEDCJK
#define PL_ENCLOSEDIDEOGRAPHICSUPPLEMENT   PL_ENCLOSEDIDEOGRAPHICSUP
#define PL_ENCLOSINGMARK   PL_ME
#define PL_ETHIOPIC   PL_ETHI
#define PL_ETHIOPICEXTENDED   PL_ETHIOPICEXT
#define PL_ETHIOPICEXTENDEDA   PL_ETHIOPICEXTA
#define PL_ETHIOPICSUPPLEMENT   PL_ETHIOPICSUP
#define PL_EXTENDER   PL_EXT
#define PL_EXTENDER   PL_EXT
#define PL_EXTENDER__F   -PL_EXT
#define PL_EXTENDER__FALSE   -PL_EXT
#define PL_EXTENDER__N   -PL_EXT
#define PL_EXTENDER__NO   -PL_EXT
#define PL_EXTENDER__T   PL_EXT
#define PL_EXTENDER__TRUE   PL_EXT
#define PL_EXTENDER__Y   PL_EXT
#define PL_EXTENDER__YES   PL_EXT
#define PL_EXT__F   -PL_EXT
#define PL_EXT__FALSE   -PL_EXT
#define PL_EXT__N   -PL_EXT
#define PL_EXT__NO   -PL_EXT
#define PL_EXT__T   PL_EXT
#define PL_EXT__TRUE   PL_EXT
#define PL_EXT__Y   PL_EXT
#define PL_EXT__YES   PL_EXT
#define PL_FINALPUNCTUATION   PL_PF
#define PL_FORMAT   PL_CF
#define PL_FULLCOMPOSITIONEXCLUSION   PL_COMPEX
#define PL_FULLCOMPOSITIONEXCLUSION   PL_COMPEX
#define PL_FULLCOMPOSITIONEXCLUSION__F   -PL_COMPEX
#define PL_FULLCOMPOSITIONEXCLUSION__FALSE   -PL_COMPEX
#define PL_FULLCOMPOSITIONEXCLUSION__N   -PL_COMPEX
#define PL_FULLCOMPOSITIONEXCLUSION__NO   -PL_COMPEX
#define PL_FULLCOMPOSITIONEXCLUSION__T   PL_COMPEX
#define PL_FULLCOMPOSITIONEXCLUSION__TRUE   PL_COMPEX
#define PL_FULLCOMPOSITIONEXCLUSION__Y   PL_COMPEX
#define PL_FULLCOMPOSITIONEXCLUSION__YES   PL_COMPEX
#define PL_GCB__CONTROL   PL_GCB__CN
#define PL_GCB__CR   PL_LB__CR
#define PL_GCB__EB   PL_WB__EB
#define PL_GCB__EBASE   PL_WB__EB
#define PL_GCB__EBASEGAZ   PL_WB__EBG
#define PL_GCB__EBG   PL_WB__EBG
#define PL_GCB__EM   PL_LB__EM
#define PL_GCB__EMODIFIER   PL_LB__EM
#define PL_GCB__EX   PL_GREXT
#define PL_GCB__EXTEND   PL_GREXT
#define PL_GCB__GAZ   PL_WB__GAZ
#define PL_GCB__GLUEAFTERZWJ   PL_WB__GAZ
#define PL_GCB__LF   PL_LB__LF
#define PL_GCB__LV   PL_LB__H2
#define PL_GCB__LVT   PL_LB__H3
#define PL_GCB__OTHER   PL_GCB__XX
#define PL_GCB__PREPEND   PL_GCB__PP
#define PL_GCB__REGIONALINDICATOR   PL_RI
#define PL_GCB__RI   PL_RI
#define PL_GCB__SPACINGMARK   PL_GCB__SM
#define PL_GCB__ZWJ   PL_LB__ZWJ
#define PL_GC__C   PL_C
#define PL_GC__CASEDLETTER   PL_L_AMP_
#define PL_GC__CC   PL_XPOSIXCNTRL
#define PL_GC__CF   PL_CF
#define PL_GC__CLOSEPUNCTUATION   PL_PE
#define PL_GC__CN   PL_CN
#define PL_GC__CNTRL   PL_XPOSIXCNTRL
#define PL_GC__CO   PL_CO
#define PL_GC__COMBININGMARK   PL_M
#define PL_GC__CONNECTORPUNCTUATION   PL_PC
#define PL_GC__CONTROL   PL_XPOSIXCNTRL
#define PL_GC__CS   PL_CS
#define PL_GC__CURRENCYSYMBOL   PL_SC
#define PL_GC__DASHPUNCTUATION   PL_PD
#define PL_GC__DECIMALNUMBER   PL_XPOSIXDIGIT
#define PL_GC__DIGIT   PL_XPOSIXDIGIT
#define PL_GC__ENCLOSINGMARK   PL_ME
#define PL_GC__FINALPUNCTUATION   PL_PF
#define PL_GC__FORMAT   PL_CF
#define PL_GC__INITIALPUNCTUATION   PL_PI
#define PL_GC__L   PL_L
#define PL_GC__LC   PL_L_AMP_
#define PL_GC__LETTER   PL_L
#define PL_GC__LETTERNUMBER   PL_NL
#define PL_GC__LINESEPARATOR   PL_ZL
#define PL_GC__LL   PL_LL
#define PL_GC__LM   PL_LM
#define PL_GC__LO   PL_LO
#define PL_GC__LOWERCASELETTER   PL_LL
#define PL_GC__LT   PL_LT
#define PL_GC__LU   PL_LU
#define PL_GC__L_   PL_L_AMP_
#define PL_GC__L_AMP_   PL_L_AMP_
#define PL_GC__M   PL_M
#define PL_GC__MARK   PL_M
#define PL_GC__MATHSYMBOL   PL_SM
#define PL_GC__MC   PL_MC
#define PL_GC__ME   PL_ME
#define PL_GC__MN   PL_MN
#define PL_GC__MODIFIERLETTER   PL_LM
#define PL_GC__MODIFIERSYMBOL   PL_SK
#define PL_GC__N   PL_N
#define PL_GC__ND   PL_XPOSIXDIGIT
#define PL_GC__NL   PL_NL
#define PL_GC__NO   PL_NO
#define PL_GC__NONSPACINGMARK   PL_MN
#define PL_GC__NUMBER   PL_N
#define PL_GC__OPENPUNCTUATION   PL_PS
#define PL_GC__OTHER   PL_C
#define PL_GC__OTHERLETTER   PL_LO
#define PL_GC__OTHERNUMBER   PL_NO
#define PL_GC__OTHERPUNCTUATION   PL_PO
#define PL_GC__OTHERSYMBOL   PL_SO
#define PL_GC__P   PL_P
#define PL_GC__PARAGRAPHSEPARATOR   PL_ZP
#define PL_GC__PC   PL_PC
#define PL_GC__PD   PL_PD
#define PL_GC__PE   PL_PE
#define PL_GC__PF   PL_PF
#define PL_GC__PI   PL_PI
#define PL_GC__PO   PL_PO
#define PL_GC__PRIVATEUSE   PL_CO
#define PL_GC__PS   PL_PS
#define PL_GC__PUNCT   PL_P
#define PL_GC__PUNCTUATION   PL_P
#define PL_GC__S   PL_S
#define PL_GC__SC   PL_SC
#define PL_GC__SEPARATOR   PL_Z
#define PL_GC__SK   PL_SK
#define PL_GC__SM   PL_SM
#define PL_GC__SO   PL_SO
#define PL_GC__SPACESEPARATOR   PL_ZS
#define PL_GC__SPACINGMARK   PL_MC
#define PL_GC__SURROGATE   PL_CS
#define PL_GC__SYMBOL   PL_S
#define PL_GC__TITLECASELETTER   PL_LT
#define PL_GC__UNASSIGNED   PL_CN
#define PL_GC__UPPERCASELETTER   PL_LU
#define PL_GC__Z   PL_Z
#define PL_GC__ZL   PL_ZL
#define PL_GC__ZP   PL_ZP
#define PL_GC__ZS   PL_ZS
#define PL_GENERALCATEGORY__C   PL_C
#define PL_GENERALCATEGORY__CASEDLETTER   PL_L_AMP_
#define PL_GENERALCATEGORY__CC   PL_XPOSIXCNTRL
#define PL_GENERALCATEGORY__CF   PL_CF
#define PL_GENERALCATEGORY__CLOSEPUNCTUATION   PL_PE
#define PL_GENERALCATEGORY__CN   PL_CN
#define PL_GENERALCATEGORY__CNTRL   PL_XPOSIXCNTRL
#define PL_GENERALCATEGORY__CO   PL_CO
#define PL_GENERALCATEGORY__COMBININGMARK   PL_M
#define PL_GENERALCATEGORY__CONNECTORPUNCTUATION   PL_PC
#define PL_GENERALCATEGORY__CONTROL   PL_XPOSIXCNTRL
#define PL_GENERALCATEGORY__CS   PL_CS
#define PL_GENERALCATEGORY__CURRENCYSYMBOL   PL_SC
#define PL_GENERALCATEGORY__DASHPUNCTUATION   PL_PD
#define PL_GENERALCATEGORY__DECIMALNUMBER   PL_XPOSIXDIGIT
#define PL_GENERALCATEGORY__DIGIT   PL_XPOSIXDIGIT
#define PL_GENERALCATEGORY__ENCLOSINGMARK   PL_ME
#define PL_GENERALCATEGORY__FINALPUNCTUATION   PL_PF
#define PL_GENERALCATEGORY__FORMAT   PL_CF
#define PL_GENERALCATEGORY__INITIALPUNCTUATION   PL_PI
#define PL_GENERALCATEGORY__L   PL_L
#define PL_GENERALCATEGORY__LC   PL_L_AMP_
#define PL_GENERALCATEGORY__LETTER   PL_L
#define PL_GENERALCATEGORY__LETTERNUMBER   PL_NL
#define PL_GENERALCATEGORY__LINESEPARATOR   PL_ZL
#define PL_GENERALCATEGORY__LL   PL_LL
#define PL_GENERALCATEGORY__LM   PL_LM
#define PL_GENERALCATEGORY__LO   PL_LO
#define PL_GENERALCATEGORY__LOWERCASELETTER   PL_LL
#define PL_GENERALCATEGORY__LT   PL_LT
#define PL_GENERALCATEGORY__LU   PL_LU
#define PL_GENERALCATEGORY__L_   PL_L_AMP_
#define PL_GENERALCATEGORY__L_AMP_   PL_L_AMP_
#define PL_GENERALCATEGORY__M   PL_M
#define PL_GENERALCATEGORY__MARK   PL_M
#define PL_GENERALCATEGORY__MATHSYMBOL   PL_SM
#define PL_GENERALCATEGORY__MC   PL_MC
#define PL_GENERALCATEGORY__ME   PL_ME
#define PL_GENERALCATEGORY__MN   PL_MN
#define PL_GENERALCATEGORY__MODIFIERLETTER   PL_LM
#define PL_GENERALCATEGORY__MODIFIERSYMBOL   PL_SK
#define PL_GENERALCATEGORY__N   PL_N
#define PL_GENERALCATEGORY__ND   PL_XPOSIXDIGIT
#define PL_GENERALCATEGORY__NL   PL_NL
#define PL_GENERALCATEGORY__NO   PL_NO
#define PL_GENERALCATEGORY__NONSPACINGMARK   PL_MN
#define PL_GENERALCATEGORY__NUMBER   PL_N
#define PL_GENERALCATEGORY__OPENPUNCTUATION   PL_PS
#define PL_GENERALCATEGORY__OTHER   PL_C
#define PL_GENERALCATEGORY__OTHERLETTER   PL_LO
#define PL_GENERALCATEGORY__OTHERNUMBER   PL_NO
#define PL_GENERALCATEGORY__OTHERPUNCTUATION   PL_PO
#define PL_GENERALCATEGORY__OTHERSYMBOL   PL_SO
#define PL_GENERALCATEGORY__P   PL_P
#define PL_GENERALCATEGORY__PARAGRAPHSEPARATOR   PL_ZP
#define PL_GENERALCATEGORY__PC   PL_PC
#define PL_GENERALCATEGORY__PD   PL_PD
#define PL_GENERALCATEGORY__PE   PL_PE
#define PL_GENERALCATEGORY__PF   PL_PF
#define PL_GENERALCATEGORY__PI   PL_PI
#define PL_GENERALCATEGORY__PO   PL_PO
#define PL_GENERALCATEGORY__PRIVATEUSE   PL_CO
#define PL_GENERALCATEGORY__PS   PL_PS
#define PL_GENERALCATEGORY__PUNCT   PL_P
#define PL_GENERALCATEGORY__PUNCTUATION   PL_P
#define PL_GENERALCATEGORY__S   PL_S
#define PL_GENERALCATEGORY__SC   PL_SC
#define PL_GENERALCATEGORY__SEPARATOR   PL_Z
#define PL_GENERALCATEGORY__SK   PL_SK
#define PL_GENERALCATEGORY__SM   PL_SM
#define PL_GENERALCATEGORY__SO   PL_SO
#define PL_GENERALCATEGORY__SPACESEPARATOR   PL_ZS
#define PL_GENERALCATEGORY__SPACINGMARK   PL_MC
#define PL_GENERALCATEGORY__SURROGATE   PL_CS
#define PL_GENERALCATEGORY__SYMBOL   PL_S
#define PL_GENERALCATEGORY__TITLECASELETTER   PL_LT
#define PL_GENERALCATEGORY__UNASSIGNED   PL_CN
#define PL_GENERALCATEGORY__UPPERCASELETTER   PL_LU
#define PL_GENERALCATEGORY__Z   PL_Z
#define PL_GENERALCATEGORY__ZL   PL_ZL
#define PL_GENERALCATEGORY__ZP   PL_ZP
#define PL_GENERALCATEGORY__ZS   PL_ZS
#define PL_GENERALPUNCTUATION   PL_INPUNCTUATION
#define PL_GEOMETRICSHAPESEXTENDED   PL_GEOMETRICSHAPESEXT
#define PL_GEORGIAN   PL_GEOR
#define PL_GEORGIANSUPPLEMENT   PL_GEORGIANSUP
#define PL_GLAGOLITIC   PL_GLAG
#define PL_GLAGOLITICSUPPLEMENT   PL_GLAGOLITICSUP
#define PL_GOTHIC   PL_GOTH
#define PL_GRANTHA   PL_GRAN
#define PL_GRAPH   PL_XPOSIXGRAPH
#define PL_GRAPHEMEBASE   PL_GRBASE
#define PL_GRAPHEMEBASE   PL_GRBASE
#define PL_GRAPHEMEBASE__F   -PL_GRBASE
#define PL_GRAPHEMEBASE__FALSE   -PL_GRBASE
#define PL_GRAPHEMEBASE__N   -PL_GRBASE
#define PL_GRAPHEMEBASE__NO   -PL_GRBASE
#define PL_GRAPHEMEBASE__T   PL_GRBASE
#define PL_GRAPHEMEBASE__TRUE   PL_GRBASE
#define PL_GRAPHEMEBASE__Y   PL_GRBASE
#define PL_GRAPHEMEBASE__YES   PL_GRBASE
#define PL_GRAPHEMECLUSTERBREAK__CN   PL_GCB__CN
#define PL_GRAPHEMECLUSTERBREAK__CONTROL   PL_GCB__CN
#define PL_GRAPHEMECLUSTERBREAK__CR   PL_LB__CR
#define PL_GRAPHEMECLUSTERBREAK__EB   PL_WB__EB
#define PL_GRAPHEMECLUSTERBREAK__EBASE   PL_WB__EB
#define PL_GRAPHEMECLUSTERBREAK__EBASEGAZ   PL_WB__EBG
#define PL_GRAPHEMECLUSTERBREAK__EBG   PL_WB__EBG
#define PL_GRAPHEMECLUSTERBREAK__EM   PL_LB__EM
#define PL_GRAPHEMECLUSTERBREAK__EMODIFIER   PL_LB__EM
#define PL_GRAPHEMECLUSTERBREAK__EX   PL_GREXT
#define PL_GRAPHEMECLUSTERBREAK__EXTEND   PL_GREXT
#define PL_GRAPHEMECLUSTERBREAK__GAZ   PL_WB__GAZ
#define PL_GRAPHEMECLUSTERBREAK__GLUEAFTERZWJ   PL_WB__GAZ
#define PL_GRAPHEMECLUSTERBREAK__L   PL_GCB__L
#define PL_GRAPHEMECLUSTERBREAK__LF   PL_LB__LF
#define PL_GRAPHEMECLUSTERBREAK__LV   PL_LB__H2
#define PL_GRAPHEMECLUSTERBREAK__LVT   PL_LB__H3
#define PL_GRAPHEMECLUSTERBREAK__OTHER   PL_GCB__XX
#define PL_GRAPHEMECLUSTERBREAK__PP   PL_GCB__PP
#define PL_GRAPHEMECLUSTERBREAK__PREPEND   PL_GCB__PP
#define PL_GRAPHEMECLUSTERBREAK__REGIONALINDICATOR   PL_RI
#define PL_GRAPHEMECLUSTERBREAK__RI   PL_RI
#define PL_GRAPHEMECLUSTERBREAK__SM   PL_GCB__SM
#define PL_GRAPHEMECLUSTERBREAK__SPACINGMARK   PL_GCB__SM
#define PL_GRAPHEMECLUSTERBREAK__T   PL_GCB__T
#define PL_GRAPHEMECLUSTERBREAK__V   PL_GCB__V
#define PL_GRAPHEMECLUSTERBREAK__XX   PL_GCB__XX
#define PL_GRAPHEMECLUSTERBREAK__ZWJ   PL_LB__ZWJ
#define PL_GRAPHEMEEXTEND   PL_GREXT
#define PL_GRAPHEMEEXTEND   PL_GREXT
#define PL_GRAPHEMEEXTEND__F   -PL_GREXT
#define PL_GRAPHEMEEXTEND__FALSE   -PL_GREXT
#define PL_GRAPHEMEEXTEND__N   -PL_GREXT
#define PL_GRAPHEMEEXTEND__NO   -PL_GREXT
#define PL_GRAPHEMEEXTEND__T   PL_GREXT
#define PL_GRAPHEMEEXTEND__TRUE   PL_GREXT
#define PL_GRAPHEMEEXTEND__Y   PL_GREXT
#define PL_GRAPHEMEEXTEND__YES   PL_GREXT
#define PL_GRBASE__F   -PL_GRBASE
#define PL_GRBASE__FALSE   -PL_GRBASE
#define PL_GRBASE__N   -PL_GRBASE
#define PL_GRBASE__NO   -PL_GRBASE
#define PL_GRBASE__T   PL_GRBASE
#define PL_GRBASE__TRUE   PL_GRBASE
#define PL_GRBASE__Y   PL_GRBASE
#define PL_GRBASE__YES   PL_GRBASE
#define PL_GREEK   PL_GREK
#define PL_GREEKANDCOPTIC   PL_INGREEK
#define PL_GREEKEXTENDED   PL_GREEKEXT
#define PL_GREXT__F   -PL_GREXT
#define PL_GREXT__FALSE   -PL_GREXT
#define PL_GREXT__N   -PL_GREXT
#define PL_GREXT__NO   -PL_GREXT
#define PL_GREXT__T   PL_GREXT
#define PL_GREXT__TRUE   PL_GREXT
#define PL_GREXT__Y   PL_GREXT
#define PL_GREXT__YES   PL_GREXT
#define PL_GUJARATI   PL_GUJR
#define PL_GURMUKHI   PL_GURU
#define PL_HALFWIDTHANDFULLWIDTHFORMS   PL_HALFANDFULLFORMS
#define PL_HANGUL   PL_HANG
#define PL_HANGULCOMPATIBILITYJAMO   PL_COMPATJAMO
#define PL_HANGULJAMO   PL_JAMO
#define PL_HANGULJAMOEXTENDEDA   PL_JAMOEXTA
#define PL_HANGULJAMOEXTENDEDB   PL_JAMOEXTB
#define PL_HANGULSYLLABLES   PL_INHANGUL
#define PL_HANGULSYLLABLETYPE__L   PL_GCB__L
#define PL_HANGULSYLLABLETYPE__LEADINGJAMO   PL_GCB__L
#define PL_HANGULSYLLABLETYPE__LV   PL_LB__H2
#define PL_HANGULSYLLABLETYPE__LVSYLLABLE   PL_LB__H2
#define PL_HANGULSYLLABLETYPE__LVT   PL_LB__H3
#define PL_HANGULSYLLABLETYPE__LVTSYLLABLE   PL_LB__H3
#define PL_HANGULSYLLABLETYPE__NA   PL_HST__NA
#define PL_HANGULSYLLABLETYPE__NOTAPPLICABLE   PL_HST__NA
#define PL_HANGULSYLLABLETYPE__T   PL_GCB__T
#define PL_HANGULSYLLABLETYPE__TRAILINGJAMO   PL_GCB__T
#define PL_HANGULSYLLABLETYPE__V   PL_GCB__V
#define PL_HANGULSYLLABLETYPE__VOWELJAMO   PL_GCB__V
#define PL_HANI   PL_HAN
#define PL_HANUNOO   PL_HANO
#define PL_HATRAN   PL_HATR
#define PL_HEBREW   PL_HEBR
#define PL_HEX   PL_XPOSIXXDIGIT
#define PL_HEXDIGIT   PL_XPOSIXXDIGIT
#define PL_HEXDIGIT   PL_XPOSIXXDIGIT
#define PL_HEXDIGIT__F   -PL_XPOSIXXDIGIT
#define PL_HEXDIGIT__FALSE   -PL_XPOSIXXDIGIT
#define PL_HEXDIGIT__N   -PL_XPOSIXXDIGIT
#define PL_HEXDIGIT__NO   -PL_XPOSIXXDIGIT
#define PL_HEXDIGIT__T   PL_XPOSIXXDIGIT
#define PL_HEXDIGIT__TRUE   PL_XPOSIXXDIGIT
#define PL_HEXDIGIT__Y   PL_XPOSIXXDIGIT
#define PL_HEXDIGIT__YES   PL_XPOSIXXDIGIT
#define PL_HEX__F   -PL_XPOSIXXDIGIT
#define PL_HEX__FALSE   -PL_XPOSIXXDIGIT
#define PL_HEX__N   -PL_XPOSIXXDIGIT
#define PL_HEX__NO   -PL_XPOSIXXDIGIT
#define PL_HEX__T   PL_XPOSIXXDIGIT
#define PL_HEX__TRUE   PL_XPOSIXXDIGIT
#define PL_HEX__Y   PL_XPOSIXXDIGIT
#define PL_HEX__YES   PL_XPOSIXXDIGIT
#define PL_HIGHPRIVATEUSESURROGATES   PL_HIGHPUSURROGATES
#define PL_HIRAGANA   PL_HIRA
#define PL_HORIZSPACE   PL_XPOSIXBLANK
#define PL_HST__L   PL_GCB__L
#define PL_HST__LEADINGJAMO   PL_GCB__L
#define PL_HST__LV   PL_LB__H2
#define PL_HST__LVSYLLABLE   PL_LB__H2
#define PL_HST__LVT   PL_LB__H3
#define PL_HST__LVTSYLLABLE   PL_LB__H3
#define PL_HST__NOTAPPLICABLE   PL_HST__NA
#define PL_HST__T   PL_GCB__T
#define PL_HST__TRAILINGJAMO   PL_GCB__T
#define PL_HST__V   PL_GCB__V
#define PL_HST__VOWELJAMO   PL_GCB__V
#define PL_HYPHEN__F   -PL_HYPHEN
#define PL_HYPHEN__FALSE   -PL_HYPHEN
#define PL_HYPHEN__N   -PL_HYPHEN
#define PL_HYPHEN__NO   -PL_HYPHEN
#define PL_HYPHEN__T   PL_HYPHEN
#define PL_HYPHEN__TRUE   PL_HYPHEN
#define PL_HYPHEN__Y   PL_HYPHEN
#define PL_HYPHEN__YES   PL_HYPHEN
#define PL_IDCONTINUE   PL_IDC
#define PL_IDCONTINUE   PL_IDC
#define PL_IDCONTINUE__F   -PL_IDC
#define PL_IDCONTINUE__FALSE   -PL_IDC
#define PL_IDCONTINUE__N   -PL_IDC
#define PL_IDCONTINUE__NO   -PL_IDC
#define PL_IDCONTINUE__T   PL_IDC
#define PL_IDCONTINUE__TRUE   PL_IDC
#define PL_IDCONTINUE__Y   PL_IDC
#define PL_IDCONTINUE__YES   PL_IDC
#define PL_IDC__F   -PL_IDC
#define PL_IDC__FALSE   -PL_IDC
#define PL_IDC__N   -PL_IDC
#define PL_IDC__NO   -PL_IDC
#define PL_IDC__T   PL_IDC
#define PL_IDC__TRUE   PL_IDC
#define PL_IDC__Y   PL_IDC
#define PL_IDC__YES   PL_IDC
#define PL_IDEOGRAPHIC   PL_IDEO
#define PL_IDEOGRAPHIC   PL_IDEO
#define PL_IDEOGRAPHICDESCRIPTIONCHARACTERS   PL_INIDC
#define PL_IDEOGRAPHICSYMBOLSANDPUNCTUATION   PL_IDEOGRAPHICSYMBOLS
#define PL_IDEOGRAPHIC__F   -PL_IDEO
#define PL_IDEOGRAPHIC__FALSE   -PL_IDEO
#define PL_IDEOGRAPHIC__N   -PL_IDEO
#define PL_IDEOGRAPHIC__NO   -PL_IDEO
#define PL_IDEOGRAPHIC__T   PL_IDEO
#define PL_IDEOGRAPHIC__TRUE   PL_IDEO
#define PL_IDEOGRAPHIC__Y   PL_IDEO
#define PL_IDEOGRAPHIC__YES   PL_IDEO
#define PL_IDEO__F   -PL_IDEO
#define PL_IDEO__FALSE   -PL_IDEO
#define PL_IDEO__N   -PL_IDEO
#define PL_IDEO__NO   -PL_IDEO
#define PL_IDEO__T   PL_IDEO
#define PL_IDEO__TRUE   PL_IDEO
#define PL_IDEO__Y   PL_IDEO
#define PL_IDEO__YES   PL_IDEO
#define PL_IDSBINARYOPERATOR   PL_IDSB
#define PL_IDSBINARYOPERATOR   PL_IDSB
#define PL_IDSBINARYOPERATOR__F   -PL_IDSB
#define PL_IDSBINARYOPERATOR__FALSE   -PL_IDSB
#define PL_IDSBINARYOPERATOR__N   -PL_IDSB
#define PL_IDSBINARYOPERATOR__NO   -PL_IDSB
#define PL_IDSBINARYOPERATOR__T   PL_IDSB
#define PL_IDSBINARYOPERATOR__TRUE   PL_IDSB
#define PL_IDSBINARYOPERATOR__Y   PL_IDSB
#define PL_IDSBINARYOPERATOR__YES   PL_IDSB
#define PL_IDSB__F   -PL_IDSB
#define PL_IDSB__FALSE   -PL_IDSB
#define PL_IDSB__N   -PL_IDSB
#define PL_IDSB__NO   -PL_IDSB
#define PL_IDSB__T   PL_IDSB
#define PL_IDSB__TRUE   PL_IDSB
#define PL_IDSB__Y   PL_IDSB
#define PL_IDSB__YES   PL_IDSB
#define PL_IDSTART   PL_IDS
#define PL_IDSTART   PL_IDS
#define PL_IDSTART__F   -PL_IDS
#define PL_IDSTART__FALSE   -PL_IDS
#define PL_IDSTART__N   -PL_IDS
#define PL_IDSTART__NO   -PL_IDS
#define PL_IDSTART__T   PL_IDS
#define PL_IDSTART__TRUE   PL_IDS
#define PL_IDSTART__Y   PL_IDS
#define PL_IDSTART__YES   PL_IDS
#define PL_IDSTRINARYOPERATOR   PL_IDST
#define PL_IDSTRINARYOPERATOR   PL_IDST
#define PL_IDSTRINARYOPERATOR__F   -PL_IDST
#define PL_IDSTRINARYOPERATOR__FALSE   -PL_IDST
#define PL_IDSTRINARYOPERATOR__N   -PL_IDST
#define PL_IDSTRINARYOPERATOR__NO   -PL_IDST
#define PL_IDSTRINARYOPERATOR__T   PL_IDST
#define PL_IDSTRINARYOPERATOR__TRUE   PL_IDST
#define PL_IDSTRINARYOPERATOR__Y   PL_IDST
#define PL_IDSTRINARYOPERATOR__YES   PL_IDST
#define PL_IDST__F   -PL_IDST
#define PL_IDST__FALSE   -PL_IDST
#define PL_IDST__N   -PL_IDST
#define PL_IDST__NO   -PL_IDST
#define PL_IDST__T   PL_IDST
#define PL_IDST__TRUE   PL_IDST
#define PL_IDST__Y   PL_IDST
#define PL_IDST__YES   PL_IDST
#define PL_IDS__F   -PL_IDS
#define PL_IDS__FALSE   -PL_IDS
#define PL_IDS__N   -PL_IDS
#define PL_IDS__NO   -PL_IDS
#define PL_IDS__T   PL_IDS
#define PL_IDS__TRUE   PL_IDS
#define PL_IDS__Y   PL_IDS
#define PL_IDS__YES   PL_IDS
#define PL_IMPERIALARAMAIC   PL_ARMI
#define PL_INAEGEANNUMBERS   PL_AEGEANNUMBERS
#define PL_INALCHEMICAL   PL_ALCHEMICAL
#define PL_INALCHEMICALSYMBOLS   PL_ALCHEMICAL
#define PL_INALPHABETICPF   PL_ALPHABETICPF
#define PL_INALPHABETICPRESENTATIONFORMS   PL_ALPHABETICPF
#define PL_INANCIENTGREEKMUSIC   PL_ANCIENTGREEKMUSIC
#define PL_INANCIENTGREEKMUSICALNOTATION   PL_ANCIENTGREEKMUSIC
#define PL_INANCIENTGREEKNUMBERS   PL_ANCIENTGREEKNUMBERS
#define PL_INANCIENTSYMBOLS   PL_ANCIENTSYMBOLS
#define PL_INARABICEXTA   PL_ARABICEXTA
#define PL_INARABICEXTENDEDA   PL_ARABICEXTA
#define PL_INARABICMATH   PL_ARABICMATH
#define PL_INARABICMATHEMATICALALPHABETICSYMBOLS   PL_ARABICMATH
#define PL_INARABICPFA   PL_ARABICPFA
#define PL_INARABICPFB   PL_ARABICPFB
#define PL_INARABICPRESENTATIONFORMSA   PL_ARABICPFA
#define PL_INARABICPRESENTATIONFORMSB   PL_ARABICPFB
#define PL_INARABICSUP   PL_ARABICSUP
#define PL_INARABICSUPPLEMENT   PL_ARABICSUP
#define PL_INARROWS   PL_ARROWS
#define PL_INASCII   PL_ASCII
#define PL_INBAMUMSUP   PL_BAMUMSUP
#define PL_INBAMUMSUPPLEMENT   PL_BAMUMSUP
#define PL_INBASICLATIN   PL_ASCII
#define PL_INBLOCKELEMENTS   PL_BLOCKELEMENTS
#define PL_INBOPOMOFOEXT   PL_BOPOMOFOEXT
#define PL_INBOPOMOFOEXTENDED   PL_BOPOMOFOEXT
#define PL_INBOXDRAWING   PL_BOXDRAWING
#define PL_INBRAILLE   PL_BRAI
#define PL_INBRAILLEPATTERNS   PL_BRAI
#define PL_INBYZANTINEMUSIC   PL_BYZANTINEMUSIC
#define PL_INBYZANTINEMUSICALSYMBOLS   PL_BYZANTINEMUSIC
#define PL_INCANADIANSYLLABICS   PL_UCAS
#define PL_INCHEROKEESUP   PL_CHEROKEESUP
#define PL_INCHEROKEESUPPLEMENT   PL_CHEROKEESUP
#define PL_INCJK   PL_CJK
#define PL_INCJKCOMPAT   PL_CJKCOMPAT
#define PL_INCJKCOMPATFORMS   PL_CJKCOMPATFORMS
#define PL_INCJKCOMPATIBILITY   PL_CJKCOMPAT
#define PL_INCJKCOMPATIBILITYFORMS   PL_CJKCOMPATFORMS
#define PL_INCJKCOMPATIBILITYIDEOGRAPHS   PL_CJKCOMPATIDEOGRAPHS
#define PL_INCJKCOMPATIBILITYIDEOGRAPHSSUPPLEMENT   PL_CJKCOMPATIDEOGRAPHSSUP
#define PL_INCJKCOMPATIDEOGRAPHS   PL_CJKCOMPATIDEOGRAPHS
#define PL_INCJKCOMPATIDEOGRAPHSSUP   PL_CJKCOMPATIDEOGRAPHSSUP
#define PL_INCJKEXTA   PL_CJKEXTA
#define PL_INCJKEXTB   PL_CJKEXTB
#define PL_INCJKEXTC   PL_CJKEXTC
#define PL_INCJKEXTD   PL_CJKEXTD
#define PL_INCJKEXTE   PL_CJKEXTE
#define PL_INCJKEXTF   PL_CJKEXTF
#define PL_INCJKRADICALSSUP   PL_CJKRADICALSSUP
#define PL_INCJKRADICALSSUPPLEMENT   PL_CJKRADICALSSUP
#define PL_INCJKSTROKES   PL_CJKSTROKES
#define PL_INCJKSYMBOLS   PL_CJKSYMBOLS
#define PL_INCJKSYMBOLSANDPUNCTUATION   PL_CJKSYMBOLS
#define PL_INCJKUNIFIEDIDEOGRAPHS   PL_CJK
#define PL_INCJKUNIFIEDIDEOGRAPHSEXTENSIONA   PL_CJKEXTA
#define PL_INCJKUNIFIEDIDEOGRAPHSEXTENSIONB   PL_CJKEXTB
#define PL_INCJKUNIFIEDIDEOGRAPHSEXTENSIONC   PL_CJKEXTC
#define PL_INCJKUNIFIEDIDEOGRAPHSEXTENSIOND   PL_CJKEXTD
#define PL_INCJKUNIFIEDIDEOGRAPHSEXTENSIONE   PL_CJKEXTE
#define PL_INCJKUNIFIEDIDEOGRAPHSEXTENSIONF   PL_CJKEXTF
#define PL_INCOMBININGDIACRITICALMARKS   PL_DIACRITICALS
#define PL_INCOMBININGDIACRITICALMARKSEXTENDED   PL_DIACRITICALSEXT
#define PL_INCOMBININGDIACRITICALMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_INCOMBININGDIACRITICALMARKSSUPPLEMENT   PL_DIACRITICALSSUP
#define PL_INCOMBININGHALFMARKS   PL_HALFMARKS
#define PL_INCOMBININGMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_INCOMMONINDICNUMBERFORMS   PL_INDICNUMBERFORMS
#define PL_INCOMPATJAMO   PL_COMPATJAMO
#define PL_INCONTROLPICTURES   PL_CONTROLPICTURES
#define PL_INCOPTICEPACTNUMBERS   PL_COPTICEPACTNUMBERS
#define PL_INCOUNTINGROD   PL_COUNTINGROD
#define PL_INCOUNTINGRODNUMERALS   PL_COUNTINGROD
#define PL_INCUNEIFORMNUMBERS   PL_CUNEIFORMNUMBERS
#define PL_INCUNEIFORMNUMBERSANDPUNCTUATION   PL_CUNEIFORMNUMBERS
#define PL_INCURRENCYSYMBOLS   PL_CURRENCYSYMBOLS
#define PL_INCYPRIOTSYLLABARY   PL_CYPRIOTSYLLABARY
#define PL_INCYRILLICEXTA   PL_CYRILLICEXTA
#define PL_INCYRILLICEXTB   PL_CYRILLICEXTB
#define PL_INCYRILLICEXTC   PL_CYRILLICEXTC
#define PL_INCYRILLICEXTENDEDA   PL_CYRILLICEXTA
#define PL_INCYRILLICEXTENDEDB   PL_CYRILLICEXTB
#define PL_INCYRILLICEXTENDEDC   PL_CYRILLICEXTC
#define PL_INCYRILLICSUP   PL_CYRILLICSUP
#define PL_INCYRILLICSUPPLEMENT   PL_CYRILLICSUP
#define PL_INCYRILLICSUPPLEMENTARY   PL_CYRILLICSUP
#define PL_INDESERET   PL_DSRT
#define PL_INDEVANAGARIEXT   PL_DEVANAGARIEXT
#define PL_INDEVANAGARIEXTENDED   PL_DEVANAGARIEXT
#define PL_INDIACRITICALS   PL_DIACRITICALS
#define PL_INDIACRITICALSEXT   PL_DIACRITICALSEXT
#define PL_INDIACRITICALSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_INDIACRITICALSSUP   PL_DIACRITICALSSUP
#define PL_INDICPOSITIONALCATEGORY__BOTTOM   PL_INPC__BOTTOM
#define PL_INDICPOSITIONALCATEGORY__BOTTOMANDLEFT   PL_INPC__BOTTOMANDLEFT
#define PL_INDICPOSITIONALCATEGORY__BOTTOMANDRIGHT   PL_INPC__BOTTOMANDRIGHT
#define PL_INDICPOSITIONALCATEGORY__LEFT   PL_INPC__LEFT
#define PL_INDICPOSITIONALCATEGORY__LEFTANDRIGHT   PL_INPC__LEFTANDRIGHT
#define PL_INDICPOSITIONALCATEGORY__NA   PL_INPC__NA
#define PL_INDICPOSITIONALCATEGORY__OVERSTRUCK   PL_INPC__OVERSTRUCK
#define PL_INDICPOSITIONALCATEGORY__RIGHT   PL_INPC__RIGHT
#define PL_INDICPOSITIONALCATEGORY__TOP   PL_INPC__TOP
#define PL_INDICPOSITIONALCATEGORY__TOPANDBOTTOM   PL_INPC__TOPANDBOTTOM
#define PL_INDICPOSITIONALCATEGORY__TOPANDBOTTOMANDRIGHT   PL_INPC__TOPANDBOTTOMANDRIGHT
#define PL_INDICPOSITIONALCATEGORY__TOPANDLEFT   PL_INPC__TOPANDLEFT
#define PL_INDICPOSITIONALCATEGORY__TOPANDLEFTANDRIGHT   PL_INPC__TOPANDLEFTANDRIGHT
#define PL_INDICPOSITIONALCATEGORY__TOPANDRIGHT   PL_INPC__TOPANDRIGHT
#define PL_INDICPOSITIONALCATEGORY__VISUALORDERLEFT   PL_LOE
#define PL_INDICSYLLABICCATEGORY__AVAGRAHA   PL_INSC__AVAGRAHA
#define PL_INDICSYLLABICCATEGORY__BINDU   PL_INSC__BINDU
#define PL_INDICSYLLABICCATEGORY__BRAHMIJOININGNUMBER   PL_INSC__BRAHMIJOININGNUMBER
#define PL_INDICSYLLABICCATEGORY__CANTILLATIONMARK   PL_INSC__CANTILLATIONMARK
#define PL_INDICSYLLABICCATEGORY__CONSONANT   PL_INSC__CONSONANT
#define PL_INDICSYLLABICCATEGORY__CONSONANTDEAD   PL_INSC__CONSONANTDEAD
#define PL_INDICSYLLABICCATEGORY__CONSONANTFINAL   PL_INSC__CONSONANTFINAL
#define PL_INDICSYLLABICCATEGORY__CONSONANTHEADLETTER   PL_INSC__CONSONANTHEADLETTER
#define PL_INDICSYLLABICCATEGORY__CONSONANTKILLER   PL_INSC__CONSONANTKILLER
#define PL_INDICSYLLABICCATEGORY__CONSONANTMEDIAL   PL_INSC__CONSONANTMEDIAL
#define PL_INDICSYLLABICCATEGORY__CONSONANTPLACEHOLDER   PL_INSC__CONSONANTPLACEHOLDER
#define PL_INDICSYLLABICCATEGORY__CONSONANTPRECEDINGREPHA   PL_INSC__CONSONANTPRECEDINGREPHA
#define PL_INDICSYLLABICCATEGORY__CONSONANTPREFIXED   PL_INSC__CONSONANTPREFIXED
#define PL_INDICSYLLABICCATEGORY__CONSONANTSUBJOINED   PL_INSC__CONSONANTSUBJOINED
#define PL_INDICSYLLABICCATEGORY__CONSONANTSUCCEEDINGREPHA   PL_INSC__CONSONANTSUCCEEDINGREPHA
#define PL_INDICSYLLABICCATEGORY__CONSONANTWITHSTACKER   PL_INSC__CONSONANTWITHSTACKER
#define PL_INDICSYLLABICCATEGORY__GEMINATIONMARK   PL_INSC__GEMINATIONMARK
#define PL_INDICSYLLABICCATEGORY__INVISIBLESTACKER   PL_INSC__INVISIBLESTACKER
#define PL_INDICSYLLABICCATEGORY__JOINER   PL_LB__ZWJ
#define PL_INDICSYLLABICCATEGORY__MODIFYINGLETTER   PL_INSC__MODIFYINGLETTER
#define PL_INDICSYLLABICCATEGORY__NONJOINER   PL_INSC__NONJOINER
#define PL_INDICSYLLABICCATEGORY__NUKTA   PL_INSC__NUKTA
#define PL_INDICSYLLABICCATEGORY__NUMBER   PL_INSC__NUMBER
#define PL_INDICSYLLABICCATEGORY__NUMBERJOINER   PL_INSC__NUMBERJOINER
#define PL_INDICSYLLABICCATEGORY__OTHER   PL_INSC__OTHER
#define PL_INDICSYLLABICCATEGORY__PUREKILLER   PL_INSC__PUREKILLER
#define PL_INDICSYLLABICCATEGORY__REGISTERSHIFTER   PL_INSC__REGISTERSHIFTER
#define PL_INDICSYLLABICCATEGORY__SYLLABLEMODIFIER   PL_INSC__SYLLABLEMODIFIER
#define PL_INDICSYLLABICCATEGORY__TONELETTER   PL_INSC__TONELETTER
#define PL_INDICSYLLABICCATEGORY__TONEMARK   PL_INSC__TONEMARK
#define PL_INDICSYLLABICCATEGORY__VIRAMA   PL_INSC__VIRAMA
#define PL_INDICSYLLABICCATEGORY__VISARGA   PL_INSC__VISARGA
#define PL_INDICSYLLABICCATEGORY__VOWEL   PL_INSC__VOWEL
#define PL_INDICSYLLABICCATEGORY__VOWELDEPENDENT   PL_INSC__VOWELDEPENDENT
#define PL_INDICSYLLABICCATEGORY__VOWELINDEPENDENT   PL_INSC__VOWELINDEPENDENT
#define PL_INDINGBATS   PL_DINGBATS
#define PL_INDOMINO   PL_DOMINO
#define PL_INDOMINOTILES   PL_DOMINO
#define PL_INEARLYDYNASTICCUNEIFORM   PL_EARLYDYNASTICCUNEIFORM
#define PL_INEMOTICONS   PL_EMOTICONS
#define PL_INENCLOSEDALPHANUM   PL_ENCLOSEDALPHANUM
#define PL_INENCLOSEDALPHANUMERICS   PL_ENCLOSEDALPHANUM
#define PL_INENCLOSEDALPHANUMERICSUPPLEMENT   PL_ENCLOSEDALPHANUMSUP
#define PL_INENCLOSEDALPHANUMSUP   PL_ENCLOSEDALPHANUMSUP
#define PL_INENCLOSEDCJK   PL_ENCLOSEDCJK
#define PL_INENCLOSEDCJKLETTERSANDMONTHS   PL_ENCLOSEDCJK
#define PL_INENCLOSEDIDEOGRAPHICSUP   PL_ENCLOSEDIDEOGRAPHICSUP
#define PL_INENCLOSEDIDEOGRAPHICSUPPLEMENT   PL_ENCLOSEDIDEOGRAPHICSUP
#define PL_INETHIOPICEXT   PL_ETHIOPICEXT
#define PL_INETHIOPICEXTA   PL_ETHIOPICEXTA
#define PL_INETHIOPICEXTENDED   PL_ETHIOPICEXT
#define PL_INETHIOPICEXTENDEDA   PL_ETHIOPICEXTA
#define PL_INETHIOPICSUP   PL_ETHIOPICSUP
#define PL_INETHIOPICSUPPLEMENT   PL_ETHIOPICSUP
#define PL_INGENERALPUNCTUATION   PL_INPUNCTUATION
#define PL_INGEOMETRICSHAPES   PL_GEOMETRICSHAPES
#define PL_INGEOMETRICSHAPESEXT   PL_GEOMETRICSHAPESEXT
#define PL_INGEOMETRICSHAPESEXTENDED   PL_GEOMETRICSHAPESEXT
#define PL_INGEORGIANSUP   PL_GEORGIANSUP
#define PL_INGEORGIANSUPPLEMENT   PL_GEORGIANSUP
#define PL_INGLAGOLITICSUP   PL_GLAGOLITICSUP
#define PL_INGLAGOLITICSUPPLEMENT   PL_GLAGOLITICSUP
#define PL_INGREEKANDCOPTIC   PL_INGREEK
#define PL_INGREEKEXT   PL_GREEKEXT
#define PL_INGREEKEXTENDED   PL_GREEKEXT
#define PL_INHALFANDFULLFORMS   PL_HALFANDFULLFORMS
#define PL_INHALFMARKS   PL_HALFMARKS
#define PL_INHALFWIDTHANDFULLWIDTHFORMS   PL_HALFANDFULLFORMS
#define PL_INHANGULCOMPATIBILITYJAMO   PL_COMPATJAMO
#define PL_INHANGULJAMO   PL_JAMO
#define PL_INHANGULJAMOEXTENDEDA   PL_JAMOEXTA
#define PL_INHANGULJAMOEXTENDEDB   PL_JAMOEXTB
#define PL_INHANGULSYLLABLES   PL_INHANGUL
#define PL_INHERITED   PL_QAAI
#define PL_INHIGHPRIVATEUSESURROGATES   PL_HIGHPUSURROGATES
#define PL_INHIGHPUSURROGATES   PL_HIGHPUSURROGATES
#define PL_INHIGHSURROGATES   PL_HIGHSURROGATES
#define PL_INIDEOGRAPHICDESCRIPTIONCHARACTERS   PL_INIDC
#define PL_INIDEOGRAPHICSYMBOLS   PL_IDEOGRAPHICSYMBOLS
#define PL_INIDEOGRAPHICSYMBOLSANDPUNCTUATION   PL_IDEOGRAPHICSYMBOLS
#define PL_ININDICNUMBERFORMS   PL_INDICNUMBERFORMS
#define PL_INIPAEXT   PL_IPAEXT
#define PL_INIPAEXTENSIONS   PL_IPAEXT
#define PL_INITIALPUNCTUATION   PL_PI
#define PL_INJAMO   PL_JAMO
#define PL_INJAMOEXTA   PL_JAMOEXTA
#define PL_INJAMOEXTB   PL_JAMOEXTB
#define PL_INKANAEXTA   PL_KANAEXTA
#define PL_INKANAEXTENDEDA   PL_KANAEXTA
#define PL_INKANASUP   PL_KANASUP
#define PL_INKANASUPPLEMENT   PL_KANASUP
#define PL_INKANBUN   PL_KANBUN
#define PL_INKANGXI   PL_KANGXI
#define PL_INKANGXIRADICALS   PL_KANGXI
#define PL_INKATAKANAEXT   PL_KATAKANAEXT
#define PL_INKATAKANAPHONETICEXTENSIONS   PL_KATAKANAEXT
#define PL_INKAYAHLI   PL_KALI
#define PL_INKHMERSYMBOLS   PL_KHMERSYMBOLS
#define PL_INLATIN1   PL_LATIN1
#define PL_INLATIN1SUP   PL_LATIN1
#define PL_INLATIN1SUPPLEMENT   PL_LATIN1
#define PL_INLATINEXTA   PL_LATINEXTA
#define PL_INLATINEXTADDITIONAL   PL_LATINEXTADDITIONAL
#define PL_INLATINEXTB   PL_LATINEXTB
#define PL_INLATINEXTC   PL_LATINEXTC
#define PL_INLATINEXTD   PL_LATINEXTD
#define PL_INLATINEXTE   PL_LATINEXTE
#define PL_INLATINEXTENDEDA   PL_LATINEXTA
#define PL_INLATINEXTENDEDADDITIONAL   PL_LATINEXTADDITIONAL
#define PL_INLATINEXTENDEDB   PL_LATINEXTB
#define PL_INLATINEXTENDEDC   PL_LATINEXTC
#define PL_INLATINEXTENDEDD   PL_LATINEXTD
#define PL_INLATINEXTENDEDE   PL_LATINEXTE
#define PL_INLETTERLIKESYMBOLS   PL_LETTERLIKESYMBOLS
#define PL_INLINEARBIDEOGRAMS   PL_LINEARBIDEOGRAMS
#define PL_INLINEARBSYLLABARY   PL_LINEARBSYLLABARY
#define PL_INLISU   PL_LISU
#define PL_INLOWSURROGATES   PL_LOWSURROGATES
#define PL_INMAHJONG   PL_MAHJONG
#define PL_INMAHJONGTILES   PL_MAHJONG
#define PL_INMATHALPHANUM   PL_MATHALPHANUM
#define PL_INMATHEMATICALALPHANUMERICSYMBOLS   PL_MATHALPHANUM
#define PL_INMATHEMATICALOPERATORS   PL_MATHOPERATORS
#define PL_INMATHOPERATORS   PL_MATHOPERATORS
#define PL_INMEETEIMAYEKEXT   PL_MEETEIMAYEKEXT
#define PL_INMEETEIMAYEKEXTENSIONS   PL_MEETEIMAYEKEXT
#define PL_INMEROITICHIEROGLYPHS   PL_MERO
#define PL_INMISCARROWS   PL_MISCARROWS
#define PL_INMISCELLANEOUSMATHEMATICALSYMBOLSA   PL_MISCMATHSYMBOLSA
#define PL_INMISCELLANEOUSMATHEMATICALSYMBOLSB   PL_MISCMATHSYMBOLSB
#define PL_INMISCELLANEOUSSYMBOLS   PL_MISCSYMBOLS
#define PL_INMISCELLANEOUSSYMBOLSANDARROWS   PL_MISCARROWS
#define PL_INMISCELLANEOUSSYMBOLSANDPICTOGRAPHS   PL_MISCPICTOGRAPHS
#define PL_INMISCELLANEOUSTECHNICAL   PL_MISCTECHNICAL
#define PL_INMISCMATHSYMBOLSA   PL_MISCMATHSYMBOLSA
#define PL_INMISCMATHSYMBOLSB   PL_MISCMATHSYMBOLSB
#define PL_INMISCPICTOGRAPHS   PL_MISCPICTOGRAPHS
#define PL_INMISCSYMBOLS   PL_MISCSYMBOLS
#define PL_INMISCTECHNICAL   PL_MISCTECHNICAL
#define PL_INMODIFIERLETTERS   PL_MODIFIERLETTERS
#define PL_INMODIFIERTONELETTERS   PL_MODIFIERTONELETTERS
#define PL_INMONGOLIANSUP   PL_MONGOLIANSUP
#define PL_INMONGOLIANSUPPLEMENT   PL_MONGOLIANSUP
#define PL_INMUSIC   PL_MUSIC
#define PL_INMUSICALSYMBOLS   PL_MUSIC
#define PL_INMYANMAREXTA   PL_MYANMAREXTA
#define PL_INMYANMAREXTB   PL_MYANMAREXTB
#define PL_INMYANMAREXTENDEDA   PL_MYANMAREXTA
#define PL_INMYANMAREXTENDEDB   PL_MYANMAREXTB
#define PL_INNB   PL_NB
#define PL_INNOBLOCK   PL_NB
#define PL_INNUMBERFORMS   PL_NUMBERFORMS
#define PL_INOCR   PL_OCR
#define PL_INOLCHIKI   PL_OLCK
#define PL_INOLDNORTHARABIAN   PL_NARB
#define PL_INOLDSOUTHARABIAN   PL_SARB
#define PL_INOPTICALCHARACTERRECOGNITION   PL_OCR
#define PL_INORNAMENTALDINGBATS   PL_ORNAMENTALDINGBATS
#define PL_INPALMYRENE   PL_PALM
#define PL_INPC__VISUALORDERLEFT   PL_LOE
#define PL_INPHAISTOS   PL_PHAISTOS
#define PL_INPHAISTOSDISC   PL_PHAISTOS
#define PL_INPHONETICEXT   PL_PHONETICEXT
#define PL_INPHONETICEXTENSIONS   PL_PHONETICEXT
#define PL_INPHONETICEXTENSIONSSUPPLEMENT   PL_PHONETICEXTSUP
#define PL_INPHONETICEXTSUP   PL_PHONETICEXTSUP
#define PL_INPLAYINGCARDS   PL_PLAYINGCARDS
#define PL_INPRIVATEUSE   PL_PUA
#define PL_INPRIVATEUSEAREA   PL_PUA
#define PL_INPUA   PL_PUA
#define PL_INRUMI   PL_RUMI
#define PL_INRUMINUMERALSYMBOLS   PL_RUMI
#define PL_INSCRIPTIONALPAHLAVI   PL_PHLI
#define PL_INSCRIPTIONALPARTHIAN   PL_PRTI
#define PL_INSC__JOINER   PL_LB__ZWJ
#define PL_INSHAVIAN   PL_SHAW
#define PL_INSHORTHANDFORMATCONTROLS   PL_SHORTHANDFORMATCONTROLS
#define PL_INSINHALAARCHAICNUMBERS   PL_SINHALAARCHAICNUMBERS
#define PL_INSMALLFORMS   PL_SMALLFORMS
#define PL_INSMALLFORMVARIANTS   PL_SMALLFORMS
#define PL_INSPACINGMODIFIERLETTERS   PL_MODIFIERLETTERS
#define PL_INSPECIALS   PL_SPECIALS
#define PL_INSUNDANESESUP   PL_SUNDANESESUP
#define PL_INSUNDANESESUPPLEMENT   PL_SUNDANESESUP
#define PL_INSUPARROWSA   PL_SUPARROWSA
#define PL_INSUPARROWSB   PL_SUPARROWSB
#define PL_INSUPARROWSC   PL_SUPARROWSC
#define PL_INSUPERANDSUB   PL_SUPERANDSUB
#define PL_INSUPERSCRIPTSANDSUBSCRIPTS   PL_SUPERANDSUB
#define PL_INSUPMATHOPERATORS   PL_SUPMATHOPERATORS
#define PL_INSUPPLEMENTALARROWSA   PL_SUPARROWSA
#define PL_INSUPPLEMENTALARROWSB   PL_SUPARROWSB
#define PL_INSUPPLEMENTALARROWSC   PL_SUPARROWSC
#define PL_INSUPPLEMENTALMATHEMATICALOPERATORS   PL_SUPMATHOPERATORS
#define PL_INSUPPLEMENTALPUNCTUATION   PL_SUPPUNCTUATION
#define PL_INSUPPLEMENTALSYMBOLSANDPICTOGRAPHS   PL_SUPSYMBOLSANDPICTOGRAPHS
#define PL_INSUPPLEMENTARYPRIVATEUSEAREAA   PL_SUPPUAA
#define PL_INSUPPLEMENTARYPRIVATEUSEAREAB   PL_SUPPUAB
#define PL_INSUPPUAA   PL_SUPPUAA
#define PL_INSUPPUAB   PL_SUPPUAB
#define PL_INSUPPUNCTUATION   PL_SUPPUNCTUATION
#define PL_INSUPSYMBOLSANDPICTOGRAPHS   PL_SUPSYMBOLSANDPICTOGRAPHS
#define PL_INSUTTONSIGNWRITING   PL_SUTTONSIGNWRITING
#define PL_INSYRIACSUP   PL_SYRIACSUP
#define PL_INSYRIACSUPPLEMENT   PL_SYRIACSUP
#define PL_INTAGS   PL_TAGS
#define PL_INTAIXUANJING   PL_TAIXUANJING
#define PL_INTAIXUANJINGSYMBOLS   PL_TAIXUANJING
#define PL_INTANGUTCOMPONENTS   PL_TANGUTCOMPONENTS
#define PL_INTRANSPORTANDMAP   PL_TRANSPORTANDMAP
#define PL_INTRANSPORTANDMAPSYMBOLS   PL_TRANSPORTANDMAP
#define PL_INUCAS   PL_UCAS
#define PL_INUCASEXT   PL_UCASEXT
#define PL_INUNIFIEDCANADIANABORIGINALSYLLABICS   PL_UCAS
#define PL_INUNIFIEDCANADIANABORIGINALSYLLABICSEXTENDED   PL_UCASEXT
#define PL_INVARIATIONSELECTORS   PL_INVS
#define PL_INVARIATIONSELECTORSSUPPLEMENT   PL_VSSUP
#define PL_INVEDICEXT   PL_VEDICEXT
#define PL_INVEDICEXTENSIONS   PL_VEDICEXT
#define PL_INVERTICALFORMS   PL_VERTICALFORMS
#define PL_INVSSUP   PL_VSSUP
#define PL_INYIJING   PL_YIJING
#define PL_INYIJINGHEXAGRAMSYMBOLS   PL_YIJING
#define PL_INYIRADICALS   PL_YIRADICALS
#define PL_INYISYLLABLES   PL_YISYLLABLES
#define PL_IN__10_DOT_0   PL_IN__10
#define PL_IN__2_DOT_0   PL_IN__2
#define PL_IN__3_DOT_0   PL_IN__3
#define PL_IN__4_DOT_0   PL_IN__4
#define PL_IN__5_DOT_0   PL_IN__5
#define PL_IN__6_DOT_0   PL_IN__6
#define PL_IN__7_DOT_0   PL_IN__7
#define PL_IN__8_DOT_0   PL_IN__8
#define PL_IN__9_DOT_0   PL_IN__9
#define PL_IN__UNASSIGNED   PL_AGE__NA
#define PL_IN__V100   PL_IN__10
#define PL_IN__V20   PL_IN__2
#define PL_IN__V21   PL_IN__2_DOT_1
#define PL_IN__V30   PL_IN__3
#define PL_IN__V31   PL_IN__3_DOT_1
#define PL_IN__V32   PL_IN__3_DOT_2
#define PL_IN__V40   PL_IN__4
#define PL_IN__V41   PL_IN__4_DOT_1
#define PL_IN__V50   PL_IN__5
#define PL_IN__V51   PL_IN__5_DOT_1
#define PL_IN__V52   PL_IN__5_DOT_2
#define PL_IN__V60   PL_IN__6
#define PL_IN__V61   PL_IN__6_DOT_1
#define PL_IN__V62   PL_IN__6_DOT_2
#define PL_IN__V63   PL_IN__6_DOT_3
#define PL_IN__V70   PL_IN__7
#define PL_IN__V80   PL_IN__8
#define PL_IN__V90   PL_IN__9
#define PL_IPAEXTENSIONS   PL_IPAEXT
#define PL_ISADLAM   PL_ADLM
#define PL_ISADLM   PL_ADLM
#define PL_ISAEGEANNUMBERS   PL_AEGEANNUMBERS
#define PL_ISAGHB   PL_AGHB
#define PL_ISAHEX   PL_POSIXXDIGIT
#define PL_ISAHOM   PL_AHOM
#define PL_ISALCHEMICAL   PL_ALCHEMICAL
#define PL_ISALCHEMICALSYMBOLS   PL_ALCHEMICAL
#define PL_ISALL   PL_ALL
#define PL_ISALNUM   PL_XPOSIXALNUM
#define PL_ISALPHA   PL_XPOSIXALPHA
#define PL_ISALPHABETIC   PL_XPOSIXALPHA
#define PL_ISALPHABETICPF   PL_ALPHABETICPF
#define PL_ISALPHABETICPRESENTATIONFORMS   PL_ALPHABETICPF
#define PL_ISANATOLIANHIEROGLYPHS   PL_HLUW
#define PL_ISANCIENTGREEKMUSIC   PL_ANCIENTGREEKMUSIC
#define PL_ISANCIENTGREEKMUSICALNOTATION   PL_ANCIENTGREEKMUSIC
#define PL_ISANCIENTGREEKNUMBERS   PL_ANCIENTGREEKNUMBERS
#define PL_ISANCIENTSYMBOLS   PL_ANCIENTSYMBOLS
#define PL_ISANY   PL_ANY
#define PL_ISARAB   PL_ARAB
#define PL_ISARABIC   PL_ARAB
#define PL_ISARABICEXTA   PL_ARABICEXTA
#define PL_ISARABICEXTENDEDA   PL_ARABICEXTA
#define PL_ISARABICMATH   PL_ARABICMATH
#define PL_ISARABICMATHEMATICALALPHABETICSYMBOLS   PL_ARABICMATH
#define PL_ISARABICPFA   PL_ARABICPFA
#define PL_ISARABICPFB   PL_ARABICPFB
#define PL_ISARABICPRESENTATIONFORMSA   PL_ARABICPFA
#define PL_ISARABICPRESENTATIONFORMSB   PL_ARABICPFB
#define PL_ISARABICSUP   PL_ARABICSUP
#define PL_ISARABICSUPPLEMENT   PL_ARABICSUP
#define PL_ISARMENIAN   PL_ARMN
#define PL_ISARMI   PL_ARMI
#define PL_ISARMN   PL_ARMN
#define PL_ISARROWS   PL_ARROWS
#define PL_ISASCII   PL_ASCII
#define PL_ISASCIIHEXDIGIT   PL_POSIXXDIGIT
#define PL_ISASSIGNED   PL_ASSIGNED
#define PL_ISAVESTAN   PL_AVST
#define PL_ISAVST   PL_AVST
#define PL_ISBALI   PL_BALI
#define PL_ISBALINESE   PL_BALI
#define PL_ISBAMU   PL_BAMU
#define PL_ISBAMUM   PL_BAMU
#define PL_ISBAMUMSUP   PL_BAMUMSUP
#define PL_ISBAMUMSUPPLEMENT   PL_BAMUMSUP
#define PL_ISBASICLATIN   PL_ASCII
#define PL_ISBASS   PL_BASS
#define PL_ISBASSAVAH   PL_BASS
#define PL_ISBATAK   PL_BATK
#define PL_ISBATK   PL_BATK
#define PL_ISBENG   PL_BENG
#define PL_ISBENGALI   PL_BENG
#define PL_ISBHAIKSUKI   PL_BHKS
#define PL_ISBHKS   PL_BHKS
#define PL_ISBIDIC   PL_BIDIC
#define PL_ISBIDICONTROL   PL_BIDIC
#define PL_ISBIDIM   PL_BIDIM
#define PL_ISBIDIMIRRORED   PL_BIDIM
#define PL_ISBLANK   PL_XPOSIXBLANK
#define PL_ISBLOCKELEMENTS   PL_BLOCKELEMENTS
#define PL_ISBOPO   PL_BOPO
#define PL_ISBOPOMOFO   PL_BOPO
#define PL_ISBOPOMOFOEXT   PL_BOPOMOFOEXT
#define PL_ISBOPOMOFOEXTENDED   PL_BOPOMOFOEXT
#define PL_ISBOXDRAWING   PL_BOXDRAWING
#define PL_ISBRAH   PL_BRAH
#define PL_ISBRAHMI   PL_BRAH
#define PL_ISBRAI   PL_BRAI
#define PL_ISBRAILLE   PL_BRAI
#define PL_ISBRAILLEPATTERNS   PL_BRAI
#define PL_ISBUGI   PL_BUGI
#define PL_ISBUGINESE   PL_BUGI
#define PL_ISBUHD   PL_BUHD
#define PL_ISBUHID   PL_BUHD
#define PL_ISBYZANTINEMUSIC   PL_BYZANTINEMUSIC
#define PL_ISBYZANTINEMUSICALSYMBOLS   PL_BYZANTINEMUSIC
#define PL_ISC   PL_C
#define PL_ISCAKM   PL_CAKM
#define PL_ISCANADIANABORIGINAL   PL_CANS
#define PL_ISCANADIANSYLLABICS   PL_UCAS
#define PL_ISCANS   PL_CANS
#define PL_ISCARI   PL_CARI
#define PL_ISCARIAN   PL_CARI
#define PL_ISCASED   PL_CASED
#define PL_ISCASEDLETTER   PL_L_AMP_
#define PL_ISCASEIGNORABLE   PL_CI
#define PL_ISCAUCASIANALBANIAN   PL_AGHB
#define PL_ISCC   PL_XPOSIXCNTRL
#define PL_ISCE   PL_CE
#define PL_ISCF   PL_CF
#define PL_ISCHAKMA   PL_CAKM
#define PL_ISCHAM   PL_CHAM
#define PL_ISCHANGESWHENCASEFOLDED   PL_CWCF
#define PL_ISCHANGESWHENCASEMAPPED   PL_CWCM
#define PL_ISCHANGESWHENLOWERCASED   PL_CWL
#define PL_ISCHANGESWHENNFKCCASEFOLDED   PL_CWKCF
#define PL_ISCHANGESWHENTITLECASED   PL_CWT
#define PL_ISCHANGESWHENUPPERCASED   PL_CWU
#define PL_ISCHER   PL_CHER
#define PL_ISCHEROKEE   PL_CHER
#define PL_ISCHEROKEESUP   PL_CHEROKEESUP
#define PL_ISCHEROKEESUPPLEMENT   PL_CHEROKEESUP
#define PL_ISCI   PL_CI
#define PL_ISCJK   PL_CJK
#define PL_ISCJKCOMPAT   PL_CJKCOMPAT
#define PL_ISCJKCOMPATFORMS   PL_CJKCOMPATFORMS
#define PL_ISCJKCOMPATIBILITY   PL_CJKCOMPAT
#define PL_ISCJKCOMPATIBILITYFORMS   PL_CJKCOMPATFORMS
#define PL_ISCJKCOMPATIBILITYIDEOGRAPHS   PL_CJKCOMPATIDEOGRAPHS
#define PL_ISCJKCOMPATIBILITYIDEOGRAPHSSUPPLEMENT   PL_CJKCOMPATIDEOGRAPHSSUP
#define PL_ISCJKCOMPATIDEOGRAPHS   PL_CJKCOMPATIDEOGRAPHS
#define PL_ISCJKCOMPATIDEOGRAPHSSUP   PL_CJKCOMPATIDEOGRAPHSSUP
#define PL_ISCJKEXTA   PL_CJKEXTA
#define PL_ISCJKEXTB   PL_CJKEXTB
#define PL_ISCJKEXTC   PL_CJKEXTC
#define PL_ISCJKEXTD   PL_CJKEXTD
#define PL_ISCJKEXTE   PL_CJKEXTE
#define PL_ISCJKEXTF   PL_CJKEXTF
#define PL_ISCJKRADICALSSUP   PL_CJKRADICALSSUP
#define PL_ISCJKRADICALSSUPPLEMENT   PL_CJKRADICALSSUP
#define PL_ISCJKSTROKES   PL_CJKSTROKES
#define PL_ISCJKSYMBOLS   PL_CJKSYMBOLS
#define PL_ISCJKSYMBOLSANDPUNCTUATION   PL_CJKSYMBOLS
#define PL_ISCJKUNIFIEDIDEOGRAPHS   PL_CJK
#define PL_ISCJKUNIFIEDIDEOGRAPHSEXTENSIONA   PL_CJKEXTA
#define PL_ISCJKUNIFIEDIDEOGRAPHSEXTENSIONB   PL_CJKEXTB
#define PL_ISCJKUNIFIEDIDEOGRAPHSEXTENSIONC   PL_CJKEXTC
#define PL_ISCJKUNIFIEDIDEOGRAPHSEXTENSIOND   PL_CJKEXTD
#define PL_ISCJKUNIFIEDIDEOGRAPHSEXTENSIONE   PL_CJKEXTE
#define PL_ISCJKUNIFIEDIDEOGRAPHSEXTENSIONF   PL_CJKEXTF
#define PL_ISCLOSEPUNCTUATION   PL_PE
#define PL_ISCN   PL_CN
#define PL_ISCNTRL   PL_XPOSIXCNTRL
#define PL_ISCO   PL_CO
#define PL_ISCOMBININGDIACRITICALMARKS   PL_DIACRITICALS
#define PL_ISCOMBININGDIACRITICALMARKSEXTENDED   PL_DIACRITICALSEXT
#define PL_ISCOMBININGDIACRITICALMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_ISCOMBININGDIACRITICALMARKSSUPPLEMENT   PL_DIACRITICALSSUP
#define PL_ISCOMBININGHALFMARKS   PL_HALFMARKS
#define PL_ISCOMBININGMARK   PL_M
#define PL_ISCOMBININGMARKSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_ISCOMMON   PL_ZYYY
#define PL_ISCOMMONINDICNUMBERFORMS   PL_INDICNUMBERFORMS
#define PL_ISCOMPATJAMO   PL_COMPATJAMO
#define PL_ISCOMPEX   PL_COMPEX
#define PL_ISCOMPOSITIONEXCLUSION   PL_CE
#define PL_ISCONNECTORPUNCTUATION   PL_PC
#define PL_ISCONTROL   PL_XPOSIXCNTRL
#define PL_ISCONTROLPICTURES   PL_CONTROLPICTURES
#define PL_ISCOPT   PL_COPT
#define PL_ISCOPTIC   PL_COPT
#define PL_ISCOPTICEPACTNUMBERS   PL_COPTICEPACTNUMBERS
#define PL_ISCOUNTINGROD   PL_COUNTINGROD
#define PL_ISCOUNTINGRODNUMERALS   PL_COUNTINGROD
#define PL_ISCPRT   PL_CPRT
#define PL_ISCS   PL_CS
#define PL_ISCUNEIFORM   PL_XSUX
#define PL_ISCUNEIFORMNUMBERS   PL_CUNEIFORMNUMBERS
#define PL_ISCUNEIFORMNUMBERSANDPUNCTUATION   PL_CUNEIFORMNUMBERS
#define PL_ISCURRENCYSYMBOL   PL_SC
#define PL_ISCURRENCYSYMBOLS   PL_CURRENCYSYMBOLS
#define PL_ISCWCF   PL_CWCF
#define PL_ISCWCM   PL_CWCM
#define PL_ISCWKCF   PL_CWKCF
#define PL_ISCWL   PL_CWL
#define PL_ISCWT   PL_CWT
#define PL_ISCWU   PL_CWU
#define PL_ISCYPRIOT   PL_CPRT
#define PL_ISCYPRIOTSYLLABARY   PL_CYPRIOTSYLLABARY
#define PL_ISCYRILLIC   PL_CYRL
#define PL_ISCYRILLICEXTA   PL_CYRILLICEXTA
#define PL_ISCYRILLICEXTB   PL_CYRILLICEXTB
#define PL_ISCYRILLICEXTC   PL_CYRILLICEXTC
#define PL_ISCYRILLICEXTENDEDA   PL_CYRILLICEXTA
#define PL_ISCYRILLICEXTENDEDB   PL_CYRILLICEXTB
#define PL_ISCYRILLICEXTENDEDC   PL_CYRILLICEXTC
#define PL_ISCYRILLICSUP   PL_CYRILLICSUP
#define PL_ISCYRILLICSUPPLEMENT   PL_CYRILLICSUP
#define PL_ISCYRILLICSUPPLEMENTARY   PL_CYRILLICSUP
#define PL_ISCYRL   PL_CYRL
#define PL_ISDASH   PL_DASH
#define PL_ISDASHPUNCTUATION   PL_PD
#define PL_ISDECIMALNUMBER   PL_XPOSIXDIGIT
#define PL_ISDEFAULTIGNORABLECODEPOINT   PL_DI
#define PL_ISDEP   PL_DEP
#define PL_ISDEPRECATED   PL_DEP
#define PL_ISDESERET   PL_DSRT
#define PL_ISDEVA   PL_DEVA
#define PL_ISDEVANAGARI   PL_DEVA
#define PL_ISDEVANAGARIEXT   PL_DEVANAGARIEXT
#define PL_ISDEVANAGARIEXTENDED   PL_DEVANAGARIEXT
#define PL_ISDI   PL_DI
#define PL_ISDIA   PL_DIA
#define PL_ISDIACRITIC   PL_DIA
#define PL_ISDIACRITICALS   PL_DIACRITICALS
#define PL_ISDIACRITICALSEXT   PL_DIACRITICALSEXT
#define PL_ISDIACRITICALSFORSYMBOLS   PL_DIACRITICALSFORSYMBOLS
#define PL_ISDIACRITICALSSUP   PL_DIACRITICALSSUP
#define PL_ISDIGIT   PL_XPOSIXDIGIT
#define PL_ISDINGBATS   PL_DINGBATS
#define PL_ISDOMINO   PL_DOMINO
#define PL_ISDOMINOTILES   PL_DOMINO
#define PL_ISDSRT   PL_DSRT
#define PL_ISDUPL   PL_DUPL
#define PL_ISDUPLOYAN   PL_DUPL
#define PL_ISEARLYDYNASTICCUNEIFORM   PL_EARLYDYNASTICCUNEIFORM
#define PL_ISEGYP   PL_EGYP
#define PL_ISEGYPTIANHIEROGLYPHS   PL_EGYP
#define PL_ISELBA   PL_ELBA
#define PL_ISELBASAN   PL_ELBA
#define PL_ISEMOTICONS   PL_EMOTICONS
#define PL_ISENCLOSEDALPHANUM   PL_ENCLOSEDALPHANUM
#define PL_ISENCLOSEDALPHANUMERICS   PL_ENCLOSEDALPHANUM
#define PL_ISENCLOSEDALPHANUMERICSUPPLEMENT   PL_ENCLOSEDALPHANUMSUP
#define PL_ISENCLOSEDALPHANUMSUP   PL_ENCLOSEDALPHANUMSUP
#define PL_ISENCLOSEDCJK   PL_ENCLOSEDCJK
#define PL_ISENCLOSEDCJKLETTERSANDMONTHS   PL_ENCLOSEDCJK
#define PL_ISENCLOSEDIDEOGRAPHICSUP   PL_ENCLOSEDIDEOGRAPHICSUP
#define PL_ISENCLOSEDIDEOGRAPHICSUPPLEMENT   PL_ENCLOSEDIDEOGRAPHICSUP
#define PL_ISENCLOSINGMARK   PL_ME
#define PL_ISETHI   PL_ETHI
#define PL_ISETHIOPIC   PL_ETHI
#define PL_ISETHIOPICEXT   PL_ETHIOPICEXT
#define PL_ISETHIOPICEXTA   PL_ETHIOPICEXTA
#define PL_ISETHIOPICEXTENDED   PL_ETHIOPICEXT
#define PL_ISETHIOPICEXTENDEDA   PL_ETHIOPICEXTA
#define PL_ISETHIOPICSUP   PL_ETHIOPICSUP
#define PL_ISETHIOPICSUPPLEMENT   PL_ETHIOPICSUP
#define PL_ISEXT   PL_EXT
#define PL_ISEXTENDER   PL_EXT
#define PL_ISFINALPUNCTUATION   PL_PF
#define PL_ISFORMAT   PL_CF
#define PL_ISFULLCOMPOSITIONEXCLUSION   PL_COMPEX
#define PL_ISGENERALPUNCTUATION   PL_INPUNCTUATION
#define PL_ISGEOMETRICSHAPES   PL_GEOMETRICSHAPES
#define PL_ISGEOMETRICSHAPESEXT   PL_GEOMETRICSHAPESEXT
#define PL_ISGEOMETRICSHAPESEXTENDED   PL_GEOMETRICSHAPESEXT
#define PL_ISGEOR   PL_GEOR
#define PL_ISGEORGIAN   PL_GEOR
#define PL_ISGEORGIANSUP   PL_GEORGIANSUP
#define PL_ISGEORGIANSUPPLEMENT   PL_GEORGIANSUP
#define PL_ISGLAG   PL_GLAG
#define PL_ISGLAGOLITIC   PL_GLAG
#define PL_ISGLAGOLITICSUP   PL_GLAGOLITICSUP
#define PL_ISGLAGOLITICSUPPLEMENT   PL_GLAGOLITICSUP
#define PL_ISGONM   PL_GONM
#define PL_ISGOTH   PL_GOTH
#define PL_ISGOTHIC   PL_GOTH
#define PL_ISGRAN   PL_GRAN
#define PL_ISGRANTHA   PL_GRAN
#define PL_ISGRAPH   PL_XPOSIXGRAPH
#define PL_ISGRAPHEMEBASE   PL_GRBASE
#define PL_ISGRAPHEMEEXTEND   PL_GREXT
#define PL_ISGRBASE   PL_GRBASE
#define PL_ISGREEK   PL_GREK
#define PL_ISGREEKANDCOPTIC   PL_INGREEK
#define PL_ISGREEKEXT   PL_GREEKEXT
#define PL_ISGREEKEXTENDED   PL_GREEKEXT
#define PL_ISGREK   PL_GREK
#define PL_ISGREXT   PL_GREXT
#define PL_ISGUJARATI   PL_GUJR
#define PL_ISGUJR   PL_GUJR
#define PL_ISGURMUKHI   PL_GURU
#define PL_ISGURU   PL_GURU
#define PL_ISHALFANDFULLFORMS   PL_HALFANDFULLFORMS
#define PL_ISHALFMARKS   PL_HALFMARKS
#define PL_ISHALFWIDTHANDFULLWIDTHFORMS   PL_HALFANDFULLFORMS
#define PL_ISHAN   PL_HAN
#define PL_ISHANG   PL_HANG
#define PL_ISHANGUL   PL_HANG
#define PL_ISHANGULCOMPATIBILITYJAMO   PL_COMPATJAMO
#define PL_ISHANGULJAMO   PL_JAMO
#define PL_ISHANGULJAMOEXTENDEDA   PL_JAMOEXTA
#define PL_ISHANGULJAMOEXTENDEDB   PL_JAMOEXTB
#define PL_ISHANGULSYLLABLES   PL_INHANGUL
#define PL_ISHANI   PL_HAN
#define PL_ISHANO   PL_HANO
#define PL_ISHANUNOO   PL_HANO
#define PL_ISHATR   PL_HATR
#define PL_ISHATRAN   PL_HATR
#define PL_ISHEBR   PL_HEBR
#define PL_ISHEBREW   PL_HEBR
#define PL_ISHEX   PL_XPOSIXXDIGIT
#define PL_ISHEXDIGIT   PL_XPOSIXXDIGIT
#define PL_ISHIGHPRIVATEUSESURROGATES   PL_HIGHPUSURROGATES
#define PL_ISHIGHPUSURROGATES   PL_HIGHPUSURROGATES
#define PL_ISHIGHSURROGATES   PL_HIGHSURROGATES
#define PL_ISHIRA   PL_HIRA
#define PL_ISHIRAGANA   PL_HIRA
#define PL_ISHLUW   PL_HLUW
#define PL_ISHMNG   PL_HMNG
#define PL_ISHORIZSPACE   PL_XPOSIXBLANK
#define PL_ISHUNG   PL_HUNG
#define PL_ISHYPHEN   PL_HYPHEN
#define PL_ISIDC   PL_IDC
#define PL_ISIDCONTINUE   PL_IDC
#define PL_ISIDEO   PL_IDEO
#define PL_ISIDEOGRAPHIC   PL_IDEO
#define PL_ISIDEOGRAPHICDESCRIPTIONCHARACTERS   PL_INIDC
#define PL_ISIDEOGRAPHICSYMBOLS   PL_IDEOGRAPHICSYMBOLS
#define PL_ISIDEOGRAPHICSYMBOLSANDPUNCTUATION   PL_IDEOGRAPHICSYMBOLS
#define PL_ISIDS   PL_IDS
#define PL_ISIDSB   PL_IDSB
#define PL_ISIDSBINARYOPERATOR   PL_IDSB
#define PL_ISIDST   PL_IDST
#define PL_ISIDSTART   PL_IDS
#define PL_ISIDSTRINARYOPERATOR   PL_IDST
#define PL_ISIMPERIALARAMAIC   PL_ARMI
#define PL_ISINDICNUMBERFORMS   PL_INDICNUMBERFORMS
#define PL_ISINHERITED   PL_QAAI
#define PL_ISINITIALPUNCTUATION   PL_PI
#define PL_ISINSCRIPTIONALPAHLAVI   PL_PHLI
#define PL_ISINSCRIPTIONALPARTHIAN   PL_PRTI
#define PL_ISIPAEXT   PL_IPAEXT
#define PL_ISIPAEXTENSIONS   PL_IPAEXT
#define PL_ISITAL   PL_ITAL
#define PL_ISJAMO   PL_JAMO
#define PL_ISJAMOEXTA   PL_JAMOEXTA
#define PL_ISJAMOEXTB   PL_JAMOEXTB
#define PL_ISJAVA   PL_JAVA
#define PL_ISJAVANESE   PL_JAVA
#define PL_ISJOINC   PL_JOINC
#define PL_ISJOINCONTROL   PL_JOINC
#define PL_ISKAITHI   PL_KTHI
#define PL_ISKALI   PL_KALI
#define PL_ISKANA   PL_KANA
#define PL_ISKANAEXTA   PL_KANAEXTA
#define PL_ISKANAEXTENDEDA   PL_KANAEXTA
#define PL_ISKANASUP   PL_KANASUP
#define PL_ISKANASUPPLEMENT   PL_KANASUP
#define PL_ISKANBUN   PL_KANBUN
#define PL_ISKANGXI   PL_KANGXI
#define PL_ISKANGXIRADICALS   PL_KANGXI
#define PL_ISKANNADA   PL_KNDA
#define PL_ISKATAKANA   PL_KANA
#define PL_ISKATAKANAEXT   PL_KATAKANAEXT
#define PL_ISKATAKANAPHONETICEXTENSIONS   PL_KATAKANAEXT
#define PL_ISKAYAHLI   PL_KALI
#define PL_ISKHAR   PL_KHAR
#define PL_ISKHAROSHTHI   PL_KHAR
#define PL_ISKHMER   PL_KHMR
#define PL_ISKHMERSYMBOLS   PL_KHMERSYMBOLS
#define PL_ISKHMR   PL_KHMR
#define PL_ISKHOJ   PL_KHOJ
#define PL_ISKHOJKI   PL_KHOJ
#define PL_ISKHUDAWADI   PL_SIND
#define PL_ISKNDA   PL_KNDA
#define PL_ISKTHI   PL_KTHI
#define PL_ISL   PL_L
#define PL_ISLANA   PL_LANA
#define PL_ISLAO   PL_LAO
#define PL_ISLAOO   PL_LAO
#define PL_ISLATIN   PL_LATN
#define PL_ISLATIN1   PL_LATIN1
#define PL_ISLATIN1SUP   PL_LATIN1
#define PL_ISLATIN1SUPPLEMENT   PL_LATIN1
#define PL_ISLATINEXTA   PL_LATINEXTA
#define PL_ISLATINEXTADDITIONAL   PL_LATINEXTADDITIONAL
#define PL_ISLATINEXTB   PL_LATINEXTB
#define PL_ISLATINEXTC   PL_LATINEXTC
#define PL_ISLATINEXTD   PL_LATINEXTD
#define PL_ISLATINEXTE   PL_LATINEXTE
#define PL_ISLATINEXTENDEDA   PL_LATINEXTA
#define PL_ISLATINEXTENDEDADDITIONAL   PL_LATINEXTADDITIONAL
#define PL_ISLATINEXTENDEDB   PL_LATINEXTB
#define PL_ISLATINEXTENDEDC   PL_LATINEXTC
#define PL_ISLATINEXTENDEDD   PL_LATINEXTD
#define PL_ISLATINEXTENDEDE   PL_LATINEXTE
#define PL_ISLATN   PL_LATN
#define PL_ISLC   PL_L_AMP_
#define PL_ISLEPC   PL_LEPC
#define PL_ISLEPCHA   PL_LEPC
#define PL_ISLETTER   PL_L
#define PL_ISLETTERLIKESYMBOLS   PL_LETTERLIKESYMBOLS
#define PL_ISLETTERNUMBER   PL_NL
#define PL_ISLIMB   PL_LIMB
#define PL_ISLIMBU   PL_LIMB
#define PL_ISLINA   PL_LINA
#define PL_ISLINB   PL_LINB
#define PL_ISLINEARA   PL_LINA
#define PL_ISLINEARB   PL_LINB
#define PL_ISLINEARBIDEOGRAMS   PL_LINEARBIDEOGRAMS
#define PL_ISLINEARBSYLLABARY   PL_LINEARBSYLLABARY
#define PL_ISLINESEPARATOR   PL_ZL
#define PL_ISLISU   PL_LISU
#define PL_ISLL   PL_LL
#define PL_ISLM   PL_LM
#define PL_ISLO   PL_LO
#define PL_ISLOE   PL_LOE
#define PL_ISLOGICALORDEREXCEPTION   PL_LOE
#define PL_ISLOWER   PL_XPOSIXLOWER
#define PL_ISLOWERCASE   PL_XPOSIXLOWER
#define PL_ISLOWERCASELETTER   PL_LL
#define PL_ISLOWSURROGATES   PL_LOWSURROGATES
#define PL_ISLT   PL_LT
#define PL_ISLU   PL_LU
#define PL_ISLYCI   PL_LYCI
#define PL_ISLYCIAN   PL_LYCI
#define PL_ISLYDI   PL_LYDI
#define PL_ISLYDIAN   PL_LYDI
#define PL_ISL_   PL_L_AMP_
#define PL_ISL_AMP_   PL_L_AMP_
#define PL_ISM   PL_M
#define PL_ISMAHAJANI   PL_MAHJ
#define PL_ISMAHJ   PL_MAHJ
#define PL_ISMAHJONG   PL_MAHJONG
#define PL_ISMAHJONGTILES   PL_MAHJONG
#define PL_ISMALAYALAM   PL_MLYM
#define PL_ISMAND   PL_MAND
#define PL_ISMANDAIC   PL_MAND
#define PL_ISMANI   PL_MANI
#define PL_ISMANICHAEAN   PL_MANI
#define PL_ISMARC   PL_MARC
#define PL_ISMARCHEN   PL_MARC
#define PL_ISMARK   PL_M
#define PL_ISMASARAMGONDI   PL_GONM
#define PL_ISMATH   PL_MATH
#define PL_ISMATHALPHANUM   PL_MATHALPHANUM
#define PL_ISMATHEMATICALALPHANUMERICSYMBOLS   PL_MATHALPHANUM
#define PL_ISMATHEMATICALOPERATORS   PL_MATHOPERATORS
#define PL_ISMATHOPERATORS   PL_MATHOPERATORS
#define PL_ISMATHSYMBOL   PL_SM
#define PL_ISMC   PL_MC
#define PL_ISME   PL_ME
#define PL_ISMEETEIMAYEK   PL_MTEI
#define PL_ISMEETEIMAYEKEXT   PL_MEETEIMAYEKEXT
#define PL_ISMEETEIMAYEKEXTENSIONS   PL_MEETEIMAYEKEXT
#define PL_ISMEND   PL_MEND
#define PL_ISMENDEKIKAKUI   PL_MEND
#define PL_ISMERC   PL_MERC
#define PL_ISMERO   PL_MERO
#define PL_ISMEROITICCURSIVE   PL_MERC
#define PL_ISMEROITICHIEROGLYPHS   PL_MERO
#define PL_ISMIAO   PL_MIAO
#define PL_ISMISCARROWS   PL_MISCARROWS
#define PL_ISMISCELLANEOUSMATHEMATICALSYMBOLSA   PL_MISCMATHSYMBOLSA
#define PL_ISMISCELLANEOUSMATHEMATICALSYMBOLSB   PL_MISCMATHSYMBOLSB
#define PL_ISMISCELLANEOUSSYMBOLS   PL_MISCSYMBOLS
#define PL_ISMISCELLANEOUSSYMBOLSANDARROWS   PL_MISCARROWS
#define PL_ISMISCELLANEOUSSYMBOLSANDPICTOGRAPHS   PL_MISCPICTOGRAPHS
#define PL_ISMISCELLANEOUSTECHNICAL   PL_MISCTECHNICAL
#define PL_ISMISCMATHSYMBOLSA   PL_MISCMATHSYMBOLSA
#define PL_ISMISCMATHSYMBOLSB   PL_MISCMATHSYMBOLSB
#define PL_ISMISCPICTOGRAPHS   PL_MISCPICTOGRAPHS
#define PL_ISMISCSYMBOLS   PL_MISCSYMBOLS
#define PL_ISMISCTECHNICAL   PL_MISCTECHNICAL
#define PL_ISMLYM   PL_MLYM
#define PL_ISMN   PL_MN
#define PL_ISMODI   PL_MODI
#define PL_ISMODIFIERLETTER   PL_LM
#define PL_ISMODIFIERLETTERS   PL_MODIFIERLETTERS
#define PL_ISMODIFIERSYMBOL   PL_SK
#define PL_ISMODIFIERTONELETTERS   PL_MODIFIERTONELETTERS
#define PL_ISMONG   PL_MONG
#define PL_ISMONGOLIAN   PL_MONG
#define PL_ISMONGOLIANSUP   PL_MONGOLIANSUP
#define PL_ISMONGOLIANSUPPLEMENT   PL_MONGOLIANSUP
#define PL_ISMRO   PL_MRO
#define PL_ISMROO   PL_MRO
#define PL_ISMTEI   PL_MTEI
#define PL_ISMULT   PL_MULT
#define PL_ISMULTANI   PL_MULT
#define PL_ISMUSIC   PL_MUSIC
#define PL_ISMUSICALSYMBOLS   PL_MUSIC
#define PL_ISMYANMAR   PL_MYMR
#define PL_ISMYANMAREXTA   PL_MYANMAREXTA
#define PL_ISMYANMAREXTB   PL_MYANMAREXTB
#define PL_ISMYANMAREXTENDEDA   PL_MYANMAREXTA
#define PL_ISMYANMAREXTENDEDB   PL_MYANMAREXTB
#define PL_ISMYMR   PL_MYMR
#define PL_ISN   PL_N
#define PL_ISNABATAEAN   PL_NBAT
#define PL_ISNARB   PL_NARB
#define PL_ISNB   PL_NB
#define PL_ISNBAT   PL_NBAT
#define PL_ISNCHAR   PL_NCHAR
#define PL_ISND   PL_XPOSIXDIGIT
#define PL_ISNEWA   PL_NEWA
#define PL_ISNEWTAILUE   PL_TALU
#define PL_ISNKO   PL_NKO
#define PL_ISNKOO   PL_NKO
#define PL_ISNL   PL_NL
#define PL_ISNO   PL_NO
#define PL_ISNOBLOCK   PL_NB
#define PL_ISNONCHARACTERCODEPOINT   PL_NCHAR
#define PL_ISNONSPACINGMARK   PL_MN
#define PL_ISNSHU   PL_NSHU
#define PL_ISNUMBER   PL_N
#define PL_ISNUMBERFORMS   PL_NUMBERFORMS
#define PL_ISNUSHU   PL_NSHU
#define PL_ISOCR   PL_OCR
#define PL_ISOGAM   PL_OGAM
#define PL_ISOGHAM   PL_OGAM
#define PL_ISOLCHIKI   PL_OLCK
#define PL_ISOLCK   PL_OLCK
#define PL_ISOLDHUNGARIAN   PL_HUNG
#define PL_ISOLDITALIC   PL_ITAL
#define PL_ISOLDNORTHARABIAN   PL_NARB
#define PL_ISOLDPERMIC   PL_PERM
#define PL_ISOLDPERSIAN   PL_XPEO
#define PL_ISOLDSOUTHARABIAN   PL_SARB
#define PL_ISOLDTURKIC   PL_ORKH
#define PL_ISOPENPUNCTUATION   PL_PS
#define PL_ISOPTICALCHARACTERRECOGNITION   PL_OCR
#define PL_ISORIYA   PL_ORYA
#define PL_ISORKH   PL_ORKH
#define PL_ISORNAMENTALDINGBATS   PL_ORNAMENTALDINGBATS
#define PL_ISORYA   PL_ORYA
#define PL_ISOSAGE   PL_OSGE
#define PL_ISOSGE   PL_OSGE
#define PL_ISOSMA   PL_OSMA
#define PL_ISOSMANYA   PL_OSMA
#define PL_ISOTHER   PL_C
#define PL_ISOTHERLETTER   PL_LO
#define PL_ISOTHERNUMBER   PL_NO
#define PL_ISOTHERPUNCTUATION   PL_PO
#define PL_ISOTHERSYMBOL   PL_SO
#define PL_ISP   PL_P
#define PL_ISPAHAWHHMONG   PL_HMNG
#define PL_ISPALM   PL_PALM
#define PL_ISPALMYRENE   PL_PALM
#define PL_ISPARAGRAPHSEPARATOR   PL_ZP
#define PL_ISPATSYN   PL_PATSYN
#define PL_ISPATTERNSYNTAX   PL_PATSYN
#define PL_ISPATTERNWHITESPACE   PL_PATWS
#define PL_ISPATWS   PL_PATWS
#define PL_ISPAUC   PL_PAUC
#define PL_ISPAUCINHAU   PL_PAUC
#define PL_ISPC   PL_PC
#define PL_ISPCM   PL_PCM
#define PL_ISPD   PL_PD
#define PL_ISPE   PL_PE
#define PL_ISPERLSPACE   PL_POSIXSPACE
#define PL_ISPERLWORD   PL_POSIXWORD
#define PL_ISPERM   PL_PERM
#define PL_ISPF   PL_PF
#define PL_ISPHAG   PL_PHAG
#define PL_ISPHAGSPA   PL_PHAG
#define PL_ISPHAISTOS   PL_PHAISTOS
#define PL_ISPHAISTOSDISC   PL_PHAISTOS
#define PL_ISPHLI   PL_PHLI
#define PL_ISPHLP   PL_PHLP
#define PL_ISPHNX   PL_PHNX
#define PL_ISPHOENICIAN   PL_PHNX
#define PL_ISPHONETICEXT   PL_PHONETICEXT
#define PL_ISPHONETICEXTENSIONS   PL_PHONETICEXT
#define PL_ISPHONETICEXTENSIONSSUPPLEMENT   PL_PHONETICEXTSUP
#define PL_ISPHONETICEXTSUP   PL_PHONETICEXTSUP
#define PL_ISPI   PL_PI
#define PL_ISPLAYINGCARDS   PL_PLAYINGCARDS
#define PL_ISPLRD   PL_MIAO
#define PL_ISPO   PL_PO
#define PL_ISPOSIXALNUM   PL_POSIXALNUM
#define PL_ISPOSIXALPHA   PL_POSIXALPHA
#define PL_ISPOSIXBLANK   PL_POSIXBLANK
#define PL_ISPOSIXCNTRL   PL_POSIXCNTRL
#define PL_ISPOSIXDIGIT   PL_POSIXDIGIT
#define PL_ISPOSIXGRAPH   PL_POSIXGRAPH
#define PL_ISPOSIXLOWER   PL_POSIXLOWER
#define PL_ISPOSIXPRINT   PL_POSIXPRINT
#define PL_ISPOSIXPUNCT   PL_POSIXPUNCT
#define PL_ISPOSIXSPACE   PL_POSIXSPACE
#define PL_ISPOSIXUPPER   PL_POSIXUPPER
#define PL_ISPOSIXWORD   PL_POSIXWORD
#define PL_ISPOSIXXDIGIT   PL_POSIXXDIGIT
#define PL_ISPREPENDEDCONCATENATIONMARK   PL_PCM
#define PL_ISPRINT   PL_XPOSIXPRINT
#define PL_ISPRIVATEUSE   PL_CO
#define PL_ISPRIVATEUSEAREA   PL_PUA
#define PL_ISPRTI   PL_PRTI
#define PL_ISPS   PL_PS
#define PL_ISPSALTERPAHLAVI   PL_PHLP
#define PL_ISPUA   PL_PUA
#define PL_ISPUNCT   PL_P
#define PL_ISPUNCTUATION   PL_P
#define PL_ISQAAC   PL_COPT
#define PL_ISQAAI   PL_QAAI
#define PL_ISQMARK   PL_QMARK
#define PL_ISQUOTATIONMARK   PL_QMARK
#define PL_ISRADICAL   PL_RADICAL
#define PL_ISREGIONALINDICATOR   PL_RI
#define PL_ISREJANG   PL_RJNG
#define PL_ISRI   PL_RI
#define PL_ISRJNG   PL_RJNG
#define PL_ISRUMI   PL_RUMI
#define PL_ISRUMINUMERALSYMBOLS   PL_RUMI
#define PL_ISRUNIC   PL_RUNR
#define PL_ISRUNR   PL_RUNR
#define PL_ISS   PL_S
#define PL_ISSAMARITAN   PL_SAMR
#define PL_ISSAMR   PL_SAMR
#define PL_ISSARB   PL_SARB
#define PL_ISSAUR   PL_SAUR
#define PL_ISSAURASHTRA   PL_SAUR
#define PL_ISSC   PL_SC
#define PL_ISSD   PL_SD
#define PL_ISSENTENCETERMINAL   PL_STERM
#define PL_ISSEPARATOR   PL_Z
#define PL_ISSGNW   PL_SGNW
#define PL_ISSHARADA   PL_SHRD
#define PL_ISSHAVIAN   PL_SHAW
#define PL_ISSHAW   PL_SHAW
#define PL_ISSHORTHANDFORMATCONTROLS   PL_SHORTHANDFORMATCONTROLS
#define PL_ISSHRD   PL_SHRD
#define PL_ISSIDD   PL_SIDD
#define PL_ISSIDDHAM   PL_SIDD
#define PL_ISSIGNWRITING   PL_SGNW
#define PL_ISSIND   PL_SIND
#define PL_ISSINH   PL_SINH
#define PL_ISSINHALA   PL_SINH
#define PL_ISSINHALAARCHAICNUMBERS   PL_SINHALAARCHAICNUMBERS
#define PL_ISSK   PL_SK
#define PL_ISSM   PL_SM
#define PL_ISSMALLFORMS   PL_SMALLFORMS
#define PL_ISSMALLFORMVARIANTS   PL_SMALLFORMS
#define PL_ISSO   PL_SO
#define PL_ISSOFTDOTTED   PL_SD
#define PL_ISSORA   PL_SORA
#define PL_ISSORASOMPENG   PL_SORA
#define PL_ISSOYO   PL_SOYO
#define PL_ISSOYOMBO   PL_SOYO
#define PL_ISSPACE   PL_XPOSIXSPACE
#define PL_ISSPACEPERL   PL_XPOSIXSPACE
#define PL_ISSPACESEPARATOR   PL_ZS
#define PL_ISSPACINGMARK   PL_MC
#define PL_ISSPACINGMODIFIERLETTERS   PL_MODIFIERLETTERS
#define PL_ISSPECIALS   PL_SPECIALS
#define PL_ISSTERM   PL_STERM
#define PL_ISSUND   PL_SUND
#define PL_ISSUNDANESE   PL_SUND
#define PL_ISSUNDANESESUP   PL_SUNDANESESUP
#define PL_ISSUNDANESESUPPLEMENT   PL_SUNDANESESUP
#define PL_ISSUPARROWSA   PL_SUPARROWSA
#define PL_ISSUPARROWSB   PL_SUPARROWSB
#define PL_ISSUPARROWSC   PL_SUPARROWSC
#define PL_ISSUPERANDSUB   PL_SUPERANDSUB
#define PL_ISSUPERSCRIPTSANDSUBSCRIPTS   PL_SUPERANDSUB
#define PL_ISSUPMATHOPERATORS   PL_SUPMATHOPERATORS
#define PL_ISSUPPLEMENTALARROWSA   PL_SUPARROWSA
#define PL_ISSUPPLEMENTALARROWSB   PL_SUPARROWSB
#define PL_ISSUPPLEMENTALARROWSC   PL_SUPARROWSC
#define PL_ISSUPPLEMENTALMATHEMATICALOPERATORS   PL_SUPMATHOPERATORS
#define PL_ISSUPPLEMENTALPUNCTUATION   PL_SUPPUNCTUATION
#define PL_ISSUPPLEMENTALSYMBOLSANDPICTOGRAPHS   PL_SUPSYMBOLSANDPICTOGRAPHS
#define PL_ISSUPPLEMENTARYPRIVATEUSEAREAA   PL_SUPPUAA
#define PL_ISSUPPLEMENTARYPRIVATEUSEAREAB   PL_SUPPUAB
#define PL_ISSUPPUAA   PL_SUPPUAA
#define PL_ISSUPPUAB   PL_SUPPUAB
#define PL_ISSUPPUNCTUATION   PL_SUPPUNCTUATION
#define PL_ISSUPSYMBOLSANDPICTOGRAPHS   PL_SUPSYMBOLSANDPICTOGRAPHS
#define PL_ISSURROGATE   PL_CS
#define PL_ISSUTTONSIGNWRITING   PL_SUTTONSIGNWRITING
#define PL_ISSYLO   PL_SYLO
#define PL_ISSYLOTINAGRI   PL_SYLO
#define PL_ISSYMBOL   PL_S
#define PL_ISSYRC   PL_SYRC
#define PL_ISSYRIAC   PL_SYRC
#define PL_ISSYRIACSUP   PL_SYRIACSUP
#define PL_ISSYRIACSUPPLEMENT   PL_SYRIACSUP
#define PL_ISTAGALOG   PL_TGLG
#define PL_ISTAGB   PL_TAGB
#define PL_ISTAGBANWA   PL_TAGB
#define PL_ISTAGS   PL_TAGS
#define PL_ISTAILE   PL_TALE
#define PL_ISTAITHAM   PL_LANA
#define PL_ISTAIVIET   PL_TAVT
#define PL_ISTAIXUANJING   PL_TAIXUANJING
#define PL_ISTAIXUANJINGSYMBOLS   PL_TAIXUANJING
#define PL_ISTAKR   PL_TAKR
#define PL_ISTAKRI   PL_TAKR
#define PL_ISTALE   PL_TALE
#define PL_ISTALU   PL_TALU
#define PL_ISTAMIL   PL_TAML
#define PL_ISTAML   PL_TAML
#define PL_ISTANG   PL_TANG
#define PL_ISTANGUT   PL_TANG
#define PL_ISTANGUTCOMPONENTS   PL_TANGUTCOMPONENTS
#define PL_ISTAVT   PL_TAVT
#define PL_ISTELU   PL_TELU
#define PL_ISTELUGU   PL_TELU
#define PL_ISTERM   PL_TERM
#define PL_ISTERMINALPUNCTUATION   PL_TERM
#define PL_ISTFNG   PL_TFNG
#define PL_ISTGLG   PL_TGLG
#define PL_ISTHAA   PL_THAA
#define PL_ISTHAANA   PL_THAA
#define PL_ISTHAI   PL_THAI
#define PL_ISTIBETAN   PL_TIBT
#define PL_ISTIBT   PL_TIBT
#define PL_ISTIFINAGH   PL_TFNG
#define PL_ISTIRH   PL_TIRH
#define PL_ISTIRHUTA   PL_TIRH
#define PL_ISTITLE   PL_LT
#define PL_ISTITLECASE   PL_LT
#define PL_ISTITLECASELETTER   PL_LT
#define PL_ISTRANSPORTANDMAP   PL_TRANSPORTANDMAP
#define PL_ISTRANSPORTANDMAPSYMBOLS   PL_TRANSPORTANDMAP
#define PL_ISUCAS   PL_UCAS
#define PL_ISUCASEXT   PL_UCASEXT
#define PL_ISUGAR   PL_UGAR
#define PL_ISUGARITIC   PL_UGAR
#define PL_ISUIDEO   PL_UIDEO
#define PL_ISUNASSIGNED   PL_CN
#define PL_ISUNICODE   PL_ANY
#define PL_ISUNIFIEDCANADIANABORIGINALSYLLABICS   PL_UCAS
#define PL_ISUNIFIEDCANADIANABORIGINALSYLLABICSEXTENDED   PL_UCASEXT
#define PL_ISUNIFIEDIDEOGRAPH   PL_UIDEO
#define PL_ISUNKNOWN   PL_ZZZZ
#define PL_ISUPPER   PL_XPOSIXUPPER
#define PL_ISUPPERCASE   PL_XPOSIXUPPER
#define PL_ISUPPERCASELETTER   PL_LU
#define PL_ISVAI   PL_VAI
#define PL_ISVAII   PL_VAI
#define PL_ISVARIATIONSELECTOR   PL_VS
#define PL_ISVARIATIONSELECTORS   PL_INVS
#define PL_ISVARIATIONSELECTORSSUPPLEMENT   PL_VSSUP
#define PL_ISVEDICEXT   PL_VEDICEXT
#define PL_ISVEDICEXTENSIONS   PL_VEDICEXT
#define PL_ISVERTICALFORMS   PL_VERTICALFORMS
#define PL_ISVERTSPACE   PL_VERTSPACE
#define PL_ISVS   PL_VS
#define PL_ISVSSUP   PL_VSSUP
#define PL_ISWARA   PL_WARA
#define PL_ISWARANGCITI   PL_WARA
#define PL_ISWHITESPACE   PL_XPOSIXSPACE
#define PL_ISWORD   PL_XPOSIXWORD
#define PL_ISWSPACE   PL_XPOSIXSPACE
#define PL_ISXDIGIT   PL_XPOSIXXDIGIT
#define PL_ISXIDC   PL_XIDC
#define PL_ISXIDCONTINUE   PL_XIDC
#define PL_ISXIDS   PL_XIDS
#define PL_ISXIDSTART   PL_XIDS
#define PL_ISXPEO   PL_XPEO
#define PL_ISXPERLSPACE   PL_XPOSIXSPACE
#define PL_ISXPOSIXALNUM   PL_XPOSIXALNUM
#define PL_ISXPOSIXALPHA   PL_XPOSIXALPHA
#define PL_ISXPOSIXBLANK   PL_XPOSIXBLANK
#define PL_ISXPOSIXCNTRL   PL_XPOSIXCNTRL
#define PL_ISXPOSIXDIGIT   PL_XPOSIXDIGIT
#define PL_ISXPOSIXGRAPH   PL_XPOSIXGRAPH
#define PL_ISXPOSIXLOWER   PL_XPOSIXLOWER
#define PL_ISXPOSIXPRINT   PL_XPOSIXPRINT
#define PL_ISXPOSIXPUNCT   PL_XPOSIXPUNCT
#define PL_ISXPOSIXSPACE   PL_XPOSIXSPACE
#define PL_ISXPOSIXUPPER   PL_XPOSIXUPPER
#define PL_ISXPOSIXWORD   PL_XPOSIXWORD
#define PL_ISXPOSIXXDIGIT   PL_XPOSIXXDIGIT
#define PL_ISXSUX   PL_XSUX
#define PL_ISYI   PL_YI
#define PL_ISYIII   PL_YI
#define PL_ISYIJING   PL_YIJING
#define PL_ISYIJINGHEXAGRAMSYMBOLS   PL_YIJING
#define PL_ISYIRADICALS   PL_YIRADICALS
#define PL_ISYISYLLABLES   PL_YISYLLABLES
#define PL_ISZ   PL_Z
#define PL_ISZANABAZARSQUARE   PL_ZANB
#define PL_ISZANB   PL_ZANB
#define PL_ISZINH   PL_QAAI
#define PL_ISZL   PL_ZL
#define PL_ISZP   PL_ZP
#define PL_ISZS   PL_ZS
#define PL_ISZYYY   PL_ZYYY
#define PL_ISZZZZ   PL_ZZZZ
#define PL_JAVANESE   PL_JAVA
#define PL_JG__TEHMARBUTAGOAL   PL_JG__HAMZAONHEHGOAL
#define PL_JOINCONTROL   PL_JOINC
#define PL_JOINCONTROL   PL_JOINC
#define PL_JOINCONTROL__F   -PL_JOINC
#define PL_JOINCONTROL__FALSE   -PL_JOINC
#define PL_JOINCONTROL__N   -PL_JOINC
#define PL_JOINCONTROL__NO   -PL_JOINC
#define PL_JOINCONTROL__T   PL_JOINC
#define PL_JOINCONTROL__TRUE   PL_JOINC
#define PL_JOINCONTROL__Y   PL_JOINC
#define PL_JOINCONTROL__YES   PL_JOINC
#define PL_JOINC__F   -PL_JOINC
#define PL_JOINC__FALSE   -PL_JOINC
#define PL_JOINC__N   -PL_JOINC
#define PL_JOINC__NO   -PL_JOINC
#define PL_JOINC__T   PL_JOINC
#define PL_JOINC__TRUE   PL_JOINC
#define PL_JOINC__Y   PL_JOINC
#define PL_JOINC__YES   PL_JOINC
#define PL_JOININGGROUP__AFRICANFEH   PL_JG__AFRICANFEH
#define PL_JOININGGROUP__AFRICANNOON   PL_JG__AFRICANNOON
#define PL_JOININGGROUP__AFRICANQAF   PL_JG__AFRICANQAF
#define PL_JOININGGROUP__AIN   PL_JG__AIN
#define PL_JOININGGROUP__ALAPH   PL_JG__ALAPH
#define PL_JOININGGROUP__ALEF   PL_JG__ALEF
#define PL_JOININGGROUP__BEH   PL_JG__BEH
#define PL_JOININGGROUP__BETH   PL_JG__BETH
#define PL_JOININGGROUP__BURUSHASKIYEHBARREE   PL_JG__BURUSHASKIYEHBARREE
#define PL_JOININGGROUP__DAL   PL_JG__DAL
#define PL_JOININGGROUP__DALATHRISH   PL_JG__DALATHRISH
#define PL_JOININGGROUP__E   PL_JG__E
#define PL_JOININGGROUP__FARSIYEH   PL_JG__FARSIYEH
#define PL_JOININGGROUP__FE   PL_JG__FE
#define PL_JOININGGROUP__FEH   PL_JG__FEH
#define PL_JOININGGROUP__FINALSEMKATH   PL_JG__FINALSEMKATH
#define PL_JOININGGROUP__GAF   PL_JG__GAF
#define PL_JOININGGROUP__GAMAL   PL_JG__GAMAL
#define PL_JOININGGROUP__HAH   PL_JG__HAH
#define PL_JOININGGROUP__HAMZAONHEHGOAL   PL_JG__HAMZAONHEHGOAL
#define PL_JOININGGROUP__HE   PL_JG__HE
#define PL_JOININGGROUP__HEH   PL_JG__HEH
#define PL_JOININGGROUP__HEHGOAL   PL_JG__HEHGOAL
#define PL_JOININGGROUP__HETH   PL_JG__HETH
#define PL_JOININGGROUP__KAF   PL_JG__KAF
#define PL_JOININGGROUP__KAPH   PL_JG__KAPH
#define PL_JOININGGROUP__KHAPH   PL_JG__KHAPH
#define PL_JOININGGROUP__KNOTTEDHEH   PL_JG__KNOTTEDHEH
#define PL_JOININGGROUP__LAM   PL_JG__LAM
#define PL_JOININGGROUP__LAMADH   PL_JG__LAMADH
#define PL_JOININGGROUP__MALAYALAMBHA   PL_JG__MALAYALAMBHA
#define PL_JOININGGROUP__MALAYALAMJA   PL_JG__MALAYALAMJA
#define PL_JOININGGROUP__MALAYALAMLLA   PL_JG__MALAYALAMLLA
#define PL_JOININGGROUP__MALAYALAMLLLA   PL_JG__MALAYALAMLLLA
#define PL_JOININGGROUP__MALAYALAMNGA   PL_JG__MALAYALAMNGA
#define PL_JOININGGROUP__MALAYALAMNNA   PL_JG__MALAYALAMNNA
#define PL_JOININGGROUP__MALAYALAMNNNA   PL_JG__MALAYALAMNNNA
#define PL_JOININGGROUP__MALAYALAMNYA   PL_JG__MALAYALAMNYA
#define PL_JOININGGROUP__MALAYALAMRA   PL_JG__MALAYALAMRA
#define PL_JOININGGROUP__MALAYALAMSSA   PL_JG__MALAYALAMSSA
#define PL_JOININGGROUP__MALAYALAMTTA   PL_JG__MALAYALAMTTA
#define PL_JOININGGROUP__MANICHAEANALEPH   PL_JG__MANICHAEANALEPH
#define PL_JOININGGROUP__MANICHAEANAYIN   PL_JG__MANICHAEANAYIN
#define PL_JOININGGROUP__MANICHAEANBETH   PL_JG__MANICHAEANBETH
#define PL_JOININGGROUP__MANICHAEANDALETH   PL_JG__MANICHAEANDALETH
#define PL_JOININGGROUP__MANICHAEANDHAMEDH   PL_JG__MANICHAEANDHAMEDH
#define PL_JOININGGROUP__MANICHAEANFIVE   PL_JG__MANICHAEANFIVE
#define PL_JOININGGROUP__MANICHAEANGIMEL   PL_JG__MANICHAEANGIMEL
#define PL_JOININGGROUP__MANICHAEANHETH   PL_JG__MANICHAEANHETH
#define PL_JOININGGROUP__MANICHAEANHUNDRED   PL_JG__MANICHAEANHUNDRED
#define PL_JOININGGROUP__MANICHAEANKAPH   PL_JG__MANICHAEANKAPH
#define PL_JOININGGROUP__MANICHAEANLAMEDH   PL_JG__MANICHAEANLAMEDH
#define PL_JOININGGROUP__MANICHAEANMEM   PL_JG__MANICHAEANMEM
#define PL_JOININGGROUP__MANICHAEANNUN   PL_JG__MANICHAEANNUN
#define PL_JOININGGROUP__MANICHAEANONE   PL_JG__MANICHAEANONE
#define PL_JOININGGROUP__MANICHAEANPE   PL_JG__MANICHAEANPE
#define PL_JOININGGROUP__MANICHAEANQOPH   PL_JG__MANICHAEANQOPH
#define PL_JOININGGROUP__MANICHAEANRESH   PL_JG__MANICHAEANRESH
#define PL_JOININGGROUP__MANICHAEANSADHE   PL_JG__MANICHAEANSADHE
#define PL_JOININGGROUP__MANICHAEANSAMEKH   PL_JG__MANICHAEANSAMEKH
#define PL_JOININGGROUP__MANICHAEANTAW   PL_JG__MANICHAEANTAW
#define PL_JOININGGROUP__MANICHAEANTEN   PL_JG__MANICHAEANTEN
#define PL_JOININGGROUP__MANICHAEANTETH   PL_JG__MANICHAEANTETH
#define PL_JOININGGROUP__MANICHAEANTHAMEDH   PL_JG__MANICHAEANTHAMEDH
#define PL_JOININGGROUP__MANICHAEANTWENTY   PL_JG__MANICHAEANTWENTY
#define PL_JOININGGROUP__MANICHAEANWAW   PL_JG__MANICHAEANWAW
#define PL_JOININGGROUP__MANICHAEANYODH   PL_JG__MANICHAEANYODH
#define PL_JOININGGROUP__MANICHAEANZAYIN   PL_JG__MANICHAEANZAYIN
#define PL_JOININGGROUP__MEEM   PL_JG__MEEM
#define PL_JOININGGROUP__MIM   PL_JG__MIM
#define PL_JOININGGROUP__NOJOININGGROUP   PL_JG__NOJOININGGROUP
#define PL_JOININGGROUP__NOON   PL_JG__NOON
#define PL_JOININGGROUP__NUN   PL_JG__NUN
#define PL_JOININGGROUP__NYA   PL_JG__NYA
#define PL_JOININGGROUP__PE   PL_JG__PE
#define PL_JOININGGROUP__QAF   PL_JG__QAF
#define PL_JOININGGROUP__QAPH   PL_JG__QAPH
#define PL_JOININGGROUP__REH   PL_JG__REH
#define PL_JOININGGROUP__REVERSEDPE   PL_JG__REVERSEDPE
#define PL_JOININGGROUP__ROHINGYAYEH   PL_JG__ROHINGYAYEH
#define PL_JOININGGROUP__SAD   PL_JG__SAD
#define PL_JOININGGROUP__SADHE   PL_JG__SADHE
#define PL_JOININGGROUP__SEEN   PL_JG__SEEN
#define PL_JOININGGROUP__SEMKATH   PL_JG__SEMKATH
#define PL_JOININGGROUP__SHIN   PL_JG__SHIN
#define PL_JOININGGROUP__STRAIGHTWAW   PL_JG__STRAIGHTWAW
#define PL_JOININGGROUP__SWASHKAF   PL_JG__SWASHKAF
#define PL_JOININGGROUP__SYRIACWAW   PL_JG__SYRIACWAW
#define PL_JOININGGROUP__TAH   PL_JG__TAH
#define PL_JOININGGROUP__TAW   PL_JG__TAW
#define PL_JOININGGROUP__TEHMARBUTA   PL_JG__TEHMARBUTA
#define PL_JOININGGROUP__TEHMARBUTAGOAL   PL_JG__HAMZAONHEHGOAL
#define PL_JOININGGROUP__TETH   PL_JG__TETH
#define PL_JOININGGROUP__WAW   PL_JG__WAW
#define PL_JOININGGROUP__YEH   PL_JG__YEH
#define PL_JOININGGROUP__YEHBARREE   PL_JG__YEHBARREE
#define PL_JOININGGROUP__YEHWITHTAIL   PL_JG__YEHWITHTAIL
#define PL_JOININGGROUP__YUDH   PL_JG__YUDH
#define PL_JOININGGROUP__YUDHHE   PL_JG__YUDHHE
#define PL_JOININGGROUP__ZAIN   PL_JG__ZAIN
#define PL_JOININGGROUP__ZHAIN   PL_JG__ZHAIN
#define PL_JOININGTYPE__C   PL_JT__C
#define PL_JOININGTYPE__D   PL_JT__D
#define PL_JOININGTYPE__DUALJOINING   PL_JT__D
#define PL_JOININGTYPE__JOINCAUSING   PL_JT__C
#define PL_JOININGTYPE__L   PL_JT__L
#define PL_JOININGTYPE__LEFTJOINING   PL_JT__L
#define PL_JOININGTYPE__NONJOINING   PL_JT__U
#define PL_JOININGTYPE__R   PL_JT__R
#define PL_JOININGTYPE__RIGHTJOINING   PL_JT__R
#define PL_JOININGTYPE__T   PL_JT__T
#define PL_JOININGTYPE__TRANSPARENT   PL_JT__T
#define PL_JOININGTYPE__U   PL_JT__U
#define PL_JT__DUALJOINING   PL_JT__D
#define PL_JT__JOINCAUSING   PL_JT__C
#define PL_JT__LEFTJOINING   PL_JT__L
#define PL_JT__NONJOINING   PL_JT__U
#define PL_JT__RIGHTJOINING   PL_JT__R
#define PL_JT__TRANSPARENT   PL_JT__T
#define PL_KAITHI   PL_KTHI
#define PL_KANAEXTENDEDA   PL_KANAEXTA
#define PL_KANASUPPLEMENT   PL_KANASUP
#define PL_KANGXIRADICALS   PL_KANGXI
#define PL_KANNADA   PL_KNDA
#define PL_KATAKANA   PL_KANA
#define PL_KATAKANAPHONETICEXTENSIONS   PL_KATAKANAEXT
#define PL_KAYAHLI   PL_KALI
#define PL_KHAROSHTHI   PL_KHAR
#define PL_KHMER   PL_KHMR
#define PL_KHOJKI   PL_KHOJ
#define PL_KHUDAWADI   PL_SIND
#define PL_LAOO   PL_LAO
#define PL_LATIN   PL_LATN
#define PL_LATIN1SUP   PL_LATIN1
#define PL_LATIN1SUPPLEMENT   PL_LATIN1
#define PL_LATINEXTENDEDA   PL_LATINEXTA
#define PL_LATINEXTENDEDADDITIONAL   PL_LATINEXTADDITIONAL
#define PL_LATINEXTENDEDB   PL_LATINEXTB
#define PL_LATINEXTENDEDC   PL_LATINEXTC
#define PL_LATINEXTENDEDD   PL_LATINEXTD
#define PL_LATINEXTENDEDE   PL_LATINEXTE
#define PL_LB__ALPHABETIC   PL_LB__AL
#define PL_LB__AMBIGUOUS   PL_LB__AI
#define PL_LB__BREAKAFTER   PL_LB__BA
#define PL_LB__BREAKBEFORE   PL_LB__BB
#define PL_LB__BREAKBOTH   PL_LB__B2
#define PL_LB__BREAKSYMBOLS   PL_LB__SY
#define PL_LB__CARRIAGERETURN   PL_LB__CR
#define PL_LB__CLOSEPARENTHESIS   PL_LB__CP
#define PL_LB__CLOSEPUNCTUATION   PL_LB__CL
#define PL_LB__COMBININGMARK   PL_LB__CM
#define PL_LB__COMPLEXCONTEXT   PL_LB__SA
#define PL_LB__CONDITIONALJAPANESESTARTER   PL_LB__CJ
#define PL_LB__CONTINGENTBREAK   PL_LB__CB
#define PL_LB__EBASE   PL_LB__EB
#define PL_LB__EMODIFIER   PL_LB__EM
#define PL_LB__EXCLAMATION   PL_LB__EX
#define PL_LB__GLUE   PL_LB__GL
#define PL_LB__HEBREWLETTER   PL_LB__HL
#define PL_LB__HYPHEN   PL_LB__HY
#define PL_LB__IDEOGRAPHIC   PL_LB__ID
#define PL_LB__INFIXNUMERIC   PL_LB__IS
#define PL_LB__INSEPARABLE   PL_LB__IN
#define PL_LB__INSEPERABLE   PL_LB__IN
#define PL_LB__JL   PL_GCB__L
#define PL_LB__JT   PL_GCB__T
#define PL_LB__JV   PL_GCB__V
#define PL_LB__LINEFEED   PL_LB__LF
#define PL_LB__MANDATORYBREAK   PL_LB__BK
#define PL_LB__NEXTLINE   PL_LB__NL
#define PL_LB__NONSTARTER   PL_LB__NS
#define PL_LB__NUMERIC   PL_LB__NU
#define PL_LB__OPENPUNCTUATION   PL_LB__OP
#define PL_LB__POSTFIXNUMERIC   PL_LB__PO
#define PL_LB__PREFIXNUMERIC   PL_LB__PR
#define PL_LB__QUOTATION   PL_LB__QU
#define PL_LB__REGIONALINDICATOR   PL_RI
#define PL_LB__RI   PL_RI
#define PL_LB__SPACE   PL_LB__SP
#define PL_LB__SURROGATE   PL_LB__SG
#define PL_LB__UNKNOWN   PL_LB__XX
#define PL_LB__WORDJOINER   PL_LB__WJ
#define PL_LB__ZWSPACE   PL_LB__ZW
#define PL_LC   PL_L_AMP_
#define PL_LEPCHA   PL_LEPC
#define PL_LETTER   PL_L
#define PL_LETTERNUMBER   PL_NL
#define PL_LIMBU   PL_LIMB
#define PL_LINEARA   PL_LINA
#define PL_LINEARB   PL_LINB
#define PL_LINEBREAK__AI   PL_LB__AI
#define PL_LINEBREAK__AL   PL_LB__AL
#define PL_LINEBREAK__ALPHABETIC   PL_LB__AL
#define PL_LINEBREAK__AMBIGUOUS   PL_LB__AI
#define PL_LINEBREAK__B2   PL_LB__B2
#define PL_LINEBREAK__BA   PL_LB__BA
#define PL_LINEBREAK__BB   PL_LB__BB
#define PL_LINEBREAK__BK   PL_LB__BK
#define PL_LINEBREAK__BREAKAFTER   PL_LB__BA
#define PL_LINEBREAK__BREAKBEFORE   PL_LB__BB
#define PL_LINEBREAK__BREAKBOTH   PL_LB__B2
#define PL_LINEBREAK__BREAKSYMBOLS   PL_LB__SY
#define PL_LINEBREAK__CARRIAGERETURN   PL_LB__CR
#define PL_LINEBREAK__CB   PL_LB__CB
#define PL_LINEBREAK__CJ   PL_LB__CJ
#define PL_LINEBREAK__CL   PL_LB__CL
#define PL_LINEBREAK__CLOSEPARENTHESIS   PL_LB__CP
#define PL_LINEBREAK__CLOSEPUNCTUATION   PL_LB__CL
#define PL_LINEBREAK__CM   PL_LB__CM
#define PL_LINEBREAK__COMBININGMARK   PL_LB__CM
#define PL_LINEBREAK__COMPLEXCONTEXT   PL_LB__SA
#define PL_LINEBREAK__CONDITIONALJAPANESESTARTER   PL_LB__CJ
#define PL_LINEBREAK__CONTINGENTBREAK   PL_LB__CB
#define PL_LINEBREAK__CP   PL_LB__CP
#define PL_LINEBREAK__CR   PL_LB__CR
#define PL_LINEBREAK__EB   PL_LB__EB
#define PL_LINEBREAK__EBASE   PL_LB__EB
#define PL_LINEBREAK__EM   PL_LB__EM
#define PL_LINEBREAK__EMODIFIER   PL_LB__EM
#define PL_LINEBREAK__EX   PL_LB__EX
#define PL_LINEBREAK__EXCLAMATION   PL_LB__EX
#define PL_LINEBREAK__GL   PL_LB__GL
#define PL_LINEBREAK__GLUE   PL_LB__GL
#define PL_LINEBREAK__H2   PL_LB__H2
#define PL_LINEBREAK__H3   PL_LB__H3
#define PL_LINEBREAK__HEBREWLETTER   PL_LB__HL
#define PL_LINEBREAK__HL   PL_LB__HL
#define PL_LINEBREAK__HY   PL_LB__HY
#define PL_LINEBREAK__HYPHEN   PL_LB__HY
#define PL_LINEBREAK__ID   PL_LB__ID
#define PL_LINEBREAK__IDEOGRAPHIC   PL_LB__ID
#define PL_LINEBREAK__IN   PL_LB__IN
#define PL_LINEBREAK__INFIXNUMERIC   PL_LB__IS
#define PL_LINEBREAK__INSEPARABLE   PL_LB__IN
#define PL_LINEBREAK__INSEPERABLE   PL_LB__IN
#define PL_LINEBREAK__IS   PL_LB__IS
#define PL_LINEBREAK__JL   PL_GCB__L
#define PL_LINEBREAK__JT   PL_GCB__T
#define PL_LINEBREAK__JV   PL_GCB__V
#define PL_LINEBREAK__LF   PL_LB__LF
#define PL_LINEBREAK__LINEFEED   PL_LB__LF
#define PL_LINEBREAK__MANDATORYBREAK   PL_LB__BK
#define PL_LINEBREAK__NEXTLINE   PL_LB__NL
#define PL_LINEBREAK__NL   PL_LB__NL
#define PL_LINEBREAK__NONSTARTER   PL_LB__NS
#define PL_LINEBREAK__NS   PL_LB__NS
#define PL_LINEBREAK__NU   PL_LB__NU
#define PL_LINEBREAK__NUMERIC   PL_LB__NU
#define PL_LINEBREAK__OP   PL_LB__OP
#define PL_LINEBREAK__OPENPUNCTUATION   PL_LB__OP
#define PL_LINEBREAK__PO   PL_LB__PO
#define PL_LINEBREAK__POSTFIXNUMERIC   PL_LB__PO
#define PL_LINEBREAK__PR   PL_LB__PR
#define PL_LINEBREAK__PREFIXNUMERIC   PL_LB__PR
#define PL_LINEBREAK__QU   PL_LB__QU
#define PL_LINEBREAK__QUOTATION   PL_LB__QU
#define PL_LINEBREAK__REGIONALINDICATOR   PL_RI
#define PL_LINEBREAK__RI   PL_RI
#define PL_LINEBREAK__SA   PL_LB__SA
#define PL_LINEBREAK__SG   PL_LB__SG
#define PL_LINEBREAK__SP   PL_LB__SP
#define PL_LINEBREAK__SPACE   PL_LB__SP
#define PL_LINEBREAK__SURROGATE   PL_LB__SG
#define PL_LINEBREAK__SY   PL_LB__SY
#define PL_LINEBREAK__UNKNOWN   PL_LB__XX
#define PL_LINEBREAK__WJ   PL_LB__WJ
#define PL_LINEBREAK__WORDJOINER   PL_LB__WJ
#define PL_LINEBREAK__XX   PL_LB__XX
#define PL_LINEBREAK__ZW   PL_LB__ZW
#define PL_LINEBREAK__ZWJ   PL_LB__ZWJ
#define PL_LINEBREAK__ZWSPACE   PL_LB__ZW
#define PL_LINESEPARATOR   PL_ZL
#define PL_LOE__F   -PL_LOE
#define PL_LOE__FALSE   -PL_LOE
#define PL_LOE__N   -PL_LOE
#define PL_LOE__NO   -PL_LOE
#define PL_LOE__T   PL_LOE
#define PL_LOE__TRUE   PL_LOE
#define PL_LOE__Y   PL_LOE
#define PL_LOE__YES   PL_LOE
#define PL_LOGICALORDEREXCEPTION   PL_LOE
#define PL_LOGICALORDEREXCEPTION   PL_LOE
#define PL_LOGICALORDEREXCEPTION__F   -PL_LOE
#define PL_LOGICALORDEREXCEPTION__FALSE   -PL_LOE
#define PL_LOGICALORDEREXCEPTION__N   -PL_LOE
#define PL_LOGICALORDEREXCEPTION__NO   -PL_LOE
#define PL_LOGICALORDEREXCEPTION__T   PL_LOE
#define PL_LOGICALORDEREXCEPTION__TRUE   PL_LOE
#define PL_LOGICALORDEREXCEPTION__Y   PL_LOE
#define PL_LOGICALORDEREXCEPTION__YES   PL_LOE
#define PL_LOWER   PL_XPOSIXLOWER
#define PL_LOWERCASE   PL_XPOSIXLOWER
#define PL_LOWERCASE   PL_XPOSIXLOWER
#define PL_LOWERCASELETTER   PL_LL
#define PL_LOWERCASE__F   -PL_XPOSIXLOWER
#define PL_LOWERCASE__FALSE   -PL_XPOSIXLOWER
#define PL_LOWERCASE__N   -PL_XPOSIXLOWER
#define PL_LOWERCASE__NO   -PL_XPOSIXLOWER
#define PL_LOWERCASE__T   PL_XPOSIXLOWER
#define PL_LOWERCASE__TRUE   PL_XPOSIXLOWER
#define PL_LOWERCASE__Y   PL_XPOSIXLOWER
#define PL_LOWERCASE__YES   PL_XPOSIXLOWER
#define PL_LOWER__F   -PL_XPOSIXLOWER
#define PL_LOWER__FALSE   -PL_XPOSIXLOWER
#define PL_LOWER__N   -PL_XPOSIXLOWER
#define PL_LOWER__NO   -PL_XPOSIXLOWER
#define PL_LOWER__T   PL_XPOSIXLOWER
#define PL_LOWER__TRUE   PL_XPOSIXLOWER
#define PL_LOWER__Y   PL_XPOSIXLOWER
#define PL_LOWER__YES   PL_XPOSIXLOWER
#define PL_LYCIAN   PL_LYCI
#define PL_LYDIAN   PL_LYDI
#define PL_L_   PL_L_AMP_
#define PL_MAHAJANI   PL_MAHJ
#define PL_MAHJONGTILES   PL_MAHJONG
#define PL_MALAYALAM   PL_MLYM
#define PL_MANDAIC   PL_MAND
#define PL_MANICHAEAN   PL_MANI
#define PL_MARCHEN   PL_MARC
#define PL_MARK   PL_M
#define PL_MASARAMGONDI   PL_GONM
#define PL_MATHEMATICALALPHANUMERICSYMBOLS   PL_MATHALPHANUM
#define PL_MATHEMATICALOPERATORS   PL_MATHOPERATORS
#define PL_MATHSYMBOL   PL_SM
#define PL_MATH__F   -PL_MATH
#define PL_MATH__FALSE   -PL_MATH
#define PL_MATH__N   -PL_MATH
#define PL_MATH__NO   -PL_MATH
#define PL_MATH__T   PL_MATH
#define PL_MATH__TRUE   PL_MATH
#define PL_MATH__Y   PL_MATH
#define PL_MATH__YES   PL_MATH
#define PL_MEETEIMAYEK   PL_MTEI
#define PL_MEETEIMAYEKEXTENSIONS   PL_MEETEIMAYEKEXT
#define PL_MENDEKIKAKUI   PL_MEND
#define PL_MEROITICCURSIVE   PL_MERC
#define PL_MEROITICHIEROGLYPHS   PL_MERO
#define PL_MISCELLANEOUSMATHEMATICALSYMBOLSA   PL_MISCMATHSYMBOLSA
#define PL_MISCELLANEOUSMATHEMATICALSYMBOLSB   PL_MISCMATHSYMBOLSB
#define PL_MISCELLANEOUSSYMBOLS   PL_MISCSYMBOLS
#define PL_MISCELLANEOUSSYMBOLSANDARROWS   PL_MISCARROWS
#define PL_MISCELLANEOUSSYMBOLSANDPICTOGRAPHS   PL_MISCPICTOGRAPHS
#define PL_MISCELLANEOUSTECHNICAL   PL_MISCTECHNICAL
#define PL_MODIFIERLETTER   PL_LM
#define PL_MODIFIERSYMBOL   PL_SK
#define PL_MONGOLIAN   PL_MONG
#define PL_MONGOLIANSUPPLEMENT   PL_MONGOLIANSUP
#define PL_MROO   PL_MRO
#define PL_MULTANI   PL_MULT
#define PL_MUSICALSYMBOLS   PL_MUSIC
#define PL_MYANMAR   PL_MYMR
#define PL_MYANMAREXTENDEDA   PL_MYANMAREXTA
#define PL_MYANMAREXTENDEDB   PL_MYANMAREXTB
#define PL_NABATAEAN   PL_NBAT
#define PL_NCHAR__F   -PL_NCHAR
#define PL_NCHAR__FALSE   -PL_NCHAR
#define PL_NCHAR__N   -PL_NCHAR
#define PL_NCHAR__NO   -PL_NCHAR
#define PL_NCHAR__T   PL_NCHAR
#define PL_NCHAR__TRUE   PL_NCHAR
#define PL_NCHAR__Y   PL_NCHAR
#define PL_NCHAR__YES   PL_NCHAR
#define PL_ND   PL_XPOSIXDIGIT
#define PL_NEWTAILUE   PL_TALU
#define PL_NFCQC__MAYBE   PL_NFCQC__M
#define PL_NFCQC__N   PL_COMPEX
#define PL_NFCQC__NO   PL_COMPEX
#define PL_NFCQC__YES   PL_NFCQC__Y
#define PL_NFCQUICKCHECK__M   PL_NFCQC__M
#define PL_NFCQUICKCHECK__MAYBE   PL_NFCQC__M
#define PL_NFCQUICKCHECK__N   PL_COMPEX
#define PL_NFCQUICKCHECK__NO   PL_COMPEX
#define PL_NFCQUICKCHECK__Y   PL_NFCQC__Y
#define PL_NFCQUICKCHECK__YES   PL_NFCQC__Y
#define PL_NFDQC__N   PL_DT__CAN
#define PL_NFDQC__NO   PL_DT__CAN
#define PL_NFDQC__YES   PL_NFDQC__Y
#define PL_NFDQUICKCHECK__N   PL_DT__CAN
#define PL_NFDQUICKCHECK__NO   PL_DT__CAN
#define PL_NFDQUICKCHECK__Y   PL_NFDQC__Y
#define PL_NFDQUICKCHECK__YES   PL_NFDQC__Y
#define PL_NFKCQC__M   PL_NFCQC__M
#define PL_NFKCQC__MAYBE   PL_NFCQC__M
#define PL_NFKCQC__NO   PL_NFKCQC__N
#define PL_NFKCQC__YES   PL_NFKCQC__Y
#define PL_NFKCQUICKCHECK__M   PL_NFCQC__M
#define PL_NFKCQUICKCHECK__MAYBE   PL_NFCQC__M
#define PL_NFKCQUICKCHECK__N   PL_NFKCQC__N
#define PL_NFKCQUICKCHECK__NO   PL_NFKCQC__N
#define PL_NFKCQUICKCHECK__Y   PL_NFKCQC__Y
#define PL_NFKCQUICKCHECK__YES   PL_NFKCQC__Y
#define PL_NFKDQC__NO   PL_NFKDQC__N
#define PL_NFKDQC__Y   PL_DT__NONE
#define PL_NFKDQC__YES   PL_DT__NONE
#define PL_NFKDQUICKCHECK__N   PL_NFKDQC__N
#define PL_NFKDQUICKCHECK__NO   PL_NFKDQC__N
#define PL_NFKDQUICKCHECK__Y   PL_DT__NONE
#define PL_NFKDQUICKCHECK__YES   PL_DT__NONE
#define PL_NKOO   PL_NKO
#define PL_NOBLOCK   PL_NB
#define PL_NONCHARACTERCODEPOINT   PL_NCHAR
#define PL_NONCHARACTERCODEPOINT   PL_NCHAR
#define PL_NONCHARACTERCODEPOINT__F   -PL_NCHAR
#define PL_NONCHARACTERCODEPOINT__FALSE   -PL_NCHAR
#define PL_NONCHARACTERCODEPOINT__N   -PL_NCHAR
#define PL_NONCHARACTERCODEPOINT__NO   -PL_NCHAR
#define PL_NONCHARACTERCODEPOINT__T   PL_NCHAR
#define PL_NONCHARACTERCODEPOINT__TRUE   PL_NCHAR
#define PL_NONCHARACTERCODEPOINT__Y   PL_NCHAR
#define PL_NONCHARACTERCODEPOINT__YES   PL_NCHAR
#define PL_NONSPACINGMARK   PL_MN
#define PL_NT__DE   PL_XPOSIXDIGIT
#define PL_NT__DECIMAL   PL_XPOSIXDIGIT
#define PL_NT__DIGIT   PL_NT__DI
#define PL_NT__NONE   PL_NV__NAN
#define PL_NT__NUMERIC   PL_NT__NU
#define PL_NUMBER   PL_N
#define PL_NUMERICTYPE__DE   PL_XPOSIXDIGIT
#define PL_NUMERICTYPE__DECIMAL   PL_XPOSIXDIGIT
#define PL_NUMERICTYPE__DI   PL_NT__DI
#define PL_NUMERICTYPE__DIGIT   PL_NT__DI
#define PL_NUMERICTYPE__NONE   PL_NV__NAN
#define PL_NUMERICTYPE__NU   PL_NT__NU
#define PL_NUMERICTYPE__NUMERIC   PL_NT__NU
#define PL_NUMERICVALUE__0   PL_NV__0
#define PL_NUMERICVALUE__1   PL_NV__1
#define PL_NUMERICVALUE__10   PL_NV__10
#define PL_NUMERICVALUE__100   PL_NV__100
#define PL_NUMERICVALUE__1000   PL_NV__1000
#define PL_NUMERICVALUE__10000   PL_NV__10000
#define PL_NUMERICVALUE__100000   PL_NV__100000
#define PL_NUMERICVALUE__1000000   PL_NV__1000000
#define PL_NUMERICVALUE__100000000   PL_NV__100000000
#define PL_NUMERICVALUE__10000000000   PL_NV__10000000000
#define PL_NUMERICVALUE__1000000000000   PL_NV__1000000000000
#define PL_NUMERICVALUE__11   PL_NV__11
#define PL_NUMERICVALUE__11_SLASH_12   PL_NV__11_SLASH_12
#define PL_NUMERICVALUE__11_SLASH_2   PL_NV__11_SLASH_2
#define PL_NUMERICVALUE__12   PL_NV__12
#define PL_NUMERICVALUE__13   PL_NV__13
#define PL_NUMERICVALUE__13_SLASH_2   PL_NV__13_SLASH_2
#define PL_NUMERICVALUE__14   PL_NV__14
#define PL_NUMERICVALUE__15   PL_NV__15
#define PL_NUMERICVALUE__15_SLASH_2   PL_NV__15_SLASH_2
#define PL_NUMERICVALUE__16   PL_NV__16
#define PL_NUMERICVALUE__17   PL_NV__17
#define PL_NUMERICVALUE__17_SLASH_2   PL_NV__17_SLASH_2
#define PL_NUMERICVALUE__18   PL_NV__18
#define PL_NUMERICVALUE__19   PL_NV__19
#define PL_NUMERICVALUE__1_SLASH_10   PL_NV__1_SLASH_10
#define PL_NUMERICVALUE__1_SLASH_12   PL_NV__1_SLASH_12
#define PL_NUMERICVALUE__1_SLASH_16   PL_NV__1_SLASH_16
#define PL_NUMERICVALUE__1_SLASH_160   PL_NV__1_SLASH_160
#define PL_NUMERICVALUE__1_SLASH_2   PL_NV__1_SLASH_2
#define PL_NUMERICVALUE__1_SLASH_20   PL_NV__1_SLASH_20
#define PL_NUMERICVALUE__1_SLASH_3   PL_NV__1_SLASH_3
#define PL_NUMERICVALUE__1_SLASH_4   PL_NV__1_SLASH_4
#define PL_NUMERICVALUE__1_SLASH_40   PL_NV__1_SLASH_40
#define PL_NUMERICVALUE__1_SLASH_5   PL_NV__1_SLASH_5
#define PL_NUMERICVALUE__1_SLASH_6   PL_NV__1_SLASH_6
#define PL_NUMERICVALUE__1_SLASH_7   PL_NV__1_SLASH_7
#define PL_NUMERICVALUE__1_SLASH_8   PL_NV__1_SLASH_8
#define PL_NUMERICVALUE__1_SLASH_9   PL_NV__1_SLASH_9
#define PL_NUMERICVALUE__2   PL_NV__2
#define PL_NUMERICVALUE__20   PL_NV__20
#define PL_NUMERICVALUE__200   PL_NV__200
#define PL_NUMERICVALUE__2000   PL_NV__2000
#define PL_NUMERICVALUE__20000   PL_NV__20000
#define PL_NUMERICVALUE__200000   PL_NV__200000
#define PL_NUMERICVALUE__21   PL_NV__21
#define PL_NUMERICVALUE__216000   PL_NV__216000
#define PL_NUMERICVALUE__22   PL_NV__22
#define PL_NUMERICVALUE__23   PL_NV__23
#define PL_NUMERICVALUE__24   PL_NV__24
#define PL_NUMERICVALUE__25   PL_NV__25
#define PL_NUMERICVALUE__26   PL_NV__26
#define PL_NUMERICVALUE__27   PL_NV__27
#define PL_NUMERICVALUE__28   PL_NV__28
#define PL_NUMERICVALUE__29   PL_NV__29
#define PL_NUMERICVALUE__2_SLASH_3   PL_NV__2_SLASH_3
#define PL_NUMERICVALUE__2_SLASH_5   PL_NV__2_SLASH_5
#define PL_NUMERICVALUE__3   PL_NV__3
#define PL_NUMERICVALUE__30   PL_NV__30
#define PL_NUMERICVALUE__300   PL_NV__300
#define PL_NUMERICVALUE__3000   PL_NV__3000
#define PL_NUMERICVALUE__30000   PL_NV__30000
#define PL_NUMERICVALUE__300000   PL_NV__300000
#define PL_NUMERICVALUE__31   PL_NV__31
#define PL_NUMERICVALUE__32   PL_NV__32
#define PL_NUMERICVALUE__33   PL_NV__33
#define PL_NUMERICVALUE__34   PL_NV__34
#define PL_NUMERICVALUE__35   PL_NV__35
#define PL_NUMERICVALUE__36   PL_NV__36
#define PL_NUMERICVALUE__37   PL_NV__37
#define PL_NUMERICVALUE__38   PL_NV__38
#define PL_NUMERICVALUE__39   PL_NV__39
#define PL_NUMERICVALUE__3_SLASH_16   PL_NV__3_SLASH_16
#define PL_NUMERICVALUE__3_SLASH_2   PL_NV__3_SLASH_2
#define PL_NUMERICVALUE__3_SLASH_20   PL_NV__3_SLASH_20
#define PL_NUMERICVALUE__3_SLASH_4   PL_NV__3_SLASH_4
#define PL_NUMERICVALUE__3_SLASH_5   PL_NV__3_SLASH_5
#define PL_NUMERICVALUE__3_SLASH_8   PL_NV__3_SLASH_8
#define PL_NUMERICVALUE__3_SLASH_80   PL_NV__3_SLASH_80
#define PL_NUMERICVALUE__4   PL_NV__4
#define PL_NUMERICVALUE__40   PL_NV__40
#define PL_NUMERICVALUE__400   PL_NV__400
#define PL_NUMERICVALUE__4000   PL_NV__4000
#define PL_NUMERICVALUE__40000   PL_NV__40000
#define PL_NUMERICVALUE__400000   PL_NV__400000
#define PL_NUMERICVALUE__41   PL_NV__41
#define PL_NUMERICVALUE__42   PL_NV__42
#define PL_NUMERICVALUE__43   PL_NV__43
#define PL_NUMERICVALUE__432000   PL_NV__432000
#define PL_NUMERICVALUE__44   PL_NV__44
#define PL_NUMERICVALUE__45   PL_NV__45
#define PL_NUMERICVALUE__46   PL_NV__46
#define PL_NUMERICVALUE__47   PL_NV__47
#define PL_NUMERICVALUE__48   PL_NV__48
#define PL_NUMERICVALUE__49   PL_NV__49
#define PL_NUMERICVALUE__4_SLASH_5   PL_NV__4_SLASH_5
#define PL_NUMERICVALUE__5   PL_NV__5
#define PL_NUMERICVALUE__50   PL_NV__50
#define PL_NUMERICVALUE__500   PL_NV__500
#define PL_NUMERICVALUE__5000   PL_NV__5000
#define PL_NUMERICVALUE__50000   PL_NV__50000
#define PL_NUMERICVALUE__500000   PL_NV__500000
#define PL_NUMERICVALUE__5_SLASH_12   PL_NV__5_SLASH_12
#define PL_NUMERICVALUE__5_SLASH_2   PL_NV__5_SLASH_2
#define PL_NUMERICVALUE__5_SLASH_6   PL_NV__5_SLASH_6
#define PL_NUMERICVALUE__5_SLASH_8   PL_NV__5_SLASH_8
#define PL_NUMERICVALUE__6   PL_NV__6
#define PL_NUMERICVALUE__60   PL_NV__60
#define PL_NUMERICVALUE__600   PL_NV__600
#define PL_NUMERICVALUE__6000   PL_NV__6000
#define PL_NUMERICVALUE__60000   PL_NV__60000
#define PL_NUMERICVALUE__600000   PL_NV__600000
#define PL_NUMERICVALUE__7   PL_NV__7
#define PL_NUMERICVALUE__70   PL_NV__70
#define PL_NUMERICVALUE__700   PL_NV__700
#define PL_NUMERICVALUE__7000   PL_NV__7000
#define PL_NUMERICVALUE__70000   PL_NV__70000
#define PL_NUMERICVALUE__700000   PL_NV__700000
#define PL_NUMERICVALUE__7_SLASH_12   PL_NV__7_SLASH_12
#define PL_NUMERICVALUE__7_SLASH_2   PL_NV__7_SLASH_2
#define PL_NUMERICVALUE__7_SLASH_8   PL_NV__7_SLASH_8
#define PL_NUMERICVALUE__8   PL_NV__8
#define PL_NUMERICVALUE__80   PL_NV__80
#define PL_NUMERICVALUE__800   PL_NV__800
#define PL_NUMERICVALUE__8000   PL_NV__8000
#define PL_NUMERICVALUE__80000   PL_NV__80000
#define PL_NUMERICVALUE__800000   PL_NV__800000
#define PL_NUMERICVALUE__9   PL_NV__9
#define PL_NUMERICVALUE__90   PL_NV__90
#define PL_NUMERICVALUE__900   PL_NV__900
#define PL_NUMERICVALUE__9000   PL_NV__9000
#define PL_NUMERICVALUE__90000   PL_NV__90000
#define PL_NUMERICVALUE__900000   PL_NV__900000
#define PL_NUMERICVALUE__9_SLASH_2   PL_NV__9_SLASH_2
#define PL_NUMERICVALUE__NAN   PL_NV__NAN
#define PL_NUMERICVALUE___MINUS_1_SLASH_2   PL_NV___MINUS_1_SLASH_2
#define PL_NUSHU   PL_NSHU
#define PL_OGHAM   PL_OGAM
#define PL_OLCHIKI   PL_OLCK
#define PL_OLDHUNGARIAN   PL_HUNG
#define PL_OLDITALIC   PL_ITAL
#define PL_OLDNORTHARABIAN   PL_NARB
#define PL_OLDPERMIC   PL_PERM
#define PL_OLDPERSIAN   PL_XPEO
#define PL_OLDSOUTHARABIAN   PL_SARB
#define PL_OLDTURKIC   PL_ORKH
#define PL_OPENPUNCTUATION   PL_PS
#define PL_OPTICALCHARACTERRECOGNITION   PL_OCR
#define PL_ORIYA   PL_ORYA
#define PL_OSAGE   PL_OSGE
#define PL_OSMANYA   PL_OSMA
#define PL_OTHER   PL_C
#define PL_OTHERLETTER   PL_LO
#define PL_OTHERNUMBER   PL_NO
#define PL_OTHERPUNCTUATION   PL_PO
#define PL_OTHERSYMBOL   PL_SO
#define PL_PAHAWHHMONG   PL_HMNG
#define PL_PALMYRENE   PL_PALM
#define PL_PARAGRAPHSEPARATOR   PL_ZP
#define PL_PATSYN__F   -PL_PATSYN
#define PL_PATSYN__FALSE   -PL_PATSYN
#define PL_PATSYN__N   -PL_PATSYN
#define PL_PATSYN__NO   -PL_PATSYN
#define PL_PATSYN__T   PL_PATSYN
#define PL_PATSYN__TRUE   PL_PATSYN
#define PL_PATSYN__Y   PL_PATSYN
#define PL_PATSYN__YES   PL_PATSYN
#define PL_PATTERNSYNTAX   PL_PATSYN
#define PL_PATTERNSYNTAX   PL_PATSYN
#define PL_PATTERNSYNTAX__F   -PL_PATSYN
#define PL_PATTERNSYNTAX__FALSE   -PL_PATSYN
#define PL_PATTERNSYNTAX__N   -PL_PATSYN
#define PL_PATTERNSYNTAX__NO   -PL_PATSYN
#define PL_PATTERNSYNTAX__T   PL_PATSYN
#define PL_PATTERNSYNTAX__TRUE   PL_PATSYN
#define PL_PATTERNSYNTAX__Y   PL_PATSYN
#define PL_PATTERNSYNTAX__YES   PL_PATSYN
#define PL_PATTERNWHITESPACE   PL_PATWS
#define PL_PATTERNWHITESPACE   PL_PATWS
#define PL_PATTERNWHITESPACE__F   -PL_PATWS
#define PL_PATTERNWHITESPACE__FALSE   -PL_PATWS
#define PL_PATTERNWHITESPACE__N   -PL_PATWS
#define PL_PATTERNWHITESPACE__NO   -PL_PATWS
#define PL_PATTERNWHITESPACE__T   PL_PATWS
#define PL_PATTERNWHITESPACE__TRUE   PL_PATWS
#define PL_PATTERNWHITESPACE__Y   PL_PATWS
#define PL_PATTERNWHITESPACE__YES   PL_PATWS
#define PL_PATWS__F   -PL_PATWS
#define PL_PATWS__FALSE   -PL_PATWS
#define PL_PATWS__N   -PL_PATWS
#define PL_PATWS__NO   -PL_PATWS
#define PL_PATWS__T   PL_PATWS
#define PL_PATWS__TRUE   PL_PATWS
#define PL_PATWS__Y   PL_PATWS
#define PL_PATWS__YES   PL_PATWS
#define PL_PAUCINHAU   PL_PAUC
#define PL_PCM__F   -PL_PCM
#define PL_PCM__FALSE   -PL_PCM
#define PL_PCM__N   -PL_PCM
#define PL_PCM__NO   -PL_PCM
#define PL_PCM__T   PL_PCM
#define PL_PCM__TRUE   PL_PCM
#define PL_PCM__Y   PL_PCM
#define PL_PCM__YES   PL_PCM
#define PL_PERLSPACE   PL_POSIXSPACE
#define PL_PERLWORD   PL_POSIXWORD
#define PL_PHAGSPA   PL_PHAG
#define PL_PHAISTOSDISC   PL_PHAISTOS
#define PL_PHOENICIAN   PL_PHNX
#define PL_PHONETICEXTENSIONS   PL_PHONETICEXT
#define PL_PHONETICEXTENSIONSSUPPLEMENT   PL_PHONETICEXTSUP
#define PL_PLRD   PL_MIAO
#define PL_PREPENDEDCONCATENATIONMARK   PL_PCM
#define PL_PREPENDEDCONCATENATIONMARK   PL_PCM
#define PL_PREPENDEDCONCATENATIONMARK__F   -PL_PCM
#define PL_PREPENDEDCONCATENATIONMARK__FALSE   -PL_PCM
#define PL_PREPENDEDCONCATENATIONMARK__N   -PL_PCM
#define PL_PREPENDEDCONCATENATIONMARK__NO   -PL_PCM
#define PL_PREPENDEDCONCATENATIONMARK__T   PL_PCM
#define PL_PREPENDEDCONCATENATIONMARK__TRUE   PL_PCM
#define PL_PREPENDEDCONCATENATIONMARK__Y   PL_PCM
#define PL_PREPENDEDCONCATENATIONMARK__YES   PL_PCM
#define PL_PRESENTIN__10   PL_IN__10
#define PL_PRESENTIN__10_DOT_0   PL_IN__10
#define PL_PRESENTIN__1_DOT_1   PL_IN__1_DOT_1
#define PL_PRESENTIN__2   PL_IN__2
#define PL_PRESENTIN__2_DOT_0   PL_IN__2
#define PL_PRESENTIN__2_DOT_1   PL_IN__2_DOT_1
#define PL_PRESENTIN__3   PL_IN__3
#define PL_PRESENTIN__3_DOT_0   PL_IN__3
#define PL_PRESENTIN__3_DOT_1   PL_IN__3_DOT_1
#define PL_PRESENTIN__3_DOT_2   PL_IN__3_DOT_2
#define PL_PRESENTIN__4   PL_IN__4
#define PL_PRESENTIN__4_DOT_0   PL_IN__4
#define PL_PRESENTIN__4_DOT_1   PL_IN__4_DOT_1
#define PL_PRESENTIN__5   PL_IN__5
#define PL_PRESENTIN__5_DOT_0   PL_IN__5
#define PL_PRESENTIN__5_DOT_1   PL_IN__5_DOT_1
#define PL_PRESENTIN__5_DOT_2   PL_IN__5_DOT_2
#define PL_PRESENTIN__6   PL_IN__6
#define PL_PRESENTIN__6_DOT_0   PL_IN__6
#define PL_PRESENTIN__6_DOT_1   PL_IN__6_DOT_1
#define PL_PRESENTIN__6_DOT_2   PL_IN__6_DOT_2
#define PL_PRESENTIN__6_DOT_3   PL_IN__6_DOT_3
#define PL_PRESENTIN__7   PL_IN__7
#define PL_PRESENTIN__7_DOT_0   PL_IN__7
#define PL_PRESENTIN__8   PL_IN__8
#define PL_PRESENTIN__8_DOT_0   PL_IN__8
#define PL_PRESENTIN__9   PL_IN__9
#define PL_PRESENTIN__9_DOT_0   PL_IN__9
#define PL_PRESENTIN__UNASSIGNED   PL_AGE__NA
#define PL_PRESENTIN__V100   PL_IN__10
#define PL_PRESENTIN__V20   PL_IN__2
#define PL_PRESENTIN__V21   PL_IN__2_DOT_1
#define PL_PRESENTIN__V30   PL_IN__3
#define PL_PRESENTIN__V31   PL_IN__3_DOT_1
#define PL_PRESENTIN__V32   PL_IN__3_DOT_2
#define PL_PRESENTIN__V40   PL_IN__4
#define PL_PRESENTIN__V41   PL_IN__4_DOT_1
#define PL_PRESENTIN__V50   PL_IN__5
#define PL_PRESENTIN__V51   PL_IN__5_DOT_1
#define PL_PRESENTIN__V52   PL_IN__5_DOT_2
#define PL_PRESENTIN__V60   PL_IN__6
#define PL_PRESENTIN__V61   PL_IN__6_DOT_1
#define PL_PRESENTIN__V62   PL_IN__6_DOT_2
#define PL_PRESENTIN__V63   PL_IN__6_DOT_3
#define PL_PRESENTIN__V70   PL_IN__7
#define PL_PRESENTIN__V80   PL_IN__8
#define PL_PRESENTIN__V90   PL_IN__9
#define PL_PRINT   PL_XPOSIXPRINT
#define PL_PRIVATEUSE   PL_CO
#define PL_PRIVATEUSEAREA   PL_PUA
#define PL_PSALTERPAHLAVI   PL_PHLP
#define PL_PUNCT   PL_P
#define PL_PUNCTUATION   PL_P
#define PL_QAAC   PL_COPT
#define PL_QMARK__F   -PL_QMARK
#define PL_QMARK__FALSE   -PL_QMARK
#define PL_QMARK__N   -PL_QMARK
#define PL_QMARK__NO   -PL_QMARK
#define PL_QMARK__T   PL_QMARK
#define PL_QMARK__TRUE   PL_QMARK
#define PL_QMARK__Y   PL_QMARK
#define PL_QMARK__YES   PL_QMARK
#define PL_QUOTATIONMARK   PL_QMARK
#define PL_QUOTATIONMARK   PL_QMARK
#define PL_QUOTATIONMARK__F   -PL_QMARK
#define PL_QUOTATIONMARK__FALSE   -PL_QMARK
#define PL_QUOTATIONMARK__N   -PL_QMARK
#define PL_QUOTATIONMARK__NO   -PL_QMARK
#define PL_QUOTATIONMARK__T   PL_QMARK
#define PL_QUOTATIONMARK__TRUE   PL_QMARK
#define PL_QUOTATIONMARK__Y   PL_QMARK
#define PL_QUOTATIONMARK__YES   PL_QMARK
#define PL_RADICAL__F   -PL_RADICAL
#define PL_RADICAL__FALSE   -PL_RADICAL
#define PL_RADICAL__N   -PL_RADICAL
#define PL_RADICAL__NO   -PL_RADICAL
#define PL_RADICAL__T   PL_RADICAL
#define PL_RADICAL__TRUE   PL_RADICAL
#define PL_RADICAL__Y   PL_RADICAL
#define PL_RADICAL__YES   PL_RADICAL
#define PL_REGIONALINDICATOR   PL_RI
#define PL_REGIONALINDICATOR   PL_RI
#define PL_REGIONALINDICATOR__F   -PL_RI
#define PL_REGIONALINDICATOR__FALSE   -PL_RI
#define PL_REGIONALINDICATOR__N   -PL_RI
#define PL_REGIONALINDICATOR__NO   -PL_RI
#define PL_REGIONALINDICATOR__T   PL_RI
#define PL_REGIONALINDICATOR__TRUE   PL_RI
#define PL_REGIONALINDICATOR__Y   PL_RI
#define PL_REGIONALINDICATOR__YES   PL_RI
#define PL_REJANG   PL_RJNG
#define PL_RI__F   -PL_RI
#define PL_RI__FALSE   -PL_RI
#define PL_RI__N   -PL_RI
#define PL_RI__NO   -PL_RI
#define PL_RI__T   PL_RI
#define PL_RI__TRUE   PL_RI
#define PL_RI__Y   PL_RI
#define PL_RI__YES   PL_RI
#define PL_RUMINUMERALSYMBOLS   PL_RUMI
#define PL_RUNIC   PL_RUNR
#define PL_SAMARITAN   PL_SAMR
#define PL_SAURASHTRA   PL_SAUR
#define PL_SB__ATERM   PL_SB__AT
#define PL_SB__CLOSE   PL_SB__CL
#define PL_SB__CR   PL_LB__CR
#define PL_SB__EXTEND   PL_SB__EX
#define PL_SB__FORMAT   PL_SB__FO
#define PL_SB__LF   PL_LB__LF
#define PL_SB__LOWER   PL_SB__LO
#define PL_SB__NU   PL_LB__NU
#define PL_SB__NUMERIC   PL_LB__NU
#define PL_SB__OLETTER   PL_SB__LE
#define PL_SB__OTHER   PL_SB__XX
#define PL_SB__SCONTINUE   PL_SB__SC
#define PL_SB__SEP   PL_SB__SE
#define PL_SB__STERM   PL_SB__ST
#define PL_SB__UPPER   PL_SB__UP
#define PL_SCRIPTEXTENSIONS__ADLAM   PL_ADLM
#define PL_SCRIPTEXTENSIONS__ADLM   PL_ADLM
#define PL_SCRIPTEXTENSIONS__AGHB   PL_AGHB
#define PL_SCRIPTEXTENSIONS__AHOM   PL_AHOM
#define PL_SCRIPTEXTENSIONS__ANATOLIANHIEROGLYPHS   PL_HLUW
#define PL_SCRIPTEXTENSIONS__ARAB   PL_ARAB
#define PL_SCRIPTEXTENSIONS__ARABIC   PL_ARAB
#define PL_SCRIPTEXTENSIONS__ARMENIAN   PL_ARMN
#define PL_SCRIPTEXTENSIONS__ARMI   PL_ARMI
#define PL_SCRIPTEXTENSIONS__ARMN   PL_ARMN
#define PL_SCRIPTEXTENSIONS__AVESTAN   PL_AVST
#define PL_SCRIPTEXTENSIONS__AVST   PL_AVST
#define PL_SCRIPTEXTENSIONS__BALI   PL_BALI
#define PL_SCRIPTEXTENSIONS__BALINESE   PL_BALI
#define PL_SCRIPTEXTENSIONS__BAMU   PL_BAMU
#define PL_SCRIPTEXTENSIONS__BAMUM   PL_BAMU
#define PL_SCRIPTEXTENSIONS__BASS   PL_BASS
#define PL_SCRIPTEXTENSIONS__BASSAVAH   PL_BASS
#define PL_SCRIPTEXTENSIONS__BATAK   PL_BATK
#define PL_SCRIPTEXTENSIONS__BATK   PL_BATK
#define PL_SCRIPTEXTENSIONS__BENG   PL_BENG
#define PL_SCRIPTEXTENSIONS__BENGALI   PL_BENG
#define PL_SCRIPTEXTENSIONS__BHAIKSUKI   PL_BHKS
#define PL_SCRIPTEXTENSIONS__BHKS   PL_BHKS
#define PL_SCRIPTEXTENSIONS__BOPO   PL_BOPO
#define PL_SCRIPTEXTENSIONS__BOPOMOFO   PL_BOPO
#define PL_SCRIPTEXTENSIONS__BRAH   PL_BRAH
#define PL_SCRIPTEXTENSIONS__BRAHMI   PL_BRAH
#define PL_SCRIPTEXTENSIONS__BRAI   PL_BRAI
#define PL_SCRIPTEXTENSIONS__BRAILLE   PL_BRAI
#define PL_SCRIPTEXTENSIONS__BUGI   PL_BUGI
#define PL_SCRIPTEXTENSIONS__BUGINESE   PL_BUGI
#define PL_SCRIPTEXTENSIONS__BUHD   PL_BUHD
#define PL_SCRIPTEXTENSIONS__BUHID   PL_BUHD
#define PL_SCRIPTEXTENSIONS__CAKM   PL_CAKM
#define PL_SCRIPTEXTENSIONS__CANADIANABORIGINAL   PL_CANS
#define PL_SCRIPTEXTENSIONS__CANS   PL_CANS
#define PL_SCRIPTEXTENSIONS__CARI   PL_CARI
#define PL_SCRIPTEXTENSIONS__CARIAN   PL_CARI
#define PL_SCRIPTEXTENSIONS__CAUCASIANALBANIAN   PL_AGHB
#define PL_SCRIPTEXTENSIONS__CHAKMA   PL_CAKM
#define PL_SCRIPTEXTENSIONS__CHAM   PL_CHAM
#define PL_SCRIPTEXTENSIONS__CHER   PL_CHER
#define PL_SCRIPTEXTENSIONS__CHEROKEE   PL_CHER
#define PL_SCRIPTEXTENSIONS__COMMON   PL_ZYYY
#define PL_SCRIPTEXTENSIONS__COPT   PL_COPT
#define PL_SCRIPTEXTENSIONS__COPTIC   PL_COPT
#define PL_SCRIPTEXTENSIONS__CPRT   PL_CPRT
#define PL_SCRIPTEXTENSIONS__CUNEIFORM   PL_XSUX
#define PL_SCRIPTEXTENSIONS__CYPRIOT   PL_CPRT
#define PL_SCRIPTEXTENSIONS__CYRILLIC   PL_CYRL
#define PL_SCRIPTEXTENSIONS__CYRL   PL_CYRL
#define PL_SCRIPTEXTENSIONS__DESERET   PL_DSRT
#define PL_SCRIPTEXTENSIONS__DEVA   PL_DEVA
#define PL_SCRIPTEXTENSIONS__DEVANAGARI   PL_DEVA
#define PL_SCRIPTEXTENSIONS__DSRT   PL_DSRT
#define PL_SCRIPTEXTENSIONS__DUPL   PL_DUPL
#define PL_SCRIPTEXTENSIONS__DUPLOYAN   PL_DUPL
#define PL_SCRIPTEXTENSIONS__EGYP   PL_EGYP
#define PL_SCRIPTEXTENSIONS__EGYPTIANHIEROGLYPHS   PL_EGYP
#define PL_SCRIPTEXTENSIONS__ELBA   PL_ELBA
#define PL_SCRIPTEXTENSIONS__ELBASAN   PL_ELBA
#define PL_SCRIPTEXTENSIONS__ETHI   PL_ETHI
#define PL_SCRIPTEXTENSIONS__ETHIOPIC   PL_ETHI
#define PL_SCRIPTEXTENSIONS__GEOR   PL_GEOR
#define PL_SCRIPTEXTENSIONS__GEORGIAN   PL_GEOR
#define PL_SCRIPTEXTENSIONS__GLAG   PL_GLAG
#define PL_SCRIPTEXTENSIONS__GLAGOLITIC   PL_GLAG
#define PL_SCRIPTEXTENSIONS__GONM   PL_GONM
#define PL_SCRIPTEXTENSIONS__GOTH   PL_GOTH
#define PL_SCRIPTEXTENSIONS__GOTHIC   PL_GOTH
#define PL_SCRIPTEXTENSIONS__GRAN   PL_GRAN
#define PL_SCRIPTEXTENSIONS__GRANTHA   PL_GRAN
#define PL_SCRIPTEXTENSIONS__GREEK   PL_GREK
#define PL_SCRIPTEXTENSIONS__GREK   PL_GREK
#define PL_SCRIPTEXTENSIONS__GUJARATI   PL_GUJR
#define PL_SCRIPTEXTENSIONS__GUJR   PL_GUJR
#define PL_SCRIPTEXTENSIONS__GURMUKHI   PL_GURU
#define PL_SCRIPTEXTENSIONS__GURU   PL_GURU
#define PL_SCRIPTEXTENSIONS__HAN   PL_HAN
#define PL_SCRIPTEXTENSIONS__HANG   PL_HANG
#define PL_SCRIPTEXTENSIONS__HANGUL   PL_HANG
#define PL_SCRIPTEXTENSIONS__HANI   PL_HAN
#define PL_SCRIPTEXTENSIONS__HANO   PL_HANO
#define PL_SCRIPTEXTENSIONS__HANUNOO   PL_HANO
#define PL_SCRIPTEXTENSIONS__HATR   PL_HATR
#define PL_SCRIPTEXTENSIONS__HATRAN   PL_HATR
#define PL_SCRIPTEXTENSIONS__HEBR   PL_HEBR
#define PL_SCRIPTEXTENSIONS__HEBREW   PL_HEBR
#define PL_SCRIPTEXTENSIONS__HIRA   PL_HIRA
#define PL_SCRIPTEXTENSIONS__HIRAGANA   PL_HIRA
#define PL_SCRIPTEXTENSIONS__HLUW   PL_HLUW
#define PL_SCRIPTEXTENSIONS__HMNG   PL_HMNG
#define PL_SCRIPTEXTENSIONS__HUNG   PL_HUNG
#define PL_SCRIPTEXTENSIONS__IMPERIALARAMAIC   PL_ARMI
#define PL_SCRIPTEXTENSIONS__INHERITED   PL_QAAI
#define PL_SCRIPTEXTENSIONS__INSCRIPTIONALPAHLAVI   PL_PHLI
#define PL_SCRIPTEXTENSIONS__INSCRIPTIONALPARTHIAN   PL_PRTI
#define PL_SCRIPTEXTENSIONS__ITAL   PL_ITAL
#define PL_SCRIPTEXTENSIONS__JAVA   PL_JAVA
#define PL_SCRIPTEXTENSIONS__JAVANESE   PL_JAVA
#define PL_SCRIPTEXTENSIONS__KAITHI   PL_KTHI
#define PL_SCRIPTEXTENSIONS__KALI   PL_KALI
#define PL_SCRIPTEXTENSIONS__KANA   PL_KANA
#define PL_SCRIPTEXTENSIONS__KANNADA   PL_KNDA
#define PL_SCRIPTEXTENSIONS__KATAKANA   PL_KANA
#define PL_SCRIPTEXTENSIONS__KAYAHLI   PL_KALI
#define PL_SCRIPTEXTENSIONS__KHAR   PL_KHAR
#define PL_SCRIPTEXTENSIONS__KHAROSHTHI   PL_KHAR
#define PL_SCRIPTEXTENSIONS__KHMER   PL_KHMR
#define PL_SCRIPTEXTENSIONS__KHMR   PL_KHMR
#define PL_SCRIPTEXTENSIONS__KHOJ   PL_KHOJ
#define PL_SCRIPTEXTENSIONS__KHOJKI   PL_KHOJ
#define PL_SCRIPTEXTENSIONS__KHUDAWADI   PL_SIND
#define PL_SCRIPTEXTENSIONS__KNDA   PL_KNDA
#define PL_SCRIPTEXTENSIONS__KTHI   PL_KTHI
#define PL_SCRIPTEXTENSIONS__LANA   PL_LANA
#define PL_SCRIPTEXTENSIONS__LAO   PL_LAO
#define PL_SCRIPTEXTENSIONS__LAOO   PL_LAO
#define PL_SCRIPTEXTENSIONS__LATIN   PL_LATN
#define PL_SCRIPTEXTENSIONS__LATN   PL_LATN
#define PL_SCRIPTEXTENSIONS__LEPC   PL_LEPC
#define PL_SCRIPTEXTENSIONS__LEPCHA   PL_LEPC
#define PL_SCRIPTEXTENSIONS__LIMB   PL_LIMB
#define PL_SCRIPTEXTENSIONS__LIMBU   PL_LIMB
#define PL_SCRIPTEXTENSIONS__LINA   PL_LINA
#define PL_SCRIPTEXTENSIONS__LINB   PL_LINB
#define PL_SCRIPTEXTENSIONS__LINEARA   PL_LINA
#define PL_SCRIPTEXTENSIONS__LINEARB   PL_LINB
#define PL_SCRIPTEXTENSIONS__LISU   PL_LISU
#define PL_SCRIPTEXTENSIONS__LYCI   PL_LYCI
#define PL_SCRIPTEXTENSIONS__LYCIAN   PL_LYCI
#define PL_SCRIPTEXTENSIONS__LYDI   PL_LYDI
#define PL_SCRIPTEXTENSIONS__LYDIAN   PL_LYDI
#define PL_SCRIPTEXTENSIONS__MAHAJANI   PL_MAHJ
#define PL_SCRIPTEXTENSIONS__MAHJ   PL_MAHJ
#define PL_SCRIPTEXTENSIONS__MALAYALAM   PL_MLYM
#define PL_SCRIPTEXTENSIONS__MAND   PL_MAND
#define PL_SCRIPTEXTENSIONS__MANDAIC   PL_MAND
#define PL_SCRIPTEXTENSIONS__MANI   PL_MANI
#define PL_SCRIPTEXTENSIONS__MANICHAEAN   PL_MANI
#define PL_SCRIPTEXTENSIONS__MARC   PL_MARC
#define PL_SCRIPTEXTENSIONS__MARCHEN   PL_MARC
#define PL_SCRIPTEXTENSIONS__MASARAMGONDI   PL_GONM
#define PL_SCRIPTEXTENSIONS__MEETEIMAYEK   PL_MTEI
#define PL_SCRIPTEXTENSIONS__MEND   PL_MEND
#define PL_SCRIPTEXTENSIONS__MENDEKIKAKUI   PL_MEND
#define PL_SCRIPTEXTENSIONS__MERC   PL_MERC
#define PL_SCRIPTEXTENSIONS__MERO   PL_MERO
#define PL_SCRIPTEXTENSIONS__MEROITICCURSIVE   PL_MERC
#define PL_SCRIPTEXTENSIONS__MEROITICHIEROGLYPHS   PL_MERO
#define PL_SCRIPTEXTENSIONS__MIAO   PL_MIAO
#define PL_SCRIPTEXTENSIONS__MLYM   PL_MLYM
#define PL_SCRIPTEXTENSIONS__MODI   PL_MODI
#define PL_SCRIPTEXTENSIONS__MONG   PL_MONG
#define PL_SCRIPTEXTENSIONS__MONGOLIAN   PL_MONG
#define PL_SCRIPTEXTENSIONS__MRO   PL_MRO
#define PL_SCRIPTEXTENSIONS__MROO   PL_MRO
#define PL_SCRIPTEXTENSIONS__MTEI   PL_MTEI
#define PL_SCRIPTEXTENSIONS__MULT   PL_MULT
#define PL_SCRIPTEXTENSIONS__MULTANI   PL_MULT
#define PL_SCRIPTEXTENSIONS__MYANMAR   PL_MYMR
#define PL_SCRIPTEXTENSIONS__MYMR   PL_MYMR
#define PL_SCRIPTEXTENSIONS__NABATAEAN   PL_NBAT
#define PL_SCRIPTEXTENSIONS__NARB   PL_NARB
#define PL_SCRIPTEXTENSIONS__NBAT   PL_NBAT
#define PL_SCRIPTEXTENSIONS__NEWA   PL_NEWA
#define PL_SCRIPTEXTENSIONS__NEWTAILUE   PL_TALU
#define PL_SCRIPTEXTENSIONS__NKO   PL_NKO
#define PL_SCRIPTEXTENSIONS__NKOO   PL_NKO
#define PL_SCRIPTEXTENSIONS__NSHU   PL_NSHU
#define PL_SCRIPTEXTENSIONS__NUSHU   PL_NSHU
#define PL_SCRIPTEXTENSIONS__OGAM   PL_OGAM
#define PL_SCRIPTEXTENSIONS__OGHAM   PL_OGAM
#define PL_SCRIPTEXTENSIONS__OLCHIKI   PL_OLCK
#define PL_SCRIPTEXTENSIONS__OLCK   PL_OLCK
#define PL_SCRIPTEXTENSIONS__OLDHUNGARIAN   PL_HUNG
#define PL_SCRIPTEXTENSIONS__OLDITALIC   PL_ITAL
#define PL_SCRIPTEXTENSIONS__OLDNORTHARABIAN   PL_NARB
#define PL_SCRIPTEXTENSIONS__OLDPERMIC   PL_PERM
#define PL_SCRIPTEXTENSIONS__OLDPERSIAN   PL_XPEO
#define PL_SCRIPTEXTENSIONS__OLDSOUTHARABIAN   PL_SARB
#define PL_SCRIPTEXTENSIONS__OLDTURKIC   PL_ORKH
#define PL_SCRIPTEXTENSIONS__ORIYA   PL_ORYA
#define PL_SCRIPTEXTENSIONS__ORKH   PL_ORKH
#define PL_SCRIPTEXTENSIONS__ORYA   PL_ORYA
#define PL_SCRIPTEXTENSIONS__OSAGE   PL_OSGE
#define PL_SCRIPTEXTENSIONS__OSGE   PL_OSGE
#define PL_SCRIPTEXTENSIONS__OSMA   PL_OSMA
#define PL_SCRIPTEXTENSIONS__OSMANYA   PL_OSMA
#define PL_SCRIPTEXTENSIONS__PAHAWHHMONG   PL_HMNG
#define PL_SCRIPTEXTENSIONS__PALM   PL_PALM
#define PL_SCRIPTEXTENSIONS__PALMYRENE   PL_PALM
#define PL_SCRIPTEXTENSIONS__PAUC   PL_PAUC
#define PL_SCRIPTEXTENSIONS__PAUCINHAU   PL_PAUC
#define PL_SCRIPTEXTENSIONS__PERM   PL_PERM
#define PL_SCRIPTEXTENSIONS__PHAG   PL_PHAG
#define PL_SCRIPTEXTENSIONS__PHAGSPA   PL_PHAG
#define PL_SCRIPTEXTENSIONS__PHLI   PL_PHLI
#define PL_SCRIPTEXTENSIONS__PHLP   PL_PHLP
#define PL_SCRIPTEXTENSIONS__PHNX   PL_PHNX
#define PL_SCRIPTEXTENSIONS__PHOENICIAN   PL_PHNX
#define PL_SCRIPTEXTENSIONS__PLRD   PL_MIAO
#define PL_SCRIPTEXTENSIONS__PRTI   PL_PRTI
#define PL_SCRIPTEXTENSIONS__PSALTERPAHLAVI   PL_PHLP
#define PL_SCRIPTEXTENSIONS__QAAC   PL_COPT
#define PL_SCRIPTEXTENSIONS__QAAI   PL_QAAI
#define PL_SCRIPTEXTENSIONS__REJANG   PL_RJNG
#define PL_SCRIPTEXTENSIONS__RJNG   PL_RJNG
#define PL_SCRIPTEXTENSIONS__RUNIC   PL_RUNR
#define PL_SCRIPTEXTENSIONS__RUNR   PL_RUNR
#define PL_SCRIPTEXTENSIONS__SAMARITAN   PL_SAMR
#define PL_SCRIPTEXTENSIONS__SAMR   PL_SAMR
#define PL_SCRIPTEXTENSIONS__SARB   PL_SARB
#define PL_SCRIPTEXTENSIONS__SAUR   PL_SAUR
#define PL_SCRIPTEXTENSIONS__SAURASHTRA   PL_SAUR
#define PL_SCRIPTEXTENSIONS__SGNW   PL_SGNW
#define PL_SCRIPTEXTENSIONS__SHARADA   PL_SHRD
#define PL_SCRIPTEXTENSIONS__SHAVIAN   PL_SHAW
#define PL_SCRIPTEXTENSIONS__SHAW   PL_SHAW
#define PL_SCRIPTEXTENSIONS__SHRD   PL_SHRD
#define PL_SCRIPTEXTENSIONS__SIDD   PL_SIDD
#define PL_SCRIPTEXTENSIONS__SIDDHAM   PL_SIDD
#define PL_SCRIPTEXTENSIONS__SIGNWRITING   PL_SGNW
#define PL_SCRIPTEXTENSIONS__SIND   PL_SIND
#define PL_SCRIPTEXTENSIONS__SINH   PL_SINH
#define PL_SCRIPTEXTENSIONS__SINHALA   PL_SINH
#define PL_SCRIPTEXTENSIONS__SORA   PL_SORA
#define PL_SCRIPTEXTENSIONS__SORASOMPENG   PL_SORA
#define PL_SCRIPTEXTENSIONS__SOYO   PL_SOYO
#define PL_SCRIPTEXTENSIONS__SOYOMBO   PL_SOYO
#define PL_SCRIPTEXTENSIONS__SUND   PL_SUND
#define PL_SCRIPTEXTENSIONS__SUNDANESE   PL_SUND
#define PL_SCRIPTEXTENSIONS__SYLO   PL_SYLO
#define PL_SCRIPTEXTENSIONS__SYLOTINAGRI   PL_SYLO
#define PL_SCRIPTEXTENSIONS__SYRC   PL_SYRC
#define PL_SCRIPTEXTENSIONS__SYRIAC   PL_SYRC
#define PL_SCRIPTEXTENSIONS__TAGALOG   PL_TGLG
#define PL_SCRIPTEXTENSIONS__TAGB   PL_TAGB
#define PL_SCRIPTEXTENSIONS__TAGBANWA   PL_TAGB
#define PL_SCRIPTEXTENSIONS__TAILE   PL_TALE
#define PL_SCRIPTEXTENSIONS__TAITHAM   PL_LANA
#define PL_SCRIPTEXTENSIONS__TAIVIET   PL_TAVT
#define PL_SCRIPTEXTENSIONS__TAKR   PL_TAKR
#define PL_SCRIPTEXTENSIONS__TAKRI   PL_TAKR
#define PL_SCRIPTEXTENSIONS__TALE   PL_TALE
#define PL_SCRIPTEXTENSIONS__TALU   PL_TALU
#define PL_SCRIPTEXTENSIONS__TAMIL   PL_TAML
#define PL_SCRIPTEXTENSIONS__TAML   PL_TAML
#define PL_SCRIPTEXTENSIONS__TANG   PL_TANG
#define PL_SCRIPTEXTENSIONS__TANGUT   PL_TANG
#define PL_SCRIPTEXTENSIONS__TAVT   PL_TAVT
#define PL_SCRIPTEXTENSIONS__TELU   PL_TELU
#define PL_SCRIPTEXTENSIONS__TELUGU   PL_TELU
#define PL_SCRIPTEXTENSIONS__TFNG   PL_TFNG
#define PL_SCRIPTEXTENSIONS__TGLG   PL_TGLG
#define PL_SCRIPTEXTENSIONS__THAA   PL_THAA
#define PL_SCRIPTEXTENSIONS__THAANA   PL_THAA
#define PL_SCRIPTEXTENSIONS__THAI   PL_THAI
#define PL_SCRIPTEXTENSIONS__TIBETAN   PL_TIBT
#define PL_SCRIPTEXTENSIONS__TIBT   PL_TIBT
#define PL_SCRIPTEXTENSIONS__TIFINAGH   PL_TFNG
#define PL_SCRIPTEXTENSIONS__TIRH   PL_TIRH
#define PL_SCRIPTEXTENSIONS__TIRHUTA   PL_TIRH
#define PL_SCRIPTEXTENSIONS__UGAR   PL_UGAR
#define PL_SCRIPTEXTENSIONS__UGARITIC   PL_UGAR
#define PL_SCRIPTEXTENSIONS__UNKNOWN   PL_ZZZZ
#define PL_SCRIPTEXTENSIONS__VAI   PL_VAI
#define PL_SCRIPTEXTENSIONS__VAII   PL_VAI
#define PL_SCRIPTEXTENSIONS__WARA   PL_WARA
#define PL_SCRIPTEXTENSIONS__WARANGCITI   PL_WARA
#define PL_SCRIPTEXTENSIONS__XPEO   PL_XPEO
#define PL_SCRIPTEXTENSIONS__XSUX   PL_XSUX
#define PL_SCRIPTEXTENSIONS__YI   PL_YI
#define PL_SCRIPTEXTENSIONS__YIII   PL_YI
#define PL_SCRIPTEXTENSIONS__ZANABAZARSQUARE   PL_ZANB
#define PL_SCRIPTEXTENSIONS__ZANB   PL_ZANB
#define PL_SCRIPTEXTENSIONS__ZINH   PL_QAAI
#define PL_SCRIPTEXTENSIONS__ZYYY   PL_ZYYY
#define PL_SCRIPTEXTENSIONS__ZZZZ   PL_ZZZZ
#define PL_SCRIPT__ADLAM   PL_SC__ADLM
#define PL_SCRIPT__ADLM   PL_SC__ADLM
#define PL_SCRIPT__AGHB   PL_AGHB
#define PL_SCRIPT__AHOM   PL_AHOM
#define PL_SCRIPT__ANATOLIANHIEROGLYPHS   PL_HLUW
#define PL_SCRIPT__ARAB   PL_SC__ARAB
#define PL_SCRIPT__ARABIC   PL_SC__ARAB
#define PL_SCRIPT__ARMENIAN   PL_SC__ARMN
#define PL_SCRIPT__ARMI   PL_ARMI
#define PL_SCRIPT__ARMN   PL_SC__ARMN
#define PL_SCRIPT__AVESTAN   PL_AVST
#define PL_SCRIPT__AVST   PL_AVST
#define PL_SCRIPT__BALI   PL_BALI
#define PL_SCRIPT__BALINESE   PL_BALI
#define PL_SCRIPT__BAMU   PL_BAMU
#define PL_SCRIPT__BAMUM   PL_BAMU
#define PL_SCRIPT__BASS   PL_BASS
#define PL_SCRIPT__BASSAVAH   PL_BASS
#define PL_SCRIPT__BATAK   PL_BATK
#define PL_SCRIPT__BATK   PL_BATK
#define PL_SCRIPT__BENG   PL_SC__BENG
#define PL_SCRIPT__BENGALI   PL_SC__BENG
#define PL_SCRIPT__BHAIKSUKI   PL_BHKS
#define PL_SCRIPT__BHKS   PL_BHKS
#define PL_SCRIPT__BOPO   PL_SC__BOPO
#define PL_SCRIPT__BOPOMOFO   PL_SC__BOPO
#define PL_SCRIPT__BRAH   PL_BRAH
#define PL_SCRIPT__BRAHMI   PL_BRAH
#define PL_SCRIPT__BRAI   PL_BRAI
#define PL_SCRIPT__BRAILLE   PL_BRAI
#define PL_SCRIPT__BUGI   PL_SC__BUGI
#define PL_SCRIPT__BUGINESE   PL_SC__BUGI
#define PL_SCRIPT__BUHD   PL_SC__BUHD
#define PL_SCRIPT__BUHID   PL_SC__BUHD
#define PL_SCRIPT__CAKM   PL_SC__CAKM
#define PL_SCRIPT__CANADIANABORIGINAL   PL_CANS
#define PL_SCRIPT__CANS   PL_CANS
#define PL_SCRIPT__CARI   PL_CARI
#define PL_SCRIPT__CARIAN   PL_CARI
#define PL_SCRIPT__CAUCASIANALBANIAN   PL_AGHB
#define PL_SCRIPT__CHAKMA   PL_SC__CAKM
#define PL_SCRIPT__CHAM   PL_CHAM
#define PL_SCRIPT__CHER   PL_CHER
#define PL_SCRIPT__CHEROKEE   PL_CHER
#define PL_SCRIPT__COMMON   PL_SC__ZYYY
#define PL_SCRIPT__COPT   PL_SC__COPT
#define PL_SCRIPT__COPTIC   PL_SC__COPT
#define PL_SCRIPT__CPRT   PL_SC__CPRT
#define PL_SCRIPT__CUNEIFORM   PL_XSUX
#define PL_SCRIPT__CYPRIOT   PL_SC__CPRT
#define PL_SCRIPT__CYRILLIC   PL_SC__CYRL
#define PL_SCRIPT__CYRL   PL_SC__CYRL
#define PL_SCRIPT__DESERET   PL_DSRT
#define PL_SCRIPT__DEVA   PL_SC__DEVA
#define PL_SCRIPT__DEVANAGARI   PL_SC__DEVA
#define PL_SCRIPT__DSRT   PL_DSRT
#define PL_SCRIPT__DUPL   PL_SC__DUPL
#define PL_SCRIPT__DUPLOYAN   PL_SC__DUPL
#define PL_SCRIPT__EGYP   PL_EGYP
#define PL_SCRIPT__EGYPTIANHIEROGLYPHS   PL_EGYP
#define PL_SCRIPT__ELBA   PL_ELBA
#define PL_SCRIPT__ELBASAN   PL_ELBA
#define PL_SCRIPT__ETHI   PL_ETHI
#define PL_SCRIPT__ETHIOPIC   PL_ETHI
#define PL_SCRIPT__GEOR   PL_SC__GEOR
#define PL_SCRIPT__GEORGIAN   PL_SC__GEOR
#define PL_SCRIPT__GLAG   PL_SC__GLAG
#define PL_SCRIPT__GLAGOLITIC   PL_SC__GLAG
#define PL_SCRIPT__GONM   PL_GONM
#define PL_SCRIPT__GOTH   PL_GOTH
#define PL_SCRIPT__GOTHIC   PL_GOTH
#define PL_SCRIPT__GRAN   PL_SC__GRAN
#define PL_SCRIPT__GRANTHA   PL_SC__GRAN
#define PL_SCRIPT__GREEK   PL_SC__GREK
#define PL_SCRIPT__GREK   PL_SC__GREK
#define PL_SCRIPT__GUJARATI   PL_SC__GUJR
#define PL_SCRIPT__GUJR   PL_SC__GUJR
#define PL_SCRIPT__GURMUKHI   PL_SC__GURU
#define PL_SCRIPT__GURU   PL_SC__GURU
#define PL_SCRIPT__HAN   PL_SC__HAN
#define PL_SCRIPT__HANG   PL_SC__HANG
#define PL_SCRIPT__HANGUL   PL_SC__HANG
#define PL_SCRIPT__HANI   PL_SC__HAN
#define PL_SCRIPT__HANO   PL_SC__HANO
#define PL_SCRIPT__HANUNOO   PL_SC__HANO
#define PL_SCRIPT__HATR   PL_HATR
#define PL_SCRIPT__HATRAN   PL_HATR
#define PL_SCRIPT__HEBR   PL_HEBR
#define PL_SCRIPT__HEBREW   PL_HEBR
#define PL_SCRIPT__HIRA   PL_SC__HIRA
#define PL_SCRIPT__HIRAGANA   PL_SC__HIRA
#define PL_SCRIPT__HLUW   PL_HLUW
#define PL_SCRIPT__HMNG   PL_HMNG
#define PL_SCRIPT__HUNG   PL_HUNG
#define PL_SCRIPT__IMPERIALARAMAIC   PL_ARMI
#define PL_SCRIPT__INHERITED   PL_SC__QAAI
#define PL_SCRIPT__INSCRIPTIONALPAHLAVI   PL_PHLI
#define PL_SCRIPT__INSCRIPTIONALPARTHIAN   PL_PRTI
#define PL_SCRIPT__ITAL   PL_ITAL
#define PL_SCRIPT__JAVA   PL_SC__JAVA
#define PL_SCRIPT__JAVANESE   PL_SC__JAVA
#define PL_SCRIPT__KAITHI   PL_SC__KTHI
#define PL_SCRIPT__KALI   PL_SC__KALI
#define PL_SCRIPT__KANA   PL_SC__KANA
#define PL_SCRIPT__KANNADA   PL_SC__KNDA
#define PL_SCRIPT__KATAKANA   PL_SC__KANA
#define PL_SCRIPT__KAYAHLI   PL_SC__KALI
#define PL_SCRIPT__KHAR   PL_KHAR
#define PL_SCRIPT__KHAROSHTHI   PL_KHAR
#define PL_SCRIPT__KHMER   PL_KHMR
#define PL_SCRIPT__KHMR   PL_KHMR
#define PL_SCRIPT__KHOJ   PL_SC__KHOJ
#define PL_SCRIPT__KHOJKI   PL_SC__KHOJ
#define PL_SCRIPT__KHUDAWADI   PL_SC__SIND
#define PL_SCRIPT__KNDA   PL_SC__KNDA
#define PL_SCRIPT__KTHI   PL_SC__KTHI
#define PL_SCRIPT__LANA   PL_LANA
#define PL_SCRIPT__LAO   PL_LAO
#define PL_SCRIPT__LAOO   PL_LAO
#define PL_SCRIPT__LATIN   PL_SC__LATN
#define PL_SCRIPT__LATN   PL_SC__LATN
#define PL_SCRIPT__LEPC   PL_LEPC
#define PL_SCRIPT__LEPCHA   PL_LEPC
#define PL_SCRIPT__LIMB   PL_SC__LIMB
#define PL_SCRIPT__LIMBU   PL_SC__LIMB
#define PL_SCRIPT__LINA   PL_SC__LINA
#define PL_SCRIPT__LINB   PL_SC__LINB
#define PL_SCRIPT__LINEARA   PL_SC__LINA
#define PL_SCRIPT__LINEARB   PL_SC__LINB
#define PL_SCRIPT__LISU   PL_LISU
#define PL_SCRIPT__LYCI   PL_LYCI
#define PL_SCRIPT__LYCIAN   PL_LYCI
#define PL_SCRIPT__LYDI   PL_LYDI
#define PL_SCRIPT__LYDIAN   PL_LYDI
#define PL_SCRIPT__MAHAJANI   PL_SC__MAHJ
#define PL_SCRIPT__MAHJ   PL_SC__MAHJ
#define PL_SCRIPT__MALAYALAM   PL_SC__MLYM
#define PL_SCRIPT__MAND   PL_SC__MAND
#define PL_SCRIPT__MANDAIC   PL_SC__MAND
#define PL_SCRIPT__MANI   PL_SC__MANI
#define PL_SCRIPT__MANICHAEAN   PL_SC__MANI
#define PL_SCRIPT__MARC   PL_MARC
#define PL_SCRIPT__MARCHEN   PL_MARC
#define PL_SCRIPT__MASARAMGONDI   PL_GONM
#define PL_SCRIPT__MEETEIMAYEK   PL_MTEI
#define PL_SCRIPT__MEND   PL_MEND
#define PL_SCRIPT__MENDEKIKAKUI   PL_MEND
#define PL_SCRIPT__MERC   PL_MERC
#define PL_SCRIPT__MERO   PL_MERO
#define PL_SCRIPT__MEROITICCURSIVE   PL_MERC
#define PL_SCRIPT__MEROITICHIEROGLYPHS   PL_MERO
#define PL_SCRIPT__MIAO   PL_MIAO
#define PL_SCRIPT__MLYM   PL_SC__MLYM
#define PL_SCRIPT__MODI   PL_SC__MODI
#define PL_SCRIPT__MONG   PL_SC__MONG
#define PL_SCRIPT__MONGOLIAN   PL_SC__MONG
#define PL_SCRIPT__MRO   PL_MRO
#define PL_SCRIPT__MROO   PL_MRO
#define PL_SCRIPT__MTEI   PL_MTEI
#define PL_SCRIPT__MULT   PL_SC__MULT
#define PL_SCRIPT__MULTANI   PL_SC__MULT
#define PL_SCRIPT__MYANMAR   PL_SC__MYMR
#define PL_SCRIPT__MYMR   PL_SC__MYMR
#define PL_SCRIPT__NABATAEAN   PL_NBAT
#define PL_SCRIPT__NARB   PL_NARB
#define PL_SCRIPT__NBAT   PL_NBAT
#define PL_SCRIPT__NEWA   PL_NEWA
#define PL_SCRIPT__NEWTAILUE   PL_TALU
#define PL_SCRIPT__NKO   PL_NKO
#define PL_SCRIPT__NKOO   PL_NKO
#define PL_SCRIPT__NSHU   PL_NSHU
#define PL_SCRIPT__NUSHU   PL_NSHU
#define PL_SCRIPT__OGAM   PL_OGAM
#define PL_SCRIPT__OGHAM   PL_OGAM
#define PL_SCRIPT__OLCHIKI   PL_OLCK
#define PL_SCRIPT__OLCK   PL_OLCK
#define PL_SCRIPT__OLDHUNGARIAN   PL_HUNG
#define PL_SCRIPT__OLDITALIC   PL_ITAL
#define PL_SCRIPT__OLDNORTHARABIAN   PL_NARB
#define PL_SCRIPT__OLDPERMIC   PL_SC__PERM
#define PL_SCRIPT__OLDPERSIAN   PL_XPEO
#define PL_SCRIPT__OLDSOUTHARABIAN   PL_SARB
#define PL_SCRIPT__OLDTURKIC   PL_ORKH
#define PL_SCRIPT__ORIYA   PL_SC__ORYA
#define PL_SCRIPT__ORKH   PL_ORKH
#define PL_SCRIPT__ORYA   PL_SC__ORYA
#define PL_SCRIPT__OSAGE   PL_OSGE
#define PL_SCRIPT__OSGE   PL_OSGE
#define PL_SCRIPT__OSMA   PL_OSMA
#define PL_SCRIPT__OSMANYA   PL_OSMA
#define PL_SCRIPT__PAHAWHHMONG   PL_HMNG
#define PL_SCRIPT__PALM   PL_PALM
#define PL_SCRIPT__PALMYRENE   PL_PALM
#define PL_SCRIPT__PAUC   PL_PAUC
#define PL_SCRIPT__PAUCINHAU   PL_PAUC
#define PL_SCRIPT__PERM   PL_SC__PERM
#define PL_SCRIPT__PHAG   PL_SC__PHAG
#define PL_SCRIPT__PHAGSPA   PL_SC__PHAG
#define PL_SCRIPT__PHLI   PL_PHLI
#define PL_SCRIPT__PHLP   PL_SC__PHLP
#define PL_SCRIPT__PHNX   PL_PHNX
#define PL_SCRIPT__PHOENICIAN   PL_PHNX
#define PL_SCRIPT__PLRD   PL_MIAO
#define PL_SCRIPT__PRTI   PL_PRTI
#define PL_SCRIPT__PSALTERPAHLAVI   PL_SC__PHLP
#define PL_SCRIPT__QAAC   PL_SC__COPT
#define PL_SCRIPT__QAAI   PL_SC__QAAI
#define PL_SCRIPT__REJANG   PL_RJNG
#define PL_SCRIPT__RJNG   PL_RJNG
#define PL_SCRIPT__RUNIC   PL_RUNR
#define PL_SCRIPT__RUNR   PL_RUNR
#define PL_SCRIPT__SAMARITAN   PL_SAMR
#define PL_SCRIPT__SAMR   PL_SAMR
#define PL_SCRIPT__SARB   PL_SARB
#define PL_SCRIPT__SAUR   PL_SAUR
#define PL_SCRIPT__SAURASHTRA   PL_SAUR
#define PL_SCRIPT__SGNW   PL_SGNW
#define PL_SCRIPT__SHARADA   PL_SC__SHRD
#define PL_SCRIPT__SHAVIAN   PL_SHAW
#define PL_SCRIPT__SHAW   PL_SHAW
#define PL_SCRIPT__SHRD   PL_SC__SHRD
#define PL_SCRIPT__SIDD   PL_SIDD
#define PL_SCRIPT__SIDDHAM   PL_SIDD
#define PL_SCRIPT__SIGNWRITING   PL_SGNW
#define PL_SCRIPT__SIND   PL_SC__SIND
#define PL_SCRIPT__SINH   PL_SC__SINH
#define PL_SCRIPT__SINHALA   PL_SC__SINH
#define PL_SCRIPT__SORA   PL_SORA
#define PL_SCRIPT__SORASOMPENG   PL_SORA
#define PL_SCRIPT__SOYO   PL_SOYO
#define PL_SCRIPT__SOYOMBO   PL_SOYO
#define PL_SCRIPT__SUND   PL_SUND
#define PL_SCRIPT__SUNDANESE   PL_SUND
#define PL_SCRIPT__SYLO   PL_SC__SYLO
#define PL_SCRIPT__SYLOTINAGRI   PL_SC__SYLO
#define PL_SCRIPT__SYRC   PL_SC__SYRC
#define PL_SCRIPT__SYRIAC   PL_SC__SYRC
#define PL_SCRIPT__TAGALOG   PL_SC__TGLG
#define PL_SCRIPT__TAGB   PL_SC__TAGB
#define PL_SCRIPT__TAGBANWA   PL_SC__TAGB
#define PL_SCRIPT__TAILE   PL_SC__TALE
#define PL_SCRIPT__TAITHAM   PL_LANA
#define PL_SCRIPT__TAIVIET   PL_TAVT
#define PL_SCRIPT__TAKR   PL_SC__TAKR
#define PL_SCRIPT__TAKRI   PL_SC__TAKR
#define PL_SCRIPT__TALE   PL_SC__TALE
#define PL_SCRIPT__TALU   PL_TALU
#define PL_SCRIPT__TAMIL   PL_SC__TAML
#define PL_SCRIPT__TAML   PL_SC__TAML
#define PL_SCRIPT__TANG   PL_TANG
#define PL_SCRIPT__TANGUT   PL_TANG
#define PL_SCRIPT__TAVT   PL_TAVT
#define PL_SCRIPT__TELU   PL_SC__TELU
#define PL_SCRIPT__TELUGU   PL_SC__TELU
#define PL_SCRIPT__TFNG   PL_TFNG
#define PL_SCRIPT__TGLG   PL_SC__TGLG
#define PL_SCRIPT__THAA   PL_SC__THAA
#define PL_SCRIPT__THAANA   PL_SC__THAA
#define PL_SCRIPT__THAI   PL_THAI
#define PL_SCRIPT__TIBETAN   PL_TIBT
#define PL_SCRIPT__TIBT   PL_TIBT
#define PL_SCRIPT__TIFINAGH   PL_TFNG
#define PL_SCRIPT__TIRH   PL_SC__TIRH
#define PL_SCRIPT__TIRHUTA   PL_SC__TIRH
#define PL_SCRIPT__UGAR   PL_UGAR
#define PL_SCRIPT__UGARITIC   PL_UGAR
#define PL_SCRIPT__UNKNOWN   PL_ZZZZ
#define PL_SCRIPT__VAI   PL_VAI
#define PL_SCRIPT__VAII   PL_VAI
#define PL_SCRIPT__WARA   PL_WARA
#define PL_SCRIPT__WARANGCITI   PL_WARA
#define PL_SCRIPT__XPEO   PL_XPEO
#define PL_SCRIPT__XSUX   PL_XSUX
#define PL_SCRIPT__YI   PL_SC__YI
#define PL_SCRIPT__YIII   PL_SC__YI
#define PL_SCRIPT__ZANABAZARSQUARE   PL_ZANB
#define PL_SCRIPT__ZANB   PL_ZANB
#define PL_SCRIPT__ZINH   PL_SC__QAAI
#define PL_SCRIPT__ZYYY   PL_SC__ZYYY
#define PL_SCRIPT__ZZZZ   PL_ZZZZ
#define PL_SCX__ADLAM   PL_ADLM
#define PL_SCX__ADLM   PL_ADLM
#define PL_SCX__AGHB   PL_AGHB
#define PL_SCX__AHOM   PL_AHOM
#define PL_SCX__ANATOLIANHIEROGLYPHS   PL_HLUW
#define PL_SCX__ARAB   PL_ARAB
#define PL_SCX__ARABIC   PL_ARAB
#define PL_SCX__ARMENIAN   PL_ARMN
#define PL_SCX__ARMI   PL_ARMI
#define PL_SCX__ARMN   PL_ARMN
#define PL_SCX__AVESTAN   PL_AVST
#define PL_SCX__AVST   PL_AVST
#define PL_SCX__BALI   PL_BALI
#define PL_SCX__BALINESE   PL_BALI
#define PL_SCX__BAMU   PL_BAMU
#define PL_SCX__BAMUM   PL_BAMU
#define PL_SCX__BASS   PL_BASS
#define PL_SCX__BASSAVAH   PL_BASS
#define PL_SCX__BATAK   PL_BATK
#define PL_SCX__BATK   PL_BATK
#define PL_SCX__BENG   PL_BENG
#define PL_SCX__BENGALI   PL_BENG
#define PL_SCX__BHAIKSUKI   PL_BHKS
#define PL_SCX__BHKS   PL_BHKS
#define PL_SCX__BOPO   PL_BOPO
#define PL_SCX__BOPOMOFO   PL_BOPO
#define PL_SCX__BRAH   PL_BRAH
#define PL_SCX__BRAHMI   PL_BRAH
#define PL_SCX__BRAI   PL_BRAI
#define PL_SCX__BRAILLE   PL_BRAI
#define PL_SCX__BUGI   PL_BUGI
#define PL_SCX__BUGINESE   PL_BUGI
#define PL_SCX__BUHD   PL_BUHD
#define PL_SCX__BUHID   PL_BUHD
#define PL_SCX__CAKM   PL_CAKM
#define PL_SCX__CANADIANABORIGINAL   PL_CANS
#define PL_SCX__CANS   PL_CANS
#define PL_SCX__CARI   PL_CARI
#define PL_SCX__CARIAN   PL_CARI
#define PL_SCX__CAUCASIANALBANIAN   PL_AGHB
#define PL_SCX__CHAKMA   PL_CAKM
#define PL_SCX__CHAM   PL_CHAM
#define PL_SCX__CHER   PL_CHER
#define PL_SCX__CHEROKEE   PL_CHER
#define PL_SCX__COMMON   PL_ZYYY
#define PL_SCX__COPT   PL_COPT
#define PL_SCX__COPTIC   PL_COPT
#define PL_SCX__CPRT   PL_CPRT
#define PL_SCX__CUNEIFORM   PL_XSUX
#define PL_SCX__CYPRIOT   PL_CPRT
#define PL_SCX__CYRILLIC   PL_CYRL
#define PL_SCX__CYRL   PL_CYRL
#define PL_SCX__DESERET   PL_DSRT
#define PL_SCX__DEVA   PL_DEVA
#define PL_SCX__DEVANAGARI   PL_DEVA
#define PL_SCX__DSRT   PL_DSRT
#define PL_SCX__DUPL   PL_DUPL
#define PL_SCX__DUPLOYAN   PL_DUPL
#define PL_SCX__EGYP   PL_EGYP
#define PL_SCX__EGYPTIANHIEROGLYPHS   PL_EGYP
#define PL_SCX__ELBA   PL_ELBA
#define PL_SCX__ELBASAN   PL_ELBA
#define PL_SCX__ETHI   PL_ETHI
#define PL_SCX__ETHIOPIC   PL_ETHI
#define PL_SCX__GEOR   PL_GEOR
#define PL_SCX__GEORGIAN   PL_GEOR
#define PL_SCX__GLAG   PL_GLAG
#define PL_SCX__GLAGOLITIC   PL_GLAG
#define PL_SCX__GONM   PL_GONM
#define PL_SCX__GOTH   PL_GOTH
#define PL_SCX__GOTHIC   PL_GOTH
#define PL_SCX__GRAN   PL_GRAN
#define PL_SCX__GRANTHA   PL_GRAN
#define PL_SCX__GREEK   PL_GREK
#define PL_SCX__GREK   PL_GREK
#define PL_SCX__GUJARATI   PL_GUJR
#define PL_SCX__GUJR   PL_GUJR
#define PL_SCX__GURMUKHI   PL_GURU
#define PL_SCX__GURU   PL_GURU
#define PL_SCX__HAN   PL_HAN
#define PL_SCX__HANG   PL_HANG
#define PL_SCX__HANGUL   PL_HANG
#define PL_SCX__HANI   PL_HAN
#define PL_SCX__HANO   PL_HANO
#define PL_SCX__HANUNOO   PL_HANO
#define PL_SCX__HATR   PL_HATR
#define PL_SCX__HATRAN   PL_HATR
#define PL_SCX__HEBR   PL_HEBR
#define PL_SCX__HEBREW   PL_HEBR
#define PL_SCX__HIRA   PL_HIRA
#define PL_SCX__HIRAGANA   PL_HIRA
#define PL_SCX__HLUW   PL_HLUW
#define PL_SCX__HMNG   PL_HMNG
#define PL_SCX__HUNG   PL_HUNG
#define PL_SCX__IMPERIALARAMAIC   PL_ARMI
#define PL_SCX__INHERITED   PL_QAAI
#define PL_SCX__INSCRIPTIONALPAHLAVI   PL_PHLI
#define PL_SCX__INSCRIPTIONALPARTHIAN   PL_PRTI
#define PL_SCX__ITAL   PL_ITAL
#define PL_SCX__JAVA   PL_JAVA
#define PL_SCX__JAVANESE   PL_JAVA
#define PL_SCX__KAITHI   PL_KTHI
#define PL_SCX__KALI   PL_KALI
#define PL_SCX__KANA   PL_KANA
#define PL_SCX__KANNADA   PL_KNDA
#define PL_SCX__KATAKANA   PL_KANA
#define PL_SCX__KAYAHLI   PL_KALI
#define PL_SCX__KHAR   PL_KHAR
#define PL_SCX__KHAROSHTHI   PL_KHAR
#define PL_SCX__KHMER   PL_KHMR
#define PL_SCX__KHMR   PL_KHMR
#define PL_SCX__KHOJ   PL_KHOJ
#define PL_SCX__KHOJKI   PL_KHOJ
#define PL_SCX__KHUDAWADI   PL_SIND
#define PL_SCX__KNDA   PL_KNDA
#define PL_SCX__KTHI   PL_KTHI
#define PL_SCX__LANA   PL_LANA
#define PL_SCX__LAO   PL_LAO
#define PL_SCX__LAOO   PL_LAO
#define PL_SCX__LATIN   PL_LATN
#define PL_SCX__LATN   PL_LATN
#define PL_SCX__LEPC   PL_LEPC
#define PL_SCX__LEPCHA   PL_LEPC
#define PL_SCX__LIMB   PL_LIMB
#define PL_SCX__LIMBU   PL_LIMB
#define PL_SCX__LINA   PL_LINA
#define PL_SCX__LINB   PL_LINB
#define PL_SCX__LINEARA   PL_LINA
#define PL_SCX__LINEARB   PL_LINB
#define PL_SCX__LISU   PL_LISU
#define PL_SCX__LYCI   PL_LYCI
#define PL_SCX__LYCIAN   PL_LYCI
#define PL_SCX__LYDI   PL_LYDI
#define PL_SCX__LYDIAN   PL_LYDI
#define PL_SCX__MAHAJANI   PL_MAHJ
#define PL_SCX__MAHJ   PL_MAHJ
#define PL_SCX__MALAYALAM   PL_MLYM
#define PL_SCX__MAND   PL_MAND
#define PL_SCX__MANDAIC   PL_MAND
#define PL_SCX__MANI   PL_MANI
#define PL_SCX__MANICHAEAN   PL_MANI
#define PL_SCX__MARC   PL_MARC
#define PL_SCX__MARCHEN   PL_MARC
#define PL_SCX__MASARAMGONDI   PL_GONM
#define PL_SCX__MEETEIMAYEK   PL_MTEI
#define PL_SCX__MEND   PL_MEND
#define PL_SCX__MENDEKIKAKUI   PL_MEND
#define PL_SCX__MERC   PL_MERC
#define PL_SCX__MERO   PL_MERO
#define PL_SCX__MEROITICCURSIVE   PL_MERC
#define PL_SCX__MEROITICHIEROGLYPHS   PL_MERO
#define PL_SCX__MIAO   PL_MIAO
#define PL_SCX__MLYM   PL_MLYM
#define PL_SCX__MODI   PL_MODI
#define PL_SCX__MONG   PL_MONG
#define PL_SCX__MONGOLIAN   PL_MONG
#define PL_SCX__MRO   PL_MRO
#define PL_SCX__MROO   PL_MRO
#define PL_SCX__MTEI   PL_MTEI
#define PL_SCX__MULT   PL_MULT
#define PL_SCX__MULTANI   PL_MULT
#define PL_SCX__MYANMAR   PL_MYMR
#define PL_SCX__MYMR   PL_MYMR
#define PL_SCX__NABATAEAN   PL_NBAT
#define PL_SCX__NARB   PL_NARB
#define PL_SCX__NBAT   PL_NBAT
#define PL_SCX__NEWA   PL_NEWA
#define PL_SCX__NEWTAILUE   PL_TALU
#define PL_SCX__NKO   PL_NKO
#define PL_SCX__NKOO   PL_NKO
#define PL_SCX__NSHU   PL_NSHU
#define PL_SCX__NUSHU   PL_NSHU
#define PL_SCX__OGAM   PL_OGAM
#define PL_SCX__OGHAM   PL_OGAM
#define PL_SCX__OLCHIKI   PL_OLCK
#define PL_SCX__OLCK   PL_OLCK
#define PL_SCX__OLDHUNGARIAN   PL_HUNG
#define PL_SCX__OLDITALIC   PL_ITAL
#define PL_SCX__OLDNORTHARABIAN   PL_NARB
#define PL_SCX__OLDPERMIC   PL_PERM
#define PL_SCX__OLDPERSIAN   PL_XPEO
#define PL_SCX__OLDSOUTHARABIAN   PL_SARB
#define PL_SCX__OLDTURKIC   PL_ORKH
#define PL_SCX__ORIYA   PL_ORYA
#define PL_SCX__ORKH   PL_ORKH
#define PL_SCX__ORYA   PL_ORYA
#define PL_SCX__OSAGE   PL_OSGE
#define PL_SCX__OSGE   PL_OSGE
#define PL_SCX__OSMA   PL_OSMA
#define PL_SCX__OSMANYA   PL_OSMA
#define PL_SCX__PAHAWHHMONG   PL_HMNG
#define PL_SCX__PALM   PL_PALM
#define PL_SCX__PALMYRENE   PL_PALM
#define PL_SCX__PAUC   PL_PAUC
#define PL_SCX__PAUCINHAU   PL_PAUC
#define PL_SCX__PERM   PL_PERM
#define PL_SCX__PHAG   PL_PHAG
#define PL_SCX__PHAGSPA   PL_PHAG
#define PL_SCX__PHLI   PL_PHLI
#define PL_SCX__PHLP   PL_PHLP
#define PL_SCX__PHNX   PL_PHNX
#define PL_SCX__PHOENICIAN   PL_PHNX
#define PL_SCX__PLRD   PL_MIAO
#define PL_SCX__PRTI   PL_PRTI
#define PL_SCX__PSALTERPAHLAVI   PL_PHLP
#define PL_SCX__QAAC   PL_COPT
#define PL_SCX__QAAI   PL_QAAI
#define PL_SCX__REJANG   PL_RJNG
#define PL_SCX__RJNG   PL_RJNG
#define PL_SCX__RUNIC   PL_RUNR
#define PL_SCX__RUNR   PL_RUNR
#define PL_SCX__SAMARITAN   PL_SAMR
#define PL_SCX__SAMR   PL_SAMR
#define PL_SCX__SARB   PL_SARB
#define PL_SCX__SAUR   PL_SAUR
#define PL_SCX__SAURASHTRA   PL_SAUR
#define PL_SCX__SGNW   PL_SGNW
#define PL_SCX__SHARADA   PL_SHRD
#define PL_SCX__SHAVIAN   PL_SHAW
#define PL_SCX__SHAW   PL_SHAW
#define PL_SCX__SHRD   PL_SHRD
#define PL_SCX__SIDD   PL_SIDD
#define PL_SCX__SIDDHAM   PL_SIDD
#define PL_SCX__SIGNWRITING   PL_SGNW
#define PL_SCX__SIND   PL_SIND
#define PL_SCX__SINH   PL_SINH
#define PL_SCX__SINHALA   PL_SINH
#define PL_SCX__SORA   PL_SORA
#define PL_SCX__SORASOMPENG   PL_SORA
#define PL_SCX__SOYO   PL_SOYO
#define PL_SCX__SOYOMBO   PL_SOYO
#define PL_SCX__SUND   PL_SUND
#define PL_SCX__SUNDANESE   PL_SUND
#define PL_SCX__SYLO   PL_SYLO
#define PL_SCX__SYLOTINAGRI   PL_SYLO
#define PL_SCX__SYRC   PL_SYRC
#define PL_SCX__SYRIAC   PL_SYRC
#define PL_SCX__TAGALOG   PL_TGLG
#define PL_SCX__TAGB   PL_TAGB
#define PL_SCX__TAGBANWA   PL_TAGB
#define PL_SCX__TAILE   PL_TALE
#define PL_SCX__TAITHAM   PL_LANA
#define PL_SCX__TAIVIET   PL_TAVT
#define PL_SCX__TAKR   PL_TAKR
#define PL_SCX__TAKRI   PL_TAKR
#define PL_SCX__TALE   PL_TALE
#define PL_SCX__TALU   PL_TALU
#define PL_SCX__TAMIL   PL_TAML
#define PL_SCX__TAML   PL_TAML
#define PL_SCX__TANG   PL_TANG
#define PL_SCX__TANGUT   PL_TANG
#define PL_SCX__TAVT   PL_TAVT
#define PL_SCX__TELU   PL_TELU
#define PL_SCX__TELUGU   PL_TELU
#define PL_SCX__TFNG   PL_TFNG
#define PL_SCX__TGLG   PL_TGLG
#define PL_SCX__THAA   PL_THAA
#define PL_SCX__THAANA   PL_THAA
#define PL_SCX__THAI   PL_THAI
#define PL_SCX__TIBETAN   PL_TIBT
#define PL_SCX__TIBT   PL_TIBT
#define PL_SCX__TIFINAGH   PL_TFNG
#define PL_SCX__TIRH   PL_TIRH
#define PL_SCX__TIRHUTA   PL_TIRH
#define PL_SCX__UGAR   PL_UGAR
#define PL_SCX__UGARITIC   PL_UGAR
#define PL_SCX__UNKNOWN   PL_ZZZZ
#define PL_SCX__VAI   PL_VAI
#define PL_SCX__VAII   PL_VAI
#define PL_SCX__WARA   PL_WARA
#define PL_SCX__WARANGCITI   PL_WARA
#define PL_SCX__XPEO   PL_XPEO
#define PL_SCX__XSUX   PL_XSUX
#define PL_SCX__YI   PL_YI
#define PL_SCX__YIII   PL_YI
#define PL_SCX__ZANABAZARSQUARE   PL_ZANB
#define PL_SCX__ZANB   PL_ZANB
#define PL_SCX__ZINH   PL_QAAI
#define PL_SCX__ZYYY   PL_ZYYY
#define PL_SCX__ZZZZ   PL_ZZZZ
#define PL_SC__ADLAM   PL_SC__ADLM
#define PL_SC__AGHB   PL_AGHB
#define PL_SC__AHOM   PL_AHOM
#define PL_SC__ANATOLIANHIEROGLYPHS   PL_HLUW
#define PL_SC__ARABIC   PL_SC__ARAB
#define PL_SC__ARMENIAN   PL_SC__ARMN
#define PL_SC__ARMI   PL_ARMI
#define PL_SC__AVESTAN   PL_AVST
#define PL_SC__AVST   PL_AVST
#define PL_SC__BALI   PL_BALI
#define PL_SC__BALINESE   PL_BALI
#define PL_SC__BAMU   PL_BAMU
#define PL_SC__BAMUM   PL_BAMU
#define PL_SC__BASS   PL_BASS
#define PL_SC__BASSAVAH   PL_BASS
#define PL_SC__BATAK   PL_BATK
#define PL_SC__BATK   PL_BATK
#define PL_SC__BENGALI   PL_SC__BENG
#define PL_SC__BHAIKSUKI   PL_BHKS
#define PL_SC__BHKS   PL_BHKS
#define PL_SC__BOPOMOFO   PL_SC__BOPO
#define PL_SC__BRAH   PL_BRAH
#define PL_SC__BRAHMI   PL_BRAH
#define PL_SC__BRAI   PL_BRAI
#define PL_SC__BRAILLE   PL_BRAI
#define PL_SC__BUGINESE   PL_SC__BUGI
#define PL_SC__BUHID   PL_SC__BUHD
#define PL_SC__CANADIANABORIGINAL   PL_CANS
#define PL_SC__CANS   PL_CANS
#define PL_SC__CARI   PL_CARI
#define PL_SC__CARIAN   PL_CARI
#define PL_SC__CAUCASIANALBANIAN   PL_AGHB
#define PL_SC__CHAKMA   PL_SC__CAKM
#define PL_SC__CHAM   PL_CHAM
#define PL_SC__CHER   PL_CHER
#define PL_SC__CHEROKEE   PL_CHER
#define PL_SC__COMMON   PL_SC__ZYYY
#define PL_SC__COPTIC   PL_SC__COPT
#define PL_SC__CUNEIFORM   PL_XSUX
#define PL_SC__CYPRIOT   PL_SC__CPRT
#define PL_SC__CYRILLIC   PL_SC__CYRL
#define PL_SC__DESERET   PL_DSRT
#define PL_SC__DEVANAGARI   PL_SC__DEVA
#define PL_SC__DSRT   PL_DSRT
#define PL_SC__DUPLOYAN   PL_SC__DUPL
#define PL_SC__EGYP   PL_EGYP
#define PL_SC__EGYPTIANHIEROGLYPHS   PL_EGYP
#define PL_SC__ELBA   PL_ELBA
#define PL_SC__ELBASAN   PL_ELBA
#define PL_SC__ETHI   PL_ETHI
#define PL_SC__ETHIOPIC   PL_ETHI
#define PL_SC__GEORGIAN   PL_SC__GEOR
#define PL_SC__GLAGOLITIC   PL_SC__GLAG
#define PL_SC__GONM   PL_GONM
#define PL_SC__GOTH   PL_GOTH
#define PL_SC__GOTHIC   PL_GOTH
#define PL_SC__GRANTHA   PL_SC__GRAN
#define PL_SC__GREEK   PL_SC__GREK
#define PL_SC__GUJARATI   PL_SC__GUJR
#define PL_SC__GURMUKHI   PL_SC__GURU
#define PL_SC__HANGUL   PL_SC__HANG
#define PL_SC__HANI   PL_SC__HAN
#define PL_SC__HANUNOO   PL_SC__HANO
#define PL_SC__HATR   PL_HATR
#define PL_SC__HATRAN   PL_HATR
#define PL_SC__HEBR   PL_HEBR
#define PL_SC__HEBREW   PL_HEBR
#define PL_SC__HIRAGANA   PL_SC__HIRA
#define PL_SC__HLUW   PL_HLUW
#define PL_SC__HMNG   PL_HMNG
#define PL_SC__HUNG   PL_HUNG
#define PL_SC__IMPERIALARAMAIC   PL_ARMI
#define PL_SC__INHERITED   PL_SC__QAAI
#define PL_SC__INSCRIPTIONALPAHLAVI   PL_PHLI
#define PL_SC__INSCRIPTIONALPARTHIAN   PL_PRTI
#define PL_SC__ITAL   PL_ITAL
#define PL_SC__JAVANESE   PL_SC__JAVA
#define PL_SC__KAITHI   PL_SC__KTHI
#define PL_SC__KANNADA   PL_SC__KNDA
#define PL_SC__KATAKANA   PL_SC__KANA
#define PL_SC__KAYAHLI   PL_SC__KALI
#define PL_SC__KHAR   PL_KHAR
#define PL_SC__KHAROSHTHI   PL_KHAR
#define PL_SC__KHMER   PL_KHMR
#define PL_SC__KHMR   PL_KHMR
#define PL_SC__KHOJKI   PL_SC__KHOJ
#define PL_SC__KHUDAWADI   PL_SC__SIND
#define PL_SC__LANA   PL_LANA
#define PL_SC__LAO   PL_LAO
#define PL_SC__LAOO   PL_LAO
#define PL_SC__LATIN   PL_SC__LATN
#define PL_SC__LEPC   PL_LEPC
#define PL_SC__LEPCHA   PL_LEPC
#define PL_SC__LIMBU   PL_SC__LIMB
#define PL_SC__LINEARA   PL_SC__LINA
#define PL_SC__LINEARB   PL_SC__LINB
#define PL_SC__LISU   PL_LISU
#define PL_SC__LYCI   PL_LYCI
#define PL_SC__LYCIAN   PL_LYCI
#define PL_SC__LYDI   PL_LYDI
#define PL_SC__LYDIAN   PL_LYDI
#define PL_SC__MAHAJANI   PL_SC__MAHJ
#define PL_SC__MALAYALAM   PL_SC__MLYM
#define PL_SC__MANDAIC   PL_SC__MAND
#define PL_SC__MANICHAEAN   PL_SC__MANI
#define PL_SC__MARC   PL_MARC
#define PL_SC__MARCHEN   PL_MARC
#define PL_SC__MASARAMGONDI   PL_GONM
#define PL_SC__MEETEIMAYEK   PL_MTEI
#define PL_SC__MEND   PL_MEND
#define PL_SC__MENDEKIKAKUI   PL_MEND
#define PL_SC__MERC   PL_MERC
#define PL_SC__MERO   PL_MERO
#define PL_SC__MEROITICCURSIVE   PL_MERC
#define PL_SC__MEROITICHIEROGLYPHS   PL_MERO
#define PL_SC__MIAO   PL_MIAO
#define PL_SC__MONGOLIAN   PL_SC__MONG
#define PL_SC__MRO   PL_MRO
#define PL_SC__MROO   PL_MRO
#define PL_SC__MTEI   PL_MTEI
#define PL_SC__MULTANI   PL_SC__MULT
#define PL_SC__MYANMAR   PL_SC__MYMR
#define PL_SC__NABATAEAN   PL_NBAT
#define PL_SC__NARB   PL_NARB
#define PL_SC__NBAT   PL_NBAT
#define PL_SC__NEWA   PL_NEWA
#define PL_SC__NEWTAILUE   PL_TALU
#define PL_SC__NKO   PL_NKO
#define PL_SC__NKOO   PL_NKO
#define PL_SC__NSHU   PL_NSHU
#define PL_SC__NUSHU   PL_NSHU
#define PL_SC__OGAM   PL_OGAM
#define PL_SC__OGHAM   PL_OGAM
#define PL_SC__OLCHIKI   PL_OLCK
#define PL_SC__OLCK   PL_OLCK
#define PL_SC__OLDHUNGARIAN   PL_HUNG
#define PL_SC__OLDITALIC   PL_ITAL
#define PL_SC__OLDNORTHARABIAN   PL_NARB
#define PL_SC__OLDPERMIC   PL_SC__PERM
#define PL_SC__OLDPERSIAN   PL_XPEO
#define PL_SC__OLDSOUTHARABIAN   PL_SARB
#define PL_SC__OLDTURKIC   PL_ORKH
#define PL_SC__ORIYA   PL_SC__ORYA
#define PL_SC__ORKH   PL_ORKH
#define PL_SC__OSAGE   PL_OSGE
#define PL_SC__OSGE   PL_OSGE
#define PL_SC__OSMA   PL_OSMA
#define PL_SC__OSMANYA   PL_OSMA
#define PL_SC__PAHAWHHMONG   PL_HMNG
#define PL_SC__PALM   PL_PALM
#define PL_SC__PALMYRENE   PL_PALM
#define PL_SC__PAUC   PL_PAUC
#define PL_SC__PAUCINHAU   PL_PAUC
#define PL_SC__PHAGSPA   PL_SC__PHAG
#define PL_SC__PHLI   PL_PHLI
#define PL_SC__PHNX   PL_PHNX
#define PL_SC__PHOENICIAN   PL_PHNX
#define PL_SC__PLRD   PL_MIAO
#define PL_SC__PRTI   PL_PRTI
#define PL_SC__PSALTERPAHLAVI   PL_SC__PHLP
#define PL_SC__QAAC   PL_SC__COPT
#define PL_SC__REJANG   PL_RJNG
#define PL_SC__RJNG   PL_RJNG
#define PL_SC__RUNIC   PL_RUNR
#define PL_SC__RUNR   PL_RUNR
#define PL_SC__SAMARITAN   PL_SAMR
#define PL_SC__SAMR   PL_SAMR
#define PL_SC__SARB   PL_SARB
#define PL_SC__SAUR   PL_SAUR
#define PL_SC__SAURASHTRA   PL_SAUR
#define PL_SC__SGNW   PL_SGNW
#define PL_SC__SHARADA   PL_SC__SHRD
#define PL_SC__SHAVIAN   PL_SHAW
#define PL_SC__SHAW   PL_SHAW
#define PL_SC__SIDD   PL_SIDD
#define PL_SC__SIDDHAM   PL_SIDD
#define PL_SC__SIGNWRITING   PL_SGNW
#define PL_SC__SINHALA   PL_SC__SINH
#define PL_SC__SORA   PL_SORA
#define PL_SC__SORASOMPENG   PL_SORA
#define PL_SC__SOYO   PL_SOYO
#define PL_SC__SOYOMBO   PL_SOYO
#define PL_SC__SUND   PL_SUND
#define PL_SC__SUNDANESE   PL_SUND
#define PL_SC__SYLOTINAGRI   PL_SC__SYLO
#define PL_SC__SYRIAC   PL_SC__SYRC
#define PL_SC__TAGALOG   PL_SC__TGLG
#define PL_SC__TAGBANWA   PL_SC__TAGB
#define PL_SC__TAILE   PL_SC__TALE
#define PL_SC__TAITHAM   PL_LANA
#define PL_SC__TAIVIET   PL_TAVT
#define PL_SC__TAKRI   PL_SC__TAKR
#define PL_SC__TALU   PL_TALU
#define PL_SC__TAMIL   PL_SC__TAML
#define PL_SC__TANG   PL_TANG
#define PL_SC__TANGUT   PL_TANG
#define PL_SC__TAVT   PL_TAVT
#define PL_SC__TELUGU   PL_SC__TELU
#define PL_SC__TFNG   PL_TFNG
#define PL_SC__THAANA   PL_SC__THAA
#define PL_SC__THAI   PL_THAI
#define PL_SC__TIBETAN   PL_TIBT
#define PL_SC__TIBT   PL_TIBT
#define PL_SC__TIFINAGH   PL_TFNG
#define PL_SC__TIRHUTA   PL_SC__TIRH
#define PL_SC__UGAR   PL_UGAR
#define PL_SC__UGARITIC   PL_UGAR
#define PL_SC__UNKNOWN   PL_ZZZZ
#define PL_SC__VAI   PL_VAI
#define PL_SC__VAII   PL_VAI
#define PL_SC__WARA   PL_WARA
#define PL_SC__WARANGCITI   PL_WARA
#define PL_SC__XPEO   PL_XPEO
#define PL_SC__XSUX   PL_XSUX
#define PL_SC__YIII   PL_SC__YI
#define PL_SC__ZANABAZARSQUARE   PL_ZANB
#define PL_SC__ZANB   PL_ZANB
#define PL_SC__ZINH   PL_SC__QAAI
#define PL_SC__ZZZZ   PL_ZZZZ
#define PL_SD__F   -PL_SD
#define PL_SD__FALSE   -PL_SD
#define PL_SD__N   -PL_SD
#define PL_SD__NO   -PL_SD
#define PL_SD__T   PL_SD
#define PL_SD__TRUE   PL_SD
#define PL_SD__Y   PL_SD
#define PL_SD__YES   PL_SD
#define PL_SENTENCEBREAK__AT   PL_SB__AT
#define PL_SENTENCEBREAK__ATERM   PL_SB__AT
#define PL_SENTENCEBREAK__CL   PL_SB__CL
#define PL_SENTENCEBREAK__CLOSE   PL_SB__CL
#define PL_SENTENCEBREAK__CR   PL_LB__CR
#define PL_SENTENCEBREAK__EX   PL_SB__EX
#define PL_SENTENCEBREAK__EXTEND   PL_SB__EX
#define PL_SENTENCEBREAK__FO   PL_SB__FO
#define PL_SENTENCEBREAK__FORMAT   PL_SB__FO
#define PL_SENTENCEBREAK__LE   PL_SB__LE
#define PL_SENTENCEBREAK__LF   PL_LB__LF
#define PL_SENTENCEBREAK__LO   PL_SB__LO
#define PL_SENTENCEBREAK__LOWER   PL_SB__LO
#define PL_SENTENCEBREAK__NU   PL_LB__NU
#define PL_SENTENCEBREAK__NUMERIC   PL_LB__NU
#define PL_SENTENCEBREAK__OLETTER   PL_SB__LE
#define PL_SENTENCEBREAK__OTHER   PL_SB__XX
#define PL_SENTENCEBREAK__SC   PL_SB__SC
#define PL_SENTENCEBREAK__SCONTINUE   PL_SB__SC
#define PL_SENTENCEBREAK__SE   PL_SB__SE
#define PL_SENTENCEBREAK__SEP   PL_SB__SE
#define PL_SENTENCEBREAK__SP   PL_SB__SP
#define PL_SENTENCEBREAK__ST   PL_SB__ST
#define PL_SENTENCEBREAK__STERM   PL_SB__ST
#define PL_SENTENCEBREAK__UP   PL_SB__UP
#define PL_SENTENCEBREAK__UPPER   PL_SB__UP
#define PL_SENTENCEBREAK__XX   PL_SB__XX
#define PL_SENTENCETERMINAL   PL_STERM
#define PL_SENTENCETERMINAL   PL_STERM
#define PL_SENTENCETERMINAL__F   -PL_STERM
#define PL_SENTENCETERMINAL__FALSE   -PL_STERM
#define PL_SENTENCETERMINAL__N   -PL_STERM
#define PL_SENTENCETERMINAL__NO   -PL_STERM
#define PL_SENTENCETERMINAL__T   PL_STERM
#define PL_SENTENCETERMINAL__TRUE   PL_STERM
#define PL_SENTENCETERMINAL__Y   PL_STERM
#define PL_SENTENCETERMINAL__YES   PL_STERM
#define PL_SEPARATOR   PL_Z
#define PL_SHARADA   PL_SHRD
#define PL_SHAVIAN   PL_SHAW
#define PL_SIDDHAM   PL_SIDD
#define PL_SIGNWRITING   PL_SGNW
#define PL_SINHALA   PL_SINH
#define PL_SMALLFORMVARIANTS   PL_SMALLFORMS
#define PL_SOFTDOTTED   PL_SD
#define PL_SOFTDOTTED   PL_SD
#define PL_SOFTDOTTED__F   -PL_SD
#define PL_SOFTDOTTED__FALSE   -PL_SD
#define PL_SOFTDOTTED__N   -PL_SD
#define PL_SOFTDOTTED__NO   -PL_SD
#define PL_SOFTDOTTED__T   PL_SD
#define PL_SOFTDOTTED__TRUE   PL_SD
#define PL_SOFTDOTTED__Y   PL_SD
#define PL_SOFTDOTTED__YES   PL_SD
#define PL_SORASOMPENG   PL_SORA
#define PL_SOYOMBO   PL_SOYO
#define PL_SPACE   PL_XPOSIXSPACE
#define PL_SPACE   PL_XPOSIXSPACE
#define PL_SPACEPERL   PL_XPOSIXSPACE
#define PL_SPACESEPARATOR   PL_ZS
#define PL_SPACE__F   -PL_XPOSIXSPACE
#define PL_SPACE__FALSE   -PL_XPOSIXSPACE
#define PL_SPACE__N   -PL_XPOSIXSPACE
#define PL_SPACE__NO   -PL_XPOSIXSPACE
#define PL_SPACE__T   PL_XPOSIXSPACE
#define PL_SPACE__TRUE   PL_XPOSIXSPACE
#define PL_SPACE__Y   PL_XPOSIXSPACE
#define PL_SPACE__YES   PL_XPOSIXSPACE
#define PL_SPACINGMARK   PL_MC
#define PL_SPACINGMODIFIERLETTERS   PL_MODIFIERLETTERS
#define PL_STERM__F   -PL_STERM
#define PL_STERM__FALSE   -PL_STERM
#define PL_STERM__N   -PL_STERM
#define PL_STERM__NO   -PL_STERM
#define PL_STERM__T   PL_STERM
#define PL_STERM__TRUE   PL_STERM
#define PL_STERM__Y   PL_STERM
#define PL_STERM__YES   PL_STERM
#define PL_SUNDANESE   PL_SUND
#define PL_SUNDANESESUPPLEMENT   PL_SUNDANESESUP
#define PL_SUPERSCRIPTSANDSUBSCRIPTS   PL_SUPERANDSUB
#define PL_SUPPLEMENTALARROWSA   PL_SUPARROWSA
#define PL_SUPPLEMENTALARROWSB   PL_SUPARROWSB
#define PL_SUPPLEMENTALARROWSC   PL_SUPARROWSC
#define PL_SUPPLEMENTALMATHEMATICALOPERATORS   PL_SUPMATHOPERATORS
#define PL_SUPPLEMENTALPUNCTUATION   PL_SUPPUNCTUATION
#define PL_SUPPLEMENTALSYMBOLSANDPICTOGRAPHS   PL_SUPSYMBOLSANDPICTOGRAPHS
#define PL_SUPPLEMENTARYPRIVATEUSEAREAA   PL_SUPPUAA
#define PL_SUPPLEMENTARYPRIVATEUSEAREAB   PL_SUPPUAB
#define PL_SURROGATE   PL_CS
#define PL_SYLOTINAGRI   PL_SYLO
#define PL_SYMBOL   PL_S
#define PL_SYRIAC   PL_SYRC
#define PL_SYRIACSUPPLEMENT   PL_SYRIACSUP
#define PL_TAGALOG   PL_TGLG
#define PL_TAGBANWA   PL_TAGB
#define PL_TAILE   PL_TALE
#define PL_TAITHAM   PL_LANA
#define PL_TAIVIET   PL_TAVT
#define PL_TAIXUANJINGSYMBOLS   PL_TAIXUANJING
#define PL_TAKRI   PL_TAKR
#define PL_TAMIL   PL_TAML
#define PL_TANGUT   PL_TANG
#define PL_TELUGU   PL_TELU
#define PL_TERMINALPUNCTUATION   PL_TERM
#define PL_TERMINALPUNCTUATION   PL_TERM
#define PL_TERMINALPUNCTUATION__F   -PL_TERM
#define PL_TERMINALPUNCTUATION__FALSE   -PL_TERM
#define PL_TERMINALPUNCTUATION__N   -PL_TERM
#define PL_TERMINALPUNCTUATION__NO   -PL_TERM
#define PL_TERMINALPUNCTUATION__T   PL_TERM
#define PL_TERMINALPUNCTUATION__TRUE   PL_TERM
#define PL_TERMINALPUNCTUATION__Y   PL_TERM
#define PL_TERMINALPUNCTUATION__YES   PL_TERM
#define PL_TERM__F   -PL_TERM
#define PL_TERM__FALSE   -PL_TERM
#define PL_TERM__N   -PL_TERM
#define PL_TERM__NO   -PL_TERM
#define PL_TERM__T   PL_TERM
#define PL_TERM__TRUE   PL_TERM
#define PL_TERM__Y   PL_TERM
#define PL_TERM__YES   PL_TERM
#define PL_THAANA   PL_THAA
#define PL_TIBETAN   PL_TIBT
#define PL_TIFINAGH   PL_TFNG
#define PL_TIRHUTA   PL_TIRH
#define PL_TITLE   PL_LT
#define PL_TITLECASE   PL_LT
#define PL_TITLECASELETTER   PL_LT
#define PL_TRANSPORTANDMAPSYMBOLS   PL_TRANSPORTANDMAP
#define PL_UGARITIC   PL_UGAR
#define PL_UIDEO__F   -PL_UIDEO
#define PL_UIDEO__FALSE   -PL_UIDEO
#define PL_UIDEO__N   -PL_UIDEO
#define PL_UIDEO__NO   -PL_UIDEO
#define PL_UIDEO__T   PL_UIDEO
#define PL_UIDEO__TRUE   PL_UIDEO
#define PL_UIDEO__Y   PL_UIDEO
#define PL_UIDEO__YES   PL_UIDEO
#define PL_UNASSIGNED   PL_CN
#define PL_UNICODE   PL_ANY
#define PL_UNIFIEDCANADIANABORIGINALSYLLABICS   PL_UCAS
#define PL_UNIFIEDCANADIANABORIGINALSYLLABICSEXTENDED   PL_UCASEXT
#define PL_UNIFIEDIDEOGRAPH   PL_UIDEO
#define PL_UNIFIEDIDEOGRAPH   PL_UIDEO
#define PL_UNIFIEDIDEOGRAPH__F   -PL_UIDEO
#define PL_UNIFIEDIDEOGRAPH__FALSE   -PL_UIDEO
#define PL_UNIFIEDIDEOGRAPH__N   -PL_UIDEO
#define PL_UNIFIEDIDEOGRAPH__NO   -PL_UIDEO
#define PL_UNIFIEDIDEOGRAPH__T   PL_UIDEO
#define PL_UNIFIEDIDEOGRAPH__TRUE   PL_UIDEO
#define PL_UNIFIEDIDEOGRAPH__Y   PL_UIDEO
#define PL_UNIFIEDIDEOGRAPH__YES   PL_UIDEO
#define PL_UNKNOWN   PL_ZZZZ
#define PL_UPPER   PL_XPOSIXUPPER
#define PL_UPPERCASE   PL_XPOSIXUPPER
#define PL_UPPERCASE   PL_XPOSIXUPPER
#define PL_UPPERCASELETTER   PL_LU
#define PL_UPPERCASE__F   -PL_XPOSIXUPPER
#define PL_UPPERCASE__FALSE   -PL_XPOSIXUPPER
#define PL_UPPERCASE__N   -PL_XPOSIXUPPER
#define PL_UPPERCASE__NO   -PL_XPOSIXUPPER
#define PL_UPPERCASE__T   PL_XPOSIXUPPER
#define PL_UPPERCASE__TRUE   PL_XPOSIXUPPER
#define PL_UPPERCASE__Y   PL_XPOSIXUPPER
#define PL_UPPERCASE__YES   PL_XPOSIXUPPER
#define PL_UPPER__F   -PL_XPOSIXUPPER
#define PL_UPPER__FALSE   -PL_XPOSIXUPPER
#define PL_UPPER__N   -PL_XPOSIXUPPER
#define PL_UPPER__NO   -PL_XPOSIXUPPER
#define PL_UPPER__T   PL_XPOSIXUPPER
#define PL_UPPER__TRUE   PL_XPOSIXUPPER
#define PL_UPPER__Y   PL_XPOSIXUPPER
#define PL_UPPER__YES   PL_XPOSIXUPPER
#define PL_VAII   PL_VAI
#define PL_VARIATIONSELECTOR   PL_VS
#define PL_VARIATIONSELECTOR   PL_VS
#define PL_VARIATIONSELECTORS   PL_INVS
#define PL_VARIATIONSELECTORSSUPPLEMENT   PL_VSSUP
#define PL_VARIATIONSELECTOR__F   -PL_VS
#define PL_VARIATIONSELECTOR__FALSE   -PL_VS
#define PL_VARIATIONSELECTOR__N   -PL_VS
#define PL_VARIATIONSELECTOR__NO   -PL_VS
#define PL_VARIATIONSELECTOR__T   PL_VS
#define PL_VARIATIONSELECTOR__TRUE   PL_VS
#define PL_VARIATIONSELECTOR__Y   PL_VS
#define PL_VARIATIONSELECTOR__YES   PL_VS
#define PL_VEDICEXTENSIONS   PL_VEDICEXT
#define PL_VERTICALORIENTATION__R   PL_VO__R
#define PL_VERTICALORIENTATION__ROTATED   PL_VO__R
#define PL_VERTICALORIENTATION__TR   PL_VO__TR
#define PL_VERTICALORIENTATION__TRANSFORMEDROTATED   PL_VO__TR
#define PL_VERTICALORIENTATION__TRANSFORMEDUPRIGHT   PL_VO__TU
#define PL_VERTICALORIENTATION__TU   PL_VO__TU
#define PL_VERTICALORIENTATION__U   PL_VO__U
#define PL_VERTICALORIENTATION__UPRIGHT   PL_VO__U
#define PL_VO__ROTATED   PL_VO__R
#define PL_VO__TRANSFORMEDROTATED   PL_VO__TR
#define PL_VO__TRANSFORMEDUPRIGHT   PL_VO__TU
#define PL_VO__UPRIGHT   PL_VO__U
#define PL_VS__F   -PL_VS
#define PL_VS__FALSE   -PL_VS
#define PL_VS__N   -PL_VS
#define PL_VS__NO   -PL_VS
#define PL_VS__T   PL_VS
#define PL_VS__TRUE   PL_VS
#define PL_VS__Y   PL_VS
#define PL_VS__YES   PL_VS
#define PL_WARANGCITI   PL_WARA
#define PL_WB__ALETTER   PL_WB__LE
#define PL_WB__CR   PL_LB__CR
#define PL_WB__DOUBLEQUOTE   PL_WB__DQ
#define PL_WB__EBASE   PL_WB__EB
#define PL_WB__EBASEGAZ   PL_WB__EBG
#define PL_WB__EM   PL_LB__EM
#define PL_WB__EMODIFIER   PL_LB__EM
#define PL_WB__EXTENDNUMLET   PL_WB__EX
#define PL_WB__FORMAT   PL_WB__FO
#define PL_WB__GLUEAFTERZWJ   PL_WB__GAZ
#define PL_WB__HEBREWLETTER   PL_LB__HL
#define PL_WB__HL   PL_LB__HL
#define PL_WB__KATAKANA   PL_WB__KA
#define PL_WB__LF   PL_LB__LF
#define PL_WB__MIDLETTER   PL_WB__ML
#define PL_WB__MIDNUM   PL_WB__MN
#define PL_WB__MIDNUMLET   PL_WB__MB
#define PL_WB__NEWLINE   PL_WB__NL
#define PL_WB__NUMERIC   PL_WB__NU
#define PL_WB__OTHER   PL_WB__XX
#define PL_WB__REGIONALINDICATOR   PL_RI
#define PL_WB__RI   PL_RI
#define PL_WB__SINGLEQUOTE   PL_WB__SQ
#define PL_WB__ZWJ   PL_LB__ZWJ
#define PL_WHITESPACE   PL_XPOSIXSPACE
#define PL_WHITESPACE   PL_XPOSIXSPACE
#define PL_WHITESPACE__F   -PL_XPOSIXSPACE
#define PL_WHITESPACE__FALSE   -PL_XPOSIXSPACE
#define PL_WHITESPACE__N   -PL_XPOSIXSPACE
#define PL_WHITESPACE__NO   -PL_XPOSIXSPACE
#define PL_WHITESPACE__T   PL_XPOSIXSPACE
#define PL_WHITESPACE__TRUE   PL_XPOSIXSPACE
#define PL_WHITESPACE__Y   PL_XPOSIXSPACE
#define PL_WHITESPACE__YES   PL_XPOSIXSPACE
#define PL_WORD   PL_XPOSIXWORD
#define PL_WORDBREAK__ALETTER   PL_WB__LE
#define PL_WORDBREAK__CR   PL_LB__CR
#define PL_WORDBREAK__DOUBLEQUOTE   PL_WB__DQ
#define PL_WORDBREAK__DQ   PL_WB__DQ
#define PL_WORDBREAK__EB   PL_WB__EB
#define PL_WORDBREAK__EBASE   PL_WB__EB
#define PL_WORDBREAK__EBASEGAZ   PL_WB__EBG
#define PL_WORDBREAK__EBG   PL_WB__EBG
#define PL_WORDBREAK__EM   PL_LB__EM
#define PL_WORDBREAK__EMODIFIER   PL_LB__EM
#define PL_WORDBREAK__EX   PL_WB__EX
#define PL_WORDBREAK__EXTEND   PL_WB__EXTEND
#define PL_WORDBREAK__EXTENDNUMLET   PL_WB__EX
#define PL_WORDBREAK__FO   PL_WB__FO
#define PL_WORDBREAK__FORMAT   PL_WB__FO
#define PL_WORDBREAK__GAZ   PL_WB__GAZ
#define PL_WORDBREAK__GLUEAFTERZWJ   PL_WB__GAZ
#define PL_WORDBREAK__HEBREWLETTER   PL_LB__HL
#define PL_WORDBREAK__HL   PL_LB__HL
#define PL_WORDBREAK__KA   PL_WB__KA
#define PL_WORDBREAK__KATAKANA   PL_WB__KA
#define PL_WORDBREAK__LE   PL_WB__LE
#define PL_WORDBREAK__LF   PL_LB__LF
#define PL_WORDBREAK__MB   PL_WB__MB
#define PL_WORDBREAK__MIDLETTER   PL_WB__ML
#define PL_WORDBREAK__MIDNUM   PL_WB__MN
#define PL_WORDBREAK__MIDNUMLET   PL_WB__MB
#define PL_WORDBREAK__ML   PL_WB__ML
#define PL_WORDBREAK__MN   PL_WB__MN
#define PL_WORDBREAK__NEWLINE   PL_WB__NL
#define PL_WORDBREAK__NL   PL_WB__NL
#define PL_WORDBREAK__NU   PL_WB__NU
#define PL_WORDBREAK__NUMERIC   PL_WB__NU
#define PL_WORDBREAK__OTHER   PL_WB__XX
#define PL_WORDBREAK__REGIONALINDICATOR   PL_RI
#define PL_WORDBREAK__RI   PL_RI
#define PL_WORDBREAK__SINGLEQUOTE   PL_WB__SQ
#define PL_WORDBREAK__SQ   PL_WB__SQ
#define PL_WORDBREAK__XX   PL_WB__XX
#define PL_WORDBREAK__ZWJ   PL_LB__ZWJ
#define PL_WSPACE   PL_XPOSIXSPACE
#define PL_WSPACE__F   -PL_XPOSIXSPACE
#define PL_WSPACE__FALSE   -PL_XPOSIXSPACE
#define PL_WSPACE__N   -PL_XPOSIXSPACE
#define PL_WSPACE__NO   -PL_XPOSIXSPACE
#define PL_WSPACE__T   PL_XPOSIXSPACE
#define PL_WSPACE__TRUE   PL_XPOSIXSPACE
#define PL_WSPACE__Y   PL_XPOSIXSPACE
#define PL_WSPACE__YES   PL_XPOSIXSPACE
#define PL_XDIGIT   PL_XPOSIXXDIGIT
#define PL_XIDCONTINUE   PL_XIDC
#define PL_XIDCONTINUE   PL_XIDC
#define PL_XIDCONTINUE__F   -PL_XIDC
#define PL_XIDCONTINUE__FALSE   -PL_XIDC
#define PL_XIDCONTINUE__N   -PL_XIDC
#define PL_XIDCONTINUE__NO   -PL_XIDC
#define PL_XIDCONTINUE__T   PL_XIDC
#define PL_XIDCONTINUE__TRUE   PL_XIDC
#define PL_XIDCONTINUE__Y   PL_XIDC
#define PL_XIDCONTINUE__YES   PL_XIDC
#define PL_XIDC__F   -PL_XIDC
#define PL_XIDC__FALSE   -PL_XIDC
#define PL_XIDC__N   -PL_XIDC
#define PL_XIDC__NO   -PL_XIDC
#define PL_XIDC__T   PL_XIDC
#define PL_XIDC__TRUE   PL_XIDC
#define PL_XIDC__Y   PL_XIDC
#define PL_XIDC__YES   PL_XIDC
#define PL_XIDSTART   PL_XIDS
#define PL_XIDSTART   PL_XIDS
#define PL_XIDSTART__F   -PL_XIDS
#define PL_XIDSTART__FALSE   -PL_XIDS
#define PL_XIDSTART__N   -PL_XIDS
#define PL_XIDSTART__NO   -PL_XIDS
#define PL_XIDSTART__T   PL_XIDS
#define PL_XIDSTART__TRUE   PL_XIDS
#define PL_XIDSTART__Y   PL_XIDS
#define PL_XIDSTART__YES   PL_XIDS
#define PL_XIDS__F   -PL_XIDS
#define PL_XIDS__FALSE   -PL_XIDS
#define PL_XIDS__N   -PL_XIDS
#define PL_XIDS__NO   -PL_XIDS
#define PL_XIDS__T   PL_XIDS
#define PL_XIDS__TRUE   PL_XIDS
#define PL_XIDS__Y   PL_XIDS
#define PL_XIDS__YES   PL_XIDS
#define PL_XPERLSPACE   PL_XPOSIXSPACE
#define PL_YIII   PL_YI
#define PL_YIJINGHEXAGRAMSYMBOLS   PL_YIJING
#define PL_ZANABAZARSQUARE   PL_ZANB
#define PL_ZINH   PL_QAAI
#define PL__CANONDCIJ   PL_SD
#define PL__CASE_IGNORABLE   PL_CI
#define PL__COMBABOVE   PL_CCC__A
#define PL__PERL_NCHAR   PL_NCHAR
#define PL__PERL_PATWS   PL_PATWS
#define PL__PERL_SURROGATE   PL_CS


#endif	/* defined(PERL_IN_UNI_KEYWORDS_C) || defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_UTF8_C)

static const UV * const PL_uni_prop_ptrs[] = {
	NULL,	/* Placeholder */
	PL_ADLM_invlist,
	PL_AEGEANNUMBERS_invlist,
	PL_AGE__10_invlist,
	PL_AGE__2_invlist,
	PL_AGE__2_DOT_1_invlist,
	PL_AGE__3_invlist,
	PL_AGE__3_DOT_1_invlist,
	PL_AGE__3_DOT_2_invlist,
	PL_AGE__4_invlist,
	PL_AGE__4_DOT_1_invlist,
	PL_AGE__5_invlist,
	PL_AGE__5_DOT_1_invlist,
	PL_AGE__5_DOT_2_invlist,
	PL_AGE__6_invlist,
	PL_AGE__6_DOT_1_invlist,
	PL_AGE__6_DOT_2_invlist,
	PL_AGE__6_DOT_3_invlist,
	PL_AGE__7_invlist,
	PL_AGE__8_invlist,
	PL_AGE__9_invlist,
	PL_AGE__NA_invlist,
	PL_AGHB_invlist,
	PL_AHOM_invlist,
	PL_ALCHEMICAL_invlist,
	PL_ALL_invlist,
	PL_ALPHABETICPF_invlist,
	PL_ANCIENTGREEKMUSIC_invlist,
	PL_ANCIENTGREEKNUMBERS_invlist,
	PL_ANCIENTSYMBOLS_invlist,
	PL_ANY_invlist,
	PL_ARAB_invlist,
	PL_ARABICEXTA_invlist,
	PL_ARABICMATH_invlist,
	PL_ARABICPFA_invlist,
	PL_ARABICPFB_invlist,
	PL_ARABICSUP_invlist,
	PL_ARMI_invlist,
	PL_ARMN_invlist,
	PL_ARROWS_invlist,
	PL_ASCII_invlist,
	PL_ASSIGNED_invlist,
	PL_AVST_invlist,
	PL_BALI_invlist,
	PL_BAMU_invlist,
	PL_BAMUMSUP_invlist,
	PL_BASS_invlist,
	PL_BATK_invlist,
	PL_BC__AL_invlist,
	PL_BC__AN_invlist,
	PL_BC__B_invlist,
	PL_BC__BN_invlist,
	PL_BC__CS_invlist,
	PL_BC__EN_invlist,
	PL_BC__ES_invlist,
	PL_BC__ET_invlist,
	PL_BC__FSI_invlist,
	PL_BC__L_invlist,
	PL_BC__LRE_invlist,
	PL_BC__LRI_invlist,
	PL_BC__LRO_invlist,
	PL_BC__NSM_invlist,
	PL_BC__ON_invlist,
	PL_BC__PDF_invlist,
	PL_BC__PDI_invlist,
	PL_BC__R_invlist,
	PL_BC__RLE_invlist,
	PL_BC__RLI_invlist,
	PL_BC__RLO_invlist,
	PL_BC__S_invlist,
	PL_BC__WS_invlist,
	PL_BENG_invlist,
	PL_BHKS_invlist,
	PL_BIDIC_invlist,
	PL_BIDIM_invlist,
	PL_BLOCKELEMENTS_invlist,
	PL_BOPO_invlist,
	PL_BOPOMOFOEXT_invlist,
	PL_BOXDRAWING_invlist,
	PL_BPT__C_invlist,
	PL_BPT__N_invlist,
	PL_BPT__O_invlist,
	PL_BRAH_invlist,
	PL_BRAI_invlist,
	PL_BUGI_invlist,
	PL_BUHD_invlist,
	PL_BYZANTINEMUSIC_invlist,
	PL_C_invlist,
	PL_CAKM_invlist,
	PL_CANS_invlist,
	PL_CARI_invlist,
	PL_CASED_invlist,
	PL_CCC__0_invlist,
	PL_CCC__1_invlist,
	PL_CCC__10_invlist,
	PL_CCC__103_invlist,
	PL_CCC__107_invlist,
	PL_CCC__11_invlist,
	PL_CCC__118_invlist,
	PL_CCC__12_invlist,
	PL_CCC__122_invlist,
	PL_CCC__129_invlist,
	PL_CCC__13_invlist,
	PL_CCC__130_invlist,
	PL_CCC__132_invlist,
	PL_CCC__133_invlist,
	PL_CCC__14_invlist,
	PL_CCC__15_invlist,
	PL_CCC__16_invlist,
	PL_CCC__17_invlist,
	PL_CCC__18_invlist,
	PL_CCC__19_invlist,
	PL_CCC__20_invlist,
	PL_CCC__202_invlist,
	PL_CCC__21_invlist,
	PL_CCC__214_invlist,
	PL_CCC__216_invlist,
	PL_CCC__22_invlist,
	PL_CCC__23_invlist,
	PL_CCC__24_invlist,
	PL_CCC__25_invlist,
	PL_CCC__26_invlist,
	PL_CCC__27_invlist,
	PL_CCC__28_invlist,
	PL_CCC__29_invlist,
	PL_CCC__30_invlist,
	PL_CCC__31_invlist,
	PL_CCC__32_invlist,
	PL_CCC__33_invlist,
	PL_CCC__34_invlist,
	PL_CCC__35_invlist,
	PL_CCC__36_invlist,
	PL_CCC__7_invlist,
	PL_CCC__8_invlist,
	PL_CCC__84_invlist,
	PL_CCC__9_invlist,
	PL_CCC__91_invlist,
	PL_CCC__A_invlist,
	PL_CCC__AL_invlist,
	PL_CCC__AR_invlist,
	PL_CCC__B_invlist,
	PL_CCC__BL_invlist,
	PL_CCC__BR_invlist,
	PL_CCC__DA_invlist,
	PL_CCC__DB_invlist,
	PL_CCC__IS_invlist,
	PL_CCC__L_invlist,
	PL_CCC__R_invlist,
	PL_CE_invlist,
	PL_CF_invlist,
	PL_CHAM_invlist,
	PL_CHER_invlist,
	PL_CHEROKEESUP_invlist,
	PL_CI_invlist,
	PL_CJK_invlist,
	PL_CJKCOMPAT_invlist,
	PL_CJKCOMPATFORMS_invlist,
	PL_CJKCOMPATIDEOGRAPHS_invlist,
	PL_CJKCOMPATIDEOGRAPHSSUP_invlist,
	PL_CJKEXTA_invlist,
	PL_CJKEXTB_invlist,
	PL_CJKEXTC_invlist,
	PL_CJKEXTD_invlist,
	PL_CJKEXTE_invlist,
	PL_CJKEXTF_invlist,
	PL_CJKRADICALSSUP_invlist,
	PL_CJKSTROKES_invlist,
	PL_CJKSYMBOLS_invlist,
	PL_CN_invlist,
	PL_CO_invlist,
	PL_COMPATJAMO_invlist,
	PL_COMPEX_invlist,
	PL_CONTROLPICTURES_invlist,
	PL_COPT_invlist,
	PL_COPTICEPACTNUMBERS_invlist,
	PL_COUNTINGROD_invlist,
	PL_CPRT_invlist,
	PL_CS_invlist,
	PL_CUNEIFORMNUMBERS_invlist,
	PL_CURRENCYSYMBOLS_invlist,
	PL_CWCF_invlist,
	PL_CWCM_invlist,
	PL_CWKCF_invlist,
	PL_CWL_invlist,
	PL_CWT_invlist,
	PL_CWU_invlist,
	PL_CYPRIOTSYLLABARY_invlist,
	PL_CYRILLICEXTA_invlist,
	PL_CYRILLICEXTB_invlist,
	PL_CYRILLICEXTC_invlist,
	PL_CYRILLICSUP_invlist,
	PL_CYRL_invlist,
	PL_DASH_invlist,
	PL_DEP_invlist,
	PL_DEVA_invlist,
	PL_DEVANAGARIEXT_invlist,
	PL_DI_invlist,
	PL_DIA_invlist,
	PL_DIACRITICALS_invlist,
	PL_DIACRITICALSEXT_invlist,
	PL_DIACRITICALSFORSYMBOLS_invlist,
	PL_DIACRITICALSSUP_invlist,
	PL_DINGBATS_invlist,
	PL_DOMINO_invlist,
	PL_DSRT_invlist,
	PL_DT__CAN_invlist,
	PL_DT__COM_invlist,
	PL_DT__ENC_invlist,
	PL_DT__FIN_invlist,
	PL_DT__FONT_invlist,
	PL_DT__FRA_invlist,
	PL_DT__INIT_invlist,
	PL_DT__ISO_invlist,
	PL_DT__MED_invlist,
	PL_DT__NAR_invlist,
	PL_DT__NB_invlist,
	PL_DT__NONCANON_invlist,
	PL_DT__NONE_invlist,
	PL_DT__SML_invlist,
	PL_DT__SQR_invlist,
	PL_DT__SUB_invlist,
	PL_DT__SUP_invlist,
	PL_DT__VERT_invlist,
	PL_DUPL_invlist,
	PL_EARLYDYNASTICCUNEIFORM_invlist,
	PL_EA__A_invlist,
	PL_EA__F_invlist,
	PL_EA__H_invlist,
	PL_EA__N_invlist,
	PL_EA__NA_invlist,
	PL_EA__W_invlist,
	PL_EGYP_invlist,
	PL_ELBA_invlist,
	PL_EMOTICONS_invlist,
	PL_ENCLOSEDALPHANUM_invlist,
	PL_ENCLOSEDALPHANUMSUP_invlist,
	PL_ENCLOSEDCJK_invlist,
	PL_ENCLOSEDIDEOGRAPHICSUP_invlist,
	PL_ETHI_invlist,
	PL_ETHIOPICEXT_invlist,
	PL_ETHIOPICEXTA_invlist,
	PL_ETHIOPICSUP_invlist,
	PL_EXT_invlist,
	PL_GCB__CN_invlist,
	PL_GCB__L_invlist,
	PL_GCB__PP_invlist,
	PL_GCB__SM_invlist,
	PL_GCB__T_invlist,
	PL_GCB__V_invlist,
	PL_GCB__XX_invlist,
	PL_GEOMETRICSHAPES_invlist,
	PL_GEOMETRICSHAPESEXT_invlist,
	PL_GEOR_invlist,
	PL_GEORGIANSUP_invlist,
	PL_GLAG_invlist,
	PL_GLAGOLITICSUP_invlist,
	PL_GONM_invlist,
	PL_GOTH_invlist,
	PL_GRAN_invlist,
	PL_GRBASE_invlist,
	PL_GREEKEXT_invlist,
	PL_GREK_invlist,
	PL_GREXT_invlist,
	PL_GUJR_invlist,
	PL_GURU_invlist,
	PL_HALFANDFULLFORMS_invlist,
	PL_HALFMARKS_invlist,
	PL_HAN_invlist,
	PL_HANG_invlist,
	PL_HANO_invlist,
	PL_HATR_invlist,
	PL_HEBR_invlist,
	PL_HIGHPUSURROGATES_invlist,
	PL_HIGHSURROGATES_invlist,
	PL_HIRA_invlist,
	PL_HLUW_invlist,
	PL_HMNG_invlist,
	PL_HST__NA_invlist,
	PL_HUNG_invlist,
	PL_HYPHEN_invlist,
	PL_IDC_invlist,
	PL_IDEO_invlist,
	PL_IDEOGRAPHICSYMBOLS_invlist,
	PL_IDS_invlist,
	PL_IDSB_invlist,
	PL_IDST_invlist,
	PL_INADLAM_invlist,
	PL_INAHOM_invlist,
	PL_INANATOLIANHIEROGLYPHS_invlist,
	PL_INARABIC_invlist,
	PL_INARMENIAN_invlist,
	PL_INAVESTAN_invlist,
	PL_INBALINESE_invlist,
	PL_INBAMUM_invlist,
	PL_INBASSAVAH_invlist,
	PL_INBATAK_invlist,
	PL_INBENGALI_invlist,
	PL_INBHAIKSUKI_invlist,
	PL_INBOPOMOFO_invlist,
	PL_INBRAHMI_invlist,
	PL_INBUGINESE_invlist,
	PL_INBUHID_invlist,
	PL_INCARIAN_invlist,
	PL_INCAUCASIANALBANIAN_invlist,
	PL_INCHAKMA_invlist,
	PL_INCHAM_invlist,
	PL_INCHEROKEE_invlist,
	PL_INCOPTIC_invlist,
	PL_INCUNEIFORM_invlist,
	PL_INCYRILLIC_invlist,
	PL_INDEVANAGARI_invlist,
	PL_INDICNUMBERFORMS_invlist,
	PL_INDUPLOYAN_invlist,
	PL_INEGYPTIANHIEROGLYPHS_invlist,
	PL_INELBASAN_invlist,
	PL_INETHIOPIC_invlist,
	PL_INGEORGIAN_invlist,
	PL_INGLAGOLITIC_invlist,
	PL_INGOTHIC_invlist,
	PL_INGRANTHA_invlist,
	PL_INGREEK_invlist,
	PL_INGUJARATI_invlist,
	PL_INGURMUKHI_invlist,
	PL_INHANGUL_invlist,
	PL_INHANUNOO_invlist,
	PL_INHATRAN_invlist,
	PL_INHEBREW_invlist,
	PL_INHIRAGANA_invlist,
	PL_INIDC_invlist,
	PL_INIMPERIALARAMAIC_invlist,
	PL_ININSCRIPTIONALPAHLAVI_invlist,
	PL_ININSCRIPTIONALPARTHIAN_invlist,
	PL_INJAVANESE_invlist,
	PL_INKAITHI_invlist,
	PL_INKANNADA_invlist,
	PL_INKATAKANA_invlist,
	PL_INKHAROSHTHI_invlist,
	PL_INKHMER_invlist,
	PL_INKHOJKI_invlist,
	PL_INKHUDAWADI_invlist,
	PL_INLAO_invlist,
	PL_INLEPCHA_invlist,
	PL_INLIMBU_invlist,
	PL_INLINEARA_invlist,
	PL_INLYCIAN_invlist,
	PL_INLYDIAN_invlist,
	PL_INMAHAJANI_invlist,
	PL_INMALAYALAM_invlist,
	PL_INMANDAIC_invlist,
	PL_INMANICHAEAN_invlist,
	PL_INMARCHEN_invlist,
	PL_INMASARAMGONDI_invlist,
	PL_INMEETEIMAYEK_invlist,
	PL_INMENDEKIKAKUI_invlist,
	PL_INMEROITICCURSIVE_invlist,
	PL_INMIAO_invlist,
	PL_INMODI_invlist,
	PL_INMONGOLIAN_invlist,
	PL_INMRO_invlist,
	PL_INMULTANI_invlist,
	PL_INMYANMAR_invlist,
	PL_INNABATAEAN_invlist,
	PL_INNEWA_invlist,
	PL_INNEWTAILUE_invlist,
	PL_INNKO_invlist,
	PL_INNUSHU_invlist,
	PL_INOGHAM_invlist,
	PL_INOLDHUNGARIAN_invlist,
	PL_INOLDITALIC_invlist,
	PL_INOLDPERMIC_invlist,
	PL_INOLDPERSIAN_invlist,
	PL_INOLDTURKIC_invlist,
	PL_INORIYA_invlist,
	PL_INOSAGE_invlist,
	PL_INOSMANYA_invlist,
	PL_INPAHAWHHMONG_invlist,
	PL_INPAUCINHAU_invlist,
	PL_INPC__BOTTOM_invlist,
	PL_INPC__BOTTOMANDLEFT_invlist,
	PL_INPC__BOTTOMANDRIGHT_invlist,
	PL_INPC__LEFT_invlist,
	PL_INPC__LEFTANDRIGHT_invlist,
	PL_INPC__NA_invlist,
	PL_INPC__OVERSTRUCK_invlist,
	PL_INPC__RIGHT_invlist,
	PL_INPC__TOP_invlist,
	PL_INPC__TOPANDBOTTOM_invlist,
	PL_INPC__TOPANDBOTTOMANDRIGHT_invlist,
	PL_INPC__TOPANDLEFT_invlist,
	PL_INPC__TOPANDLEFTANDRIGHT_invlist,
	PL_INPC__TOPANDRIGHT_invlist,
	PL_INPHAGSPA_invlist,
	PL_INPHOENICIAN_invlist,
	PL_INPSALTERPAHLAVI_invlist,
	PL_INPUNCTUATION_invlist,
	PL_INREJANG_invlist,
	PL_INRUNIC_invlist,
	PL_INSAMARITAN_invlist,
	PL_INSAURASHTRA_invlist,
	PL_INSC__AVAGRAHA_invlist,
	PL_INSC__BINDU_invlist,
	PL_INSC__BRAHMIJOININGNUMBER_invlist,
	PL_INSC__CANTILLATIONMARK_invlist,
	PL_INSC__CONSONANT_invlist,
	PL_INSC__CONSONANTDEAD_invlist,
	PL_INSC__CONSONANTFINAL_invlist,
	PL_INSC__CONSONANTHEADLETTER_invlist,
	PL_INSC__CONSONANTKILLER_invlist,
	PL_INSC__CONSONANTMEDIAL_invlist,
	PL_INSC__CONSONANTPLACEHOLDER_invlist,
	PL_INSC__CONSONANTPRECEDINGREPHA_invlist,
	PL_INSC__CONSONANTPREFIXED_invlist,
	PL_INSC__CONSONANTSUBJOINED_invlist,
	PL_INSC__CONSONANTSUCCEEDINGREPHA_invlist,
	PL_INSC__CONSONANTWITHSTACKER_invlist,
	PL_INSC__GEMINATIONMARK_invlist,
	PL_INSC__INVISIBLESTACKER_invlist,
	PL_INSC__MODIFYINGLETTER_invlist,
	PL_INSC__NONJOINER_invlist,
	PL_INSC__NUKTA_invlist,
	PL_INSC__NUMBER_invlist,
	PL_INSC__NUMBERJOINER_invlist,
	PL_INSC__OTHER_invlist,
	PL_INSC__PUREKILLER_invlist,
	PL_INSC__REGISTERSHIFTER_invlist,
	PL_INSC__SYLLABLEMODIFIER_invlist,
	PL_INSC__TONELETTER_invlist,
	PL_INSC__TONEMARK_invlist,
	PL_INSC__VIRAMA_invlist,
	PL_INSC__VISARGA_invlist,
	PL_INSC__VOWEL_invlist,
	PL_INSC__VOWELDEPENDENT_invlist,
	PL_INSC__VOWELINDEPENDENT_invlist,
	PL_INSHARADA_invlist,
	PL_INSIDDHAM_invlist,
	PL_INSINHALA_invlist,
	PL_INSORASOMPENG_invlist,
	PL_INSOYOMBO_invlist,
	PL_INSUNDANESE_invlist,
	PL_INSYLOTINAGRI_invlist,
	PL_INSYRIAC_invlist,
	PL_INTAGALOG_invlist,
	PL_INTAGBANWA_invlist,
	PL_INTAILE_invlist,
	PL_INTAITHAM_invlist,
	PL_INTAIVIET_invlist,
	PL_INTAKRI_invlist,
	PL_INTAMIL_invlist,
	PL_INTANGUT_invlist,
	PL_INTELUGU_invlist,
	PL_INTHAANA_invlist,
	PL_INTHAI_invlist,
	PL_INTIBETAN_invlist,
	PL_INTIFINAGH_invlist,
	PL_INTIRHUTA_invlist,
	PL_INUGARITIC_invlist,
	PL_INVAI_invlist,
	PL_INVS_invlist,
	PL_INWARANGCITI_invlist,
	PL_INZANABAZARSQUARE_invlist,
	PL_IN__10_invlist,
	PL_IN__1_DOT_1_invlist,
	PL_IN__2_invlist,
	PL_IN__2_DOT_1_invlist,
	PL_IN__3_invlist,
	PL_IN__3_DOT_1_invlist,
	PL_IN__3_DOT_2_invlist,
	PL_IN__4_invlist,
	PL_IN__4_DOT_1_invlist,
	PL_IN__5_invlist,
	PL_IN__5_DOT_1_invlist,
	PL_IN__5_DOT_2_invlist,
	PL_IN__6_invlist,
	PL_IN__6_DOT_1_invlist,
	PL_IN__6_DOT_2_invlist,
	PL_IN__6_DOT_3_invlist,
	PL_IN__7_invlist,
	PL_IN__8_invlist,
	PL_IN__9_invlist,
	PL_IPAEXT_invlist,
	PL_ITAL_invlist,
	PL_JAMO_invlist,
	PL_JAMOEXTA_invlist,
	PL_JAMOEXTB_invlist,
	PL_JAVA_invlist,
	PL_JG__AFRICANFEH_invlist,
	PL_JG__AFRICANNOON_invlist,
	PL_JG__AFRICANQAF_invlist,
	PL_JG__AIN_invlist,
	PL_JG__ALAPH_invlist,
	PL_JG__ALEF_invlist,
	PL_JG__BEH_invlist,
	PL_JG__BETH_invlist,
	PL_JG__BURUSHASKIYEHBARREE_invlist,
	PL_JG__DAL_invlist,
	PL_JG__DALATHRISH_invlist,
	PL_JG__E_invlist,
	PL_JG__FARSIYEH_invlist,
	PL_JG__FE_invlist,
	PL_JG__FEH_invlist,
	PL_JG__FINALSEMKATH_invlist,
	PL_JG__GAF_invlist,
	PL_JG__GAMAL_invlist,
	PL_JG__HAH_invlist,
	PL_JG__HAMZAONHEHGOAL_invlist,
	PL_JG__HE_invlist,
	PL_JG__HEH_invlist,
	PL_JG__HEHGOAL_invlist,
	PL_JG__HETH_invlist,
	PL_JG__KAF_invlist,
	PL_JG__KAPH_invlist,
	PL_JG__KHAPH_invlist,
	PL_JG__KNOTTEDHEH_invlist,
	PL_JG__LAM_invlist,
	PL_JG__LAMADH_invlist,
	PL_JG__MALAYALAMBHA_invlist,
	PL_JG__MALAYALAMJA_invlist,
	PL_JG__MALAYALAMLLA_invlist,
	PL_JG__MALAYALAMLLLA_invlist,
	PL_JG__MALAYALAMNGA_invlist,
	PL_JG__MALAYALAMNNA_invlist,
	PL_JG__MALAYALAMNNNA_invlist,
	PL_JG__MALAYALAMNYA_invlist,
	PL_JG__MALAYALAMRA_invlist,
	PL_JG__MALAYALAMSSA_invlist,
	PL_JG__MALAYALAMTTA_invlist,
	PL_JG__MANICHAEANALEPH_invlist,
	PL_JG__MANICHAEANAYIN_invlist,
	PL_JG__MANICHAEANBETH_invlist,
	PL_JG__MANICHAEANDALETH_invlist,
	PL_JG__MANICHAEANDHAMEDH_invlist,
	PL_JG__MANICHAEANFIVE_invlist,
	PL_JG__MANICHAEANGIMEL_invlist,
	PL_JG__MANICHAEANHETH_invlist,
	PL_JG__MANICHAEANHUNDRED_invlist,
	PL_JG__MANICHAEANKAPH_invlist,
	PL_JG__MANICHAEANLAMEDH_invlist,
	PL_JG__MANICHAEANMEM_invlist,
	PL_JG__MANICHAEANNUN_invlist,
	PL_JG__MANICHAEANONE_invlist,
	PL_JG__MANICHAEANPE_invlist,
	PL_JG__MANICHAEANQOPH_invlist,
	PL_JG__MANICHAEANRESH_invlist,
	PL_JG__MANICHAEANSADHE_invlist,
	PL_JG__MANICHAEANSAMEKH_invlist,
	PL_JG__MANICHAEANTAW_invlist,
	PL_JG__MANICHAEANTEN_invlist,
	PL_JG__MANICHAEANTETH_invlist,
	PL_JG__MANICHAEANTHAMEDH_invlist,
	PL_JG__MANICHAEANTWENTY_invlist,
	PL_JG__MANICHAEANWAW_invlist,
	PL_JG__MANICHAEANYODH_invlist,
	PL_JG__MANICHAEANZAYIN_invlist,
	PL_JG__MEEM_invlist,
	PL_JG__MIM_invlist,
	PL_JG__NOJOININGGROUP_invlist,
	PL_JG__NOON_invlist,
	PL_JG__NUN_invlist,
	PL_JG__NYA_invlist,
	PL_JG__PE_invlist,
	PL_JG__QAF_invlist,
	PL_JG__QAPH_invlist,
	PL_JG__REH_invlist,
	PL_JG__REVERSEDPE_invlist,
	PL_JG__ROHINGYAYEH_invlist,
	PL_JG__SAD_invlist,
	PL_JG__SADHE_invlist,
	PL_JG__SEEN_invlist,
	PL_JG__SEMKATH_invlist,
	PL_JG__SHIN_invlist,
	PL_JG__STRAIGHTWAW_invlist,
	PL_JG__SWASHKAF_invlist,
	PL_JG__SYRIACWAW_invlist,
	PL_JG__TAH_invlist,
	PL_JG__TAW_invlist,
	PL_JG__TEHMARBUTA_invlist,
	PL_JG__TETH_invlist,
	PL_JG__WAW_invlist,
	PL_JG__YEH_invlist,
	PL_JG__YEHBARREE_invlist,
	PL_JG__YEHWITHTAIL_invlist,
	PL_JG__YUDH_invlist,
	PL_JG__YUDHHE_invlist,
	PL_JG__ZAIN_invlist,
	PL_JG__ZHAIN_invlist,
	PL_JOINC_invlist,
	PL_JT__C_invlist,
	PL_JT__D_invlist,
	PL_JT__L_invlist,
	PL_JT__R_invlist,
	PL_JT__T_invlist,
	PL_JT__U_invlist,
	PL_KALI_invlist,
	PL_KANA_invlist,
	PL_KANAEXTA_invlist,
	PL_KANASUP_invlist,
	PL_KANBUN_invlist,
	PL_KANGXI_invlist,
	PL_KATAKANAEXT_invlist,
	PL_KHAR_invlist,
	PL_KHMERSYMBOLS_invlist,
	PL_KHMR_invlist,
	PL_KHOJ_invlist,
	PL_KNDA_invlist,
	PL_KTHI_invlist,
	PL_L_invlist,
	PL_LANA_invlist,
	PL_LAO_invlist,
	PL_LATIN1_invlist,
	PL_LATINEXTA_invlist,
	PL_LATINEXTADDITIONAL_invlist,
	PL_LATINEXTB_invlist,
	PL_LATINEXTC_invlist,
	PL_LATINEXTD_invlist,
	PL_LATINEXTE_invlist,
	PL_LATN_invlist,
	PL_LB__AI_invlist,
	PL_LB__AL_invlist,
	PL_LB__B2_invlist,
	PL_LB__BA_invlist,
	PL_LB__BB_invlist,
	PL_LB__BK_invlist,
	PL_LB__CB_invlist,
	PL_LB__CJ_invlist,
	PL_LB__CL_invlist,
	PL_LB__CM_invlist,
	PL_LB__CP_invlist,
	PL_LB__CR_invlist,
	PL_LB__EB_invlist,
	PL_LB__EM_invlist,
	PL_LB__EX_invlist,
	PL_LB__GL_invlist,
	PL_LB__H2_invlist,
	PL_LB__H3_invlist,
	PL_LB__HL_invlist,
	PL_LB__HY_invlist,
	PL_LB__ID_invlist,
	PL_LB__IN_invlist,
	PL_LB__IS_invlist,
	PL_LB__LF_invlist,
	PL_LB__NL_invlist,
	PL_LB__NS_invlist,
	PL_LB__NU_invlist,
	PL_LB__OP_invlist,
	PL_LB__PO_invlist,
	PL_LB__PR_invlist,
	PL_LB__QU_invlist,
	PL_LB__SA_invlist,
	PL_LB__SG_invlist,
	PL_LB__SP_invlist,
	PL_LB__SY_invlist,
	PL_LB__WJ_invlist,
	PL_LB__XX_invlist,
	PL_LB__ZW_invlist,
	PL_LB__ZWJ_invlist,
	PL_LEPC_invlist,
	PL_LETTERLIKESYMBOLS_invlist,
	PL_LIMB_invlist,
	PL_LINA_invlist,
	PL_LINB_invlist,
	PL_LINEARBIDEOGRAMS_invlist,
	PL_LINEARBSYLLABARY_invlist,
	PL_LISU_invlist,
	PL_LL_invlist,
	PL_LM_invlist,
	PL_LO_invlist,
	PL_LOE_invlist,
	PL_LOWSURROGATES_invlist,
	PL_LT_invlist,
	PL_LU_invlist,
	PL_LYCI_invlist,
	PL_LYDI_invlist,
	PL_L_AMP__invlist,
	PL_M_invlist,
	PL_MAHJ_invlist,
	PL_MAHJONG_invlist,
	PL_MAND_invlist,
	PL_MANI_invlist,
	PL_MARC_invlist,
	PL_MATH_invlist,
	PL_MATHALPHANUM_invlist,
	PL_MATHOPERATORS_invlist,
	PL_MC_invlist,
	PL_ME_invlist,
	PL_MEETEIMAYEKEXT_invlist,
	PL_MEND_invlist,
	PL_MERC_invlist,
	PL_MERO_invlist,
	PL_MIAO_invlist,
	PL_MISCARROWS_invlist,
	PL_MISCMATHSYMBOLSA_invlist,
	PL_MISCMATHSYMBOLSB_invlist,
	PL_MISCPICTOGRAPHS_invlist,
	PL_MISCSYMBOLS_invlist,
	PL_MISCTECHNICAL_invlist,
	PL_MLYM_invlist,
	PL_MN_invlist,
	PL_MODI_invlist,
	PL_MODIFIERLETTERS_invlist,
	PL_MODIFIERTONELETTERS_invlist,
	PL_MONG_invlist,
	PL_MONGOLIANSUP_invlist,
	PL_MRO_invlist,
	PL_MTEI_invlist,
	PL_MULT_invlist,
	PL_MUSIC_invlist,
	PL_MYANMAREXTA_invlist,
	PL_MYANMAREXTB_invlist,
	PL_MYMR_invlist,
	PL_N_invlist,
	PL_NARB_invlist,
	PL_NB_invlist,
	PL_NBAT_invlist,
	PL_NCHAR_invlist,
	PL_NEWA_invlist,
	PL_NFCQC__M_invlist,
	PL_NFCQC__Y_invlist,
	PL_NFDQC__Y_invlist,
	PL_NFKCQC__N_invlist,
	PL_NFKCQC__Y_invlist,
	PL_NFKDQC__N_invlist,
	PL_NKO_invlist,
	PL_NL_invlist,
	PL_NO_invlist,
	PL_NSHU_invlist,
	PL_NT__DI_invlist,
	PL_NT__NU_invlist,
	PL_NUMBERFORMS_invlist,
	PL_NV__0_invlist,
	PL_NV__1_invlist,
	PL_NV__10_invlist,
	PL_NV__100_invlist,
	PL_NV__1000_invlist,
	PL_NV__10000_invlist,
	PL_NV__100000_invlist,
	PL_NV__1000000_invlist,
	PL_NV__100000000_invlist,
	PL_NV__10000000000_invlist,
	PL_NV__1000000000000_invlist,
	PL_NV__11_invlist,
	PL_NV__11_SLASH_12_invlist,
	PL_NV__11_SLASH_2_invlist,
	PL_NV__12_invlist,
	PL_NV__13_invlist,
	PL_NV__13_SLASH_2_invlist,
	PL_NV__14_invlist,
	PL_NV__15_invlist,
	PL_NV__15_SLASH_2_invlist,
	PL_NV__16_invlist,
	PL_NV__17_invlist,
	PL_NV__17_SLASH_2_invlist,
	PL_NV__18_invlist,
	PL_NV__19_invlist,
	PL_NV__1_SLASH_10_invlist,
	PL_NV__1_SLASH_12_invlist,
	PL_NV__1_SLASH_16_invlist,
	PL_NV__1_SLASH_160_invlist,
	PL_NV__1_SLASH_2_invlist,
	PL_NV__1_SLASH_20_invlist,
	PL_NV__1_SLASH_3_invlist,
	PL_NV__1_SLASH_4_invlist,
	PL_NV__1_SLASH_40_invlist,
	PL_NV__1_SLASH_5_invlist,
	PL_NV__1_SLASH_6_invlist,
	PL_NV__1_SLASH_7_invlist,
	PL_NV__1_SLASH_8_invlist,
	PL_NV__1_SLASH_9_invlist,
	PL_NV__2_invlist,
	PL_NV__20_invlist,
	PL_NV__200_invlist,
	PL_NV__2000_invlist,
	PL_NV__20000_invlist,
	PL_NV__200000_invlist,
	PL_NV__21_invlist,
	PL_NV__216000_invlist,
	PL_NV__22_invlist,
	PL_NV__23_invlist,
	PL_NV__24_invlist,
	PL_NV__25_invlist,
	PL_NV__26_invlist,
	PL_NV__27_invlist,
	PL_NV__28_invlist,
	PL_NV__29_invlist,
	PL_NV__2_SLASH_3_invlist,
	PL_NV__2_SLASH_5_invlist,
	PL_NV__3_invlist,
	PL_NV__30_invlist,
	PL_NV__300_invlist,
	PL_NV__3000_invlist,
	PL_NV__30000_invlist,
	PL_NV__300000_invlist,
	PL_NV__31_invlist,
	PL_NV__32_invlist,
	PL_NV__33_invlist,
	PL_NV__34_invlist,
	PL_NV__35_invlist,
	PL_NV__36_invlist,
	PL_NV__37_invlist,
	PL_NV__38_invlist,
	PL_NV__39_invlist,
	PL_NV__3_SLASH_16_invlist,
	PL_NV__3_SLASH_2_invlist,
	PL_NV__3_SLASH_20_invlist,
	PL_NV__3_SLASH_4_invlist,
	PL_NV__3_SLASH_5_invlist,
	PL_NV__3_SLASH_8_invlist,
	PL_NV__3_SLASH_80_invlist,
	PL_NV__4_invlist,
	PL_NV__40_invlist,
	PL_NV__400_invlist,
	PL_NV__4000_invlist,
	PL_NV__40000_invlist,
	PL_NV__400000_invlist,
	PL_NV__41_invlist,
	PL_NV__42_invlist,
	PL_NV__43_invlist,
	PL_NV__432000_invlist,
	PL_NV__44_invlist,
	PL_NV__45_invlist,
	PL_NV__46_invlist,
	PL_NV__47_invlist,
	PL_NV__48_invlist,
	PL_NV__49_invlist,
	PL_NV__4_SLASH_5_invlist,
	PL_NV__5_invlist,
	PL_NV__50_invlist,
	PL_NV__500_invlist,
	PL_NV__5000_invlist,
	PL_NV__50000_invlist,
	PL_NV__500000_invlist,
	PL_NV__5_SLASH_12_invlist,
	PL_NV__5_SLASH_2_invlist,
	PL_NV__5_SLASH_6_invlist,
	PL_NV__5_SLASH_8_invlist,
	PL_NV__6_invlist,
	PL_NV__60_invlist,
	PL_NV__600_invlist,
	PL_NV__6000_invlist,
	PL_NV__60000_invlist,
	PL_NV__600000_invlist,
	PL_NV__7_invlist,
	PL_NV__70_invlist,
	PL_NV__700_invlist,
	PL_NV__7000_invlist,
	PL_NV__70000_invlist,
	PL_NV__700000_invlist,
	PL_NV__7_SLASH_12_invlist,
	PL_NV__7_SLASH_2_invlist,
	PL_NV__7_SLASH_8_invlist,
	PL_NV__8_invlist,
	PL_NV__80_invlist,
	PL_NV__800_invlist,
	PL_NV__8000_invlist,
	PL_NV__80000_invlist,
	PL_NV__800000_invlist,
	PL_NV__9_invlist,
	PL_NV__90_invlist,
	PL_NV__900_invlist,
	PL_NV__9000_invlist,
	PL_NV__90000_invlist,
	PL_NV__900000_invlist,
	PL_NV__9_SLASH_2_invlist,
	PL_NV__NAN_invlist,
	PL_NV___MINUS_1_SLASH_2_invlist,
	PL_OCR_invlist,
	PL_OGAM_invlist,
	PL_OLCK_invlist,
	PL_ORKH_invlist,
	PL_ORNAMENTALDINGBATS_invlist,
	PL_ORYA_invlist,
	PL_OSGE_invlist,
	PL_OSMA_invlist,
	PL_P_invlist,
	PL_PALM_invlist,
	PL_PATSYN_invlist,
	PL_PATWS_invlist,
	PL_PAUC_invlist,
	PL_PC_invlist,
	PL_PCM_invlist,
	PL_PD_invlist,
	PL_PE_invlist,
	PL_PERM_invlist,
	PL_PF_invlist,
	PL_PHAG_invlist,
	PL_PHAISTOS_invlist,
	PL_PHLI_invlist,
	PL_PHLP_invlist,
	PL_PHNX_invlist,
	PL_PHONETICEXT_invlist,
	PL_PHONETICEXTSUP_invlist,
	PL_PI_invlist,
	PL_PLAYINGCARDS_invlist,
	PL_PO_invlist,
	PL_POSIXALNUM_invlist,
	PL_POSIXALPHA_invlist,
	PL_POSIXBLANK_invlist,
	PL_POSIXCNTRL_invlist,
	PL_POSIXDIGIT_invlist,
	PL_POSIXGRAPH_invlist,
	PL_POSIXLOWER_invlist,
	PL_POSIXPRINT_invlist,
	PL_POSIXPUNCT_invlist,
	PL_POSIXSPACE_invlist,
	PL_POSIXUPPER_invlist,
	PL_POSIXWORD_invlist,
	PL_POSIXXDIGIT_invlist,
	PL_PRTI_invlist,
	PL_PS_invlist,
	PL_PUA_invlist,
	PL_QAAI_invlist,
	PL_QMARK_invlist,
	PL_RADICAL_invlist,
	PL_RI_invlist,
	PL_RJNG_invlist,
	PL_RUMI_invlist,
	PL_RUNR_invlist,
	PL_S_invlist,
	PL_SAMR_invlist,
	PL_SARB_invlist,
	PL_SAUR_invlist,
	PL_SB__AT_invlist,
	PL_SB__CL_invlist,
	PL_SB__EX_invlist,
	PL_SB__FO_invlist,
	PL_SB__LE_invlist,
	PL_SB__LO_invlist,
	PL_SB__SC_invlist,
	PL_SB__SE_invlist,
	PL_SB__SP_invlist,
	PL_SB__ST_invlist,
	PL_SB__UP_invlist,
	PL_SB__XX_invlist,
	PL_SC_invlist,
	PL_SC__ADLM_invlist,
	PL_SC__ARAB_invlist,
	PL_SC__ARMN_invlist,
	PL_SC__BENG_invlist,
	PL_SC__BOPO_invlist,
	PL_SC__BUGI_invlist,
	PL_SC__BUHD_invlist,
	PL_SC__CAKM_invlist,
	PL_SC__COPT_invlist,
	PL_SC__CPRT_invlist,
	PL_SC__CYRL_invlist,
	PL_SC__DEVA_invlist,
	PL_SC__DUPL_invlist,
	PL_SC__GEOR_invlist,
	PL_SC__GLAG_invlist,
	PL_SC__GRAN_invlist,
	PL_SC__GREK_invlist,
	PL_SC__GUJR_invlist,
	PL_SC__GURU_invlist,
	PL_SC__HAN_invlist,
	PL_SC__HANG_invlist,
	PL_SC__HANO_invlist,
	PL_SC__HIRA_invlist,
	PL_SC__JAVA_invlist,
	PL_SC__KALI_invlist,
	PL_SC__KANA_invlist,
	PL_SC__KHOJ_invlist,
	PL_SC__KNDA_invlist,
	PL_SC__KTHI_invlist,
	PL_SC__LATN_invlist,
	PL_SC__LIMB_invlist,
	PL_SC__LINA_invlist,
	PL_SC__LINB_invlist,
	PL_SC__MAHJ_invlist,
	PL_SC__MAND_invlist,
	PL_SC__MANI_invlist,
	PL_SC__MLYM_invlist,
	PL_SC__MODI_invlist,
	PL_SC__MONG_invlist,
	PL_SC__MULT_invlist,
	PL_SC__MYMR_invlist,
	PL_SC__ORYA_invlist,
	PL_SC__PERM_invlist,
	PL_SC__PHAG_invlist,
	PL_SC__PHLP_invlist,
	PL_SC__QAAI_invlist,
	PL_SC__SHRD_invlist,
	PL_SC__SIND_invlist,
	PL_SC__SINH_invlist,
	PL_SC__SYLO_invlist,
	PL_SC__SYRC_invlist,
	PL_SC__TAGB_invlist,
	PL_SC__TAKR_invlist,
	PL_SC__TALE_invlist,
	PL_SC__TAML_invlist,
	PL_SC__TELU_invlist,
	PL_SC__TGLG_invlist,
	PL_SC__THAA_invlist,
	PL_SC__TIRH_invlist,
	PL_SC__YI_invlist,
	PL_SC__ZYYY_invlist,
	PL_SD_invlist,
	PL_SGNW_invlist,
	PL_SHAW_invlist,
	PL_SHORTHANDFORMATCONTROLS_invlist,
	PL_SHRD_invlist,
	PL_SIDD_invlist,
	PL_SIND_invlist,
	PL_SINH_invlist,
	PL_SINHALAARCHAICNUMBERS_invlist,
	PL_SK_invlist,
	PL_SM_invlist,
	PL_SMALLFORMS_invlist,
	PL_SO_invlist,
	PL_SORA_invlist,
	PL_SOYO_invlist,
	PL_SPECIALS_invlist,
	PL_STERM_invlist,
	PL_SUND_invlist,
	PL_SUNDANESESUP_invlist,
	PL_SUPARROWSA_invlist,
	PL_SUPARROWSB_invlist,
	PL_SUPARROWSC_invlist,
	PL_SUPERANDSUB_invlist,
	PL_SUPMATHOPERATORS_invlist,
	PL_SUPPUAA_invlist,
	PL_SUPPUAB_invlist,
	PL_SUPPUNCTUATION_invlist,
	PL_SUPSYMBOLSANDPICTOGRAPHS_invlist,
	PL_SUTTONSIGNWRITING_invlist,
	PL_SYLO_invlist,
	PL_SYRC_invlist,
	PL_SYRIACSUP_invlist,
	PL_TAGB_invlist,
	PL_TAGS_invlist,
	PL_TAIXUANJING_invlist,
	PL_TAKR_invlist,
	PL_TALE_invlist,
	PL_TALU_invlist,
	PL_TAML_invlist,
	PL_TANG_invlist,
	PL_TANGUTCOMPONENTS_invlist,
	PL_TAVT_invlist,
	PL_TELU_invlist,
	PL_TERM_invlist,
	PL_TFNG_invlist,
	PL_TGLG_invlist,
	PL_THAA_invlist,
	PL_THAI_invlist,
	PL_TIBT_invlist,
	PL_TIRH_invlist,
	PL_TRANSPORTANDMAP_invlist,
	PL_UCAS_invlist,
	PL_UCASEXT_invlist,
	PL_UGAR_invlist,
	PL_UIDEO_invlist,
	PL_VAI_invlist,
	PL_VEDICEXT_invlist,
	PL_VERTICALFORMS_invlist,
	PL_VERTSPACE_invlist,
	PL_VO__R_invlist,
	PL_VO__TR_invlist,
	PL_VO__TU_invlist,
	PL_VO__U_invlist,
	PL_VS_invlist,
	PL_VSSUP_invlist,
	PL_WARA_invlist,
	PL_WB__DQ_invlist,
	PL_WB__EB_invlist,
	PL_WB__EBG_invlist,
	PL_WB__EX_invlist,
	PL_WB__EXTEND_invlist,
	PL_WB__FO_invlist,
	PL_WB__GAZ_invlist,
	PL_WB__KA_invlist,
	PL_WB__LE_invlist,
	PL_WB__MB_invlist,
	PL_WB__ML_invlist,
	PL_WB__MN_invlist,
	PL_WB__NL_invlist,
	PL_WB__NU_invlist,
	PL_WB__SQ_invlist,
	PL_WB__XX_invlist,
	PL_XIDC_invlist,
	PL_XIDS_invlist,
	PL_XPEO_invlist,
	PL_XPOSIXALNUM_invlist,
	PL_XPOSIXALPHA_invlist,
	PL_XPOSIXBLANK_invlist,
	PL_XPOSIXCNTRL_invlist,
	PL_XPOSIXDIGIT_invlist,
	PL_XPOSIXGRAPH_invlist,
	PL_XPOSIXLOWER_invlist,
	PL_XPOSIXPRINT_invlist,
	PL_XPOSIXPUNCT_invlist,
	PL_XPOSIXSPACE_invlist,
	PL_XPOSIXUPPER_invlist,
	PL_XPOSIXWORD_invlist,
	PL_XPOSIXXDIGIT_invlist,
	PL_XSUX_invlist,
	PL_YI_invlist,
	PL_YIJING_invlist,
	PL_YIRADICALS_invlist,
	PL_YISYLLABLES_invlist,
	PL_Z_invlist,
	PL_ZANB_invlist,
	PL_ZL_invlist,
	PL_ZP_invlist,
	PL_ZS_invlist,
	PL_ZYYY_invlist,
	PL_ZZZZ_invlist,
	PL__PERL_ANY_FOLDS_invlist,
	PL__PERL_CHARNAME_BEGIN_invlist,
	PL__PERL_CHARNAME_CONTINUE_invlist,
	PL__PERL_FOLDS_TO_MULTI_CHAR_invlist,
	PL__PERL_IDCONT_invlist,
	PL__PERL_IDSTART_invlist,
	PL__PERL_PROBLEMATIC_LOCALE_FOLDEDS_START_invlist,
	PL__PERL_PROBLEMATIC_LOCALE_FOLDS_invlist,
	PL__PERL_QUOTEMETA_invlist
};

#endif	/* defined(PERL_IN_UTF8_C) */

#if defined(PERL_IN_REGEXEC_C)

#define GCB_NOBREAK      0
#define GCB_BREAKABLE    1
#define GCB_RI_then_RI   2
#define GCB_EX_then_EM   3

static const U8 GCB_table[19][19] = {
   /* 'edg' stands for 'EDGE' */
/*        XX CR CN EB EBG EM EX GAZ  L LF LV LVT PP RI SM  T  V ZWJ edg */
/* XX */ { 1, 1, 1, 1,  1, 1, 0,  1, 1, 1, 1,  1, 1, 1, 0, 1, 1,  0,  1 },
/* CR */ { 1, 1, 1, 1,  1, 1, 1,  1, 1, 0, 1,  1, 1, 1, 1, 1, 1,  1,  1 },
/* CN */ { 1, 1, 1, 1,  1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1 },
/* EB */ { 1, 1, 1, 1,  1, 0, 0,  1, 1, 1, 1,  1, 1, 1, 0, 1, 1,  0,  1 },
/* EBG*/ { 1, 1, 1, 1,  1, 0, 0,  1, 1, 1, 1,  1, 1, 1, 0, 1, 1,  0,  1 },
/* EM */ { 1, 1, 1, 1,  1, 1, 0,  1, 1, 1, 1,  1, 1, 1, 0, 1, 1,  0,  1 },
/* EX */ { 1, 1, 1, 1,  1, 3, 0,  1, 1, 1, 1,  1, 1, 1, 0, 1, 1,  0,  1 },
/* GAZ*/ { 1, 1, 1, 1,  1, 1, 0,  1, 1, 1, 1,  1, 1, 1, 0, 1, 1,  0,  1 },
/* L  */ { 1, 1, 1, 1,  1, 1, 0,  1, 0, 1, 0,  0, 1, 1, 0, 1, 0,  0,  1 },
/* LF */ { 1, 1, 1, 1,  1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1 },
/* LV */ { 1, 1, 1, 1,  1, 1, 0,  1, 1, 1, 1,  1, 1, 1, 0, 0, 0,  0,  1 },
/* LVT*/ { 1, 1, 1, 1,  1, 1, 0,  1, 1, 1, 1,  1, 1, 1, 0, 0, 1,  0,  1 },
/* PP */ { 0, 1, 1, 0,  0, 0, 0,  0, 0, 1, 0,  0, 0, 0, 0, 0, 0,  0,  1 },
/* RI */ { 1, 1, 1, 1,  1, 1, 0,  1, 1, 1, 1,  1, 1, 2, 0, 1, 1,  0,  1 },
/* SM */ { 1, 1, 1, 1,  1, 1, 0,  1, 1, 1, 1,  1, 1, 1, 0, 1, 1,  0,  1 },
/* T  */ { 1, 1, 1, 1,  1, 1, 0,  1, 1, 1, 1,  1, 1, 1, 0, 0, 1,  0,  1 },
/* V  */ { 1, 1, 1, 1,  1, 1, 0,  1, 1, 1, 1,  1, 1, 1, 0, 0, 0,  0,  1 },
/* ZWJ*/ { 1, 1, 1, 1,  0, 1, 0,  0, 1, 1, 1,  1, 1, 1, 0, 1, 1,  0,  1 },
/* edg*/ { 1, 1, 1, 1,  1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  0 }
};

#define LB_NOBREAK                        0
#define LB_BREAKABLE                      1
#define LB_NOBREAK_EVEN_WITH_SP_BETWEEN   2
#define LB_CM_ZWJ_foo                     3
#define LB_SP_foo                         6
#define LB_PR_or_PO_then_OP_or_HY         9
#define LB_SY_or_IS_then_various         11
#define LB_HY_or_BA_then_foo             13
#define LB_RI_then_RI                    15
#define LB_various_then_PO_or_PR         32

static const U8 LB_table[39][39] = {
   /* 'edg' stands for 'EDGE' */
/*        AL BA BB B2 SY CR CP CL CM CB EB EM EX GL H2 H3 HL HY ID IS IN JL JT JV LF BK NL NS NU OP PO PR QU RI SP WJ ZWJ ZW edg */
/* AL */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 0, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0,  1 },
/* BA */ {14, 0,14,14, 2, 0, 2, 2, 0, 1,14,14, 2,14,14,14,14, 0,14, 2,14,14,14,14, 0, 0, 0, 0,14,14,14,14, 0,14, 0, 0,  0, 0,  1 },
/* BB */ { 0, 0, 0, 0, 2, 0, 2, 2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  1 },
/* B2 */ { 1, 0, 1, 2, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,  0, 0,  1 },
/* SY */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0,12, 1,33,33, 0, 1, 0, 0,  0, 0,  1 },
/* CR */ { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1 },
/* CP */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 2, 0, 1,33,33, 0, 1, 0, 0,  0, 0,  1 },
/* CL */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 2, 1, 1,33,33, 0, 1, 0, 0,  0, 0,  1 },
/* CM */ { 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3,  3, 0,  1 },
/* CB */ { 1, 1, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0,  0, 0,  1 },
/* EB */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 0, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,  0, 0,  1 },
/* EM */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,  0, 0,  1 },
/* EX */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,  0, 0,  1 },
/* GL */ { 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  1 },
/* H2 */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,  0, 0,  1 },
/* H3 */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,  0, 0,  1 },
/* HL */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 0, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0,  1 },
/* HY */ {14, 0,14,14, 2, 0, 2, 2, 0, 1,14,14, 2,14,14,14,14, 0,14, 2,14,14,14,14, 0, 0, 0, 0,13,14,14,14, 0,14, 0, 0,  0, 0,  1 },
/* ID */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,  0, 0,  1 },
/* IS */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0,12, 1,33,33, 0, 1, 0, 0,  0, 0,  1 },
/* IN */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,  0, 0,  1 },
/* JL */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,  0, 0,  1 },
/* JT */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,  0, 0,  1 },
/* JV */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,  0, 0,  1 },
/* LF */ { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1 },
/* BK */ { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1 },
/* NL */ { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1 },
/* NS */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,  0, 0,  1 },
/* NU */ { 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0,  1 },
/* OP */ { 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2,  2, 0,  1 },
/* PO */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0,10, 1, 1, 0, 1, 0, 0,  0, 0,  1 },
/* PR */ { 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0,10, 1, 1, 0, 1, 0, 0,  0, 0,  1 },
/* QU */ { 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,  0, 0,  1 },
/* RI */ { 1, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0,15, 0, 0,  0, 0,  1 },
/* SP */ { 7, 7, 7, 7, 8, 0, 8, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 8,  7, 0,  1 },
/* WJ */ { 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  1 },
/* ZWJ*/ { 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 0, 0, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3,  0, 0,  1 },
/* ZW */ { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1,  1, 0,  1 },
/* edg*/ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0 }
};

#define WB_NOBREAK                        0
#define WB_BREAKABLE                      1
#define WB_hs_then_hs                     2
#define WB_Ex_or_FO_or_ZWJ_then_foo       3
#define WB_DQ_then_HL                     4
#define WB_HL_then_DQ                     6
#define WB_LE_or_HL_then_MB_or_ML_or_SQ   8
#define WB_MB_or_ML_or_SQ_then_LE_or_HL  10
#define WB_MB_or_MN_or_SQ_then_NU        12
#define WB_NU_then_MB_or_MN_or_SQ        14
#define WB_RI_then_RI                    16

static const U8 WB_table[24][24] = {
   /* 'Ext' stands for 'Extend'; 'edg' stands for 'EDGE'; 'hs' stands for
    * 'Perl_Tailored_HSpace'; 'unk' stands for 'UNKNOWN' */
/*        XX LE CR DQ EB EBG EM Ext EX FO GAZ HL KA LF ML MN MB NL NU hs RI SQ ZWJ edg */
/* XX */ { 1, 1, 1, 1, 1,  1, 1,  0, 1, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  0,  1 },
/* LE */ { 1, 0, 1, 1, 1,  1, 1,  0, 0, 0,  1, 0, 1, 1, 9, 1, 9, 1, 0, 1, 1, 9,  0,  1 },
/* CR */ { 1, 1, 0, 1, 1,  1, 1,  1, 1, 1,  1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,  1,  1 },
/* DQ */ { 1, 1, 1, 1, 1,  1, 1,  0, 1, 0,  1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  0,  1 },
/* EB */ { 1, 1, 1, 1, 1,  1, 0,  0, 1, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  0,  1 },
/* EBG*/ { 1, 1, 1, 1, 1,  1, 0,  0, 1, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  0,  1 },
/* EM */ { 1, 1, 1, 1, 1,  1, 1,  0, 1, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  0,  1 },
/* Ext*/ { 3, 3, 1, 3, 3,  3, 3,  0, 3, 0,  3, 3, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3,  0,  1 },
/* EX */ { 1, 0, 1, 1, 1,  1, 1,  0, 0, 0,  1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,  0,  1 },
/* FO */ { 3, 3, 1, 3, 3,  3, 3,  0, 3, 0,  3, 3, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3,  0,  1 },
/* GAZ*/ { 1, 1, 1, 1, 1,  1, 1,  0, 1, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  0,  1 },
/* HL */ { 1, 0, 1, 7, 1,  1, 1,  0, 0, 0,  1, 0, 1, 1, 9, 1, 9, 1, 0, 1, 1, 8,  0,  1 },
/* KA */ { 1, 1, 1, 1, 1,  1, 1,  0, 0, 0,  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,  0,  1 },
/* LF */ { 1, 1, 0, 1, 1,  1, 1,  1, 1, 1,  1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,  1,  1 },
/* ML */ { 1,11, 1, 1, 1,  1, 1,  0, 1, 0,  1,11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  0,  1 },
/* MN */ { 1, 1, 1, 1, 1,  1, 1,  0, 1, 0,  1, 1, 1, 1, 1, 1, 1, 1,13, 1, 1, 1,  0,  1 },
/* MB */ { 1,11, 1, 1, 1,  1, 1,  0, 1, 0,  1,11, 1, 1, 1, 1, 1, 1,13, 1, 1, 1,  0,  1 },
/* NL */ { 1, 1, 0, 1, 1,  1, 1,  1, 1, 1,  1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,  1,  1 },
/* NU */ { 1, 0, 1, 1, 1,  1, 1,  0, 0, 0,  1, 0, 1, 1, 1,15,15, 1, 0, 1, 1,15,  0,  1 },
/* hs */ { 1, 1, 0, 1, 1,  1, 1,  0, 1, 0,  1, 1, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1,  0,  1 },
/* RI */ { 1, 1, 1, 1, 1,  1, 1,  0, 1, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,16, 1,  0,  1 },
/* SQ */ { 1,11, 1, 1, 1,  1, 1,  0, 1, 0,  1,11, 1, 1, 1, 1, 1, 1,13, 1, 1, 1,  0,  1 },
/* ZWJ*/ { 3, 3, 1, 3, 3,  0, 3,  0, 3, 0,  0, 3, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3,  0,  1 },
/* edg*/ { 1, 1, 1, 1, 1,  1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1,  0 }
};

#endif	/* defined(PERL_IN_REGEXEC_C) */

/* Generated from:
 * c18d3c6b9fb1ba0b79183f91c9e9e0a80adadadbf4bbb0f96cecfd6ceed0d699 lib/Unicode/UCD.pm
 * ff4404ec64f308bdf7714c50f9fdf0d1d0bf3c34db4d0a67e58ef0c6f88e818f lib/unicore/ArabicShaping.txt
 * 292171a0a1c13d7e581e8781eb4cdf248243b1ab267354a63c7a14429dea2740 lib/unicore/BidiBrackets.txt
 * 8f2695cc42989a79a715ab0d2892bd0c998759180cfdfb998674447f48231940 lib/unicore/BidiMirroring.txt
 * 5ae1649a42ed8ae8cb885af79563f00a9ae17e602405a56ed8aca214da14eea7 lib/unicore/Blocks.txt
 * 97b43ed3f4b80572c2114200e5e43a6b923d984c74a6caaf27de5b8462c04cb0 lib/unicore/CaseFolding.txt
 * eedcf6932b4081ee65878454588c803af910a5aed7c8c67e3c38701cbee9b9e4 lib/unicore/CompositionExclusions.txt
 * 90e48995643f45b08f0ef67fb90de3bb18e26765272bcc0c35c840cbc10b37c1 lib/unicore/DAge.txt
 * e6ca152259189ec4bc2297e93c6c88f86e162cc52814198263497f3c9b46cbe9 lib/unicore/DCoreProperties.txt
 * 3e255ccdff4b00cfe0be53bbd583e4fe2e7d4039138579543548a5ecfce45242 lib/unicore/DNormalizationProps.txt
 * 9f34e2d3ea27ca82f4f14b62411861d1f07c4b9e296d54da112a09cad5b9a48d lib/unicore/EastAsianWidth.txt
 * 983810c739b56b9ff0fcb5db018c67d584ee515e8a5f4d9348c79ee85167ec37 lib/unicore/HangulSyllableType.txt
 * 7d514a779ee4baf91262bd83c400cb502c3e435dba4b880c876506be32b8e1d0 lib/unicore/IndicPositionalCategory.txt
 * f6acead8f84df5c72f3fb70dfc9375279926e4d8ef3480ffff3723095e9804aa lib/unicore/IndicSyllabicCategory.txt
 * c8ed526f70443535ca6b705980a08c774017ff17e921202dcb7b71ae554047b6 lib/unicore/Jamo.txt
 * 6b204c3727b77699d04a574b22b1e44facab038642095b8565b49762970d9bf8 lib/unicore/LineBreak.txt
 * f2357d2bd3526b9e830de72ab038dcfc65a2dff24bcb4c6325c92071eb341f88 lib/unicore/NameAliases.txt
 * 6c3e6bd1e58b640076a23b83318a8bf6a691d7fc2b2106114d77c5c5a898bced lib/unicore/NamedSequences.txt
 * 58dbf8fedbd5bf67a3bd5c10eda2f2acf2eae59df5f77884a6f158e98f75cf8c lib/unicore/PropList.txt
 * a6b0467c3cc7aa4e57d4e5cc7f6e9562b79cf4426dfe438517c28b368ed3e673 lib/unicore/PropValueAliases.txt
 * 9ca521224e08d30696516ae6bc3d4434659c45df16047c0d31e440783c163a3b lib/unicore/PropertyAliases.txt
 * 3fd0d744a816ddfd06809f92151ae4a73ec970ac2006806c269732d8951f3911 lib/unicore/ScriptExtensions.txt
 * d02e24e4c516e9090b6bc9c2d2c8f4c89510b6ed8c5e859d0a861b0dc5cf372d lib/unicore/Scripts.txt
 * e9947a0e86f27353f0e776403c4826675001210bd39d7114118a8864a57f7472 lib/unicore/SpecialCasing.txt
 * 52423e4d7492167b62f518f68d54db88930abbbff7f11edfcaec8f726498cab1 lib/unicore/UnicodeData.txt
 * f28caf260635cebf25fd58124bdc9aa22af08ba4d039ffc584365fb41a31cda5 lib/unicore/VerticalOrientation.txt
 * 718d174957712410bfad782b10d557e1047574d7ef1642d6bb122f8ca5662c82 lib/unicore/auxiliary/GCBTest.txt
 * 3b66caefc4fa877d0e50dbbbfa39658c86e29b26c6f206f68d7aec192d4c59b6 lib/unicore/auxiliary/GraphemeBreakProperty.txt
 * 2aad3836c37fc4c2fa2a24f21586fb3a931dacaf0a1c845a6dc6395f30bd79a7 lib/unicore/auxiliary/LBTest.txt
 * eacc03e39dddc60cc59ec9bd274b8ac8dfa25d61745ef0d5c8aa1c151a5b68ba lib/unicore/auxiliary/SBTest.txt
 * e45fa8195bb413b901cc1e3772dfea2cead86805d46a51e3480a5a256e8c24d9 lib/unicore/auxiliary/SentenceBreakProperty.txt
 * 95789f62e3b1e781dc9ed78f3983d39ff1a5e36ff0b497d6e610446df902b0f6 lib/unicore/auxiliary/WBTest.txt
 * c207e8ebd06ee591a27b1087f2971f4cd93e960103c453d85d1d9ba26fb8b202 lib/unicore/auxiliary/WordBreakProperty.txt
 * a3c0839826a30166b2bb06ba58df403547b8c3d9eae995ef889d20d115f4b223 lib/unicore/extracted/DBidiClass.txt
 * 280afe22f6c4d56566d17d6d1400f33465a979c96f3d99ff3bff9bd14d17e734 lib/unicore/extracted/DBinaryProperties.txt
 * db7fd6a5e6f068c47dbc3b74fb633fb1d09d17073410fe435295d05ce925c5f6 lib/unicore/extracted/DCombiningClass.txt
 * 8204c07a7c217bdf22525030ad7b4fb991edf463bffcca7e6dba46b9992e0d99 lib/unicore/extracted/DDecompositionType.txt
 * e343113719b660bdd81217ec101ce751f844fca0e8d6f15fb21c8ee7dfe7c14c lib/unicore/extracted/DEastAsianWidth.txt
 * 07c55b0ed7271fe1a5f4d68059291288b1a8ad61940602d18956fd87390c2d9e lib/unicore/extracted/DGeneralCategory.txt
 * d788b9362ec7681e98f8b9d6ef276546e1a6207dda05317ede55bd686b0940a9 lib/unicore/extracted/DJoinGroup.txt
 * ebbea3c93eeb7431378885aebac0490d77f6900239c9176f90b6fee030903d96 lib/unicore/extracted/DJoinType.txt
 * be0f129691d479aa38646e4ca0ec1ee576ae7f75b0300a5624a7fa862fa8abba lib/unicore/extracted/DLineBreak.txt
 * 92449d354d9f6b6f2f97a292ebb59f6344ffdeb83d120d7d23e569c43ba67cd5 lib/unicore/extracted/DNumType.txt
 * e3a319527153b0c6c0c549b40fc6f3a01a7a0dcd6620784391db25901df3b154 lib/unicore/extracted/DNumValues.txt
 * 9e34957f1d0029fcced8f007533eff821851258d44b90cbc56f834813e3c2eb9 lib/unicore/mktables
 * 21653d2744fdd071f9ef138c805393901bb9547cf3e777ebf50215a191f986ea lib/unicore/version
 * 913d2f93f3cb6cdf1664db888bf840bc4eb074eef824e082fceda24a9445e60c regen/charset_translations.pl
 * 8df9f6396c232f3e95edba4f9d3e32914e3ad9edf33e8096018bada98252ba19 regen/mk_invlists.pl
 * ex: set ro: */
