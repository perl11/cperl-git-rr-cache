=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.25.2

=head1 DESCRIPTION

This document describes the differences between the cperl 5.25.1
and the cperl 5.25.2 development releases.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here.  Summarize user-visible core language
enhancements.  Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX
    If any exist, they are bugs, and we request that you submit a
    report.  See L</Reporting Bugs> below.

[ List each incompatible change as a =head2 entry ]

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here.
There may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<XXX> has been upgraded from version A.xx to B.yy.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX Describe change here

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarizing, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.  Other
significant internal changes for future core maintainers should be noted as
well.

[ List each change as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarized here.  Bug fixes in
files in F<ext/> and F<lib/> are best summarized in L</Modules and Pragmata>.

[ List each fix as a =item entry ]

<<<<<<<
=over 4
=======
regex match group of >2GB string len.

Allow repeat count >2GB and don't silently cap it at IV_MAX. Which was
at least better then silent wrap around.

Missing optimization of inplace substitution via clen overflow.

=item *

Fixed several B<heap-buffer-overflows> detected by asan:
use-after-free in Dynaloader (ReadKey probe with -DDEBUG_LEAKING_SCALAR),
heap-overflow in gv_fetchfile (t/comp/parser.t),
heap-overflow with signatures,
heap-overflow in XSLoader,
invalid memEQc in toke.c missing out on parsing #!perl -opts,
B-C global-buffer-overflow with dynamic COW strings, wrong savepvn args.

There are still heap-use-after-free problems with perlcc and PERL_DESTRUCT_LEVEL=2.

See L<[cperl #207]|https://github.com/perl11/cperl/issues/207>

=item *

Fixed overwriting the C<HVhek_UNSHARED> bit in the hash loop broken with
v5.9.

This fixed C<-DNODEFAULT_SHAREKEYS>. In the default configuration
without NODEFAULT_SHAREKEYS since 5.003_001 all hash keys are stored
twice, once in the hash and once again in C<PL_strtab>, the global
string table, with the benefit of faster hash loops and copies. Almost
all hashtables get the SHAREKEYS bit.
With C<-Accflags=-DNODEFAULT_SHAREKEYS> simple scripts are 20-30% faster.
L<[cperl #201]|https://github.com/perl11/cperl/issues/201>

=item *

Fix HEK_TAINTED check for HEf_SVKEY values. A HEf_SVKEY hek has no
tainted flag, the pointed to SV has. This is a cperl-only security
feature.

=item *

Only clear LS_COLORS for glob

When miniperl calls csh to implement glob(), we cleared %ENV
temporarily to avoid csh dying on invalid values for things like
LS_COLORS.  That has proven to have far too many problems, since many
system-dependent env vars are necessary for calling an external
process.  See the L<[perl #126041]|https://rt.perl.org/Public/Bug/Display.html?id=126041> ticket for details.

A better solution is temporarily to clear only those vars that are
known to be problematic and make csh possibly fail.  There only hap-
pens to be one of those at present, namely LS_COLORS.

=item *

A SEGV in mess_sv during global destruction with a DEBUGGING perl and
-DS been fixed, occuring when we wanted to report the location of an
error when curcop has already been freed.

Testcase: C<./miniperl -DS -e '$_="f"; s/./"&".$&/ee'>

L<[perl #129027]|https://rt.perl.org/Public/Bug/Display.html?id=129027>

=item *

A SEGV in ck_chift with an empty/wrong current function, caused by a
syntax error has been fixed. The syntax error is now reported lateron.
Testcase: C<'qq{@{sub{q}}]]}}; s0{shift'>

L<[perl #125351]|https://rt.perl.org/Public/Bug/Display.html?id=125351>

=item *

Since Perl 5.20, line numbers have been off by one when perl is invoked with
the B<-x> switch.  This has been fixed.
L<[perl #128508]|https://rt.perl.org/Public/Bug/Display.html?id=128508>

=item *

Handle missing Unicode heredoc terminators correctly.
E.g. C<perl -CS -e 'use utf8; q«'>
prints now C<Can't find string terminator "«" anywhere before EOF at -e line 1.>

L<[perl #128701]|https://rt.perl.org/Public/Bug/Display.html?id=128701>

=item *

Mentioning a constant twice in a row does not lead to assertions
errors with DEBUGGING builds, such as e.g. C<sub ub(){0} ub ub>.

L<[perl #126482]|https://rt.perl.org/Public/Bug/Display.html?id=128701>

=item *

C< until ($x = 1) { ... } > and C< ... until $x = 1 > now properly
warn when syntax warnings are enabled.
L<[perl #127333]|https://rt.perl.org/Public/Bug/Display.html?id=127333>

=back

=head1 Known Problems

Most of these fixes still need to be backported from perl5.25.x upstream:

=over 4

=item *

F<t/op/taint.t> contained a test with signatures and 6 default
arguments, which on some 32 bit systems led to random "Reference
parameter cannot take default value at op/taint.t line 2461"
compile-time failures. This test has been rewritten to ony use 4 arguments.

See L<[cperl #164]|https://github.com/perl11/cperl/issues/164>

=item *

C<clang -flto=thin> and on some systems even C<gcc -flto> with C<-O3>
or C<-finline> leads to invisible symbols which were inlined and not
exported, even if they should be declared as public API. Work is
ongoing in the F<feature/gh186-lto-thin> branch, but there the
inlining is disabled by the C<used> attribute, leading to a
10% performance regression.  On the other hand a working
C<clang-3.9 -flto> leads to 20% performance improvements.

=item *

C<require> followed by a single colon (as in C<foo() ? require : ...> is
now parsed correctly as C<require> with implicit $_, rather than
C<require "">.
L<[perl #128307]|https://rt.perl.org/Public/Bug/Display.html?id=128307>

=item *

Code that looks for a variable name associated with an uninitialized value
could cause an assertion in cases where magic is involved, such as
C<$ISA[0][0]>.
L<[perl #128253]|https://rt.perl.org/Public/Bug/Display.html?id=128253>

=item *

In Perl 5.18, the parsing of C<"$foo::$bar"> was accidentally changed, such
that it would be treated as C<$foo."::".$bar>.  The previous behavior, which
was to parse it as C<$foo:: . $bar>, needs to be restored.
L<[perl #128478]|https://rt.perl.org/Public/Bug/Display.html?id=128478>

=item *

A crash caused by code generating the warning "Subroutine STASH::NAME
redefined" in cases such as C<sub P::f{} undef *P::; *P::f =sub{};> needs to be
fixed.  In these cases, where the STASH is missing, the warning should appear
as "Subroutine NAME redefined".
L<[perl #128257]|https://rt.perl.org/Public/Bug/Display.html?id=128257>

=item *

An assertion triggered by some code that handles deprecated behavior in
formats needs to be fixed, e.g. in cases like this:

    format STDOUT =
    @
    0"$x"

L<[perl #128255]|https://rt.perl.org/Public/Bug/Display.html?id=128255>

=item *

Some regular expression parsing glitches could lead to assertion failures with
regular expressions such as C</(?<=/> and C</(?<!/>.
L<[perl #128170]|https://rt.perl.org/Public/Bug/Display.html?id=128170>

=item *

Fixed a SEGV with C<cperl -Dsv -e'$_="q0" and s///ge'> in Perl_deb_stack_all()
L<[perl #129029]|https://rt.perl.org/Public/Bug/Display.html?id=129029>
>>>>>>>

=item *

XXX

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perlcdelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX To be generated with:

    cperl Porting/acknowledgements.pl cperl-5.25.1..HEAD


=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
