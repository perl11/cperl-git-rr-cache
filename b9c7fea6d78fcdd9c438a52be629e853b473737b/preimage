=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.27.0

=head1 DESCRIPTION

This document describes the differences between the cperl 5.26.0
and the cperl 5.27.0 releases.

If you are upgrading from an earlier release such as v5.24.2c, first
read the L<perl525*cdelta> documentation, which describes differences
between v5.25.1c and v5.26.0c

=head1 Core Enhancements

=head2 study HASH CODE ARRAY

study does not stringify hashes anymore, it rather calls the new
L<hv_study|perlapi/hv_study> function on hashes, which optimizes the
internal structure of a hash.  Currently clears all placeholders, and
optionally shrinks its size if the new size falls below a power of
two.  On code, regex and arrays it does nothing yet, but might add type
optimizations on the current dynamic status.

=head2 New strict hashpairs

Added C<use strict 'hashpairs'> to allow only pairs for hash assignments,
within a map even only an empty or single pair.
See L<[cperl #281|https://github.com/perl11/cperl/issues/281>.

=head2 Honor the BOM

With any of three supported BOMs set C<use utf8> and C<use feature
'unicode_strings'> at compile-time as documented until perl 5.26.

With 5.26 perl5 decided to change the documentation to match the
broken implementation.
With cperl 5.27.0c the implementation was fixed instead.
See L<[cperl #269]|https://github.com/perl11/cperl/issues/269>
and L<[perl #121292]|https://rt.perl.org/Public/Bug/Display.html?id=121292>.

=head2 Safer perl -c:s cmdline flag

Avoid undoable and unsafe sideeffects (io, ...) in the CHECK mode,
esp. for editor syntax checks.
See L<[cperl #263]|https://github.com/perl11/cperl/issues/263>

Essentially prepend C<-Mops=:browse,:load,print> with C<-c:s>.

=head1 Incompatible Changes

=head3 use strict hashpairs

With C<use strict> this will now fail:

  my %xsc = map { /(.*)\.xs$/ ? ("$1.c" => 1, "$1.cc" => 1) : () } @files;

Two pairs being added in a map block violates strict hashpairs.
Add the second pair in a second loop or C<no strict 'hashpairs'>.

  my %xsc = map { /(.*)\.xs$/ && ("$1.c" => 1) } @files;
  /^(.*)\.xs$/) && $xsc{"$1.cc"} = 1 for @files;

=head1 Performance Enhancements

=over 4

=item *

On hash split and shrink the rounding up to a power of 2 has been
improved by a factor of 10^8 on modern hardware. On old hardware by a
factor of 2.

<<<<<<<
=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item exact_arith 0.01
=======
=item *
>>>>>>>

<<<<<<<
Promote on overflow to bigint/num as in perl6, do not loose precision
with all builtin arithmetic operators.
L<[cperl #21]|https://github.com/perl11/cperl/issues/21>
=======
Replaced the old quadratic bsd glob with a linear glob, detected by
Russ Cox L<https://research.swtch.com/glob>.
>>>>>>>

=back

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item L<B::C>

Support pgcc, seperate it from gcc

=item L<B::Concise> 0.9991c

Support the new strict hints flags and abbrevate all strict flags as strict.

=item L<Compress::Raw::Bzip2>

Support pgcc, seperate it from gcc

=item L<Compress::Raw::Zlib>

Support pgcc, seperate it from gcc

=item L<Cpanel::JSON::XS> 3.0233

MSVC 14.0 support and higher, changed nan in the runtime.

=item L<DB_File>

Support pgcc, seperate it from gcc

=item L<Devel::PPPort> 3.35_03

Support strict hashpairs, fix for . in @INC

=item L<Encode>

no strict hashpairs in encoding

=item PathTools 4.68c

getcwd, getdcwd and abs_path have now long path support.
getdcwd (Windows only) also supports unicode paths, using
the wide API.

=item L<Pod::Checker>

no strict hashpairs

=item L<POSIX> 1.76_03

getcwd has now long path support.
Added realpath, with long path support, if the libc supports
NULL as 2nd argument.

=item L<Storable>

fix cygwin stack probing

=item L<strict> 1.12c

Added C<use strict 'hashpairs'> to allow only pairs for hash assignments,
within a map even only an empty or single pair.
See L<[cperl #281|https://github.com/perl11/cperl/issues/281>.

Also reserved C<use strict 'names'>, which is not yet implemented.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perldtrace>

=over 4

=item *

Added L<perldtrace/"What hash operations dominate"> and
L<perldtrace/"glob/gv call statistics"> sections.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Only pair in map hash assignment allowed while "strict hashpairs", got %d elements
|perldiag/"Only pair in map hash assignment allowed while "strict hashpairs", got %d elements">

L<Only pairs in hash assignment allowed while "strict hashpairs", got %d elements
|perldiag/"Only pairs in hash assignment allowed while "strict hashpairs", got %d elements">

With "strict hashpairs" in use, odd numbers of elements are forbidden
to be assigned to hashes. Within a map block only a single or empty
pair.

=back

=head3 New Warnings

=over 4

=item *

L<Odd number of map elements in hash assignment
|perldiag/"Odd number of map elements in hash assignment">

Added a new HASH private bit to the mapwhile op when a map is assigned
to a hash, to be able to warn once per map on uneven hashmap assignments. See
L<[cperl #281|https://github.com/perl11/cperl/issues/281> and L<strict> hashpairs.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

L<do "%s" failed, '.' is no longer in @INC; did you mean do "./%s"?
|perldiag/"do \"%s\" failed, '.' is no longer in @INC; did you mean do \"./%s\"?">

Was changed from "do "%s" failed, '.' is no longer in @INC".

=back

=head1 Utility Changes

=head2 L<dtrace>

=over 4

=item *

Four new dtrace probes for hash and glob. See L<perldtrace> and
L<#240|https://github.com/perl11/cperl/issues/240>.

=back

=head1 Configuration and Compilation

=over 4

=item *

Added support for the pgcc pgi compiler http://www.pgroup.com/.
pgcc is very slow though. pgcc -O2 is 40% slower than gcc-6 -O3,
pgcc -fast 30% slower.
L<#279|https://github.com/perl11/cperl/issues/279>.

=item *

d_getcwd probe and key added. Sets HAS_GETCWD

=item *

d_get_current_dir_name probe and key added. Sets HAS_GET_CURRENT_DIR_NAME

=item *

getcwdnull probe and key added. Sets HAS_GETCWDNULL

=item *

d_realpath probe and key added. Sets HAS_REALPATH

=item *

d_builtin_clz probe and key added. Sets HAS_BUILTIN_CLZ. ("Count leading zeros").
Needed later for fast hopscotch hashing.

=item *

Travis and appveyor deploy now automatically master builds, besides tags.

=back

=head1 Platform Support

=head2 New Platforms

=over 4

=item pgcc

Preliminary support for the Portland pgcc compiler (Linux, Darwin, Win32 only)
has been added.

=back

=head2 Platform-Specific Notes

Support for long paths have been added to all platforms, for C<cwd>
longer than 4096.  Many kernels have limited support for it, but
filesystems do. See L<[cperl #270]|https://github.com/perl11/cperl/issues/270>.

=over 4

=item linux

Fixed hints for pgcc.

Use for C<getcwd(NULL)> or C<get_current_dir_name()>,
which can return paths longer than 4096.

=item darwin

Fixed hints for pgcc

=item MSWin32

More mingw build improvements, but the smoker still not pass the
tests, and my local vm seems to be broken.

Fixed invalid check_type_and_open macro on mingw miniperl.

Cygwin and the MSVC versions 10,12,14 smoke now ok with 32-bit and 64-bit.

Fixed upstream mkstemp API changes.

getcwd is deprecated on Windows. use _getcwd() instead.

PathTools: Support overlong paths for getdcwd(), using the wide API for overlong paths.

=item cygwin

Fixed Storable stacksize probing.
Fixed a lot of admin-specific file-permission tests

=back

=head1 Internal Changes

=over 4

=item *

Export C<re_op_compile> needed for re engines.

=item *

Added study API functions for possible internal costly optimizations
of hv, av, cv, and rx, such as hash shrinking, regex and cv jit
compilation, and av type promotion.  For now implemented is
C<hv_study()>, the rest are stubs.

=back

=head1 Selected Bug Fixes

=over 4

=item *

The three supported unicode BOM's UTF-8, UTF-16LE and UTF-16BE set the
utf8 and unicode compile-time hints to match the documentation and
expectation.

=item *

Fixed several minor coverity issues.

=back

=head1 Acknowledgements

Perl 5.27.0 represents approximately 3 weeks of development since Perl 5.26.0c
and contains approximately 21,000 lines of changes across 180 files from 4
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 2,300 lines of changes to 81 .pm, .t, .c and .h files.

The following people are known to have contributed the improvements
that became Perl 5.26.1:

Reini Urban, Fran√ßois Perrad, Yves Orton, vendethiel.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

Generated with:

    cperl Porting/acknowledgements.pl cperl-5.26.0..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
