=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.25.3

=head1 DESCRIPTION

This document describes the differences between the cperl 5.25.2
and the cperl 5.25.3 development releases.

If you are upgrading from an earlier release such as v5.25.1c, first read
L<perl5252cdelta>, which describes differences between v5.25.1c and v5.25.2c

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

=head2 Perl can now do default collation in UTF-8 locales on platforms
that support it

Some platforms natively do a reasonable job of collating and sorting in
UTF-8 locales.  Perl now works with those.  For portability and full
control, L<Unicode::Collate> is still recommended, but now you may
not need to do anything special to get good-enough results, depending on
your application.  See
L<perllocale/Category C<LC_COLLATE>: Collation: Text Comparisons and Sorting>

=head2 Better locale collation of strings containing embedded C<NUL>
characters

In locales that have multi-level character weights, these are now
ignored at the higher priority ones.  There are still some gotchas in
some strings, though.  See
L<perllocale/Collation of strings containing embedded C<NUL> characters>.

=head2 Unescaped literal C<"{"> characters in regular expression
patterns are no longer permissible

You have to now say something like C<"\{"> or C<"[{]"> to specify to
match a LEFT CURLY BRACKET.  This will allow future extensions to the
language.  This restriction is not enforced, nor are there current plans
to enforce it, if the C<"{"> is the first character in the pattern.

These have been deprecated since v5.16, with a deprecation message
displayed starting in v5.22.

=head2 Literal control character variable names are no longer permissible

A variable name may no longer contain a literal control character under
any circumstances.  These previously were allowed in single-character
names on ASCII platforms, but have been deprecated there since Perl
v5.20.  This affects things like C<$I<\cT>>, where I<\cT> is a literal
control (such as a C<NAK> or C<NEGATIVE ACKNOWLEDGE> character) in the
source code.

=head2 C<qr//xx> is no longer permissible

Using more than one C</x> regular expression pattern modifier on a
single pattern is now forbidden.  This is to allow a future enhancement
to the language.  This usage has been deprecated since v5.22.

=head2 C<NBSP> is no longer permissible in C<\N{...}>

The name of a character may no longer contain non-breaking spaces.  It
has been deprecated to do so since Perl v5.22.

=head2 C<CORE> subroutines for hash and array functions callable via
reference

The hash and array functions in the C<CORE> namespace--C<keys>, C<each>,
C<values>, C<push>, C<pop>, C<shift>, C<unshift> and C<splice>--, can now
be called with ampersand syntax (C<&CORE::keys(\%hash>) and via reference
(C<< my $k = \&CORE::keys; $k->(\%hash) >>).  Previously they could only be
used when inlined.

=head2 Unicode 9.0 is now supported

A list of changes is at
L<http://www.unicode.org/versions/Unicode9.0.0/>.  Modules that are
shipped with core Perl but not maintained by p5p do not necessarily
support Unicode 9.0.  L<Unicode::Normalize> does work on 9.0.

Note that some changed UCD database files in 9.0 stayed renamed to their
shortened name in perl.

=head1 Security

=head2 Unicode identifiers: Moderately Restrictive Level

cperl follows the B<General Security Profile> for identifiers in
programming languages.

B<Moderately Restrictive>: Allow Latin with other Recommended or
Aspirational scripts except Cyrillic and Greek. Otherwise, the same as
L<Highly
Restrictive|http://www.unicode.org/reports/tr39/#Identifier_Characters>,
i.e. allow :Japanese, :Korean and :Hanb.

"Some characters are not in modern customary use, and thus implementations
may want to exclude them from identifiers.  These include characters in
historic and obsolete scripts, scripts used mostly liturgically, and
regional scripts used only in very small communities or with very limited
current usage.  The set of characters in Table 4, Candidate Characters for
Exclusion from Identifiers provides candidates of these."

Honors the L<TR31 Candidate Characters for Exclusion from Identifiers
|http://www.unicode.org/reports/tr31/#Table_Candidate_Characters_for_Exclusion_from_Identifiers>

I.e. You may still declare those scripts as valid, but they are not
automatically allowed, similar to the need to declare mixed scripts.

    use utf8;
    my $ᭅ = 1; # \x{1b45} BALINESE LETTER KAF SASAK

=> Invalid script Balinese in identifier ᭅ for U+1B45

    use utf8 'Balinese';
    my $ᭅ = 1; # \x{1b45} BALINESE LETTER KAF SASAK
    print "ok";

=>

     ok

The scripts listed at "Table 6, Aspirational Use Scripts":
Canadian_Aboriginal, Miao, Mongolian, Tifinagh and Yi are included,
i.e. need not to be declared.

With this restriction we are close to the implementation of the
Moderately Restrictive level for identifiers by default. See
L<http://www.unicode.org/reports/tr39/#General_Security_Profile> and
L<http://www.unicode.org/reports/tr36/#Security_Levels_and_Alerts>.

With special declarations of the used scripts you can weaken the
restriction level to B<Minimally Restrictive>.

Missing for the B<Moderately Restrictive> level are warnings on
single-, mixed and whole-script confusables, and warnings on certain
mixed-script pairs such as Greek + Cyrillic.

=head1 Incompatible Changes

=head2 for state loops still illegal

perl5.25.3 started allowing state variables in loops.
cperl still disallows them.

    perl5.25.3 -E'use feature "declared_refs","refaliasing";
                 for state \$x (\$y) { print $x }'
    => warnings: Declaring references is experimental at -e line 1.
    Aliasing via reference is experimental at -e line 1.

    cperl5.25.3 -E'use feature "declared_refs","refaliasing";
                 for state \$x (\$y) { print $x }'
    => error: Missing $ on loop variable at -e line 1.

and without declared_refs:

    perl5.25.3 -E'for state $x ($y) { print $x }'

    cperl5.25.3 -E'for state $x ($y) { print $x }'
    => error: Missing $ on loop variable at -e line 1.

=head2 C<scalar(%hash)> return value changed

The value returned for C<scalar(%hash)> will no longer show information about
the buckets allocated in the hash.  It will simply return the count of used
keys.  It is thus equivalent to C<0+keys(%hash)>.

A form of backwards compatibility is provided via C<Hash::Util::bucket_ratio()>
which provides the same behavior as C<scalar(%hash)> provided prior to Perl
5.25.

=head2 C<keys> returned from an lvalue subroutine

C<keys> returned from an lvalue subroutine can no longer be assigned
to in list context.

    sub foo : lvalue { keys(%INC) }
    (foo) = 3; # death
    sub bar : lvalue { keys(@_) }
    (bar) = 3; # also an error

This makes the lvalue sub case consistent with C<(keys %hash) = ...> and
C<(keys @_) = ...>, which are also errors.  [perl #128187]

=head1 Deprecations

=over

=item *

XXX

=back

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

=over 4

=item *

Bareword constant strings are now permitted to take part in constant
folding. They were originally exempted from constant folding in August 1999,
during the development of Perl 5.6, to ensure that C<use strict "subs">
would still apply to bareword constants. That has now been accomplished a
different way, so barewords, like other constants, now gain the performance
benefits of constant folding.

This also means that void-context warnings on constant expressions of
barewords now report the folded constant operand, rather than the operation;
this matches the behaviour for non-bareword constants.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item B-C 1.54_16

Fixes for PERL_OP_PARENT: moresib, sibling, parent.

=item Carp 1.41c

Handle chunk errors phrases

=item Opcode 1.35_01c

Add avhvswitch op

=item POSIX 1.69_01

Several defects in making its symbols exportable. [perl #127821]

The C<POSIX::tmpnam()> interface has been removed,
see L<perl5251delta/"POSIX::tmpnam() has been removed">.

Trying to import POSIX subs that have no real implementations
(like C<POSIX::atend()>) now fails at import time, instead of
waiting until runtime.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

C< until ($x = 1) { ... } > and C< ... until $x = 1 > now properly
warn when syntax warnings are enabled.
L<[perl #127333]|https://rt.perl.org/Public/Bug/Display.html?id=127333>

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

=head3 L<perlcommunity>

=over 4

=item *

All references to Usenet have been removed.

=back

=head3 L<perldelta>

=over 4

=item *

All references to Usenet have been removed.

=back

=head3 L<perllocale>

=over 4

=item *

Document NUL collation handling.

=back

=head3 L<perlmodinstall>

=over 4

=item *

<<<<<<<
All references to Usenet have been removed.
=======
XXX
>>>>>>>

=back

=head3 L<perlmodlib>

=over 4

=item *

Updated the mirror list.

=item *

All references to Usenet have been removed.

=back

=head3 L<perlnewmod>

=over 4

=item *

All references to Usenet have been removed.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

L<The experimental declared_refs feature is not enabled|perldiag/"The experimental declared_refs feature is not enabled">

(F) To declare references to variables, as in C<my \%x>, you must first enable
the feature:

    no warnings "experimental::declared_refs";
    use feature "declared_refs";

=item *

L<Version control conflict marker|perldiag/"Version control conflict marker">

=item *

L<Unescaped left brace in regex is deprecated here, passed through in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"Unescaped left brace in regex is deprecated here, passed through in regex; marked by S<<-- HERE> in m/%s/">

Unescaped left braces are already illegal in some contexts in regular
expression patterns, but, due to an oversight, no deprecation warning
was raised in other contexts where they are intended to become illegal.
This warning is now raised in these contexts.

=back

=head3 New Warnings

=over 4

=item *

L<Declaring references is experimental|perldiag/"Declaring references is experimental">

(S experimental::declared_refs) This warning is emitted if you use a reference
constructor on the right-hand side of C<my()>, C<state()>, C<our()>, or
C<local()>.  Simply suppress the warning if you want to use the feature, but
know that in doing so you are taking the risk of using an experimental feature
which may change or be removed in a future Perl version:

    no warnings "experimental::declared_refs";
    use feature "declared_refs";
    $fooref = my \$foo;

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

L<Unescaped left brace in regex is illegal here in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"Unescaped left brace in regex is illegal here in regex; marked by S<<-- HERE> in m/%s/">

The word "here" has been added to the message that was raised in
v5.25.1.  This is to indicate that there are contexts in which unescaped
left braces are not (yet) illegal.

=back

=head1 Utility Changes

=head2 F<Porting/bench.pl>

=over 4

=item *

allow per-PUT (perl under test) options and modules

Rework process_perls() to give a richer usage / API, allowing
additional command-line options, specific to each Perl-Under-Test.
For example:

    Porting/bench.pl -- perl=plain perl=slower -Mstrict -DmpMA

The above runs the same perl-exe for 2 different tests (PUTS), but
adds expensive debugging options to only the 2nd PUT.

=item *

provide per-PUT environment

    $ perl Porting/bench.pl --jobs=2 \
       --verbose --debug --tests=/loop::for::pkg_/ \
       -- \
       cperl5.25.3:+bare \
       cperl5.25.3=+full:PERL_MEM_LOG=3mst,PERLIO=:stdio -MData::Dumper

this will run:

    PERL_HASH_SEED=0 PERLIO=:stdio PERL_MEM_LOG=3mst valgrind \
      --tool=cachegrind --branch-sim=yes --cachegrind-out-file=/dev/null \
      cperl5.25.3  -MData::Dumper - 20 2>&1

Note that ':' is now a valid separator between the perl & label, but
not between ENVAR=value pairs, where a ',' is required.

=item *

store data using unique label, not perl-exe, which may be used 2x

=item *

add B<=+label> feature, which appends the label to perl-name

Using this reduces the burden of keeping each label unique,
simplifying the use of labels to name varying workloads created by
C<<< -Mfoo -M<something-heavy> >>>

This enables an invocation like the following to run -DDEBUGGING
perls-A,B in bare mode, and heavily encumbered by -Dflag induced
overhead:

     $] perl Porting/bench.pl --jobs=2 \
        --tests=/loop::for::my/ \
        -- \
        perl-A=+bare perl-A=+workload -DpsltocPmfr \
        perl-B=+bare perl-B=+workload -DpsltocPmfr

=back

=head2 L<c2ph>

=over 4

=item *

Allow other CC compilers (i.e. gcc for -gstabs). Check for clang.
Use proper DEFINE flags.

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

=over 4

=item *

A new test script, F<t/op/decl-refs.t>, has been added to test the new feature,
"Declaring a reference to a variable".

=item *

A new test script, F<t/re/anyof.t>, has been added to test that the ANYOF nodes
generated by bracketed character classes are as expected.

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item VAX

VAX floating point formats are now supported.

=item darwin

Fixed setting C<MACOSX_DEPLOYMENT_TARGET=10.3> for OS X 10.3.x - 10.5.x.
This is irrelevant for cperl since cperl uses ldflags and cflags
C<-mmacosx-version-min=10.x>

=back

=head1 Internal Changes

=over 4

=item *

Perl no longer panics when switching into some locales on machines with
buggy C<strxfrm()> implementations in their libc.
L<[perl #121734]|https://rt.perl.org/Public/Bug/Display.html?id=121734>

=back

=head1 Selected Bug Fixes

=over 4

=item *

Non-ASCII string delimiters are now reported correctly in error messages
for unterminated strings.
L<[perl #128701]|https://rt.perl.org/Public/Bug/Display.html?id=128701>

=item *

Scalar C<keys %hash> can now be assigned to consistently in all scalar
lvalue contexts.  Previously it worked for some contexts but not others.

=item *

C< ${\vec %h, 0, 1} > and C< ${\substr %h, 0} > do not segfault anymore, rather
the lvalue context is propagated, and list context properly handled.
L<[perl #128260]|https://rt.perl.org/Public/Bug/Display.html?id=128260>

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX Generate this with:

    cperl Porting/acknowledgements.pl cperl-5.25.2..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
