=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.24.1

=head1 DESCRIPTION

This document describes perl-only differences between the cperl 5.24.0
release and the cperl 5.24.1 release.

If you are upgrading from an earlier release such as 5.22.3, first read
L<perl5240cdelta>, which describes differences between 5.22.3 and 5.24.0.

=head1 Notice

perl5.24.1 was security update to non-existing problem. cperl added
PERLIO_DEBUG as optional handle to redirect DEBUGGING outout via -Dx
switches to. This is only usable with DEBUGGING perls, which are not
used in production, only during development.
perl5.24.1 changed PERLIO_DEBUG to only be active for PerlIO debugging
together with -Di.

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

=head2 Protect and warn on hash flood DoS

If the collisions for a hash key lookup exceeds 128 tries (i.e. a
linear search in a linked list), this qualifies as a malicious hash
DoS (I<Denial of Service>) attack. Generally maximal 8 collisions
appear in normal hash table usage. Every 8th such hash flood attack
performs a C<sleep(2)> to limit the impact.

This security scheme is much easier and faster than trying to hide the
random hash seed with randomized iterators and collisions lists, which
cperl doesn't use.

=head2 Warn on metasploit CVE-2015-1592

Detection of the destructive attack against Movable-Type, the third
vector only, which tries to delete F<mt-config.cgi> was added to was
added to L<Storable> 3.01c.

Warns with "SECURITY: Movable-Type CVE-2015-1592 Storable metasploit attack"
but does not protect against it.

=head2 Warn on metasploit reverse shells

Detect the metasploit payload unix/reverse_perl and some existing
variants.  This is just a dumb match at startup against existing
exploits in the wild, but not future variants.  Warns with
"SECURITY: metasploit reverse/bind shell payload", but do not
protect against it. This warning is thrown even without C<-w>.

Also detects the CVE-2012-1823 reverse/bind shell payload, which is
widely exploited too. The security warning is called
"SECURITY: CVE-2012-1823 reverse/bind shell payload".

=head1 Performance Enhancements

=over 4

=item *

Out-of-bounds check elimination in loops has been fixed for lexical
counters.  E.g. with C<my @a=(0..4); for my $i (0..$#a) { $a[$i] }> each
access to C<$a[$i]> in the loop is now really converted to the
unchecked faster B<aelem_u> op.

Note that multideref ops are not yet converted to omit out-of-bounds
checks. This is only implemented since cperl-5.25 (released with
5.26.0c), since it needs to widen the internal mderef structure.

=item *

Renable C<-DNODEFAULT_SHAREKEYS> from perl 5.003_001. Between
5.003_001 and 5.25.1c all hash keys were stored twice, once in the
hash and once again in C<PL_strtab>, the global string table, without
any further benefit. Almost all hashtables got the SHAREKEYS bit. (#201)

Fixed overwriting the HVhek_UNSHARED bit in the hash loop broken with
v5.9.

10-30% faster.

=item *

aassign: pre-allocate needed hash size with aassign, similar to
arrays, avoiding run-time hash splits.
e.g. C<my %h = (.. => .., .. => ..)>

This version is 30% faster overall in the Mail::SpamAssassin testsuite
than cperl-5.24.0.

=item *

Pre-extend internal hashes and stashes to avoid unnecessary boot-time hash
splits. C<%warnings::>, C<%Config::>, C<%utf8::>, C<%version::>.

=item *

The new C<strEQc>/C<strNEc> macros are used instead of
C<strEQ(s,"constant")>. This enables word-wise comparison via memcpy,
in opposite of byte-wise comparisons via strcmp with already known
sizes. This is a 10% performance improvement under most optimization
levels.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 Updated Modules and Pragmata

=over 4

=item B  1.62_05

Allow a 2nd optional CV argument for B::OP::aux_list,
fixing B::Deparse and thereby Data::Dumper and Test2 is_deeply.

=item Storable  3.01c

L</"Warn on metasploit CVE-2015-1592">

=item Config  6.22

one more darwin fix for the wrong no library found warning
for symlinked darwin libSystem.dylib libraries.

=item YAML::XS  0.73

merged with upstream libyaml 0.1.7
avoid duplicate checks against NULL
fix libyaml clang -Wlogical-op warnings
fix libyaml clang -Wlogical-not-parentheses warnings

=item List::Util  1.45_06

sum/min/max need to call SvGETMAGIC

=item Sub::Util  1.45_06

set_subname memory fix by @bluhm from Sub::Name 0.20
[cpan #117072]

Fixes for older perls, esp. lexical $_ support.

Reinstate the &DB::sub setter, but no UTF8 support yet.

=item Config  6.22

protect sv in END during global destruction, esp. with B::C.
fixes for missing . in @INC (cperl or -Dfortify_inc).

=item YAML::LibYAML  0.71

merged with new upstream libyaml 0.1.7 (2 minor fixes)

=item Time::HiRes  1.9739

More Darwin thread fixes for clock_gettime,
Sierra support,
test improvements.

=item Socket  2.024_02

Merge cpan 2.024 with our 2.021_02,
plus fix some problems in their new code.

=item DynaLoader  2.05c

no mathoms: call_sv instead of call_pv, get_cvs where available.

=item B-C 1.54_13

Better CopFILE_set,
Fixup arenasize refcnt.
Delay cvref to init2, properly set a SvRV to a XS sub.
Optimize constpv for CvFILE (less constants to merge for gcc).
Improve NV precision by one digit.
Fix to compile in utf8_heavy.pl, abstract and set %INC.
Fix generation of @B::C::Config::deps on Windows.
Fix !C99 precedence bug (e.g. MSVC).
Minor refactor to simplify save_hek.
Use the new get_svs, get_avs, get_hvs macros.
perlcc add --debug|-D
Improve endav XSUB bump
Abstract RITER_T and HVMAX_T for the various sizes, compat HEK_STATIC
Defer REGCOMP for \P{} properties
Change $sv->EXTFLAGS to compflags since 5.22 for CALLREGCOMP().
Turn off MGf_REFCOUNTED.
global-buffer-overflow with dynamic COW strings, wrong savepvn args.

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

The L<Too many elements|perldiag/"Too many elements"> error is now
triggered when accessing or extending an out of bounds array index or
trying to insert too many hash keys. This is to prevent from silent
hash or array overflows. Previously extending a hash beyond it's
capable size was silently ignored, leading to performance degradation
with overly high fill factors and extending an array failed only on
memory exhaustion, but the signed index led to an index overflow
between I32 and U32, resp.  I64 and U64.

Even worse, accessing overflown unsigned array indices would silently
access the signed counterpart, indices at the end.

Note that the out of bound error message with shaped arrays is different.

=back

=head3 New Warnings

=over 4

=item *

The new warning "SECURITY: Hash flood" was added.
See L</"Protect and warn on hash flood DoS">.

=item *

The new C<security> warnings "metasploit reverse/bind shell payload"
and "CVE-2012-1823 reverse/bind shell payload" were added, detecting
the existing metasploit/libxploit and phpcgi CVE-2012-1823 reverse and
bind shells.  See L</"Warn on metasploit reverse shells">

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<cperlbug> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarizing, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.  Other
significant internal changes for future core maintainers should be noted as
well.

=over 4

=item *

Increasing the hash size to values larger then U32_MAX are now silently ignored.
This only affects 64-bit platforms. Normally a hash split to an overlarge value
should die, but historically it silently ignored the split, it just increases the
fill rate and decreases performance.

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarized here.  Bug fixes in
files in F<ext/> and F<lib/> are best summarized in L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

Array and hash index overflow are now properly detected and throw an
"Too many elements" error.

E.g. on 32bit C<$ary[2147483648]> will lead to a compile-time error,
C<$i=2147483648; $ary[$i]> to a run-time error. Before 5.24c or with perl5
those two would silently overflow to C<-1>, i.e. accessing the last element.

When inserting more than U32, i.e. 4294967295 hash elements, the same
error is now thrown. Before 5.24c or with perl5 the element would have
been inserted, with 32bit the hash table would not have been extended
and the load factor would increase, the collisions and performance
would decrease.  On 64bit the hash table would have beed increased,
but the elements would collide on the last element, leading to the
same problems, just more dramatic.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.22.1..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
