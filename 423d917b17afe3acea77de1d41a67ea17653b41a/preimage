#!/usr/bin/perl -w

# A tool to build a perl release tarball
# Very basic but functional - if you're on a unix system.
#
# If you're on Win32 then it should still work, but various Unix command-line
# tools will need to be available somewhere. An obvious choice is to install
# Cygwin and ensure its 'bin' folder is on the PATH in the shell where you run
# this script. The Cygwin 'bin' folder needs to precede the Windows 'system32'
# folder so that Cygwin's 'find' command is found in preference to the Windows
# 'find' command. In addition to the commands installed by default, your Cygwin
# installation will need to contain at least the 'cpio' and '7z' commands.
# Finally, ensure that the 'awk', 'shasum' (if you have it) and '7z' commands
# are copies of 'gawk.exe', 'sha1sum.exe' and 'lib\p7zip\7z.exe' respectively,
# rather than the links to them that only work in a Cygwin bash shell which
# they are by default.
#
# No matter how automated this gets, you'll always need to read
# and re-read pumpkin.pod and release_managers_guide.pod to
# check for things to be done at various stages of the process.
#
# Tim Bunce, June 1997

use ExtUtils::Manifest qw(fullcheck);
$ExtUtils::Manifest::Quiet = 1;
use Getopt::Std;

$|=1;

sub usage { die <<EOF; }
usage: $0 [ -r rootdir ] [-s suffix ] [ -n ]
    -r rootdir   directory under which to create the build dir and tarball
                 defaults to '..'
    -s suffix    suffix to append to to the perl-x.y.z dir and tarball name
		 defaults to the concatenation of the local_patches entry
		 in patchlevel.h (or blank, if none)
    -x           make a .xz file in addition to a .gz file
    -n           do not make any tarballs, just the directory
EOF

my %opts;
getopts('xnr:s:', \%opts) or usage;
@ARGV && usage;

$relroot = defined $opts{r} ? $opts{r} : "..";

die "Must be in root of the perl source tree.\n"
	unless -f "./MANIFEST" and -f "patchlevel.h";

open PATCHLEVEL, '<', 'patchlevel.h' or die;
my @patchlevel_h = <PATCHLEVEL>;
close PATCHLEVEL;
my $patchlevel_h = join "", grep { /^#\s*define/ } @patchlevel_h;
print $patchlevel_h;
$revision = $1 if $patchlevel_h =~ /PERL_REVISION\s+(\d+)/;
$patchlevel = $1 if $patchlevel_h =~ /PERL_VERSION\s+(\d+)/;
$subversion = $1 if $patchlevel_h =~ /PERL_SUBVERSION\s+(\d+)/;
die "Unable to parse patchlevel.h" unless $subversion >= 0;
$vers = sprintf("%d.%d.%d", $revision, $patchlevel, $subversion);

# fetch list of local patches
my (@local_patches, @lpatch_tags, $lpatch_tags);
@local_patches = grep { !/^\s*,?NULL/ && ! /,"uncommitted-changes"/ }
                 grep { /^static.*local_patches/../^};/ }
                 @patchlevel_h;
@lpatch_tags   = map  {  /^\s*,"(\w+)/ } @local_patches;
$lpatch_tags   = join "-", @lpatch_tags;
my $usecperl   = -f "pod/perlcperl.pod";

$perl = $usecperl ? "cperl-$vers" : "perl-$vers";
$reldir = "$perl";

$lpatch_tags = $opts{s} if defined $opts{s};
$reldir .= "-$lpatch_tags" if $lpatch_tags;

print "\nMaking a release for $perl in $relroot/$reldir\n\n";

print "Cross-checking the MANIFEST...\n";
($missfile, $missentry) = fullcheck();
@$missentry
    = grep {$_ !~ m!^\.git/! and $_ !~ m!(?:/|^)\.git(ignore|modules)!} @$missentry;
if (@$missfile ) {
    warn "Can't make a release with MANIFEST files missing:\n";
    warn "\t".$_."\n" for (@$missfile);
}
if (@$missentry ) {
    warn "Can't make a release with files not listed in MANIFEST\n";
    warn "\t".$_."\n" for (@$missentry);
}
if ("@$missentry" =~ m/\.orig\b/) {
    # Handy listing of find command and .orig files from patching work.
    # I tend to run 'xargs rm' and copy and paste the file list.
    my $cmd = "find . -name '*.orig' -print";
    print "$cmd\n";
    system($cmd);
}
die "Aborted.\n" if @$missentry or @$missfile;
print "\n";

# VMS no longer has hardcoded version numbers descrip.mms

print "Creating $relroot/$reldir release directory...\n";
die "$relroot/$reldir release directory already exists\n"   if -e "$relroot/$reldir";
die "$relroot/$reldir.tar.gz release file already exists\n" if -e "$relroot/$reldir.tar.gz";
mkdir("$relroot/$reldir", 0755) or die "mkdir $relroot/$reldir: $!\n";
print "\n";


print "Copying files to release directory...\n";
# ExtUtils::Manifest maniread does not preserve the order
$cmd = "awk '{print \$1}' MANIFEST | cpio -pdm $relroot/$reldir";
system($cmd) == 0
    or die "$cmd failed";
print "\n";

chdir "$relroot/$reldir" or die $!;

# TODO: for rpm/deb uninstall safety
#touch $prefix/lib/cperl/site_cperl/$ver/.empty
#for d in `find $destdir -type d -empty`; do touch "$d"/.empty; done

# TODO: reproducible builds: honor cf_time, no file later than this
#builddate=`perl -ne'/^cf_time=.(.*).$/ and print $1' $dir/../config.sh`
#find $destdir -depth -newermt "$builddate" -print0 | \
#    xargs -0r touch --no-dereference --date="$builddate"
#tar=cperl-$ver-$rev-$arch.tar.xz
#if [ -f $tar ]; then
#    mv -f $tar $tar~
#fi

print "Setting file permissions...\n";
system("find . -type f -print     | xargs chmod 0444");
system("find . -type d -print     | xargs chmod 0755");
my @exe = map   { my ($f) = split; glob($f) }
          grep  { $_ !~ /\A#/ && $_ !~ /\A\s*\z/ }
          map   { split "\n" }
          do    { local (@ARGV, $/) = 'Porting/exec-bit.txt'; <> };

system("chmod +x @exe") == 0
    or die "system: $!";

my @writables = qw(
    NetWare/config_H.wc
    NetWare/Makefile
    feature.h
    lib/feature.pm
    keywords.h
    keywords.c
    opcode.h
    opnames.h
    pp_proto.h
    proto.h
    embed.h
    embedvar.h
    overload.inc
    overload.h
    mg_vtable.h
    perlapi.h
    perlapi.c
    dist/Devel-PPPort/module2.c
    dist/Devel-PPPort/module3.c
    cpan/autodie/t/touch_me
    ext/Config/Makefile.PL
    ext/Config/Config_xs.in
    ext/Config/Config_xs.out
    reentr.c
    reentr.h
    regcharclass.h
    regnodes.h
    warnings.h
    lib/warnings.pm
    win32/GNUmakefile
    win32/Makefile
    win32/Makefile.ce
    win32/makefile.mk
    win32/config_H.ce
    win32/config_H.gc
    win32/config_H.vc
    uconfig.h
);

my $out = `chmod u+w @writables 2>&1`;
if ($? != 0) {
    warn $out;
    if ($out =~ /no such file/i) {
        warn "Check that the files above still exist in the Perl core.\n";
        warn "If not, remove them from \@writables in Porting/makerel\n";
    }
    exit 1;
}

warn $out if $out;

chdir ".." or die $!;

exit if $opts{n};

my $src = (-e $perl) ? $perl : 'perl'; # 'perl' in maint branch

print "Checking if you have 7z...\n";
my $output_7z = `7z 2>&1`;
my $have_7z = defined $output_7z && $output_7z =~ /7-Zip/;
my ($cmd7z, $have_pigz);

if (!$have_7z) {
  print "Checking if you have pigz...\n";
  my $output_pz = `pigz --help 2>&1`;
  $have_pigz = defined $output_pz && $output_pz =~ /Usage: pigz/;
} else {
  # 4 threads
  $cmd7z = '7z a -mx9 -bd -si -mmt4 ';
}

print "Checking if you have advdef...\n";
my $output_advdef = `advdef --version 2>&1`;
my $have_advdef = defined $output_advdef && $output_advdef =~ /advancecomp/;

if ($have_7z) {
    print "Creating and compressing the tar.gz file with 7z...\n";
    $cmd = "tar cf - $reldir | $cmd7z -tgzip $reldir.tar.gz";
    system($cmd) == 0 or die "$cmd failed";
} elsif ($have_pigz) {
    print "Creating and compressing the tar.gz file with pigz...\n";
    $cmd = "tar cf - $reldir | pigz -9 -- $reldir.tar.gz";
    system($cmd) == 0 or die "$cmd failed";
} else {
    print "Creating and compressing the tar.gz file...\n";
    $cmd = "tar cf - $reldir | gzip --best > $reldir.tar.gz";
    system($cmd) == 0 or die "$cmd failed";
    if ($have_advdef) {
        print "Recompressing the tar.gz file with advdef...\n";
        $cmd = "advdef -z -4 $reldir.tar.gz";
        system($cmd) == 0 or die "$cmd failed";
    }
}

if ($opts{x}) {
<<<<<<<
    print "Creating and compressing the tar.xz file with xz...\n";
    # -T0 use as many threads as there are processor cores
    $cmd = "tar cf - $reldir | xz -T0 -z -c > $reldir.tar.xz";
=======
    print "Creating and compressing the tar.xz file with xz...\n";
    $cmd = "tar cf - $reldir | xz -z -c > $reldir.tar.xz";
>>>>>>>
    system($cmd) == 0 or die "$cmd failed";
}

print "\n";

system("ls -ld $perl*");
print "\n";

# TODO: use the official signing key
system("gpg -a -b $reldir.tar.gz");
if ($opts{x}) {
  system("gpg -a -b $reldir.tar.xz");
}

my $null = $^O eq 'MSWin32' ? 'NUL' : '/dev/null';
for my $sha (qw(sha256sum sha1 shasum sha1sum)) {
    if (`which $sha 2>$null`) {
	system("$sha $reldir.tar.*");
	last;
    }
}
