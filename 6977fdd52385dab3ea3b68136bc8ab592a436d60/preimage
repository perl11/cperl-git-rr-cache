=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.27.2

=head1 DESCRIPTION

This document describes the differences between the cperl 5.27.1
and the cperl 5.27.2 releases.

If you are upgrading from an earlier release such as v5.24.2c, first
read the L<perl526*cdelta> documentation, which describes differences
between v5.26.0c and v5.26.2c

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here.  Summarize user-visible core language
enhancements.  Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX
    If any exist, they are bugs, and we request that you submit a
    report.  See L</Reporting Bugs> below.

[ List each incompatible change as a =head2 entry ]

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here.
There may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

<<<<<<<
=item L<XXX> VERSION
=======
=item L<attributes> 1.12c

Fixed :const parsing with SVs (cperl-only). Previously :const would set
the containing sub to :const, now it sets the lexical to readonly,
with deferring the attributes::import call after an assignment.

    my %h :const = (a => 1);
=>
    assign %h = (...);
    attributes->import(PACKAGE, \%h, const);

See L<[cperl #294]|https://github.com/perl11/cperl/issues/294>.

=item L<B> 1.68_08

Support the new core attributes :native, :native($libname),
:symbol($c_name), :nativeconv(abi), :encoded(encoding) I<(NYI)>.

Add non-destructive $cv->PUREGV method, which does not create a GV
from a CvNAMED $cv.
Warning: $cv->GV does create a GV from a CvNAMED $cv.

Internal Refactor: thread API

Add many missing methods and docs. Some from B::C.

=item L<B::C> 1.55_04

Protect from destructive $cv->GV, renamed is_lexsub to is_named,
allow @0, &0, ... types.

=item L<B::Debug> 1.25

Deprecated from CORE, will not be in 5.30 anymore.
Avoid destructive CvNAMED vivification to GVs.
Add cperl features.

=item L<base> 2.26c

Turn off HvCLASS again, just turn on SvREADONLY C<@ISA>.
With all the new class features, we cannot and should not compete.

The problem is the new sub as :method warning with classes, which
would cause all Test::Simple methods to be declared as :method, as they
derive from base.

=item L<Cpanel::JSON::XS> 3.0237

Stringify true again as "1".
Disallow duplicate keys by default, only allow them in relaxed mode.
De-fragilize t/96_mojo.t false test to "". It mostly is.
Fix and unify utf8 handling with 5.6.2 and improve many utf8 tests.
Add tests for boolean sv_yes and sv_no.
Check for correct module in %INC.
Relax inf/nan detection for newer msvcrt.dll runtime versions
(it's now almost ANSI).

=item L<Devel::Peek> 1.26_02

Add TYPECHECKED, RETTYPE and pad var names and types.

=item L<Devel::PPPort> 3.36_02

Restore silence under C<make -s>. I broke it in cperl 5.27.0

Add C<#if { CPERL && VERSION > 5.26.0 }> support,
support parser enum expectation.

=item L<deprecate>  0.03_01

Add pod synopsis for modules for older perls.

=item L<Encode> 2.92

Skip the flapping test F<t/Aliases.t> on threaded smokers, with random
segfaults.  This is a long standing core bug, with PMOP aliases or
clone. First observed at L<https://github.com/rurban/perl-compiler/issues/73>
(since 5.6)

Stop directory tweaking $Encode::Encoding{utf8}

Fix gcc warnings for older gcc < 4.0

Where possible do not depend on value of $@, instead use return value
of eval

Fix more XS problems in Encode.xs file

Load modules Encode::MIME::Name and Storable normally

Remove no warnings 'redefine'; and correctly loaddependences

Remove PP stubs and reformat predefine_encodings()

Run Encode XS BOOT code at compile time

Use Encode::define_encoding and propagate carp/croak message

cperl fixes: encoding undeprecated, no strict hashpairs

Cleanup code for handling fallback/replacement characters

=item L<ExtUtils::CBuilder> 0.280226

Fix C++ compiler detection (RT #131749)

=item L<ExtUtils::Install> 2.14

- Fix tests for when perl path contains a space

- Fix win32 check

- 'make -s' support: set $INSTALL_QUIET automatically

- Optimisations:

  * use our instead of vars
  * lazy load modules
  * make OS variables into constants
  * move some calculations out of a loop

- Removed instructions using Build.PL from README

- Load Win32API::File for _move_file_at_boot only when needed

- Allow disabling autosplit by omitting autosplit dir

=item L<ExtUtils::MakeMaker> 8.30_04

Merge our fixes to upstream 7.30 (which has e.g. the dlltool mingw
fixes). Many fixes were already in, but some new upstream bugs crept
in.

Support IO::Scalar handle as $parsefile argument to
ExtUtils::MM_Unix::parse_version().

fix Invalid Locale symbol name. Invalid identifier "ENCODING_UTF-8"
while "strict names"

fix XSMULTI static with strict linkers, avoid duplicate symbol
_boot_XS__Test in: Test.o blib/arch/auto/XS/Test/Test.a(Test.o)

xsstatic: fixup MAKE_APERL_FILE, which was Makefile.aperl.aperl

=item L<ExtUtils::ParseXS> 3.35_02

Moved xs pods still missing from the CPAN release completely to core.

Bump versions.

=item L<fields> 2.25c

A cperl class has now fields with C<@class::FIELDS> targ offsets to
the lexical fields, and the old C<%type::FIELDS> hash pointing to the
C<*class> GV, allowing again compile-time type checks on typed object
hash accesses.

=item L<File::Path> 3.15_01c

Remove erroneous documentation.
Correct skip count for Windows.
Comment out two TODO tests.
Make subdirectory names used in tests more random.

=item L<File::Spec::Functions> 3.36_05

Bumped version from unparsable 3.3.65, which prevented e.g.
File::chdir to install.

=item L<Filter::Simple> 0.94

Various small documentation fixes.
Swap out base.pm use for parent.pm.
Remove use of deprecated \C regex feature.
Filter::Simple was erroneously signalling eof if it encountered a
‘no MyFilter’ right after ‘use’:
      use MyFilter;
      no MyFilter;
In this case it should simply not filter anything.

=item L<Getopt::Long> 2.50

Fix bug L<https://rt.cpan.org/Ticket/Display.html?id=120231>.

Fix bug L<https://rt.cpan.org/Ticket/Display.html?id=120300>.
Unfortunately, this withdraws a small part of fix 114999.  GNU
C<getopt_long()> does not accept the (optional) argument to be passed
to the option without C<=> sign.  We do, since not doing so breaks
existing scripts.

Provide a default value for options (B<gnu_compat> mode).
Thanks to Andrew Gregory.

=item L<IO>

Bump versions of 3 Socket modules.

=item L<IPC::Cmd> 0.98

Added wait_loop_callback for run_forked()

Only search in curdir in can_run() when on Win32 RT#105601

=item L<JSON::PP> 2.94_01

Various, see L<https://metacpan.org/changes/distribution/JSON-PP>

=item L<Locale::Codes> 3.53

Fixed the default error condition in legacy modules.

=item L<Math::BigRat> 0.2613

Fix problem with second operand being changed in multiplication (CPAN
RT #121139).

=item L<Memoize> 1.03

Skip flapping, timer-sensitive t/expmod_t.t tests
on Travis CI.

=item L<Net::Ping> 2.61

Fix ping_udp for a started udp echo server (PR#5 by Stephan Loyd)

Fix t/400_ping_syn.t phases

Try to handle Windows Socket::getnameinfo errors

Improve some tests on missing network connections

=item L<Opcode> 1.39_02c

Added new 'oelem' and 'oelemfast' to :base_core
Restrict the new op 'enterffi'.

=item L<PathTools> 4.68c

Add security usage note to File::Spec::no_upwards
white space change so can compile under C++11
Protect modules also from . in @INC [perl #127384] (CVE-2016-1238)

=item L<Search::Dict> 1.07_01

Bump version

=item L<SelectSaver> 1.02_01

Bump version

=item L<Storable> 3.05_13

mingw fix: use safe defaults, not segfaulting defaults.
mingw fails on the stacksize binary search, leaving it empty.

=item L<strict> 1.13c
>>>>>>>

XXX

=back

=head2 Removed Modules and Pragmata

=over 4

=item L<XXX>

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX Describe change here

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<cperlbug> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

Detect shared-only import libraries like F<libNAME.dll.a>, which have no static
counterpart F<libNAME.a>, which happens e.g. for C<libffi> on B<cygwin> or msys.

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarizing, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.  Other
significant internal changes for future core maintainers should be noted as
well.

[ List each change as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarized here.  Bug fixes in
files in F<ext/> and F<lib/> are best summarized in L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX Generate this with:

    cperl Porting/acknowledgements.pl cperl-5.27.1..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
