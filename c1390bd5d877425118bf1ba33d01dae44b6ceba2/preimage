=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.27.3

=head1 DESCRIPTION

This document describes differences between the cperl 5.27.2 and the cperl
5.27.3 release.

If you are upgrading from an earlier release such as v5.27.1c, first read
L<perl5272cdelta>, which describes differences between v5.27.1c and v5.27.2c.

<<<<<<<
=head1 Core Enhancements

=head2 extern sub - libffi

A new L<ffi> was added to core, with a syntax resembling perl6
NativeCall.  Perl6 traits are cperl L<attributes>, but attribute
values may be deferred to run-time. Packagers need to add B<libffi> to
their library dependencies. Windows packages are provided.

Not yet implemented are the C<:encoded()> attribute for string arguments
and return values, c-struct helpers, callback helpers and support for
variadic (varargs) functions.

=head2 Optimize static methods to subs

When a method call can be proven at compile-time to use a specific
subroutine, optimize away the run-time method dispatch on a non-threaded perl.
When it is for a XS subroutine, such as with e.g. C<use strict;> which does
C<< BEGIN {require strict;} strict->import; >> the C<< strict->import >>
part is optimized from the slow C<entersub> op to the C<enterxssub> op,
as if via C<strict::import("strict",...)>.
The slow GV lookup in entersub cannot be converted to a faster CVref lookup,
as this would break dynamic method redefinitions.
See L<http://blogs.perl.org/users/rurban/2011/06/how-perl-calls-subs-and-methods.html>.
This is ~4% faster for each such method call.
cperl-only.

=head2 Dump more COP fields

Dump the values of a COP C<$^H>, C<%^H> and the lexical warnings via
C<op_dump()> and it's XS module L<Devel::Peek>.
Improve the display of cop SEQ values and ranges, and padnames.
Added a DEBUGGING C<cop_dump()> helper, esp. useful for deleted C<PL_curcop>'s.
cperl-only.

=head2 More unicode ops

Added the strong unicode fraction op C</> U+2044, which binds stronger
than all other arithmetic ops, and the two unicode multiplication ops
C<⋅> U+022C5 (dot operator) and C<∙> U+2219 (multiplication dot),
which binds the same as C<*>.
cperl-only.

=head2 L<delete|perlfunc/delete EXPR> on key/value slices

L<delete|perlfunc/delete EXPR> can now be used on key/value slices,
returning the keys along with the deleted values.
L<[perl #131328]|https://rt.perl.org/Ticket/Display.html?id=131328>

=head2 Unicode 10.0 is supported

A list of changes is at
L<http://www.unicode.org/versions/Unicode10.0.0>.

=head2 Re-enable warnings illegalproto

Parse prototypes for errors again. Either with C<:prototype()> or as
signature.  Illegal prototypes are not stored. Most illegal protos are
subsequently parsed as signature, but some are just wrong protos, such
as C<'[$'> missing the C<']'>, or C<:prototype($_$)>.

=head2 In-place editing is now safer

Previously in-place editing would delete or rename the input file
as soon as you started working on a new file.

Without backups this would result in loss of data if there was an
error, such as a full disk, when writing to the output file.
=======
=head1 Notice
>>>>>>>

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here.  Summarize user-visible core language
enhancements.  Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head2 Disallow illegal glob with embedded NUL

E.g. C<< <$fh\000> >> throws now the safe syscalls warning, and errors
with C<Glob not terminated>, and does not pass the illegal glob path
to the internal or external glob.

This problem was added with v5.27.5 by replacing strchr with memchr,
allowing such illegal strings.
See L<[cperl #342]|https://github.com/perl11/cperl/issues/342>

=head1 Incompatible Changes

=head2 Illegal NUL, syntax error

Embedded NUL bytes read from files, not used in filters, are not
whitespace anymore, they are syntax errors.

See L<[cperl #345]|https://github.com/perl11/cperl/issues/345> vs
L<[perl #105920]|https://rt.perl.org/Public/Bug/Display.html?id=105920>.

Parsing NUL bytes is now consistent from files with eval string.
C<\0> delimited C<q> quote is still valid though.

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here.
There may well be none in a stable release.

[ List each enhancement as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

The list of new and updated modules is modified automatically as part of
preparing a Perl release, so the only reason to manually add entries here is if
you're summarising the important changes in the module update. (Also, if the
manually-added details don't match the automatically-generated ones, the
release manager will have to investigate the situation carefully.)

[ Within each section, list entries as an =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

<<<<<<<
=======
=head1 Modules and Pragmata

=head2 Removal of use vars

The usage of C<use vars> has been discouraged since the introduction of C<our> in
Perl 5.6.0. Where possible the usage of this pragma has now been removed from
the Perl source code.

This had a slight effect (for the better) on the output of
C<WARNING_BITS> in L<B::Deparse>.

Several core modules released on CPAN will not work anymore with perl
versions prior to 5.6.

=head2 New Modules and Pragmata

=over 4

=item L<ffi> 0.01c

Helpers and more types.

=back

>>>>>>>
=head2 Updated Modules and Pragmata

=over 4

=item L<attributes> 1.14c

Add ffi support, :native(), :encoded(), :nativeconv(), :symbol().

=item L<B> 1.71_09

Add ffi support: CvXFFI, CvFFLIB. CVf_EXTERN flag

<<<<<<<
=item L<B::C> 1.55_06

Support POK/PVLV REGEXP for v5.27.3/v5.27.2c
VOL => volatile for  v5.27.6/v5.27.2c

=item L<B::Concise> 1.002c

Support PL_sv_zero

=item L<B::Deparse> 1.45_05c

Support boolean optims.
Better constant-dumping heuristics.

Add ffi support.
Support the new core attributes :native, :native($libname), :symbol($c_name),
:nativeconv(abi), :encoded(encoding) I<(NYI)>.

=item L<B::Terse> 1.09_01

Remove internal links to B::Debug

=item L<B::Xref> 1.07_01

Support sub refs

=item C<Carp> 1.44c

Fix problems introduced by the partial EBCDIC support from version
1.35, and ISA constants. Not all stash elements are globs.

=item C<charnames> 1.45

Remove obsolete pod about NBSP

=item L<Compress::Raw::Zlib> 2.076

Silence gcc compiler warnings when -Wsign-compare is enabled
#123688: Compilation warnings with clang

Silence gcc compiler warnings when -Wimplicit-fallthrough is enabled
#123358: Compilation warnings with gcc-7.*

Windows uses -lzlib. Linux uses -lz
#123699: wrong external zlib name used on Windows

Update zlib-src directory to use zlib 1.2.11
#123245: perl 5.26.1 is vulnerable to CVE-2016-9843, CVE-2016-9841, CVE-2016-9840, CVE-2016-9842

Don't allow offset to be greater than length of buffer in crc32.

Change my_zcalloc to use safecalloc.
The link, https://github.com/madler/zlib/issues/253, is the upstream report for the remaining 
valgrind errors not already dealt with by 1.2.11. Using calloc in Zlib.xs for now as a workaround.
#121074: valgrind errors in the test suite

=item L<Config::Perl::V> 0.29_01

    * Add test for 5.26.1-RC1, and some cperl -V's
    * Fix signature with argument
    * Ignore ccache and compiler path in signature

    * Add default_inc_excludes_dot

=item C<constant> 1.34
=======
=item L<Devel::PPPort> 3.36_04
>>>>>>>

mkppport called PPPort_pm.PL without
passing through MAKEFLAGS. Add --quiet support there

=item L<I18N::LangTags>  0.42_01

Linkify docs.

=item L<Opcode> 1.40_03c

Restrict the new op 'enterffi'.

=item L<Unicode::Collate> 1.25_01

Skip redefinition warnings on cperl since 5.27.2

=item L<warnings> 1.38

Add C<ffi>

=back

=head2 Removed Modules and Pragmata

=over 4

=item L<Locale::Codes> 3.55

Deprecated with v5.27.2c

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, send email
to L<perlbug@perl.org|mailto:perlbug@perl.org>.

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

Additionally, the following selected changes have been made:

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX Describe change here

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as an =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarizing, although the bugs
that they represent may be covered elsewhere.

XXX If there were no significant test changes, say this:

Tests were added and changed to reflect the other additions and changes
in this release.

XXX If instead there were significant changes, say this:

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

[ List each test improvement as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as an =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.  Other
significant internal changes for future core maintainers should be noted as
well.

[ List each change as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarized here.  Bug fixes in
files in F<ext/> and F<lib/> are best summarized in L</Modules and Pragmata>.

[ List each fix as an =item entry ]

=over 4

=item *

Fixed error message for illegal charnames, and avoid passing NUL into
the charnames lookup, which is a potential security threat.  E.g. on
"\N{TILDE\000}" report "Missing right brace on \\N\{\}" as before
with 5.27.2 and on "\N{TILDE\001}" report "Unknown charname 'TILDE\1'" and
not "Unknown charname 'TILDE'".  perl5.27.5 started reporting those
errors with "Unknown charname 'TILDE'" hiding all characters behind
the embedded NUL or any non-printable character.
L<[cperl #342]|https://github.com/perl11/cperl/issues/342>

=item *

Detect shared-only import libraries like F<libNAME.dll.a>, which have no static
counterpart F<libNAME.a>, which happens e.g. for C<libffi> on B<cygwin> or msys.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as an =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX Generate this with:

    cperl Porting/acknowledgements.pl cperl-5.27.2..HEAD -c

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
