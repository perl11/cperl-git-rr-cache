/* ex: set ro ft=c: -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 117 "perly.y"
    {
			  parser->expect = XSTATE;
			;}
    break;

  case 3:
#line 121 "perly.y"
    {
			  newPROG(block_end((ps[(3) - (4)].val.ival),(ps[(4) - (4)].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			;}
    break;

  case 4:
#line 127 "perly.y"
    {
			  parser->expect = XTERM;
			;}
    break;

  case 5:
#line 131 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			;}
    break;

  case 6:
#line 136 "perly.y"
    {
			  parser->expect = XBLOCK;
			;}
    break;

  case 7:
#line 140 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			;}
    break;

  case 8:
#line 148 "perly.y"
    {
			  parser->expect = XSTATE;
			;}
    break;

  case 9:
#line 152 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			;}
    break;

  case 10:
#line 160 "perly.y"
    {
			  parser->expect = XSTATE;
			;}
    break;

  case 11:
#line 164 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			;}
    break;

  case 12:
#line 172 "perly.y"
    {
			  parser->expect = XSTATE;
			;}
    break;

  case 13:
#line 176 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			;}
    break;

  case 14:
#line 184 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			;}
    break;

  case 15:
#line 192 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (7)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (7)].val.ival), (ps[(5) - (7)].val.opval));
			;}
    break;

  case 16:
#line 199 "perly.y"
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; ;}
    break;

  case 17:
#line 204 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			;}
    break;

  case 18:
#line 211 "perly.y"
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; ;}
    break;

  case 19:
#line 217 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 20:
#line 219 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			;}
    break;

  case 21:
#line 228 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 22:
#line 230 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			;}
    break;

  case 23:
#line 239 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (1)].val.opval) ? newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval)) : NULL;
			;}
    break;

  case 24:
#line 243 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 25:
#line 247 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			;}
    break;

  case 26:
#line 251 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			;}
    break;

  case 27:
#line 258 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 28:
#line 260 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv)))
			      pad_add_weakref(fmtcv);
			  parser->parsed_sub = 1;
			;}
    break;

  case 29:
#line 269 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQc(name, "BEGIN") || strEQc(name, "END")
                             || strEQc(name, "INIT")  || strEQc(name, "CHECK")
                             || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
                              /* State subs inside anonymous subs need to be
                                 clonable themselves. */
                              if (CvANON(CvOUTSIDE(PL_compcv))
                                  || CvCLONE(CvOUTSIDE(PL_compcv))
                                  || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
                                         CvOUTSIDE(PL_compcv)))[(ps[(2) - (3)].val.opval)->op_targ]))
                                  CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			;}
    break;

  case 30:
#line 290 "perly.y"
    {
                          CV *cv;
			  SvREFCNT_inc_simple_void(PL_compcv);
			  cv = ((ps[(2) - (7)].val.opval)->op_type == OP_CONST)
			      ? newATTRSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			      : newMYSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			  ;
			  (yyval.opval) = cv && (ps[(6) - (7)].val.opval) ? attrs_runtime(cv, (ps[(6) - (7)].val.opval)) : NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			;}
    break;

  case 31:
#line 302 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQc(name, "BEGIN") || strEQc(name, "END")
                             || strEQc(name, "INIT")  || strEQc(name, "CHECK")
                             || strEQc(name, "UNITCHECK"))
                                CvSPECIAL_on(PL_compcv);
			  }
			  else
                              /* State subs inside anonymous subs need to be
                                 clonable themselves. */
                              if (CvANON(CvOUTSIDE(PL_compcv))
                               || CvCLONE(CvOUTSIDE(PL_compcv))
                               || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
                                      CvOUTSIDE(PL_compcv)))[(ps[(2) - (3)].val.opval)->op_targ]))
                                  CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			;}
    break;

  case 32:
#line 323 "perly.y"
    {
			  OP *sig = (ps[(6) - (10)].val.opval), *body = (ps[(9) - (10)].val.opval); CV *cv;
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && (!sig || !OpHAS_SIBLING(sig)))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(8) - (10)].val.ival))
			      parser->copline = (line_t)(ps[(8) - (10)].val.ival);
			  body = block_end((ps[(5) - (10)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));

			  SvREFCNT_inc_simple_void(PL_compcv);
			  cv = ((ps[(2) - (10)].val.opval)->op_type == OP_CONST)
			      ? newATTRSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			      : newMYSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body);
			  (yyval.opval) = (ps[(7) - (10)].val.opval) ? attrs_runtime(cv, (ps[(7) - (10)].val.opval)) : NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			;}
    break;

  case 33:
#line 344 "perly.y"
    {
                          CvEXTERN_on(PL_compcv);
			  if ((ps[(3) - (4)].val.opval)->op_type != OP_CONST) {
                              /* lexical extern sub */
                              if (CvANON(CvOUTSIDE(PL_compcv))
                               || CvCLONE(CvOUTSIDE(PL_compcv))
                               || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
                                      CvOUTSIDE(PL_compcv)))[(ps[(3) - (4)].val.opval)->op_targ])) {
                                  CvCLONE_on(PL_compcv);
                              }
                          }
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			;}
    break;

  case 34:
#line 359 "perly.y"
    {
                          CV *cv;
			  OP *body = block_end((ps[(6) - (9)].val.ival),
				op_append_list(OP_LINESEQ, (ps[(7) - (9)].val.opval), NULL));

			  SvREFCNT_inc_simple_void(PL_compcv);
			  cv = ((ps[(3) - (9)].val.opval)->op_type == OP_CONST)
			      ? newATTRSUB((ps[(4) - (9)].val.ival), (ps[(3) - (9)].val.opval), NULL, (ps[(8) - (9)].val.opval), body)
			      : newMYSUB((ps[(4) - (9)].val.ival), (ps[(3) - (9)].val.opval), NULL, (ps[(8) - (9)].val.opval), body)
			  ;
			  (yyval.opval) = (ps[(8) - (9)].val.opval) ? attrs_runtime(cv, (ps[(8) - (9)].val.opval)) : NULL;
			  parser->parsed_sub = 1;
			;}
    break;

  case 35:
#line 373 "perly.y"
    {
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = NULL;
			;}
    break;

  case 36:
#line 380 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ ;}
    break;

  case 37:
#line 382 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[(1) - (7)].val.ival), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = NULL;
			;}
    break;

  case 38:
#line 389 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			;}
    break;

  case 39:
#line 395 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
                              newCONDOP(0, (ps[(4) - (7)].val.opval), (ps[(7) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval))));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			;}
    break;

  case 40:
#line 401 "perly.y"
    {
			  const PADOFFSET offset = pad_findmy_pvs("$_", 0);
			  (yyval.opval) = block_end((ps[(3) - (6)].val.ival),
				  newGIVENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)),
				    offset == NOT_IN_PAD
				    || PAD_COMPNAME_FLAGS_isOUR(offset)
				      ? 0
				      : offset));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			;}
    break;

  case 41:
#line 412 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); ;}
    break;

  case 42:
#line 414 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); ;}
    break;

  case 43:
#line 416 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			;}
    break;

  case 44:
#line 423 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			;}
    break;

  case 45:
#line 430 "perly.y"
    { parser->expect = XTERM; ;}
    break;

  case 46:
#line 432 "perly.y"
    { parser->expect = XTERM; ;}
    break;

  case 47:
#line 435 "perly.y"
    {
			  OP *initop = (ps[(4) - (13)].val.opval);
			  OP *forop = newWHILEOP(0, 1, NULL,
				      scalar((ps[(7) - (13)].val.opval)), (ps[(13) - (13)].val.opval), (ps[(11) - (13)].val.opval), (ps[(10) - (13)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[(3) - (13)].val.ival), forop);
			  parser->copline = (line_t)(ps[(1) - (13)].val.ival);
			;}
    break;

  case 48:
#line 450 "perly.y"
    { parser->expect = XBLOCK; ;}
    break;

  case 49:
#line 452 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (10)].val.ival), newFOROP(0, (ps[(4) - (10)].val.opval), (ps[(6) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (10)].val.ival);
			;}
    break;

  case 50:
#line 457 "perly.y"
    { parser->expect = XBLOCK; ;}
    break;

  case 51:
#line 459 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(4) - (9)].val.ival), newFOROP(0,
			         op_lvalue((ps[(2) - (9)].val.opval), OP_ENTERLOOP), (ps[(5) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			;}
    break;

  case 52:
#line 465 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(4) - (4)].val.opval)); ;}
    break;

  case 53:
#line 467 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (10)].val.ival), newFOROP(0,
			         op_lvalue(newUNOP(OP_REFGEN, 0, (ps[(5) - (10)].val.opval)),
                                           OP_ENTERLOOP),
					 (ps[(7) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (10)].val.ival);
			;}
    break;

  case 54:
#line 475 "perly.y"
    {
                          (yyval.opval) = block_end((ps[(5) - (9)].val.ival), newFOROP(0,
				 op_lvalue(newUNOP(OP_REFGEN, 0, (ps[(3) - (9)].val.opval)),
                                           OP_ENTERLOOP),
                                         (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			;}
    break;

  case 55:
#line 483 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			;}
    break;

  case 56:
#line 489 "perly.y"
    { parser->expect = XBLOCK; ;}
    break;

  case 57:
#line 491 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(2) - (6)].val.ival),
				  newFOROP(0, (OP*)NULL, (ps[(3) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			;}
    break;

  case 58:
#line 497 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			;}
    break;

  case 59:
#line 503 "perly.y"
    {
			  package((ps[(3) - (5)].val.opval));
			  if ((ps[(2) - (5)].val.opval)) {
			      package_version((ps[(2) - (5)].val.opval));
			  }
			;}
    break;

  case 60:
#line 510 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), NULL, 0);
			  if (parser->copline > (line_t)(ps[(4) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(4) - (8)].val.ival);
			;}
    break;

  case 61:
#line 518 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			;}
    break;

  case 62:
#line 522 "perly.y"
    {
			  (yyval.opval) = NULL;
			  parser->copline = NOLINE;
			;}
    break;

  case 63:
#line 530 "perly.y"
    { OP *list;
			  if ((ps[(2) - (2)].val.opval)) {
			      OP *term = (ps[(2) - (2)].val.opval);
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), term);
			  }
			  else {
			      list = (ps[(1) - (2)].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			;}
    break;

  case 64:
#line 547 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 65:
#line 549 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); ;}
    break;

  case 66:
#line 554 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 67:
#line 556 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 68:
#line 558 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); ;}
    break;

  case 69:
#line 560 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); ;}
    break;

  case 70:
#line 562 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); ;}
    break;

  case 71:
#line 564 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); ;}
    break;

  case 72:
#line 566 "perly.y"
    { (yyval.opval) = newFOROP(0, NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), NULL);
			  parser->copline = (line_t)(ps[(2) - (3)].val.ival); ;}
    break;

  case 73:
#line 569 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); ;}
    break;

  case 74:
#line 574 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 75:
#line 576 "perly.y"
    {
			  ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			;}
    break;

  case 76:
#line 581 "perly.y"
    {   parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)),
				op_scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			;}
    break;

  case 77:
#line 591 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 78:
#line 593 "perly.y"
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); ;}
    break;

  case 79:
#line 598 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); ;}
    break;

  case 80:
#line 604 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 82:
#line 610 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; ;}
    break;

  case 84:
#line 618 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 85:
#line 623 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 86:
#line 627 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 87:
#line 630 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 88:
#line 631 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 89:
#line 635 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 90:
#line 641 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 91:
#line 646 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 94:
#line 657 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 96:
#line 663 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 97:
#line 665 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); ;}
    break;

  case 98:
#line 667 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 99:
#line 672 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); ;}
    break;

  case 100:
#line 674 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 101:
#line 679 "perly.y"
    {
#ifndef USE_CPERL
			  /* We shouldn't get here otherwise */
			  assert(FEATURE_SIGNATURES_IS_ENABLED);
			  Perl_ck_warner_d(aTHX_
				packWARN(WARN_EXPERIMENTAL__SIGNATURES),
				"The signatures feature is experimental");
#endif
			  (yyval.opval) = parse_subsignature();
			;}
    break;

  case 102:
#line 690 "perly.y"
    {
			  (yyval.opval) = (ps[(2) - (3)].val.opval);
			  parser->expect = XATTRBLOCK;
			;}
    break;

  case 104:
#line 698 "perly.y"
    { (yyval.opval) = NULL; ;}
    break;

  case 105:
#line 703 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 106:
#line 705 "perly.y"
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 107:
#line 707 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
    break;

  case 109:
#line 713 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); ;}
    break;

  case 110:
#line 715 "perly.y"
    {
			  OP* term = (ps[(3) - (3)].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			;}
    break;

  case 112:
#line 724 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (3)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (3)].val.ival),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
			;}
    break;

  case 113:
#line 728 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (5)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (5)].val.ival),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
			;}
    break;

  case 114:
#line 732 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
			;}
    break;

  case 115:
#line 738 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
			;}
    break;

  case 116:
#line 743 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
			;}
    break;

  case 117:
#line 749 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			;}
    break;

  case 118:
#line 755 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); ;}
    break;

  case 119:
#line 757 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); ;}
    break;

  case 120:
#line 759 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, NULL, (ps[(3) - (3)].val.opval)); ;}
    break;

  case 121:
#line 762 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			;}
    break;

  case 124:
#line 777 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); ;}
    break;

  case 125:
#line 779 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			;}
    break;

  case 126:
#line 782 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
			;}
    break;

  case 127:
#line 787 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
			;}
    break;

  case 128:
#line 792 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			;}
    break;

  case 129:
#line 795 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval))); ;}
    break;

  case 130:
#line 799 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval))); ;}
    break;

  case 131:
#line 803 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval)))); ;}
    break;

  case 132:
#line 806 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval))))); ;}
    break;

  case 133:
#line 811 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval))))); ;}
    break;

  case 134:
#line 815 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval)))); ;}
    break;

  case 135:
#line 818 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); ;}
    break;

  case 136:
<<<<<<<
#line 797 "perly.y" /* yacc.c:1646  */
    {
                          OP* left = (ps[-2].val.opval);
                          if ( OP_TYPE_IS(left, OP_LIST) &&
                               attrs_has_const(left, TRUE) )
                          {   /* my $x :const = $y; dissect my_attrs() */
                              OP *attr = OpSIBLING(OpFIRST(left));
                              if (OP_TYPE_ISNT(attr, OP_ENTERSUB)) {
                                  left = attr;
                                  attr = OpSIBLING(attr);
                                  if (OpKIDS(left)) /* our rv2Xv -> gv */
                                      OpMORESIB_set(OpFIRST(left), NULL);
                              } else
                                  left = OpSIBLING(attr);
                              OpMORESIB_set(left, NULL);
                              OpMORESIB_set(attr, NULL);
                              /* defer :const after = */
                              (yyval.opval) = op_append_list(OP_LINESEQ,
                                       newASSIGNOP(OPf_STACKED, left, (ps[-1].val.ival), (ps[0].val.opval)),
                                       scalar(attr));
                          } else
                              (yyval.opval) = newASSIGNOP(OPf_STACKED, left, (ps[-1].val.ival), (ps[0].val.opval));
                        }

=======
#line 820 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); ;}
>>>>>>>
    break;

  case 137:
<<<<<<<
#line 820 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

=======
#line 822 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), NULL); ;}
>>>>>>>
    break;

  case 138:
<<<<<<<
#line 822 "perly.y" /* yacc.c:1646  */
    {   if ((ps[-1].val.ival) != OP_REPEAT)
				scalar((ps[-2].val.opval));
			    (yyval.opval) = newBINOP((ps[-1].val.ival), 0, (ps[-2].val.opval), scalar((ps[0].val.opval)));
			}

=======
#line 827 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 139:
<<<<<<<
#line 827 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

=======
#line 829 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
>>>>>>>
    break;

  case 140:
<<<<<<<
#line 829 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

=======
#line 831 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			;}
>>>>>>>
    break;

  case 141:
<<<<<<<
#line 831 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

=======
#line 836 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
>>>>>>>
    break;

  case 142:
<<<<<<<
#line 833 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

=======
#line 838 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
>>>>>>>
    break;

  case 143:
<<<<<<<
#line 835 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

=======
#line 840 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
>>>>>>>
    break;

  case 144:
<<<<<<<
#line 837 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

=======
#line 842 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
>>>>>>>
    break;

  case 145:
<<<<<<<
#line 839 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newRANGE((ps[-1].val.ival), scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

=======
#line 844 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
>>>>>>>
    break;

  case 146:
<<<<<<<
#line 841 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

=======
#line 846 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
>>>>>>>
    break;

  case 147:
<<<<<<<
#line 843 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

=======
#line 848 "perly.y"
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); ;}
>>>>>>>
    break;

  case 148:
<<<<<<<
#line 845 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

=======
#line 850 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 149:
<<<<<<<
#line 847 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = bind_match((ps[-1].val.ival), (ps[-2].val.opval), (ps[0].val.opval)); }

=======
#line 852 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 150:
<<<<<<<
#line 852 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[0].val.opval))); }

=======
#line 854 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 151:
<<<<<<<
#line 854 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 856 "perly.y"
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 152:
<<<<<<<
#line 857 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[0].val.opval))); }

=======
#line 861 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); ;}
>>>>>>>
    break;

  case 153:
<<<<<<<
#line 859 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP((ps[-1].val.ival), 0, scalar((ps[0].val.opval))); }

=======
#line 863 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); ;}
>>>>>>>
    break;

  case 154:
<<<<<<<
#line 861 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[-1].val.opval)), OP_POSTINC)); }

=======
#line 866 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); ;}
>>>>>>>
    break;

  case 155:
<<<<<<<
#line 864 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[-1].val.opval)), OP_POSTDEC));}

=======
#line 868 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); ;}
>>>>>>>
    break;

  case 156:
<<<<<<<
#line 867 "perly.y" /* yacc.c:1646  */
=======
#line 870 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC)); ;}
    break;

  case 157:
#line 873 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));;}
    break;

  case 158:
#line 876 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[(1) - (2)].val.opval)
				       ));
<<<<<<<
			;}
=======
			}

    break;

  case 157:
#line 878 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[-1].val.opval)),
                                        newSVOP(OP_CONST, 0, newSViv(parser->yylval.ival))); }

    break;

  case 158:
#line 881 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[0].val.opval)), OP_PREINC)); }

>>>>>>>
    break;

  case 159:
<<<<<<<
#line 884 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[0].val.opval)), OP_PREDEC)); }

=======
#line 887 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (2)].val.opval)),
                                        newSVOP(OP_CONST, 0, newSViv(parser->yylval.ival))); ;}
>>>>>>>
    break;

  case 160:
<<<<<<<
#line 890 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); ;}
=======
#line 891 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newANONLIST((ps[-1].val.opval)); }

>>>>>>>
    break;

  case 161:
<<<<<<<
#line 893 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); ;}
=======
#line 893 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newANONLIST(NULL);}

>>>>>>>
    break;

  case 162:
<<<<<<<
#line 895 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newANONHASH((ps[-2].val.opval)); }

=======
#line 900 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 163:
<<<<<<<
#line 897 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newANONHASH(NULL); }

=======
#line 902 "perly.y"
    { (yyval.opval) = newANONLIST(NULL);;}
>>>>>>>
    break;

  case 164:
<<<<<<<
#line 899 "perly.y" /* yacc.c:1646  */
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[-3].val.ival), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval)); }

=======
#line 904 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); ;}
>>>>>>>
    break;

  case 165:
<<<<<<<
#line 902 "perly.y" /* yacc.c:1646  */
=======
#line 906 "perly.y"
    { (yyval.opval) = newANONHASH(NULL); ;}
    break;

  case 166:
#line 908 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); ;}
    break;

  case 167:
#line 911 "perly.y"
>>>>>>>
    {
			  OP *sig = (ps[(4) - (8)].val.opval), *body = (ps[(7) - (8)].val.opval);
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && (!sig || !OpHAS_SIBLING(sig)))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(6) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(6) - (8)].val.ival);
			  body = block_end((ps[(3) - (8)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (8)].val.ival), NULL, (ps[(5) - (8)].val.opval), body);
			;}
    break;

<<<<<<<
  case 166:
#line 921 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = dofile((ps[0].val.opval), (ps[-1].val.ival));}

    break;

  case 167:
#line 923 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[0].val.opval)));}

=======
  case 168:
#line 930 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));;}
>>>>>>>
    break;

<<<<<<<
  case 169:
#line 932 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));;}
=======
  case 172:
#line 931 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newCONDOP(0, (ps[-4].val.opval), (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 173:
#line 933 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[0].val.opval)); }

>>>>>>>
    break;

  case 174:
<<<<<<<
#line 935 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, localize((ps[0].val.opval),1)); }

=======
#line 940 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); ;}
>>>>>>>
    break;

  case 175:
<<<<<<<
#line 937 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 942 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); ;}
>>>>>>>
    break;

  case 176:
<<<<<<<
#line 939 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = localize((ps[0].val.opval),0); }

=======
#line 944 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, localize((ps[(3) - (3)].val.opval),1)); ;}
>>>>>>>
    break;

  case 177:
<<<<<<<
#line 941 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = sawparens((ps[-1].val.opval)); }

=======
#line 946 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 178:
<<<<<<<
#line 943 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 948 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),0); ;}
>>>>>>>
    break;

  case 179:
<<<<<<<
#line 945 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = sawparens(newNULLLIST()); }

=======
#line 950 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 180:
<<<<<<<
#line 947 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 952 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 181:
<<<<<<<
#line 949 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 954 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); ;}
>>>>>>>
    break;

  case 182:
<<<<<<<
#line 951 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 956 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 183:
<<<<<<<
#line 953 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 958 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 184:
<<<<<<<
#line 955 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[0].val.opval), OP_AV2ARYLEN));}

=======
#line 960 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 185:
<<<<<<<
#line 957 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 962 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 186:
<<<<<<<
#line 959 "perly.y" /* yacc.c:1646  */
=======
#line 964 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));;}
    break;

  case 187:
#line 966 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 188:
#line 968 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			;}
    break;

<<<<<<<
  case 187:
#line 969 "perly.y" /* yacc.c:1646  */
=======
  case 189:
#line 978 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref(oopsAV((ps[(1) - (4)].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			;}
    break;

<<<<<<<
  case 188:
#line 979 "perly.y" /* yacc.c:1646  */
=======
  case 190:
#line 988 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			;}
    break;

<<<<<<<
  case 189:
#line 989 "perly.y" /* yacc.c:1646  */
=======
  case 191:
#line 998 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
<<<<<<<
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			;}
=======
				  (ps[-4].val.opval)->op_private & OPpSLICEWARNING;
			}

    break;

  case 190:
#line 999 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 191:
#line 1001 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[0].val.opval))); }

>>>>>>>
    break;

  case 192:
<<<<<<<
#line 1003 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[-2].val.opval)));
			}

=======
#line 1008 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 193:
<<<<<<<
#line 1006 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[-1].val.opval), scalar((ps[-3].val.opval))));
			}

=======
#line 1010 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); ;}
>>>>>>>
    break;

  case 194:
<<<<<<<
#line 1011 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[0].val.opval), scalar((ps[-1].val.opval))));
			}

=======
#line 1012 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			;}
>>>>>>>
    break;

  case 195:
<<<<<<<
#line 1015 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
			;}
=======
#line 1015 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newSVREF((ps[-3].val.opval)); }

>>>>>>>
    break;

  case 196:
<<<<<<<
#line 1017 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[-3].val.opval)); }

=======
#line 1020 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
			;}
>>>>>>>
    break;

  case 197:
<<<<<<<
#line 1019 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newHVREF((ps[-3].val.opval)); }

=======
#line 1024 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); ;}
>>>>>>>
    break;

  case 198:
<<<<<<<
#line 1021 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[-1].val.ival),(ps[-3].val.opval)))); }

=======
#line 1026 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); ;}
>>>>>>>
    break;

  case 199:
<<<<<<<
#line 1024 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newGVREF(0,(ps[-3].val.opval)); }

=======
#line 1028 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); ;}
>>>>>>>
    break;

  case 200:
<<<<<<<
#line 1026 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP((ps[0].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }

=======
#line 1030 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); ;}
>>>>>>>
    break;

  case 201:
<<<<<<<
#line 1029 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOOPEX((ps[-1].val.ival),(ps[0].val.opval)); }

=======
#line 1033 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); ;}
>>>>>>>
    break;

  case 202:
<<<<<<<
#line 1031 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[0].val.opval))); }

=======
#line 1035 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; ;}
>>>>>>>
    break;

  case 203:
<<<<<<<
#line 1033 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP((ps[0].val.ival), 0); }

=======
#line 1038 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); ;}
>>>>>>>
    break;

  case 204:
<<<<<<<
#line 1035 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP((ps[-1].val.ival), 0, (ps[0].val.opval)); }

=======
#line 1040 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); ;}
>>>>>>>
    break;

  case 205:
<<<<<<<
#line 1037 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP((ps[-1].val.ival), 0, (ps[0].val.opval)); }

=======
#line 1042 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); ;}
>>>>>>>
    break;

  case 206:
<<<<<<<
#line 1039 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[0].val.ival) ? OPf_SPECIAL : 0); }

=======
#line 1044 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); ;}
>>>>>>>
    break;

  case 207:
<<<<<<<
#line 1041 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[-1].val.ival) ? OPf_SPECIAL : 0, (ps[0].val.opval)); }

=======
#line 1046 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); ;}
>>>>>>>
    break;

  case 208:
<<<<<<<
#line 1043 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[0].val.opval))); }

=======
#line 1048 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); ;}
>>>>>>>
    break;

  case 209:
<<<<<<<
#line 1045 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[0].val.opval), scalar((ps[-1].val.opval)))); }

=======
#line 1050 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); ;}
>>>>>>>
    break;

  case 210:
<<<<<<<
#line 1048 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP((ps[0].val.ival), 0); }

=======
#line 1052 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); ;}
>>>>>>>
    break;

  case 211:
<<<<<<<
#line 1050 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP((ps[-2].val.ival), 0);}

=======
#line 1054 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); ;}
>>>>>>>
    break;

  case 212:
<<<<<<<
#line 1052 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 1057 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); ;}
>>>>>>>
    break;

  case 213:
<<<<<<<
#line 1054 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[-2].val.opval); }

=======
#line 1059 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);;}
>>>>>>>
    break;

  case 214:
<<<<<<<
#line 1056 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[0].val.opval))); }

=======
#line 1061 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 215:
<<<<<<<
#line 1058 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = ((ps[-2].val.ival) == OP_NOT)
                          ? newUNOP((ps[-2].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[-2].val.ival), OPf_SPECIAL); }

=======
#line 1063 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval); ;}
>>>>>>>
    break;

  case 216:
<<<<<<<
#line 1062 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP((ps[-3].val.ival), 0, (ps[-1].val.opval)); }

=======
#line 1065 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); ;}
>>>>>>>
    break;

  case 217:
<<<<<<<
#line 1064 "perly.y" /* yacc.c:1646  */
=======
#line 1067 "perly.y"
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); ;}
    break;

  case 218:
#line 1071 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); ;}
    break;

  case 219:
#line 1073 "perly.y"
>>>>>>>
    {
			    if (   (ps[(1) - (1)].val.opval)->op_type != OP_TRANS
			        && (ps[(1) - (1)].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[(1) - (1)].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			;}
    break;

<<<<<<<
  case 218:
#line 1075 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = pmruntime((ps[-5].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), 1, (ps[-4].val.ival)); }

=======
  case 220:
#line 1084 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); ;}
>>>>>>>
    break;

<<<<<<<
  case 221:
#line 1079 "perly.y" /* yacc.c:1646  */
=======
  case 223:
#line 1088 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
<<<<<<<
			;}
=======
			}

    break;

  case 223:
#line 1088 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = my_attrs((ps[-1].val.opval),(ps[0].val.opval)); }

    break;

  case 224:
#line 1090 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = localize((ps[0].val.opval),1); }

>>>>>>>
    break;

  case 225:
<<<<<<<
#line 1092 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, my_attrs((ps[-1].val.opval),(ps[0].val.opval))); }

=======
#line 1097 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 226:
<<<<<<<
#line 1097 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = sawparens((ps[-1].val.opval)); }

=======
#line 1099 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),1); ;}
>>>>>>>
    break;

  case 227:
<<<<<<<
#line 1099 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = sawparens(newNULLLIST()); }

=======
#line 1101 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, my_attrs((ps[(3) - (4)].val.opval),(ps[(4) - (4)].val.opval))); ;}
>>>>>>>
    break;

  case 228:
<<<<<<<
#line 1102 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 1106 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 229:
<<<<<<<
#line 1104 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 1108 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); ;}
>>>>>>>
    break;

  case 230:
<<<<<<<
#line 1106 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 1111 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 231:
<<<<<<<
#line 1108 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 1113 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 232:
<<<<<<<
#line 1113 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

=======
#line 1115 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 233:
<<<<<<<
#line 1115 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 1117 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 234:
<<<<<<<
#line 1119 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

=======
#line 1122 "perly.y"
    { (yyval.opval) = NULL; ;}
>>>>>>>
    break;

  case 235:
<<<<<<<
#line 1121 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 1124 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 236:
<<<<<<<
#line 1125 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

=======
#line 1128 "perly.y"
    { (yyval.opval) = NULL; ;}
>>>>>>>
    break;

  case 237:
<<<<<<<
#line 1127 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

=======
#line 1130 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
>>>>>>>
    break;

  case 238:
<<<<<<<
#line 1131 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = (ps[0].val.ival); }

=======
#line 1134 "perly.y"
    { (yyval.opval) = NULL; ;}
>>>>>>>
    break;

  case 239:
<<<<<<<
#line 1133 "perly.y" /* yacc.c:1646  */
    { munge_qwlist_to_paren_list((ps[0].val.opval)); }

=======
#line 1136 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); ;}
>>>>>>>
    break;

  case 240:
<<<<<<<
#line 1135 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = (ps[0].val.ival); }

=======
#line 1140 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); ;}
>>>>>>>
    break;

  case 241:
<<<<<<<
#line 1141 "perly.y" /* yacc.c:1646  */
    { parser->in_my = 0; (yyval.opval) = my((ps[0].val.opval)); }

=======
#line 1142 "perly.y"
    { munge_qwlist_to_paren_list((ps[(1) - (1)].val.opval)); ;}
>>>>>>>
    break;

<<<<<<<
  case 242:
#line 1144 "perly.y"
    { (yyval.ival) = (ps[(3) - (3)].val.ival); ;}
=======
  case 249:
#line 1158 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newCVREF((ps[-1].val.ival),(ps[0].val.opval)); }

>>>>>>>
    break;

<<<<<<<
  case 243:
#line 1150 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); ;}
=======
  case 250:
#line 1162 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newSVREF((ps[0].val.opval)); }

>>>>>>>
    break;

  case 251:
<<<<<<<
#line 1166 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[0].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[-1].val.ival);
			}

=======
#line 1167 "perly.y"
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); ;}
>>>>>>>
    break;

  case 252:
<<<<<<<
#line 1171 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); ;}
    break;

  case 253:
#line 1175 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			;}
    break;

  case 254:
#line 1181 "perly.y"
=======
#line 1172 "perly.y" /* yacc.c:1646  */
>>>>>>>
    {
                          SV *constsv = cSVOPx_sv((ps[(4) - (5)].val.opval));
                          assert((ps[(2) - (5)].val.opval)->op_targ);
                          if (SvTYPE(constsv) != SVt_IV)
                            Perl_croak(aTHX_ "Invalid array size %s[%s]",
                                  PAD_COMPNAME_PV((ps[(2) - (5)].val.opval)->op_targ),
                                  SvPOK(constsv) ? SvPVX(constsv) : "");
                          /* - is not a THING, syntax error near "[-"
                          if (size <= 0)
                            Perl_croak(aTHX_ "Invalid array size %s[%d]",
                                  PAD_COMPNAME_PV($2->op_targ), size);
                          */
			  if (!FEATURE_SHAPED_ARRAYS_IS_ENABLED)
                              Perl_croak(aTHX_ "Experimental "
                                    "shaped_arrays not enabled");
#ifndef USE_CPERL
                          /* Policies... Either provide a stable feature or not.
                             No need to be defensive about every single new feature */
			  ck_warner_d(
				packWARN(WARN_EXPERIMENTAL__SHAPED_ARRAYS),
				"The shaped_arrays feature is experimental");
#endif
<<<<<<<
			  (yyval.opval) = newAVREF((ps[(2) - (5)].val.opval));
                          av_init_shaped(MUTABLE_AV(PAD_SV((ps[(2) - (5)].val.opval)->op_targ)), SvIVX(constsv),
                                        PadnameTYPE(PAD_COMPNAME((ps[(2) - (5)].val.opval)->op_targ)));
			;}
=======
			  (yyval.opval) = newAVREF((ps[-3].val.opval));
                          av_init_shaped(MUTABLE_AV(PAD_SV((ps[-3].val.opval)->op_targ)), SvIVX(constsv),
                                        PadnameTYPE(PAD_COMPNAME((ps[-3].val.opval)->op_targ)));
			}

    break;

  case 253:
#line 1201 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newHVREF((ps[0].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[-1].val.ival);
			}

    break;

  case 254:
#line 1207 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[0].val.opval)); }

>>>>>>>
    break;

  case 255:
<<<<<<<
#line 1209 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[-3].val.opval)); }

=======
#line 1210 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			;}
>>>>>>>
    break;

  case 256:
<<<<<<<
#line 1213 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newGVREF(0,(ps[0].val.opval)); }
=======
#line 1216 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); ;}
    break;
>>>>>>>

  case 257:
#line 1218 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); ;}
    break;

  case 258:
<<<<<<<
#line 1218 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[-2].val.opval)); }

=======
#line 1222 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); ;}
>>>>>>>
    break;

  case 260:
<<<<<<<
#line 1223 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newHVREF((ps[-2].val.opval)); }

=======
#line 1227 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 262:
<<<<<<<
#line 1228 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newGVREF(0,(ps[-2].val.opval)); }

    break;

  case 263:
#line 1233 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = scalar((ps[0].val.opval)); }

=======
#line 1232 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 264:
<<<<<<<
#line 1235 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = scalar((ps[0].val.opval)); }

=======
#line 1237 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); ;}
>>>>>>>
    break;

  case 265:
<<<<<<<
#line 1237 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_scope((ps[0].val.opval)); }

=======
#line 1242 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
>>>>>>>
    break;

  case 266:
<<<<<<<
#line 1240 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }
=======
#line 1244 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
    break;

  case 267:
#line 1246 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); ;}
    break;
>>>>>>>

  case 268:
#line 1249 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;


/* Line 1267 of yacc.c.  */

      default: break;
    

/* Generated from:
<<<<<<<
 * 3830bad3161862ce8e09a5ac44bd6815388ad9117dbd2d73e31651029f0846c8 perly.y
 * 34c0653ef7c691f2b4ac71336f4ea94e2bd925344002392f88ceeb0b435555fa regen_perly.pl
=======
 * 9705b2bf19b5ccb3af82d4ab9c5935ea0e9d896777e4d5cecafc84b1cf204076 perly.y
 * d75acf04e5e050e9d0de13999b5b46a13f176dcf9f75c07acf51e913fc41db9a regen_perly.pl
>>>>>>>
 * ex: set ro: */
