use Config;
our $VERSION = "2.00c";

sub to_string {
    my ($value) = @_;
    $value =~ s/\\/\\\\/g;
    $value =~ s/'/\\'/g;
    return "'$value'";
}
sub to_dqstring {
    my ($value) = @_;
    $value =~ s/\\/\\\\/g;
    $value =~ s/"/\\"/g;
    return "\"$value\"";
}

# symlinks are currently also resolved.
# e.g.
#    ("/usr/lib", "/lib/x86_64-linux-gnu", "/lib/../lib", "/usr/lib/x86_64-linux-gnu", "/usr/lib/../lib")
# => ("/usr/lib", "/lib/x86_64-linux-gnu", "/lib", "/usr/lib/x86_64-linux-gnu")
sub resolve_duplicate_paths {
    # first resolve w/../w => w
    foreach (@_) {
        s{(\w+)/\.\./$1$}{$1};
    }
    # then remove duplicates, but keep order intact
    my %p = ();
    my @out = ();
    foreach (@_) {
        unless (exists $p{$_}) {
            if (-l $_ && -e readlink $_) {
                $_ = readlink $_;
            }
            if (-e $_) {
                push @out, $_;
                $p{$_} = 1;
            }
        }
    }
    @out
}

sub line_prefix {
    my $line = shift;
    $line++;
    return "#line $line \"dlboot_c.PL\"\n" . shift;
}

unlink "dlboot.c" if -f "dlboot.c";
open OUT, ">dlboot.c" or die $!;

my $ldlibpthname_defined = defined $Config{ldlibpthname};

print OUT line_prefix(__LINE__, <<'EOT');
/* ex: set ro ft=c: -*- buffer-read-only:t -*-
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * Any changes made here will be lost
 * Generated from dlboot_c.PL
 *
 * Copyright (C) 2015 cPanel Inc
 * Licensed under the same terms as Perl itself.
 */

/* DynaLoader globals */
SV *do_expand;               /* if to call dl_expandspec hook */
/* dl_debug;                 -- IV from $ENV{PERL_DL_DEBUG}, stored in CTX */

#define AV_PUSH(av, val) av_store(av, AvFILLp(av)+1, val)
#ifdef DEBUGGING
/* ax is the absolute stack offset. (MARK - base + 1) */
/* MARK is base + ax++, ax is kept in *PL_markstack_ptr scope. */
/* SP the lower stack point (= base[ax]), MARK is the upper stack point */
#define DLax(s)    DLDEBUG(1,PerlIO_printf(Perl_debug_log, "%20s ax: %d sp: %p, mark: %p, base: %p\n",\
                               s, ax, PL_stack_sp, mark, PL_stack_base))
#endif

#ifdef VMS
#  define DL_DO_EXPAND 1
#else
#  define DL_DO_EXPAND 0
#endif
static const char file[]  = __FILE__;
static const char utilsfile[]  = "dsutils.c";
static const char xsloaderfile[]  = "XSLoader.c";
const char pthsep[]       = PATH_SEP;
const char ldlibpthname[] = LDLIBPTHNAME;

static SV * dl_findfile(pTHX_ AV* args, int gimme);
static char * av_tostr(pTHX_ AV *args);
PERL_XS_EXPORT_C void XS_DynaLoader_bootstrap_inherit(pTHX_ CV *cv);
PERL_XS_EXPORT_C void XS_DynaLoader_bootstrap(pTHX_ CV *cv);
PERL_XS_EXPORT_C void XS_DynaLoader_dl_findfile(pTHX_ CV *cv);
#ifndef VMS
PERL_XS_EXPORT_C void XS_DynaLoader_dl_expandspec(pTHX_ CV *cv);
#endif
PERL_XS_EXPORT_C void XS_DynaLoader_dl_find_symbol_anywhere(pTHX_ CV *cv);
#ifdef HAS_LIBNAME_UNIQUE
PERL_XS_EXPORT_C void XS_DynaLoader_mod2fname(pTHX_ CV *cv);
#endif
PERL_XS_EXPORT_C void XS_XSLoader_load(pTHX_ CV *cv);
PERL_XS_EXPORT_C void XS_XSLoader_load_file(pTHX_ CV *cv);
PERL_XS_EXPORT_C void XS_XSLoader_bootstrap_inherit(pTHX_ CV *cv);

EXTERN_C void
dl_boot (pTHX) {
    dSP;
    char *env;
#ifdef DEBUGGING
    SV** mark       = PL_stack_base + TOPMARK;
    dAX;
    const char *debug = PerlEnv_getenv("PERL_DL_DEBUG");
    UV tmp_dl_debug;
#endif
    HV * dl_stash = get_hv("main::DynaLoader::", GV_ADDMULTI);
    newCONSTSUB( dl_stash, "dl_load_flags", newSViv(0) );
#ifdef DEBUGGING
    /* enable debug/trace messages from DynaLoader perl code */
    if (debug && *debug
       && (grok_number(debug, strlen(debug), &tmp_dl_debug) & IS_NUMBER_IN_UV)
       && tmp_dl_debug <= INT_MAX)
    {
        SV *sv = get_sv("DynaLoader::dl_debug", GV_ADDMULTI);
        sv_upgrade(sv, SVt_IV);
        SvIV_set(sv, tmp_dl_debug);
        dl_debug = (int)tmp_dl_debug;
    }
    DLax("dl_boot");
#endif
    do_expand = get_sv("DynaLoader::dl_expand", GV_ADDMULTI);
    if (SvTYPE(do_expand) < SVt_IV || !SvIOK(do_expand)) {
        sv_upgrade(do_expand, SVt_IV);
        SvIV_set(do_expand, DL_DO_EXPAND);
    }
    dl_library_path = get_av("DynaLoader::dl_library_path", GV_ADDMULTI);
    (void)hv_store(GvHVn(PL_incgv), "DynaLoader.pm", sizeof("DynaLoader.pm")-1,
                   SvREFCNT_inc_simple_NN(newSVpv_share(__FILE__, 0)), 0);
EOT
my $NUMVER = 0+$VERSION;
print OUT line_prefix(__LINE__, <<"EOT");
    Perl_set_version(aTHX_ STR_WITH_LEN("DynaLoader::VERSION"), STR_WITH_LEN("$VERSION"), $NUMVER);
EOT
print OUT line_prefix(__LINE__, <<'EOT');
    newXS("DynaLoader::bootstrap_inherit", XS_DynaLoader_bootstrap_inherit, utilsfile);
    newXS("DynaLoader::bootstrap",         XS_DynaLoader_bootstrap, utilsfile);
    newXS("DynaLoader::dl_findfile",       XS_DynaLoader_dl_findfile, utilsfile);
#ifndef VMS
    newXS("DynaLoader::dl_expandspec",     XS_DynaLoader_dl_expandspec, utilsfile);
#endif
    newXS("DynaLoader::dl_find_symbol_anywhere", XS_DynaLoader_dl_find_symbol_anywhere, utilsfile);
#ifdef HAS_LIBNAME_UNIQUE
    newXS("DynaLoader::mod2fname", 	   XS_DynaLoader_mod2fname, utilsfile);
#endif

    newXS("XSLoader::load",                XS_XSLoader_load, xsloaderfile);
    newXS("XSLoader::load_file",           XS_XSLoader_load_file, xsloaderfile);
    newXS("XSLoader::bootstrap_inherit",   XS_XSLoader_bootstrap_inherit, xsloaderfile);
    Perl_set_version(aTHX_ STR_WITH_LEN("XSLoader::VERSION"), STR_WITH_LEN("1.00c"), 1.00);
    (void)hv_store(GvHVn(PL_incgv), "XSLoader.pm", sizeof("XSLoader.pm")-1,
                   newSVpvs("XSLoader.c"), 0);

    /* with duplicates removed and symlinks resolved from $Config{libpth} */
EOT

# resolve duplicates at least here, if Configure is not up to the task
# TODO: Do this in Configure, put this into config.h to get rid of miniperl.
# This is the only non-trivial part to get rid of miniperl.
for my $pth (resolve_duplicate_paths(split(' ', $Config{libpth}))) {
  $pth = to_dqstring($pth);
  print OUT <<"EOT";
    AV_PUSH(dl_library_path, newSVpvs($pth));
EOT
}

print OUT line_prefix(__LINE__, <<'EOT');
#ifdef PATH_SEP
    if (*ldlibpthname) {
        if ((env = getenv(LDLIBPTHNAME)) != NULL) {
            char *cur = env;
            for (; *env; cur++) {
                if (*cur == *pthsep || !*cur) {
                    AV_PUSH(dl_library_path, newSVpvn(env, cur-env));
                    if (!*cur) break;
                    env = cur + 1;
                }
            }
        }
        /* E.g. HP-UX supports both its native SHLIB_PATH *and* LD_LIBRARY_PATH. */
        /* Not so sure about LIBPATH, but just add it. This is the original logic. */
        if (strNE(ldlibpthname,"LD_LIBRARY_PATH") && (env = getenv("LD_LIBRARY_PATH")) != NULL) {
            char *cur = env;
            for (; *env; cur++) {
                if (*cur == *pthsep || !*cur) {
                    AV_PUSH(dl_library_path, newSVpvn(env, cur-env));
                    if (!*cur) break;
                    env = cur + 1;
                }
            }
        }
    }
#endif

    /* No prizes for guessing why we don't say 'bootstrap DynaLoader;' here.
       NOTE: All dl_*.xs (including dl_none.xs) define a dl_error() XSUB */
    if (get_cv("DynaLoader::boot_DynaLoader", 0) && !get_cv("DynaLoader::dl_error", 0)) {
        PUSHMARK(SP);
        XPUSHs(newSVpvs("DynaLoader"));
        PUTBACK;
        DLax("call boot");
        call_pv("boot_DynaLoader", G_DISCARD);
        /* SP = PL_stack_base + POPMARK; */
    }
    DLax("boot end");
#ifdef DEBUGGING
    if (dl_debug) {
        PerlIO_printf(Perl_debug_log, "DynaLoader.pm loaded (%s %s)\n",
                      av_tostr(aTHX_ GvAV(PL_incgv)), av_tostr(aTHX_ dl_library_path));
        if (!get_cv("DynaLoader::boot_DynaLoader", 0))
            PerlIO_printf(Perl_debug_log, "DynaLoader not linked into this perl\n");
    }
<<<<<<<
=======
}

XS(XS_DynaLoader_bootstrap_inherit)
{
    dXSARGS;
    AV* isa;
    if (items < 1 || !SvPOK(SP[0]))
      Perl_die(aTHX_ "Usage: DynaLoader::bootstrap_inherit(module)\n");
    ENTER_with_name("bootstrap");
    SAVETMPS;
    {
        SV *module = newSVpvn(SvPVX(SP[0]), SvCUR(SP[0]));
        sv_catpvs(module, "::ISA");
        if ((isa = get_av(SvPVX(module), 0))) {
            SAVESPTR(isa);
            AV_PUSH(isa, newSVpvs("DynaLoader"));
        }
        call_pv("DynaLoader::bootstrap", G_DISCARD);
    }
    FREETMPS;
    LEAVE_with_name("bootstrap");
    XSRETURN_EMPTY;
}
XS(XS_DynaLoader_bootstrap)
{
    dXSARGS;
    IV i, flags = 0;
    char *modulename;
    CV *dl_load_file, *dl_find_symbol;
    CV *mod2fname;
    AV *modparts, *dirs;
    SV *module, *modfname, *modpname, *file, *bootname, *libref, *boot_symbol_ref;
    SV *xs, *flagsiv;
    I32 nret;

    if (items < 1 || !SvPOK(SP[0]))
        Perl_die(aTHX_ "Usage: DynaLoader::bootstrap(module)\n");
    dl_load_file = get_cv("DynaLoader::dl_load_file", 0);
    module = ST(0);

    /* XXX HACK! */
    if (items > 1) {
      if (SvPOK(module)) {
        modulename = SvPVX(module);
        if (modulename[0] >= '0' && modulename[0] <= '9')
          goto hack;
      }
      if (SvNOK(module)) {
        hack:
        DLDEBUG(1,PerlIO_printf(Perl_debug_log, "!! DynaLoader::bootstrap stack corruption %g\n",
                                SvNVX(ST(0))));
        SP--;
        module = ST(0);
        DLDEBUG(1,PerlIO_printf(Perl_debug_log, "!! DynaLoader::bootstrap module %s\n",
                                SvPVX(ST(0))));
      }
    }
    modulename = SvPVX(module);
    if (!dl_load_file) {
      Perl_die(aTHX_ "Can't load module %s, dynamic loading not available in this perl.\n"
               "  (You may need to build a new perl executable which either supports\n"
               "  dynamic loading or has the %s module statically linked into it.)\n",
               modulename, modulename);
    }
    dl_require_symbols = get_av("DynaLoader::dl_require_symbols", GV_ADDMULTI);
EOT
print OUT line_prefix(__LINE__, <<'EOT') if $^O eq 'os2';
    if (!SvTRUE_NN(get_sv("OS2::is_static")))
        Perl_die(aTHX_ "Dynaloaded Perl modules are not available in this build of Perl");
EOT

# now start splitting and walking modparts /::/ (no utf8 yet)
print OUT line_prefix(__LINE__, <<'EOT');
    modparts = newAV();
    {
        char *mn = SvPVX(module);
        char *cur = mn;
        int utf8 = SvUTF8(module);
        for (;; cur++) {
            if (!*cur) {
                AV_PUSH(modparts, newSVpvn_flags(mn, cur-mn, utf8));
                break;
            }
            else
            if (*cur == ':' && *(cur-1) == ':') {
                AV_PUSH(modparts, newSVpvn_flags(mn, cur-mn-1, utf8));
                mn = cur + 1;
            }
        }
    }
    modfname = AvARRAY(modparts)[AvFILLp(modparts)];

    /* Some systems have restrictions on files names for DLL's etc.
       mod2fname returns appropriate file base name (typically truncated).
       It may also edit @modparts if required. */
    mod2fname = get_cv("DynaLoader::mod2fname", 0);
    if (mod2fname) {
	DLDEBUG(2,PerlIO_printf(Perl_debug_log, "DynaLoader: Enter mod2fname with '%s'\n", SvPVX(modfname)));
        PUSHMARK(SP);
        PUTBACK;
        XPUSHs(newRV((SV*)modparts));
        call_sv((SV*)mod2fname, G_SCALAR);
        SPAGAIN;
        modfname = POPs;
	DLDEBUG(2,PerlIO_printf(Perl_debug_log, "DynaLoader: Got mod2fname => '%s'\n", SvPVX(modfname)));
    }
EOT
print OUT line_prefix(__LINE__, <<'EOT') if $^O eq 'NetWare';
    /* Truncate the module name to 8.3 format for NetWare */
    if (SvCUR(modfname) > 8)
	SvCUR_set((modfname, 8);
EOT
print OUT line_prefix(__LINE__, <<'EOT');
    modpname = newSVpvs("");
    for (i=0; i<=AvFILLp(modparts)-1; i++) {
        sv_catsv(modpname, AvARRAY(modparts)[i]);
        sv_catpvs(modpname, "/");
    }
    sv_catsv(modpname, AvARRAY(modparts)[AvFILLp(modparts)]);
    DLDEBUG(1, PerlIO_printf(Perl_debug_log, "DynaLoader::bootstrap for %s "
        "(auto/%s/%s%s)\n", modulename, SvPVX(modpname), SvPVX(modfname), dl_ext));

    dirs = newAV();
    for (i=0; i<=AvFILL(GvAV(PL_incgv)); i++) {
        SV **pdir = av_fetch(GvAV(PL_incgv), i, 0);
        SV *dir = pv_copy(*pdir);
        SV *slib;
#ifdef VMS
        char *buf = tounixpath_utf8_ts(aTHX_ dir, NULL, SvUTF8(dir));
        int len = strlen(buf);
        SvGROW(dir, len);
        SvPV_set(dir, buf);
        SvCUR_set(dir, len);
#endif
        file = NULL;
        sv_catpvs(dir, "/auto/");
        sv_catsv(dir, modpname);
        {
            const char *path = SvPV_nolen_const(dir);
	    if (!dir_exists(path)) { /* skip over uninteresting directories */
	        DLDEBUG(3,PerlIO_printf(Perl_debug_log, " skipping %s (not existing)\n",
                                        path));
                continue;
            }
        }

        slib = pv_copy(dir);
        sv_catpvs(slib, "/");
        sv_catsv(slib, modfname);
        sv_catpv(slib, dl_ext);

        if (SvIVX(do_expand)) {
            PUSHMARK(SP);
            PUTBACK;
            XPUSHs(slib);
            call_pv("DynaLoader::dl_expandspec", G_SCALAR);
            SPAGAIN;
            file = POPs;
            if (file == &PL_sv_undef)
                file = NULL;
            else
                break;
        }
        else {
	    if (fn_exists(SvPVX(slib))) {
                file = slib;
	        DLDEBUG(3,PerlIO_printf(Perl_debug_log, " found %s\n",
                                        SvPVX(slib)));
                break;
            }
        }
        av_push(dirs, dir);
    }
    if (!file) {
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: @INC/auto/%s/%s%s not found\n",
                                SvPVX(modpname), SvPVX(modfname), dl_ext));
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: Searching now %s and %s\n",
                                av_tostr(aTHX_ dirs), av_tostr(aTHX_ GvAV(PL_incgv))));
        /* last resort, let dl_findfile have a go in all known locations */
        if (AvFILLp(dirs) >= 0) {
            AV *tmp = newAV();
            for (i=0; i<=AvFILLp(dirs); i++) {
                SV *dir = newSVpvs("-L");
                sv_catsv(dir, AvARRAY(dirs)[i]);
                AV_PUSH(tmp, dir);
            }
            AV_PUSH(tmp, modfname);
            file = dl_findfile(aTHX_ tmp, G_SCALAR);
            SvREFCNT_dec_NN(tmp);
        }
        if (!file && AvFILLp(GvAV(PL_incgv)) >= 0) {
            AV *ori = GvAV(PL_incgv);
            AV *tmp = newAV();
            for (i=0; i<=AvFILLp(ori); i++) {
                SV *dir = newSVpvs("-L");
                sv_catsv(dir, AvARRAY(ori)[i]);
                AV_PUSH(tmp, dir);
            }
            AV_PUSH(tmp, modfname);
            file = dl_findfile(aTHX_ tmp, G_SCALAR);
            SvREFCNT_dec_NN(tmp);
        }
    }
    if (!file) {
        /* wording similar to error from 'require' */
        Perl_die(aTHX_ "Can't locate loadable object for module %s in @INC (@INC contains: %s)",
                 modulename, av_tostr(aTHX_ GvAV(PL_incgv)));
    } else {
	DLDEBUG(2,PerlIO_printf(Perl_debug_log, "DynaLoader: Found %s\n", SvPVX(file)));
    }
EOT

# TODO: put d_vms_case_sensitive_symbols into config.h to get rid of miniperl.
print OUT line_prefix(__LINE__, <<'EOT') if $^O eq 'vms' and $Config::Config{d_vms_case_sensitive_symbols};
#ifdef VMS
    if (!SvUTF8(file)) {
        /* no utf8 or multibyte! */
        char *fn = SvPVX(file);
	for (; *fn; fn++)
#ifdef USE_LOCALE_CTYPE
            *fn = (U8)toUPPER_LC(*fn);
#else
            *fn = (U8)toUPPER(*fn);
#endif
    } else {
      /* call pp_uc */
      SV *savestack = *Perl_stack_sp;
      *Perl_stack_sp = file;
      Perl_pp_uc();
      file = *Perl_stack_sp;
      *Perl_stack_sp = savestack;
    }
#endif
EOT

print OUT line_prefix(__LINE__, <<'EOT');

    bootname = newSVpvs("boot_");
    sv_catsv(bootname, module);
    for (i=5; i<(IV)SvCUR(bootname); i++) { /* $bootname =~ s/\W/_/g; */
        char *s = SvPVX(bootname);
        if (!isALNUMC_A(s[i]))
            s[i] = '_';
    }
    av_store(dl_require_symbols, 0, bootname);
    dl_find_symbol = get_cv("DynaLoader::dl_find_symbol", 0);

    /* TODO .bs support, call flags method */
    flagsiv = newSViv(flags);

    {
        char *save_last_error = dl_last_error;
	DLDEBUG(2,PerlIO_printf(Perl_debug_log, "DynaLoader: Enter dl_find_symbol with 0, '%s'\n",
                                SvPVX(bootname)));
        PUSHMARK(SP);
        XPUSHs(newSViv(0)); /* first try empty library handle, may already be loaded */
        XPUSHs(bootname);
        XPUSHs(newSViv(1)); /* ignore error, cperl only */
        PUTBACK;
        nret = call_sv((SV*)dl_find_symbol, G_SCALAR);
        SPAGAIN;
        if (nret == 1 && SvIOK(TOPs))
            boot_symbol_ref = POPs;
        else
            boot_symbol_ref = NULL;
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: Got loaded boot_symbol_ref => %lx\n",
            boot_symbol_ref ? SvIVX(boot_symbol_ref) : 0));
        if (boot_symbol_ref)
            goto boot;
        dl_last_error = save_last_error;
    }

    {
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: Enter dl_load_file with '%s' %ld\n",
                                SvPVX(file), flags));
        PUSHMARK(SP);
        XPUSHs(file);
        XPUSHs(flagsiv);
        PUTBACK;
        nret = call_sv((SV*)dl_load_file, G_SCALAR);
        SPAGAIN;
        if (nret == 1 && SvIOK(TOPs))
            libref = POPs;
        else
            libref = NULL;
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: Got libref=%lx\n", libref ? SvIVX(libref) : 0));
    }
    if (!libref) {
        SaveError(aTHX_ "Can't load '%s' for module %s:", file, modulename, dlerror());
        /* Perl_die(aTHX_ SvPVX_const(carp_shortmess(ax, MY_CXT.x_dl_last_error)); */
        Perl_die(aTHX_ dl_last_error);
    }
    {
        AV *dl_librefs = get_av("DynaLoader::dl_librefs", GV_ADDMULTI);
        AV_PUSH(dl_librefs, libref); /* record loaded object */
    }
    {
        PUSHMARK(SP);
        PUTBACK;
        nret = call_pv("DynaLoader::dl_undef_symbols", G_ARRAY);
        SPAGAIN;
        if (nret > 0) {
            AV *unresolved = newAV();
            for (i=0; i<nret; i++) {
                SV *sym = POPs;
                if (SvPOK(sym))
                    AV_PUSH(unresolved, sym);
            }
            SaveError(aTHX_ "Undefined symbols present after loading %s: %s\n", SvPVX(file), av_tostr(unresolved));
            Perl_die(aTHX_ dl_last_error);
        }
    }
    {
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: Enter dl_find_symbol with %p '%s'\n",
                                libref, SvPVX(bootname)));
        PUSHMARK(SP);
        XPUSHs(libref);
        XPUSHs(bootname);
        PUTBACK;
        nret = call_sv((SV*)dl_find_symbol, G_SCALAR);
        SPAGAIN;
        if (nret == 1 && SvIOK(TOPs))
            boot_symbol_ref = POPs;
        else
            boot_symbol_ref = NULL;
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: Got boot_symbol_ref => %lx\n",
                                boot_symbol_ref ? SvIVX(boot_symbol_ref) : 0));
    }
    if (!boot_symbol_ref) {
        Perl_die(aTHX_ "Can't find '%s' symbol in %s\n", SvPVX(bootname), SvPVX(file));
    }
    {
        AV *dl_modules = get_av("DynaLoader::dl_modules", GV_ADDMULTI);
        AV_PUSH(dl_modules, module); /* record loaded module */
    }

    {
        CV *dl_install_xsub = get_cv("DynaLoader::dl_install_xsub", 0);
        SV *bootstrap = newSVpvs("");
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: Enter dl_install_xsub with %s::bootstrap %lx %s\n",
                                modulename, SvIVX(boot_symbol_ref), SvPVX(file)));
        PUSHMARK(SP);
        sv_catsv(bootstrap, module);
        sv_catpvs(bootstrap, "::bootstrap");
        XPUSHs(bootstrap);
        XPUSHs(boot_symbol_ref);
        XPUSHs(file);
        PUTBACK;
        nret = call_sv((SV*)dl_install_xsub, G_SCALAR);
        SPAGAIN;
        if (nret == 1 && SvROK(TOPs))
            xs = POPs;
        else
            xs = NULL;
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: Got %s::bootstrap => CV<%p>\n",
                                modulename, xs));
    }
    {
        AV *dl_shared_objects = get_av("DynaLoader::shared_objects", GV_ADDMULTI);
        AV_PUSH(dl_shared_objects, file); /* record loaded files */
    }

   boot:
    {
	DLDEBUG(3,PerlIO_printf(Perl_debug_log, "DynaLoader: Enter &%s::bootstrap CV<%p> with %d args\n",
                                modulename, xs, items));
        SP = MARK + (items-1);
        PUSHMARK(SP);
        MARK = SP;
        /* XPUSHs(module); while (items-- > 1) XPUSHs(*++MARK);*/
        PUTBACK;
        XSRETURN(call_sv(xs, GIMME));
    }
}

XS(XS_DynaLoader_dl_findfile)
{
    dXSARGS;
    AV *args = av_make(items, SP);
    SV *file = dl_findfile(aTHX_ args, GIMME);
    if (!file) {
      XSRETURN_UNDEF;
    }
    SP -= items;
    if (GIMME == G_SCALAR) {
        XPUSHs(file);
        XSRETURN(1);
    }
    else {
        U32 i;
        AV* found = (AV*)file;
        if (AvFILLp(found)>=0) {
            for (i=0; i<=AvFILLp(found); i++) {
                XPUSHs(AvARRAY(found)[i]);
            }
            XSRETURN(i+1);
        }
        else
            XSRETURN_UNDEF;
    }
}

#ifndef VMS
/* Optional function invoked if DynaLoader sets do_expand.
   Most systems do not require or use this function.
   Some systems may implement it in the dl_*.xs file in which case
   this Perl version should be excluded at build time.

   This function is designed to deal with systems which treat some
   'filenames' in a special way. For example VMS 'Logical Names'
   (something like unix environment variables - but different).
   This function should recognise such names and expand them into
   full file paths.
   Must return undef if file is invalid or file does not exist. */
XS(XS_DynaLoader_dl_expandspec)
{
    dXSARGS;
    SV *file;
    char *fn;
    if (items != 1 || !SvPOK(ST(0)))
        Perl_die(aTHX_ "Usage: DynaLoader::dl_expandspec($filename)\n");

    file = ST(0);
    fn = SvPVX(file);
    if (!fn_exists(fn)) {
        DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dl_expandspec(%s) => %s\n",
                                fn, "undef"));
        file = &PL_sv_undef;
    } else {
        DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dl_expandspec(%s) => %s\n",
                                fn, fn));
    }
    ST(0) = file;
    XSRETURN(1);
}
>>>>>>>
#endif
}
EOT

close OUT or die $!;

