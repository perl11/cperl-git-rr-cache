=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.28.0

=head1 DESCRIPTION

This document describes differences between the cperl 5.26.2 and the cperl
5.28.0 release.

If you are upgrading from an earlier release such as v5.26.1c, first read
L<perl5262cdelta>, which describes differences between v5.26.1c and v5.26.2c.

=head1 Notice

The new cperl classes/roles have still some L<perlclass/LIMITATIONS>.

cperl did not change the B<subroutine attribute and signature order>.
This is the most damaging significant syntax change to date, even
worse than the unnecessary C<for (qw())> change, rendering all
existing attribute based frameworks useless. This change would have
required a major version bump to perl7.  Any minor problem with the
wrong order of evaluation should have been fixed internally and transparent
to the established syntax.

For all perl5 changes which were rejected in cperl 5.28 see
L<https://github.com/perl11/cperl/issues/356> and
L<https://github.com/perl11/cperl/issues/337>.

=head1 Core Enhancements

=head2 study HASH CODE ARRAY

study does not stringify hashes anymore, it rather calls the new
L<hv_study|perlapi/hv_study> function on hashes, which optimizes the
internal structure of a hash.  Currently clears all placeholders, and
optionally shrinks its size if the new size falls below a power of
two.  On code, regex and arrays it does nothing yet, but might add type
optimizations on the current dynamic status.
cperl-only.

=head2 New strict hashpairs

Added C<use strict 'hashpairs'> to allow only pairs for hash assignments,
within a map even only an empty or single pair.
See L<[cperl #281|https://github.com/perl11/cperl/issues/281>.
cperl-only.

=head2 Honor the BOM

With any of three supported BOMs set C<use utf8> and C<use feature
'unicode_strings'> at compile-time as documented until perl 5.26.

With 5.26 perl5 decided to change the documentation to match the
broken implementation.
With cperl 5.27.0c the implementation was fixed instead.
See L<[cperl #269]|https://github.com/perl11/cperl/issues/269>
and L<[perl #121292]|https://rt.perl.org/Public/Bug/Display.html?id=121292>.
cperl-only.

=head2 Safer perl -c:s cmdline flag

Avoid undoable and unsafe sideeffects (io, ...) in the CHECK mode,
esp. for editor syntax checks.
See L<[cperl #263]|https://github.com/perl11/cperl/issues/263>

Essentially prepend C<-Mops=:browse,:load,print> with C<-c:s>.
cperl-only.

=head2 class, role, method, has, fields

cperl has now the C<class>, C<role>, C<method> and C<has> keywords as in perl6, L<fields> was extended.
B<has> fields are lexically scoped variables, available in all methods and internally represented
via oelem OPs and fields.
C<multi> methods are not yet supported. There are no perl6-like public, private sigils,
use the C<_> prefix as convention for private.
See L<perlclass>.

Old user-subroutines or parser-hacks with these names are still
supported, but not recommended. L<B> does not export class anymore.

=head2 Check and normalize stringified names

Before symbols and identifiers created from strings at run-time were
added asis. Now those names are treated almost as in the parser at
compile-time, i.e. unicode is normalized, mixed Unicode scripts are
checked at run-time also. cperl-only.

Behaviour of L<perlapi/valid_ident>:

    ${"\xc3\x28"}       => FALSE.  Illegal unicode, but no warning or error,
                           unless under strict names.
    ${"E\x{45}\x{301}"} => TRUE.   Normalized to $E\x{c9}
    ${"एxṰர::ʦፖㄡsȨ"}   => FALSE. Error: Invalid script Tamil in identifier
                            ர::ʦፖㄡsȨ for U+0BB0. Have Devanagari

See below L</strict names>. C<use strict> fatalizes now any run-time
identifier parsing problem.
cperl-only.

=head2 strict names

strict names is the default when using C<use strict>.  Reject illegal
identifiers at run-time when created dynamically from strings, which
would be rejected at compile-time. cperl-only.

    use strict "names";
    ${"\$var"}    => Invalid identifier "$var" while "strict names"
    ${"\xff"}     => Invalid identifier "\377" while "strict names"
    ${"\xc3\x28"} => Invalid identifier "\303(" while "strict names"

See L<perldata/"Identifier parsing"> and
L<http://perl11.org/blog/strict-names.html>
cperl-only.

=head2 Optimize static methods to subs

When a method call can be proven at compile-time to use a specific
subroutine, optimize away the run-time method dispatch on a non-threaded perl.
When it is for a XS subroutine, such as with e.g. C<use strict;> which does
C<< BEGIN {require strict;} strict->import; >> the C<< strict->import >>
part is optimized from the slow C<entersub> op to the C<enterxssub> op,
as if via C<strict::import("strict",...)>.
The slow GV lookup in entersub cannot be converted to a faster CVref lookup,
as this would break dynamic method redefinitions.
See L<http://blogs.perl.org/users/rurban/2011/06/how-perl-calls-subs-and-methods.html>.
This is ~4% faster for each such method call.
cperl-only.

=head2 Dump more COP fields

Dump the values of a COP C<$^H>, C<%^H> and the lexical warnings via
C<op_dump()> and it's XS module L<Devel::Peek>.
Improve the display of cop SEQ values and ranges, and padnames.
Added a DEBUGGING C<cop_dump()> helper, esp. useful for deleted C<PL_curcop>'s.
cperl-only.

=head2 More unicode ops

Added the strong unicode fraction op C</> U+2044, which binds stronger
than all other arithmetic ops, and the two unicode multiplication ops
C<⋅> U+022C5 (dot operator) and C<∙> U+2219 (multiplication dot),
which binds the same as C<*>.
cperl-only.

=head2 L<delete|perlfunc/delete EXPR> on key/value slices

L<delete|perlfunc/delete EXPR> can now be used on key/value slices,
returning the keys along with the deleted values.
L<[perl #131328]|https://rt.perl.org/Ticket/Display.html?id=131328>

=head2 Unicode 10.0 is supported

A list of changes is at
L<http://www.unicode.org/versions/Unicode10.0.0>.

=head2 Experimentally, there are now alphabetic synonyms for some regular expression assertions

If you find it difficult to remember how to write certain of the pattern
assertions, there are now alphabetic synonyms.

 CURRENT                NEW SYNONYMS
 ------                 ------------
 (?=...)        (*pla:...) or (*positive_lookahead:...)
 (?!...)        (*nla:...) or (*negative_lookahead:...)
 (?<=...)       (*plb:...) or (*positive_lookbehind:...)
 (?<!...)       (*nlb:...) or (*negative_lookbehind:...)
 (?>...)        (*atomic:...)

These are considered experimental, so using any of these will raise
(unless turned off) a warning in the C<experimental::alpha_assertions>
category.

=head2 Re-enable warnings illegalproto

Parse prototypes for errors again. Either with C<:prototype()> or as
signature.  Illegal prototypes are not stored. Most illegal protos are
subsequently parsed as signature, but some are just wrong protos, such
as C<'[$'> missing the C<']'>, or C<:prototype($_$)>.

=head2 In-place editing is now safer

Previously in-place editing would delete or rename the input file
as soon as you started working on a new file.

Without backups this would result in loss of data if there was an
error, such as a full disk, when writing to the output file.

This has changed so that the input file isn't replaced until the
output file has been completely written and successfully closed.

This works by creating a work file in the same directory, which is
renamed over the input file once the output file is complete.

Incompatibilities:

=over

=item *

Since this renaming needs to only happen once, if you create a thread
or child process, that renaming will only happen in the original
thread or process.

=item *

If you change directories while processing a file, and your operating
system doesn't provide the C<unlinkat()>, C<renameat()> and C<fchmodat()>
functions, the final rename step may fail.

=back

L<[perl #127663]|https://rt.perl.org/Public/Bug/Display.html?id=127663>


=head2 Initialisation of aggregate state variables

A persistent lexical array or hash variable can now be initialized,
by an expression such as C<state @a = qw(x y z)>.  Initialization of a
list of persistent lexical variables is still not possible.

=head2 Full-size inode numbers

On platforms where inode numbers are of a type larger than perl's native
integer numerical types, L<stat|perlfunc/stat> will preserve the full
content of large inode numbers by returning them in the form of strings of
decimal digits.  Exact comparison of inode numbers can thus be achieved by
comparing with C<eq> rather than C<==>.  Comparison with C<==>, and other
numerical operations (which are usually meaningless on inode numbers),
work as well as they did before, which is to say they fall back to
floating point, and ultimately operate on a fairly useless rounded inode
number if the real inode number is too big for the floating point format.

=head2 Changed warnings::register handling of all

If a scope used "use warnings 'all'" to turn on all warnings and then
turned off some specific warnings, then that scope wouldn't get
warnings for subsequently-registered warning categories, because
its bitset doesn't extend to the bit controlling the new category.

Unlike all other warning categories, the bits for "all" used to be set
only when there were no warning categories disabled; disabling any
would also clear the "all" bits.  That was supporting the dynamic
nature of warnings::register extending the all-warnings bitset for
new categories.  This exception is now removed, so the meaning of the
"all" bits is now the more obvious meaning, of indicating the default
treatment that the scope wants for warnings not falling into any
category known to the bitset.  In C<warnings::warnif()> et al, if the
caller's bitset is found to be too short to have a bit for the
relevant category, then the setting for the "all" category is used
instead.

Because the length of a bitset is an integral number of bytes, but
only two bits are used per category, the length of a bitset doesn't
precisely indicate which categories had been registered by the time it
was constructed.  So the standard bitsets for the "all" category are
now always filled to their byte length, with bits set preemptively for
categories not yet registered that fall within the current bitset length.

When a warnings pragma operates on a bitset, it first expands it to the
preferred length, by duplicating the "all" bits for the categories covered
by the new length.  It is careful to maintain the length when combining
the bitset with the standard bitsets for categories.  When a bitset is
read from C<${^WARNING_BITS}> or from C<caller()>, the standard C<pWARN_ALL>
setting is no longer expanded by the core to C<$warnings::Bits{all}>,
because the core's short C<WARN_ALLstring> will now be expanded correctly
just like any other bitset.

Fixes L<[perl #108778]|https://rt.perl.org/Public/Bug/Display.html?id=108778>

=head2 Computed shaped array sizes

This is now a valid shaped array delaration, with the lhs array size
computed from the number of constant elements in the rhs list
expressions. The array must only consist of compile-time scalars.

    my @a[] = (0,1,2);

C<my @a[];> without assignment is still a syntax error.

See L<[cperl #210]|https://github.com/perl11/cperl/issues/210>
cperl-only.

=head2 New read-only predefined variable C<${^SAFE_LOCALES}>

This variable is 1 if the Perl interpreter is operating in an
environment where it is safe to use and change locales (see
L<perllocale>.)  This variable is true when the perl is
unthreaded, or compiled in a platform that supports thread-safe locale
operation (see next item).

=head2 Locales are now thread-safe on systems that support them

These systems include Windows starting with Visual Studio 2005 and
POSIX 2008 systems.

The implication is that you are now free to use locales and changes them
in a threaded environment.  Your changes affect only your thread.
See L<perllocale/Multi-threaded operation>

=head2 Mixed Unicode scripts in strings

perl5 added a string check via regex for mixed unicode scripts, which
might be marginally useful.  Note that this feature doesn't prevent
from security attacks as cperl identifier protections.  Only cperl
detects mixed unicode scripts in identifiers.

A mixture of scripts, such as Cyrillic and Latin, in a string is often
the sign of a spoofing attack.  A new regular expression construct
now allows for easy detection of these.  For example, you can say

 qr/(*script_run: \d+ \b )/x

And the digits matched will all be from the same set of 10.  You won't
get a look-alike digit from a different script that has a different
value than what it appears to be.

Or:

 qr/(*sr: \b \w+ \b )/x

makes sure that all the characters come from the same script.

You can also combine script runs with C<(?E<gt>...)> (or
C<*atomic:...)>).

Instead of writing:

    (*sr:(?<...))

you can now run:

    (*asr:...)
    # or
    (*atomic_script_run:...)

This is considered experimental, so using it will raise (unless turned
off) a warning in the C<experimental::script_run> category.

See L<perlre/Script Runs>.

=head2 String- and number-specific bitwise ops are no longer experimental

The new string-specific (C<&. |. ^. ~.>) and number-specific (C<& | ^ ~>)
bitwise operators introduced in Perl 5.22 that are available within the
scope of C<use feature 'bitwise'> are no longer experimental.
Because the number-specific ops are spelled the same way as the existing
operators that choose their behaviour based on their operands, these
operators must still be enabled via the "bitwise" feature, in either of
these two ways:

    use feature "bitwise";

    use v5.28; # "bitwise" now included

They are also now enabled by the B<-E> command-line switch.

The "bitwise" feature no longer emits a warning.  Existing code that
disables the "experimental::bitwise" warning category that the feature
previously used will continue to work.

One caveat that module authors ought to be aware of is that the numeric
operators now pass a fifth TRUE argument to overload methods.  Any methods
that check the number of operands may croak if they do not expect so many.
XS authors in particular should be aware that this:

    SV *
    bitop_handler (lobj, robj, swap)

may need to be changed to this:

    SV *
    bitop_handler (lobj, robj, swap, ...)

=head1 Security

=head2 [CVE-2017-12837] Heap buffer overflow in regular expression compiler

Compiling certain regular expression patterns with the case-insensitive
modifier could cause a heap buffer overflow and crash perl.  This has now been
fixed.
L<[perl #131582]|https://rt.perl.org/Public/Bug/Display.html?id=131582>

=head2 [CVE-2017-12883] Buffer over-read in regular expression parser

For certain types of syntax error in a regular expression pattern, the error
message could either contain the contents of a random, possibly large, chunk of
memory, or could crash perl.  This has now been fixed.
L<[perl #131598]|https://rt.perl.org/Public/Bug/Display.html?id=131598>

=head2 [CVE-2017-12814] C<$ENV{$key}> stack buffer overflow on Windows

A possible stack buffer overflow in the C<%ENV> code on Windows has been fixed
by removing the buffer completely since it was superfluous anyway.
L<[perl #131665]|https://rt.perl.org/Public/Bug/Display.html?id=131665>

=head2 Unsigned long stack access of printf format arguments

perl 5.27.5 started allowing unsigned long/4 stack indices for its sv
arguments, and width and precision with the API even allowing
C<unsigned long>.  Previously those numbers were safely typed to
C<int>. Revert that security problem in cperl. The maximal width and
precision is also back to INT_MAX.
See L<[cperl #344]|https://github.com/perl11/cperl/issues/344>

=head2 Disallow illegal glob with embedded NUL

E.g. C<< <$fh\000> >> throws now the safe syscalls warning, and errors
with C<Glob not terminated>, and does not pass the illegal glob path
to the internal or external glob.

This problem was added with v5.27.5 by replacing strchr with memchr,
allowing such illegal strings.
See L<[cperl #342]|https://github.com/perl11/cperl/issues/342>
cperl-only.

=head2 Follow chroot with chdir("/")

Fixed two security issues with the chroot op:

1. fail on embedded NUL in the chroot argument.
Set C<errno> to EINVAL.

2. If a call to chroot is not followed by a call to chdir("/") the
chroot jail confinement can be violated.  In Perl_pp_chroot: A call to
chroot followed by an operation that may escape from the chroot jail.
Coverity CID #165302 Insecure chroot.

=head2 Set umask(0600) before calling mkstemp

POSIX 2008 demands such an umask, but it is still problematic on
Solaris, HP-UX and AIX and older libcs, e.g. glibc <= 2.06.
Temporarily set the umask such that the temp. file has 0600 permissions.

=head2 Note on the perl5 Hash Function Change

perl5 still claims to have improved hash table security by switching
to mostly "secure" hash functions: Siphash (2-4 and 1-3 variants),
Zaphod32, and StadtX hash. In addition they support SBOX32 (a form of
tabular hashing) for hashing short strings, in conjunction with any of
the other hash functions provided.

This is a false claim and pure security theatre. Hash tables cannot be
made secure by switching to slower but still insecure hash
functions. Only hash function with more than 256 bits can be
considered secure All 32bit hash functions can be trivially
brute-forced (in up to max 4min for the slowest) once you know the
secret seed, which is easily exposed in perl5. Hash table security can
only be done via a secure collision strategy. Hash table hash
functions must be small and fast.

See also L<cperl hash tables|http://perl11.org/blog/cperl-hash-tables.html>
and L<The dangerous SipHash myth|http://perl11.org/blog/seed.html>

=head1 Incompatible Changes

=head3 use strict hashpairs

C<use strict> now includes a hashpair enforcement; this will now fail:

  my %xsc = map { /(.*)\.xs$/ ? ("$1.c" => 1, "$1.cc" => 1) : () } @files;

Two pairs being added in a map block violates strict hashpairs.
Add the second pair in a second loop or assign to an array and then to an hash
or add C<no strict 'hashpairs'>.

  my %xsc = map { /(.*)\.xs$/ && ("$1.c" => 1) } @files;
  /^(.*)\.xs$/) && $xsc{"$1.cc"} = 1 for @files;

or

  my @xsc = map { /(.*)\.xs$/ ? ("$1.c" => 1, "$1.cc" => 1) : () } @files;
  my %xsc = @xsc;

or

  my %xsc;
  {
    no strict 'hashpairs';
    %xsc = map { /(.*)\.xs$/ && ("$1.c" => 1) } @files;
    /^(.*)\.xs$/) && $xsc{"$1.cc"} = 1 for @files;
  }

cperl-only.

=head2 Comma-less variable lists in formats are no longer allowed

Omitting the commas between variables passed to formats is no longer
allowed.  This has been deprecated since perl 5.000.

=head2 The C<:locked> and C<:unique> attributes have been removed

These have been no-ops and deprecated since perl 5.12 and 5.10,
respectively.

=head2 C<\N{}> with nothing between the braces is now illegal.

This has been deprecated since Perl 5.24.

=head2 Opening the same symbol as both a file and directory handle is no longer allowed

Using L<open()|perlfunc/open FILEHANDLE,EXPR> and
L<opendir()|perlfunc/opendir DIRHANDLE,EXPR> to associate both a
filehandle and a dirhandle to the same symbol (glob or scalar) has
been deprecated since Perl 5.10.

=head2 Use of bare C<< << >> to mean C<< <<"" >> is no longer allowed

Use of a bare terminator has been deprecated since Perl 5.000.

=head2 Setting $/ to a reference to a non-positive integer no longer allowed

This used to work like setting it to C<undef>, but has been deprecated
since Perl 5.20.

=head2 Unicode code points with values exceeding C<IV_MAX> are now fatal.

This was deprecated since Perl 5.24.

=head2 C<B::OP::terse> no longer exists.

Use C<B::Concise::b_terse> instead.

=head2 Use of inherited AUTOLOAD for non-methods is no longer allowed.

This was deprecated in Perl 5.004.

=head2 Use of strings with code points over 0xFF is not allowed for
bitwise string operators

Code points over 0xFF do not make sense for bitwise operators.

=head2 Backslash no longer escapes colon in PATH for the -S switch

Previously the C<-S> switch incorrectly treated backslash ("\") as an
escape for colon when traversing the C<PATH> environment variable.
L<[perl #129183]|https://rt.perl.org/Ticket/Display.html?id=129183>

=head2 Subroutines no longer need typeglobs

Perl 5.22.0 introduced an optimization allowing subroutines to be stored in
packages as simple sub refs, not requiring a full typeglob (thus
potentially saving large amounts of memeory).  However, the optimization
was flawed: it only applied to the main package.

This optimization has now been extended to all packages.  This may break
compatibility with introspection code that looks inside stashes and expects
everything in them to be a typeglob.

When this optimization happens, the typeglob still notionally exists, so
accessing it will cause the stash entry to be upgraded to a typeglob.  The
optimization does not apply to XSUBs or exported subroutines, and calling a
method will undo it, since method calls cache things in typeglobs.

=head2 ... is a term in cperl, not a statement

perl5.27.6 restricted C<...>, the yada-yada operator, to be a
statement only.  cperl reserved C<...> for the ellipsis,
i.e. unassigned varargs in signatures to be passed through. Which is
not a statement, but a term.  In cperl C<...> is a TERM. Before C<...>
was parsed as an operator, also used for ranges.

This affects illegal code like:

    ... . "foo";
    ... if $a < $b;
    do{...}

cperl-only.

=head2 Illegal NUL, syntax error

Embedded NUL bytes read from files, not used in filters, are not
whitespace anymore, they are syntax errors.

See L<[cperl #345]|https://github.com/perl11/cperl/issues/345> vs
L<[perl #105920]|https://rt.perl.org/Public/Bug/Display.html?id=105920>.

Parsing NUL bytes is now consistent from files with eval string.
C<\0> delimited C<q> quote is still valid though.

=head2 Only B::class is valid

The L<B> module does not export the B<class> method anymore. You need to use the
full C<B::class> name to avoid confusion with the new L<class|perlclass> keyword.
cperl-only.

=head2 Sort algorithm can no longer be specified

Since Perl 5.8, the L<sort> pragma has had subpragmata C<_mergesort>,
C<_quicksort>, and C<_qsort> that can be used to specify which algorithm
perl should use to implement the L<sort|perlfunc/sort> builtin.
This was always considered a dubious feature that might not last,
hence the underscore spellings, and they were documented as not being
portable beyond Perl 5.8.  These subpragmata have now been deleted,
and any attempt to use them is an error.  The L<sort> pragma otherwise
remains, and the algorithm-neutral C<stable> subpragma can be used to
control sorting behaviour.
L<[perl #119635]|https://rt.perl.org/Ticket/Display.html?id=119635>

=head2 Over-radix digits in floating point literals

Octal and binary floating point literals used to permit any hexadecimal
digit to appear after the radix point.  The digits are now restricted
to those appropriate for the radix, as digits before the radix point
always were.

=head2 Return type of C<unpackstring()>

The return types of the C API functions C<unpackstring()> and
C<unpack_str()> have changed from C<I32> to C<SSize_t>, in order to
accommodate datasets of more than two billion items.

=head1 Deprecations

=head2 Use of L<C<vec>|perlfunc/vec EXPR,OFFSET,BITS> on strings with code points above 0xFF is deprecated.

Use of these is nonsensical, as C<vec> is a bit-oriented operation,
which operates on the underlying UTF-8 representation these strings must
be in, and will likely give unexpected results.

=head2 Some uses of unescaped C<"{"> are no longer fatal

Perl 5.26.0 fatalized some uses of an unescaped left brace, but an
exception was made at the last minute, specifically crafted to be a
minimal change to allow GNU Autoconf to work.  This code is heavily
depended upon, and continues to use the deprecated usage.  Its use of an
unescaped left brace is one where we have no intention of repurposing
C<"{"> to be something other than itself.

That exception is now generalized to include various other such cases
where the C<"{"> will not be repurposed.  This is to get real experience
with this more complicated change now, in case we need to issue a dot
release if we find other things like Autoconf that are important to work
around.

Note that these uses continue to raise a deprecation message.

=head2 Use of unescaped C<"{"> immediately after a C<"("> in regular expression patterns is deprecated

Using unescaped left braces is officially deprecated everywhere, but it
is not enforced in contexts where their use does not interfere with
expected extensions to the language.  A deprecation is added in this
release when the brace appears immediately after an opening parenthesis.
Before this, even if the brace was part of a legal quantifier, it was
not interpreted as such, but as the literal characters, unlike other
quantifiers that follow a C<"("> which are considered errors.  Now,
their use will raise a deprecation message, unless turned off.

=head2 Assignment to C<$[> will be fatal in Perl 5.30

Assigning a non-zero value to L<C<$[>|perlvar/$[> has been deprecated
since Perl 5.12, but was never given a deadline for removal.  This has
now been scheduled for Perl 5.30.

=head2 hostname() won't accept arguments in Perl 5.32

Passing arguments to C<Sys::Hostname::hostname()> was already deprecated,
but didn't have a removal date.  This has now been scheduled for Perl
5.32.  L<[perl #124349]|https://rt.perl.org/Ticket/Display.html?id=124349>

=head2 No autovivification of hash slice anymore

This is a new syntax warning, which is deprecated, and will disappear
with v5.30c.  Hash slices and key/value hash slices autovivified in
subroutine arguments. This was a bug, but to check all your code for
correctness and portability we keep this warning for 2 releases.  See
L<[cperl #347]|https://github.com/perl11/cperl/issues/347> and
L<perldiag/"No autovivification of hash slice anymore">.
cperl-only.

=head2 Module removals

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item L<Locale::Codes>

was removed with 5.28 in perl and cperl.

=item L<B::Debug>

will be removed from core with 5.30, and needs to be installed from
CPAN then.  Best together with L<B::Flags>.

=item L<DirHandle>

is marked as deprecated and obsolete.

=back

=head1 Performance Enhancements

=over 4

=item *

The start up overhead for creating regular expression patterns for /i
case-folding and with Unicode properties (C<\p{...}>) has been greatly
reduced in most cases.

=item *

On hash split and shrink the rounding up to a power of 2 has been
improved by a factor of 10^8 on modern hardware (that's 8 zeros: 100000000).
On old hardware by a factor of 2.
cperl-only.

=item *

Replaced the old quadratic bsd glob with a linear glob, detected by
Russ Cox L<https://research.swtch.com/glob>.

=item *

XS calls and static method calls were made faster again. Previously
cperl (with 5.22.1c) fell from pure perl calls to XS calls and changed
the call type to ENTERXSSUB for faster subsequent invocations. This
made bigger examples ~10% faster.  Now the compiler detects calls to
XS code and changes the type to ENTERXSSUB.  Also the method cache
code checks now for an XS call and changes the type of the next
OP. Overall the improvement is ~3.5%, but it depends on the frequency
of XS calls. It's 0.5-1% slower without any XS call.  Note that p5p
decided to delete this feature request from it's TODO list.

All static method calls are now optimized to function calls at compile-time.

Before:

    $ cperl5.27.0d-nt -Dt -e'use strict'
    (-e:1)	nextstate
    (-e:1)	const(PV("strict.pm"))
    (-e:1)	require
    (-e:1)	nextstate
    (-e:1)	pushmark
    (-e:1)	const(PV("strict"))
    (-e:1)	method_named(->import)
    (-e:1)	entersub(strict::import)
    (-e:1)	enterxssub(strict::import)
    (-e:1)	leavesub

v5.27.1c:

    $ cperl5.27.1d-nt -Dt -e'use strict'
    (-e:1)	nextstate
    (-e:1)	const(PV("strict.pm"))
    (-e:1)	require
    (-e:1)	nextstate
    (-e:1)	pushmark
    (-e:1)	const(PV("strict"))
    (-e:1)	method_named(->import)
    (-e:1)	enterxssub(strict::import)
    (-e:1)	leavesub

v5.27.2c:

    $ cperl5.27.2d-nt -Dt -e'use strict'
    (-e:1)	nextstate
    (-e:1)	const(PV("strict.pm"))
    (-e:1)	require
    (-e:1)	nextstate
    (-e:1)	pushmark
    (-e:1)	const(PV("strict"))
    (-e:1)	gv(strict::import)
    (-e:1)	enterxssub(strict::import)
    (-e:1)	leavesub

See L<http://blogs.perl.org/users/rurban/2011/06/how-perl-calls-subs-and-methods.html>

We don't yet optimize typed scalars to a static call. We don't walk
the subtypes yet to find the method. The remaining C<const(PV("strict"))>
op looks superfluous also, as the package is already resolved at compile-time.
cperl-only.

=item *

Most checks for readonly packages are now avoided, needed to bypass
the "Attempt to access disallowed key %s in the restricted hash
%CLASS::" errors. Stash lookup now got a B<GV_CLASS> flag and C<hv_fetch*_ifexists>
macros, which does the EXISTS and FETCH hash actions in the stash on one.
cperl-only.

=item *

Optimized the loop ITER ops to jump directly to the subsequent AND op.
For an empty body, this cuts about 20% off the time of an iteration.
Backported from perl-5.27.3. This is a simplier implementation of
the cperl F<feature/gh138-iter-and> branch from L<[cperl
#138]|https://github.com/perl11/cperl/issues/138>.
cperl-only.

Thus inner loops are now smaller and faster: 15%-50%.

e.g. before:

     f  <{> enteriter(next->q last->t redo->g) KS/DEF
     r  <0> iter_ary s
     s  <|> and(other->g) K/1
     g      <;> nextstate(main 559 (eval 15):1) v:{
     h      <$> gvsv(*_) s

Now:

     f  <{> enteriter(next->q last->s redo->g) KS/DEF
     r  <|> iter_ary(other->g) sK
     g      <;> nextstate(main 559 (eval 15):1) v:{
     h      <$> gvsv(*_) s

cperl-only, L<[cperl #138]|https://github.com/perl11/cperl/issues/138>.
Upstream 5.27 improved also a bit by skipping the AND op at run-time.
cperl removed it from the optree at compile-time.

=item *

The L<fields> API refactor using a local L<perlapi/HvFIELDS> buffer
and not globals C<%FIELDS> and C<@FIELDS> SVs anymore gained 25% speed
and similar memory improvements.
cperl-only.

=item *

Optimize field method calls to faster oelemfast OPs, accessing the
field directly.
cperl-only.

=item *

Removed C<PL_sv_count> variable and updates on every C<new_SV> and
C<del_SV> on non-DEBUGGING builds.  For refcount leak checks scan the
arenas.
cperl-only.

=item *

C<SvTRUE()> is now more efficient.

=item *

The C<ref()> builtin is now much faster in boolean context, since it no
longer bothers to construct a temporary string like C<Foo=ARRAY(0x134af48)>.

=item *

C<keys()> in void and scalar contexts is now more efficient.

=item *

Various integer-returning ops are now more efficient in scalar/boolean context.

=item *

The common idiom of comparing the result of index() with -1 is now
specifically optimised,  e.g.

    if (index(...) != -1) { ... }

=item *

Slightly improved performance when parsing stash names.
L<[perl #129990]|https://rt.perl.org/Public/Bug/Display.html?id=129990>

cperl added the optiomization to skip expanding C<'> to C<::>, as using 
C<'> as package seperator was removed earlier.

=item *

Calls to C<require> for an already loaded module are now slightly faster.
L<[perl #132171]|https://rt.perl.org/Public/Bug/Display.html?id=132171>

=item *

Many string concatenation expressions are now considerably faster, due
to the introduction internally of a C<multiconcat> opcode which combines
multiple concatenations, and optionally a C<=> or C<.=>, into a single
action. For example, apart from retrieving C<$s>, C<$a> and C<$b>, this
whole expression is now handled as a single op:

    $s .= "a=$a b=$b\n"

As a special case, if the LHS of an assign is a lexical variable or
C<my $s>, the op itself handles retrieving the lexical variable, which
is faster.

In general, the more the expression includes a mix of constant strings and
variable expressions, the longer the expression, and the more it mixes
together non-utf8 and utf8 strings, the more marked the performance
improvement. For example on a C<x86_64> system, this code has been
benchmarked running four times faster:

    my $s;
    my $a = "ab\x{100}cde";
    my $b = "fghij";
    my $c = "\x{101}klmn";

    for my $i (1..10_000_000) {
        $s = "\x{100}wxyz";
        $s .= "foo=$a bar=$b baz=$c";
    }

In addition, C<sprintf> expressions which have a constant format
containing only C<%s> and C<%%> format elements, and which have a fixed
number of arguments, are now also optimised into a C<multiconcat> op.

This is not yet supported by the L<B::C> compiler modules.

=item *

Subroutines in packages no longer need to be stored in typeglobs, saving
large amounts of memory.  See L</Subroutines no longer need typeglobs>
under L</Incompatible Changes>, above.

=item *

The performance of pattern matching C<[[:ascii:]]> and C<[[:^ascii:]]>
has been improved significantly except on EBCDIC platforms.

=item *

Various optimizations have been applied to matching regular expression
patterns, so under the right circumstances, significant performance
gains may be noticed.  But in an application with many varied patterns,
little overall improvement likely will be seen.

=item *

Other optimizations have been applied to UTF-8 handling, but these are
not typically a major factor in most applications.

=back

=head1 Modules and Pragmata

Key highlights in this release across several modules:

=head2 Removal of use vars

The usage of C<use vars> has been discouraged since the introduction of C<our> in
Perl 5.6.0. Where possible the usage of this pragma has now been removed from
the Perl source code.

This had a slight effect (for the better) on the output of
C<WARNING_BITS> in L<B::Deparse>.

Several core modules released on CPAN will not work anymore with perl
versions prior to 5.6.

=head2 Use of DynaLoader changed to XSLoader in many modules

XSLoader is more modern, and most modules already require perl 5.6 or
greater, so no functionality is lost by switching. In some cases, we have
also made changes to the local implementation that may not be reflected in
the version on CPAN due to a desire to maintain more backwards
compatibility.

Note that XSLoader is just an convenience extension over DynaLoader,
for pure speed or less codesize DynaLoader is still the best solution.

=head2 New Modules and Pragmata

=over 4

=item L<Mu> 0.01

For now only the C<new>, C<CREATE> and C<fields> methods, implemented as XS builtins.

=item L<Metamodel>

Just the documentation for the perl6 MOP.

=back

=head2 Updated Modules and Pragmata

=over 4

=item L<Archive::Tar> 2.30

'0' is a valid name for an archive, change 'iter' to check definedness.
See L<https://metacpan.org/changes/distribution/Archive-Tar>

Fix creating file with trailing whitespace on filename - fixes 103279

Allow archiving with absolute pathnames - fixes 97748

Small POD fix

Speed up extract when archive contains lots of files

CVE-2018-12015 directory traversal vulnerability
L<[cpan #125523]|https://rt.cpan.org/Ticket/Display.html?id=125523>

=item L<arybase> 0.15

Remove #ifdef USE_ITHREADS around MUTEX_* calls

=item L<attributes> 1.14c

Remove deprecated no-op attributes :unique, :locked.
Added another param to validate_proto.

Fixed :const parsing with SVs (cperl-only). Previously :const would set
the containing sub to :const, now it sets the lexical to readonly,
with deferring the attributes::import call after an assignment.

    my %h :const = (a => 1);
=>
    assign %h = (...);
    attributes->import(PACKAGE, \%h, const);

See L<[cperl #294]|https://github.com/perl11/cperl/issues/294>.

=item L<Attribute::Handlers> 1.01_01

Remove deprecated no-op attributes :unique, :locked

Fix autovivification bug with hash slice args to a function.

=item L<B> 1.71_08

Support PL_sv_zero

Add non-destructive $cv->PUREGV method, which does not create a GV
from a CvNAMED $cv.
Warning: $cv->GV does create a GV from a CvNAMED $cv.

Internal Refactor: thread API

Add many missing methods and docs. Some from B::C.

Don't export class anymore.

=item L<B::C> 1.55_08

Support pgcc, seperate it from gcc

One global dJMPENV target, not multiple. Esp. for B::CC.

ByteLoader 0.12 fix bytecode types, xgv_flags, xcv_flag were too small.
type bs_sv to also include PADNAME, PADLIST, PADNAMELIST as union.

Add t/testc.sh

Fix compile-time REGEXP

Protect from destructive $cv->GV, renamed is_lexsub to is_named,
allow @0, &0, ... types.

Support POK/PVLV REGEXP for v5.27.3/v5.27.2c

VOL => volatile for  v5.27.6/v5.27.2c

Warning: The new multiconcat op is not yet supported.

=item L<B::Concise> 1.003c

Support the new strict hints flags and abbrevate all strict flags as strict.

Support PL_sv_zero

=item L<B::Deparse> 1.48_04c

Support boolean optims.

Better constant-dumping heuristics.

Many other bug fixes, and in particular, it now deparses variable
attributes correctly:

    my $x :foo;  # used to deparse as
                 # 'attributes'->import('main', \$x, 'foo'), my $x;

=item L<B::Terse> 1.09_01

Remove internal links to B::Debug

=item L<B::Xref> 1.07_01

Support sub refs

=item L<base> 2.27c

Turn off HvCLASS again, just turn on SvREADONLY C<@ISA>.
With all the new class features, we cannot and should not compete.

The problem is the new sub as :method warning with classes, which
would cause all Test::Simple methods to be declared as :method, as they
derive from base.

Limit dotless-INC effect on base.pm with guard

=item L<bignum> 0.49

=item L<blib> 1.07

=item L<bytes> 1.06

=item L<Carp> back to 1.45_01c

The perl5.28 Carp 1.49 update broke the B::C compiler by compile-time references
to too many packages for no apparent reason: warnings, overloading, overload,
UNIVERSAL::isa. Even the simpliest scripts could not be compiled anymore.

We rather suggest fixing the broken code by checking the warnings, as in the
changed tests. The infinite recursion bug in t/Carp_overloadless.t is handled
by use warnings FATAL => 'recursion' in the test, and your code should also.

The t/rt52610_crash.t with refcounted stack corruption is handled by
eval wrapping in the test as your code should also.

The next Carp written in XS will not have these limitations, but a PP
Carp should not overdo it. backtraces in critical error cases should
be stable and perform no additional unstable dynamic loading.

Fix problems introduced by the partial EBCDIC support from version
1.35, and ISA constants. Not all stash elements are globs.

=item C<charnames> 1.45

Remove obsolete pod about NBSP

=item L<Compress::Raw::Bzip2> 2.081

Support pgcc, seperate it from gcc

=item L<Compress::Raw::Zlib> 2.081

Support pgcc, seperate it from gcc

Updated internal zlib from 1.2.8 to latest, past 1.2.11

Silence gcc compiler warnings when -Wsign-compare is enabled
#123688: Compilation warnings with clang

Silence gcc compiler warnings when -Wimplicit-fallthrough is enabled
#123358: Compilation warnings with gcc-7.*

Windows uses -lzlib. Linux uses -lz
#123699: wrong external zlib name used on Windows

Update zlib-src directory to use zlib 1.2.11
#123245: perl 5.26.1 is vulnerable to CVE-2016-9843, CVE-2016-9841, CVE-2016-9840, CVE-2016-9842

Don't allow offset to be greater than length of buffer in crc32.

Change my_zcalloc to use safecalloc.
L<https://github.com/madler/zlib/issues/253> is the upstream report for the remaining 
valgrind errors not already dealt with by 1.2.11. Using calloc in Zlib.xs for now as a workaround.
#121074: valgrind errors in the test suite

Fixed upstream deflate. See L<https://github.com/madler/zlib/pull/327>
1.2.11 is not recommended to use.

=item L<Config::Extensions> 0.02

=item L<Config::Perl::V> 0.30_01

Add test for 5.26.1-RC1, and some cperl -V's

Fix signature with argument

Ignore ccache and compiler path in signature

Add default_inc_excludes_dot

use vars => our

=item C<constant> 1.34

=item C<coretypes> 0.03c

Each coretype is now a class.

=item L<CPAN> 2.20_01

See L<https://github.com/andk/cpanpm/pull/109>

=item L<Cpanel::JSON::XS> 4.06

MSVC 14.0 support and higher, changed nan in the runtime.

Stringify true again as "1".

Disallow duplicate keys by default, only allow them in relaxed mode.

De-fragilize t/96_mojo.t false test to "". It mostly is.

Fix and unify utf8 handling with 5.6.2 and improve many utf8 tests.

Add tests for boolean sv_yes and sv_no.

Check for correct module in %INC.

Relax inf/nan detection for newer msvcrt.dll runtime versions
(it's now almost ANSI).

Fixed locale-insensitive numeric conversion on older perls.
Fixed compilation under windows.

Simplify C<allow_singlequote> check, coverity cid #165321.
Remove logical dead code.

Added Cpanel::JSON::XS::Type as 2nd optional encode argument.

Removed calling get magic hooks twice in encode.

Fix setlocale thread race for older perls.

Fix overloaded eq/ne comparisons (GH #116 by demerphq, GH #117 by Graham Knopp):
detect strings, protect from endless recursion. false is now ne "True".
clarify eq/ne rules in the docs.

Set decoded type (PR #115 by Pali)

Add json_type_weaken (PR #114 by Pali)

Fix tests for 5.6 (rurban, pali)

Add sereal cpanel_json_xs type (#110 James Rouzier)

Improved bencode/bdecode methods in cpanel_json_xs (#111 Fulvio Scapin)

Add encoder indent_length method (#103 rouzier), previously hard-coded to 3.

Fix centos7 locale crash (#101 McA), fix required for all
threaded perl's < 5.22 with glibc.

Fix uselocale() code. Probe for uselocale and xlocale.h with <5.22 threaded.

Avoid setlocale race in threads with non-C locales, where the threads differ
in the LC_NUMERIC locale. (#99 pali)

=item L<Data::Dumper>  2.170_03

Attempt to work around XS deparse issues on old perls.

XS improvements

Quoting of glob names now obeys the Useqq option
L<[perl #119831]|https://rt.perl.org/Ticket/Display.html?id=119831>.

Attempts to set an option to C<undef> through a combined getter/setter
method are no longer mistaken for getter calls
L<[perl #113090]|https://rt.perl.org/Ticket/Display.html?id=113090>.

=item L<Devel::Peek> 1.27_03

Add TYPECHECKED, RETTYPE and pad var names and types.

Dump the values of a COP $^H, %^H and lexical warnings.
Improved the test a bit.

Use cv_set_call_checker_flags

=item L<Devel::PPPort> 3.40_04

Restore silence under C<make -s>. I broke it in cperl 5.27.0

Add C<#if { CPERL && VERSION > 5.26.0 }> support, support parser enum expectation.

mkppport called PPPort_pm.PL without passing through MAKEFLAGS. Add --quiet support there

Fix WIDEST_UTYPE

Support strict hashpairs, fix for . in @INC.

=item L<deprecate>  0.03_01

Add pod synopsis for modules for older perls.

=item L<Digest::SHA> 6.01

Remove deprecated -p option

=item L<DirHandle> 1.05

Document as obsolete

=item L<DynaLoader> 2.09c

Fix wrong usage of C<SvREFCNT_inc_simple_NN> with a function, fixes a memory leak.

=item L<Encode> 2.98

no strict hashpairs in encoding.
fixed some -Wsign-compare
See L<https://metacpan.org/changes/distribution/Encode>

Skip the flapping test F<t/Aliases.t> on threaded smokers, with random
segfaults.  This is a long standing core bug, with PMOP aliases or
clone. First observed at L<https://github.com/rurban/perl-compiler/issues/73>
(since 5.6)

Stop directory tweaking C<$Encode::Encoding{utf8}>

Fix gcc warnings for older gcc < 4.0

Where possible do not depend on value of $@, instead use return value
of eval

Fix more XS problems in Encode.xs file

Load modules Encode::MIME::Name and Storable normally

Remove no warnings 'redefine'; and correctly loaddependences

Remove PP stubs and reformat predefine_encodings()

Run Encode XS BOOT code at compile time

Use Encode::define_encoding and propagate carp/croak message

cperl fixes: encoding undeprecated, no strict hashpairs

Cleanup code for handling fallback/replacement characters

lib/Encode/MIME/Name.pm t/mime-name.t
Pulled: Add "euc-cn" => "EUC-CN" alias to Encode::MIME::Name
https://github.com/dankogai/p5-encode/pull/124

lib/Encode/CN/HZ.pm lib/Encode/JP/JIS7.pm lib/Encode/MIME/Header.pm
t/decode.t
Pulled: Uninitialized value fixes #122
https://github.com/dankogai/p5-encode/pull/122

Makefile.PL
Pulled: Fix -Werror=declaration-after-statement for gcc 4.1.2
https://github.com/dankogai/p5-encode/pull/121

Fixed deep recursion in Encode::find_encoding when decoding.

=item L<experimental> 0.019_01c

eval use feature, minor test fix.

=item L<Exporter> 5.73

=item L<ExtUtils::CBuilder> 0.280230

Fix C++ compiler detection (RT #131749)

=item L<ExtUtils::Constant> 0.25_01

Minor updates from p5p

=item L<ExtUtils::Embed> 1.35

=item L<ExtUtils::Install> 2.14

Fix tests for when perl path contains a space

Fix win32 check

'make -s' support: set $INSTALL_QUIET automatically

Optimisations:

  * use our instead of vars
  * lazy load modules
  * make OS variables into constants
  * move some calculations out of a loop

Removed instructions using Build.PL from README

Load Win32API::File for _move_file_at_boot only when needed

Allow disabling autosplit by omitting autosplit dir

=item L<ExtUtils::MakeMaker> 8.34_04

Merge our fixes to upstream 7.34 (which has e.g. the dlltool mingw
fixes). Many fixes were already in, but some new upstream bugs crept
in.

Support IO::Scalar handle as $parsefile argument to
ExtUtils::MM_Unix::parse_version().

fix Invalid Locale symbol name. Invalid identifier "ENCODING_UTF-8"
while "strict names"

fix XSMULTI static with strict linkers, avoid duplicate symbol
_boot_XS__Test in: Test.o blib/arch/auto/XS/Test/Test.a(Test.o)

xsstatic: fixup MAKE_APERL_FILE, which was Makefile.aperl.aperl

=item L<ExtUtils::Miniperl> 1.08

Support B<afl-fuzz> with L<afl-clang-fast|perlhacktips/"afl-fuzz">

=item L<ExtUtils::ParseXS> 3.39_03

Skip C<PUTBACK;return;> on XSRETURN in PPCODE

Remove perl5 incompatible C<__attribute__global__> needed for -flto.
C<XS_EXTERNAL> has it already.

Moved xs pods still missing from the CPAN release completely to core.

=item L<ExtUtils::Typemaps> 3.38

=item L<ExtUtils::XSSymSet> 1.4

=item L<feature> 1.52_01

=item L<fields> 2.26c

A cperl class has now fields with C<@class::FIELDS> targ offsets to
the lexical fields, and the old C<%type::FIELDS> hash pointing to the
C<*class> GV, allowing again compile-time type checks on typed object
hash accesses.

Implemented L<Mu/fields> returning fields objects, as in perl6
(there called I<Attributes>).

Revert the conversion of a fields package to class. Only close
the ISA as with base.

cperl-only.

=item L<File::Copy> 2.33

It will now use the sub-second precision variant of C<utime()> supplied by
L<Time::HiRes> where available.
L<[perl #132401]|https://rt.perl.org/Ticket/Display.html?id=132401>.

=item L<File::Fetch> 0.56

Switch test URL from www.cpan.org to httpbin.org

=item L<File::Glob> 1.31

Skip a test when File::Glob not used.
Avoid undefined behaviour in Copy() [perl #131746]

=item L<File::Path> 3.15_01c

Remove erroneous documentation.

Correct skip count for Windows.

Comment out two TODO tests.

Make subdirectory names used in tests more random.

=item L<File::Spec::Functions> 3.36_05

Bumped version from unparsable 3.3.65, which prevented e.g.
File::chdir to install.

=item L<File::stat> 1.08

=item L<FileCache> 1.10

=item L<Filter::Simple> 0.95

Various small documentation fixes.
Swap out base.pm use for parent.pm.
Remove use of deprecated \C regex feature.
Filter::Simple was erroneously signalling eof if it encountered a
‘no MyFilter’ right after ‘use’:
      use MyFilter;
      no MyFilter;
In this case it should simply not filter anything.

=item L<Filter::Util::Call> 1.58

XSLoader, our. defer Carp.

Add filter_read_exact tests.

=item L<GDBM_File> 1.17

Its documentation now explains that C<each> and C<delete> don't mix in
hashes tied to this module
L<[perl #117449]|https://rt.perl.org/Ticket/Display.html?id=117449>.

It will now retry opening with an acceptable block size if asking gdbm
to default the block size failed
L<[perl #119623]|https://rt.perl.org/Ticket/Display.html?id=119623>.

=item L<Getopt::Long> 2.50

Fix bug L<https://rt.cpan.org/Ticket/Display.html?id=120231>.

Fix bug L<https://rt.cpan.org/Ticket/Display.html?id=120300>.
Unfortunately, this withdraws a small part of fix 114999.  GNU
C<getopt_long()> does not accept the (optional) argument to be passed
to the option without C<=> sign.  We do, since not doing so breaks
existing scripts.

Provide a default value for options (B<gnu_compat> mode).
Thanks to Andrew Gregory.

=item L<Hash::Util>  0.22_01

XS formatting

=item L<Hash::Util::FieldHash> 1.20

=item L<HTTP::Tiny>  0.070_01

Fix new Autovivified hash slice warning

=item L<I18N::Langinfo> 0.17

Use the new core function C<Perl_langinfo()>.

This module is now available on all platforms, emulating the system
L<nl_langinfo(3)> on systems that lack it.  Some caveats apply, as
L<detailed in its documentation|I18N::Langinfo>, the most severe being
that, except for MS Windows, the C<CODESET> item is not implemented on
those systems, always returning C<"">.

It now sets the UTF-8 flag in its returned scalar if the string contains
legal non-ASCII UTF-8, and the locale is UTF-8
L<[perl #127288]|https://rt.perl.org/Ticket/Display.html?id=127288>.

This update also fixes a bug in which the underlying locale was ignored
for the C<RADIXCHAR> (always was returned as a dot) and the C<THOUSEP>
(always empty).  Now the locale-appropriate values are returned.

=item L<I18N::LangTags>  0.43_01

Linkify docs.

=item L<if> 0.0608

Doc how to import when you want to C<use MODULE ()>

=item L<IO>  1.39_01

replace use vars with our,
run-time load Carp,
Bump versions of 3 Socket modules.
Remove 5.6 support

=item L<IO::Compress::Base> 2.081

lots of whitespace fixes in zipdetails
exclude t/999pod.t also

=item L<IO::Socket::IP> 0.39_02

Fix new Autovivified hash slice warning

=item L<IPC::Cmd> 1.00

Added C<wait_loop_callback> for C<run_forked()>

Only search in curdir in C<can_run(>) when on Win32
L<RT #105601|https://rt.cpan.org/Ticket/Display.html?id=105601>

=item L<JSON::PP> 2.97001_04

Various, see L<https://metacpan.org/changes/distribution/JSON-PP>
Merged 2.97001 from cpan with ours.
Minor updates, mostly docs.
Upstream Boolean still did not work with Cpanel::JSON::XS.

=item C<libnet> 3.11_01

=item L<List::Util> 1.49_10

Fixup the new pairmap spill code.

=item L<Locale::Codes> 3.55

Deprecated from core, moved to cpan.

=item L<Locale::Maketext> 1.29

=item L<Math::BigInt> 1.999811

=item L<Math::BigInt::FastCalc> 0.5006

=item L<Math::BigRat> 0.2613

Fix problem with second operand being changed in multiplication
L<RT #121139|https://rt.cpan.org/Ticket/Display.html?id=121139>

=item L<Memoize> 1.03

Skip flapping, timer-sensitive t/expmod_t.t tests
on Travis CI.

=item L<Module::CoreList> 5.20180622c

=item L<Module::Load::Conditional> 0.68_02

Improve CPANPLUS: Fix [cperl #331], checking for cperl builtins.
With a slightly adjusted patch from @voegelas.

Suppress new Autovivified hash slice warning

=item L<mro> 1.22_01

prevent mro.pm from loading DynaLoader

formatting, cperl enhancements

=item L<Mu> 0.02c

Implemented L<Mu/fields> returning fields objects.
cperl-only.

=item L<Net::Ping> 2.66

Fix ping_udp for a started udp echo server (PR#5 by Stephan Loyd)

Fix t/400_ping_syn.t phases

Try to handle Windows Socket::getnameinfo errors

Improve some tests on missing network connections

Keep v5.002 - v5.6 support

Removed outdated demo/fping from the documentation
(RT #123750 by Steve Morris)

Added t/420_ping_syn_port.t (#4 by Julio Fraire) with fixes.

Added indices and crosslinks to the documentation

use NIx_NOSERV flag for windows.

better icmpv6 support.

=item L<NEXT> 0.67_01

Fix for GLOB stubs [cpan #123002].

=item L<O> 1.03

Improve error message for bogus -MO=… arguments

=item L<ODBM_File> 1.15

=item L<Opcode> 1.43_02c

Added new 'oelem' and 'oelemfast' to :base_core

Support the new core attributes :native, :native($libname),
:symbol($c_name).

Restrict the new ops enterffi, leaveffi.

=item L<OS2::Process>  1.12_01

=item L<overload> 1.30

=item PathTools 4.68c

Add security usage note to File::Spec::no_upwards
white space change so can compile under C++11
Protect modules also from . in @INC [perl #127384] (CVE-2016-1238)

getcwd, getdcwd and abs_path have now long path support.
getdcwd (Windows only) also supports unicode paths, using
the wide API.

=item L<PerlIO::encoding> 0.26

=item L<PerlIO::scalar> 0.29_01

check invariant at compile time.

return EACCES on writing to a read-only scalar

=item L<PerlIO::via> 0.17_01

Protect from NULL arg.

=item L<perl5db> 1.52_01c

Support debugger cmds not requiring spaces

=item L<Pod::Checker> 1.73_01

no strict hashpairs

=item L<Pod::Functions> 1.13

=item L<Pod::HTML> 2.2403c

A title for the HTML document will now be automatically generated by
default from a "NAME" section in the POD document, as it used to be
before the module was rewritten to use L<Pod::Simple::XHTML> to do the
core of its job
L<[perl #110520]|https://rt.perl.org/Ticket/Display.html?id=110520>.

=item L<Pod::Perldoc> 3.2801

customize to fix formatters and pager misbehaviour

=item L<podlators> 4.10

Man page references and function names now follow the Linux man page
formatting standards, instead of the Solaris standard.

=item L<POSIX> 1.84_03

getcwd has now long path support.

Added realpath, with long path support, if the libc supports
NULL as 2nd argument.

Some more cautions were added about using locale-specific functions in
threaded applications.

=item L<re> 0.36_01

Faster. add DEBUGGING_RE_ONLY define

=item L<Scalar::Util> 2.50_09

fix find_rundefsvoffset logic

Fix t/subname.t for unstrict names. perl5.26 started defining $Config{usecperl} 
as 'UNKNOWN', hence this check is now unreliable.

Merge with 1.50 upstream:
Ensure pairmap extends its stack correctly (davem)
Fix name of List::Util::unpairs in its error messages

=item L<Search::Dict> 1.07_01

Bump version

=item L<SelectSaver> 1.02_01

Bump version

=item L<SelfLoader> 1.25

=item L<Socket> 2.027

=item L<sort> 2.04

no sort stable; SORTf_UNSTABLE flag

=item L<Storable> 3.08

perl5 merged with us, with some minor internal architecural changes.

mingw fix: use safe defaults, not segfaulting defaults.
mingw fails on the stacksize binary search, leaving it empty.

Try to fix readonly stacksize.h with perlbrew. [cperl #335]

Fix t/blessed.t for 5.10/5.12 threaded.

Restore max stacksizes for non-windows systems with proper
system(SHELLSTRING) passing signals.
Unify stack reserve to 32 across all platforms.

Dont build dynamic with a static perl

=item L<strict> 1.13c

Added C<use strict 'hashpairs'> to allow only pairs for hash assignments,
within a map even only an empty or single pair.
See L<[cperl #281|https://github.com/perl11/cperl/issues/281>.
cperl-only

Added C<strict 'names'> to reject illegal identifiers created via
C<no strict 'refs'> also at run-time, not only at compile-time.
See L<[cperl #282]|https://github.com/perl11/cperl/issues/282>.
cperl-only

=item L<subs> 1.03

=item L<Symbol> 1.08_01

Improved Symbol::delete_package for readonly and protected symbols
and classes.
cperl-only

=item L<Sys::Hostname> 1.22

=item L<Term::ReadKey> 2.37_03

Protect from fileno returning -1, invalid file arg.
Reformatted.

=item L<Term::ReadLine> 1.17

fix for empty &STDERR files, RT #132008

=item L<threads> 2.22_01

Fix Clang macro backward compatibility per patch by Andy Grundman.
Keep the old better doc.
Keep our modglobal fix in global destruction from 2.12_01.

Support PL_sv_zero.
Don't Copy() null pointer

The documentation now better describes the problems that arise when
returning values from threads, and no longer warns about creating threads
in C<BEGIN> blocks.
L<[perl #96538]|https://rt.perl.org/Ticket/Display.html?id=96538>

=item L<threads::shared> 1.58

Fix Clang macro backward compatibility per patch by Andy Grundman.
RT #131124 Memory allocation fix.

=item L<Tie::Array> 1.07

=item L<Tie::Hash::NamedCapture> 0.10_01

use C<croak_no_modify_sv()>

=item L<Tie::StdHandle> 4.5

=item L<Time::gmtime> 1.04

=item L<Time::HiRes> 1.9747_01

upstream:

add more potential clock constants, like CLOCK_MONOTONIC_FAST
(available in FreeBSD), and not all potentially found clock constants
were properly exported to be available from Perl, see your system's
clock_gettime() documentation for the available ones

correct declared minimum Perl version (should be 5.6, was declared as
5.8 since 1.9727_03): blead af94b3ac

merged with our cperl test fixes.
See L<https://github.com/rurban/Time-HiRes/tree/cperl>

Drop 5.005 support.
Replace DynaLoader with XSLoader.

=item L<Time::localtime> 1.03

=item L<Time::Piece> 1.3204

Fix AIX compile

Fix compile errors on MS

Use macro for buf sizes

Remove some compile warnings

SP off by 1 in _crt_localtime

=item L<Unicode::Collate> 1.25_01

Drop 5.005 support.
Replace DynaLoader with XSLoader.

Skip redefinition warnings on cperl since 5.27.2

=item L<Unicode::Normalize> 1.26

Switch to XSLoader from Dynaloader.

=item L<Unicode::UCD>  0.70_01

The function C<num> now accepts an optional parameter to help in
diagnosing error returns.

New core invlists/maps not yet used.

=item L<User::grent> 1.02

=item L<User::pwent> 1.01

=item L<utf8> 2.02c

Improved function documentation

=item L<vars> 1.04

=item L<version> 0.9918_02c

Add updates from 0.9918: Add LAX_DECIMAL_VERSION, LAX_DOTTED_DECIMAL_VERSION,
STRICT_DECIMAL_VERSION, STRICT_DOTTED_DECIMAL_VERSION regexes.

Add F<t/11_taint.t>

=item L<VMS::DCLsym> 1.09

=item L<VMS::Studio> 2.44_01

Drop VMS::stdio compatibility shim

=item L<warnings> 1.38

It now includes new functions with names ending in C<_at_level>, allowing
callers to specify the exact call frame.
L<[perl #132468]|https://rt.perl.org/Ticket/Display.html?id=132468>

Added the new ffi warnings category.

=item L<Win32>  0.52_01

=item L<Win32API::File> 0.1204

Fix xsubpp warnings

=item L<XS::Typemap> 0.16

=item L<XSLoader> 1.04c

Fix wrong usage of C<SvREFCNT_inc_simple_NN> with a function, fixes a memory leak.

Its documentation now shows the use of C<__PACKAGE__>, and direct object
syntax for example C<DynaLoader> usage
L<[perl #132247]|https://rt.perl.org/Ticket/Display.html?id=132247>.

=back

=head2 Removed Modules and Pragmata

=over 4

=item C<B::Debug> 1.25

Moved to CPAN with cperl only. perl5 will remove it with 5.30.

=item C<Locale::Codes> 3.55

Deprecated with v5.27.2c

=item C<VMS::stdio>

The C<VMS::stdio> compatibility shim has been removed.

=back

=head1 Documentation

=head2 New Documentation

=head3 L<perlclass>

Modern cperl classes and roles.
The new syntax and features.

=head3 L<PACKAGING>

Notes and best practice for packaging perl5, not yet updated for cperl.

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.

F<autodoc.pl> now parses F<pod/perlapio.pod> for cross-checking
against F<pod/perlapi.pod>

Additionally, the following selected changes have been made:

=head3 L<perlapi>

Added API docs for most hash macros, and many more functions.

=over 4

=item *

The API functions C<perl_parse()>, C<perl_run()>, and C<perl_destruct()>
are now documented comprehensively, where previously the only
documentation was a reference to the L<perlembed> tutorial.

=item *

The API functions C<newCONSTSUB()> and C<newCONSTSUB_flags()> are
documented much more comprehensively than before.

=back

=head3 L<perlapio>

=over 4

=item *

Completed the documentation of the PerlIO API.
Removed wrong missing links from documented PerlIO functions from L<perlapi>.
Add all missing functions, and inter-linked them.

=back

=head3 L<perldtrace>

=over 4

=item *

Added L<perldtrace/"What hash operations dominate"> and
L<perldtrace/"glob/gv call statistics"> sections.

=back

=head3 L<perldata>

=over 4

=item *

Added new pairwise hash construction limitations to L<perldata/"List
value constructors"> and L<perlfunc/"map EXPR,LIST">.

=item *

The section "Truth and Falsehood" in L<perlsyn> has been moved into
L<perldata>.

=back

=head3 L<perldebguts>

=over 4

=item *

The description of the conditions under which C<DB::sub()> will be called
has been clarified.
L<[perl #131672]|https://rt.perl.org/Ticket/Display.html?id=131672>

=back

=head3 L<perldiag>

=over 4

=item * L<perldiag/Variable length lookbehind not implemented in regex mE<sol>%sE<sol>>

This now gives more ideas as to workarounds to the issue that was
introduced in Perl 5.18 (but not documented explicitly in its perldelta)
for the fact that some Unicode C</i> rules cause a few sequences such as

 (?<!st)

to be considered variable length, and hence disallowed.

=item *

The diagnostic C<Initialization of state variables in list context
currently forbidden> has changed to C<Initialization of state variables
in list currently forbidden>, because list-context initialization of
single aggregate state variables is now permitted.

=back

=head3 L<perlembed>

=over 4

=item *

The examples in L<perlembed> have been made more portable in the way
they exit, and the example that gets an exit code from the embedded Perl
interpreter now gets it from the right place.  The examples that pass
a constructed argv to Perl now show the mandatory null C<argv[argc]>.

=item *

An example in L<perlembed> used the string value of C<ERRSV> as a
format string when calling croak().  If that string contains format
codes such as C<%s> this could crash the program.

This has been changed to a call to croak_sv().

An alternative could have been to supply a trivial format string:

  croak("%s", SvPV_nolen(ERRSV));

or as a special case for C<ERRSV> simply:

  croak(NULL);

=back

=head3 L<perlfunc>

=over 4

=item *

Added new pairwise hash construction limitations to L<perldata/"List
value constructors"> and L<perlfunc/"map EXPR,LIST">.

=item *

There is now a note that warnings generated by built-in functions are
documented in L<perldiag> and L<warnings>.
L<[perl #116080]|https://rt.perl.org/Ticket/Display.html?id=116080>

=item *

A couple of small details in the documentation for the C<bless> operator
have been clarified.
L<[perl #124428]|https://rt.perl.org/Ticket/Display.html?id=124428>

=item *

The description of C<@INC> hooks in the documentation for C<require>
has been corrected to say that filter subroutines receive a useless
first argument.
L<[perl #115754]|https://rt.perl.org/Ticket/Display.html?id=115754>

=item *

The documentation of C<use> now explains what syntactically qualifies
as a version number for its module version checking feature.

=item *

The documentation of C<warn> has been updated to reflect that since Perl
5.14 it has treated complex exception objects in a manner equivalent
to C<die>.
L<[perl #121372]|https://rt.perl.org/Ticket/Display.html?id=121372>

=item *

The documentation of C<die> and C<warn> has been revised for clarity.

=item *

The documentation of C<each> has been improved, with a slightly more
explicit description of the sharing of iterator state, and with
caveats regarding the fragility of while-each loops.
L<[perl #132644]|https://rt.perl.org/Ticket/Display.html?id=132644>

=item *

Clarification to C<require> was added to explain the differences between

    require Foo::Bar;
    require "Foo/Bar.pm";

=back

=head3 L<perlgit>

=over 4

=item *

The precise rules for identifying C<smoke-me> branches are now stated.

=back

=head3 L<perlguts>

=over 4

=item *

The section on reference counting in L<perlguts> has been heavily revised,
to describe references in the way a programmer needs to think about them
rather than in terms of the physical data structures.

=item *

Improve documentation related to UTF-8 multibytes.

=back

=head3 L<perlintern>

=over 4

=item *

Added API docs for most toke.c lexer functions.
cperl-only

=item *

The internal functions C<newXS_len_flags()> and C<newATTRSUB_x()> are
now documented.

=back

=head3 L<perlfilter>

=over 4

=item *

Add warning about raw C<?...?> pattern delimiters.

=back

=head3 L<perlobj>

=over 4

=item *

The documentation about C<DESTROY> methods has been corrected, updated,
and revised, especially in regard to how they interact with exceptions.
L<[perl #122753]|https://rt.perl.org/Ticket/Display.html?id=122753>

=back

=head3 L<perlop>

=over 4

=item *

Added the missing operator precedences and documentation for the cperl
unicode operators.

=item *

The description of the C<x> operator in L<perlop> has been clarified.
L<[perl #132460]|https://rt.perl.org/Ticket/Display.html?id=132460>

=item *

L<perlop> has been updated to note that C<qw>'s whitespace rules differ
from that of C<split>'s in that only ASCII whitespace is used.

=item *

The general explanation of operator precedence and associativity has
been corrected and clarified.
L<[perl #127391]|https://rt.perl.org/Ticket/Display.html?id=127391>

=item *

The documentation for the C<\> referencing operator now explains the
unusual context that it supplies to its operand.
L<[perl #131061]|https://rt.perl.org/Ticket/Display.html?id=131061>

=back

=head3 L<perlrequick>

=over 4

=item *

Clarifications on metacharacters and character classes

=back

=head3 L<perlretut>

=over 4

=item *

Clarify metacharacters.

=back

=head3 L<perlrun>

=over 4

=item *

Clarify the differences between B<< -M >> and B<< -m >>.
L<[perl #131518]|https://rt.perl.org/Ticket/Display.html?id=131518>

=back

=head3 L<perlsec>

=over 4

=item *

The documentation about set-id scripts has been updated and revised.
L<[perl #74142]|https://rt.perl.org/Ticket/Display.html?id=74142>

=item *

A section about using C<sudo> to run Perl scripts has been added.

=back

=head3 L<perlsyn>

=over 4

=item *

The section "Truth and Falsehood" in L<perlsyn> has been removed from
that document, where it didn't belong, and merged into the existing
paragraph on the same topic in L<perldata>.

=item *

The means to disambiguate between code blocks and hash constructors,
already documented in L<perlref>, are now documented in L<perlsyn> too.
L<[perl #130958]|https://rt.perl.org/Ticket/Display.html?id=130958>

=back

=head3 L<perluniprops>

=over 4

=item *

L<perluniprops> has been updated to note that C<\p{Word}> now includes
code points matching the C<\p{Join_Control}> property.  The change to
the property was made in Perl 5.18, but not documented until now.  There
are currently only two code points that match this property U+200C (ZERO
WIDTH NON-JOINER) and U+200D (ZERO WIDTH JOINER).

=item *

For each binary table or property, the documentation now includes which
characters in the range C<\x00-\xFF> it matches, as well as a list of
the first few ranges of code points matched above that.

=back

=head3 L<perlvar>

=over 4

=item *

The entry for C<$+> in perlvar has been expanded upon to describe handling of
multiply-named capturing groups.

=back

=head3 L<perlxs>, L<perlxstut>, L<perlxstypemap>

=over 4

=item *

Moved from F<dist/ExtUtils-ParseXS> to core F<pod/>, as the upstream CPAN
releases do not contain them anymore.

=back

=head3 L<perlfunc>, L<perlop>, L<perlsyn>

=over 4

=item *

In various places, improve the documentation of the special cases
in the condition expression of a while loop, such as implicit C<defined>
and assignment to C<$_>.
L<[perl #132644]|https://rt.perl.org/Ticket/Display.html?id=132644>

=back

=head3 L<POSIX>

=over 4

=item *

L<POSIX> has been updated with some more cautions about using locale-specific
functions in threaded applications.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics


=head3 New Errors

=over 4

=item *

L<Odd number of map elements in hash assignment
|perldiag/"Odd number of map elements in hash assignment">

Added a new HASH private bit to the mapwhile op when a map is assigned
to a hash, to be able to warn once per map on uneven hashmap assignments. See
L<[cperl #281|https://github.com/perl11/cperl/issues/281> and L<strict> hashpairs.

=item *

L<Only pair in map hash assignment allowed while "strict hashpairs", got %d elements
|perldiag/"Only pair in map hash assignment allowed while "strict hashpairs", got %d elements">

L<Only pairs in hash assignment allowed while "strict hashpairs", got %d elements
|perldiag/"Only pairs in hash assignment allowed while "strict hashpairs", got %d elements">

With "strict hashpairs" in use, odd numbers of elements are forbidden
to be assigned to hashes. Within a map block only a single or empty
pair.

=item *

L<Cannot complete in-place edit of %s: %s|perldiag/"Cannot complete in-place edit of %s: %s">
when an unhandled chdir happens during an in-place edit.

=item *

L<Can't "goto" into a "given" block|perldiag/"Can't E<quot>gotoE<quot> into a E<quot>givenE<quot> block">

(F) A "goto" statement was executed to jump into the middle of a C<given>
block.  You can't get there from here.  See L<perlfunc/goto>.

=item *

L<Can't "goto" into a binary or list expression|perldiag/"Can't E<quot>gotoE<quot> into a binary or list expression">

Use of C<goto> to jump into the parameter of a binary or list operator has
been prohibited, to prevent crashes and stack corruption.
L<[perl #130936]|https://rt.perl.org/Ticket/Display.html?id=130936>

You may only enter the I<first> argument of an operator that takes a fixed
number of arguments, since this is a case that will not cause stack
corruption.
L<[perl #132854]|https://rt.perl.org/Ticket/Display.html?id=132854>

=item *

L<Can't rename in-place work file '%s' to '%s': %s|perldiag/"Can't rename in-place work file '%s' to '%s': %s">

=item *

L<Can't unweaken a nonreference|perldiag/"Can't unweaken a nonreference">

=item *

L<Missing argument for %n in %s|perldiag/"Missing argument for %n in
%s"> in sprintf is now fatal.

=item *

L<Integer overflow in format string for %s|perldiag/"Integer overflow in format string for %s">

cperl 5.27.2 added a new limitation of INT_MAX to the max. argument
index, width and precision values for printf format strings. The new
perl5.27.5 limitation is ULONG_MAX, which is a security risk, see
L</Unsigned long stack access of printf format arguments>.

=item *

L<Too large floating point precision in format string %s for %s|perldiag/"Too large floating point precision in format string %s for %s">

cperl 5.27.2 added a new limitation of 1024 to the max. precision of
floating point conversions to strings via sprintf, to seperate it
from Integer overflows in overlarge indices, width and precision
values.

=item *

L<Too many fields|perldiag/"Too many fields">

cperl 5.27.2 added a new limitation of max. 65536 fields per class.

=item *

C<panic: cannot yet adjust field indices when composing role %s::%s into %s %s [cperl #311]">

When copying a method from a role to a class, and the field index from
the role method would be different to a field index in the resulting
class, the method is not yet fixed up to the new indices. A
temp. solution would be to change the ordering of the roles, or to use
the C<< $self->field >> method syntax in the role method.  This should
be fixed before 5.28. Currently we can only alias composed role
methods and we don't change the ordering of the fields.
See L<[cperl #311]|https://github.com/perl11/cperl/issues/311>

=item *

L<Invalid field index %d of class %s|perldiag/"Invalid field index %d of %s %s">

The class doesn't have that many fields. cperl only

=back

=head3 New Warnings

=over 4

=item *

With loopex ops calling a list, all arguments but the last are ignored.
This might be valid for side-effects, but useless on constants.
Warn with L<Useless use of constant in list at %s()
|perldiag/"Useless use of constant in list at %()">
This affects next, goto, redo, last, dump.

E.g. with C<label:{next(1,label)}> 1 is ignored.

=item *

L<Reference is not weak|perldiag/"Reference is not weak"> in W misc.

=item *

L<Old package separator used in string|perldiag/"Old package separator used in string">

(W syntax) You used the old package separator, "'", in a variable
named inside a double-quoted string; e.g., C<"In $name's house">.  This
is equivalent to C<"In $name::s house">.  If you meant the former, put
a backslash before the apostrophe (C<"In $name\'s house">).

=item *

L<perldiag/Locale '%s' contains (at least) the following characters which
have unexpected meanings: %s  The Perl program will use the expected
meanings>

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

L<do "%s" failed, '.' is no longer in @INC; did you mean do "./%s"?
|perldiag/"do \"%s\" failed, '.' is no longer in @INC; did you mean do \"./%s\"?">

Was changed from "do "%s" failed, '.' is no longer in @INC".

=item *

"Can't modify non-lvalue subroutine call of &%s"
was extended to support methods.

The new message is "Can't modify non-lvalue %s call of %s",
with the variants "Can't modify non-lvalue subroutine call of &CLASS::sub"
and "Can't modify non-lvalue method call of CLASS->sub".

=item *

Under DEBUGGING "Modification of a read-only value attempted at
<location>" was changed to "Modification of a read-only value
attempted <value> at <c file:line> at <location>"

Existing tests best cut off the " at" at the end.

=item *

A false-positive warning that was issued when using a
numerically-quantified sub-pattern in a recursive regex has been
silenced. L<[perl #131868]|https://rt.perl.org/Public/Bug/Display.html?id=131868>

=item *

The diagnostic C<Initialization of state variables in list context
currently forbidden> has changed to C<Initialization of state variables
in list currently forbidden>, because list-context initialization of
single aggregate state variables is now permitted.

=item *

C<Failed to close in-place edit file %s: %s> was renamed to 
L<Failed to close in-place work file %s: %s|perldiag/"Failed to close in-place work file %s: %s">.

=item *

C<delete argument is index/value array slice, use array slice> and
C<delete argument is key/value hash slice, use hash slice> is gone,
deleting key/value slices is now supported.

=item *

The warning about useless use of a concatenation operator in void context
is now generated for expressions with multiple concatenations, such as
C<$a.$b.$c>, which used to mistakenly not warn.
L<[perl #6997]|https://rt.perl.org/Ticket/Display.html?id=6997>

=item *

Warnings that a variable or subroutine "masks earlier declaration in same
...", or that an C<our> variable has been redeclared, have been moved to a
new warnings category "shadow".  Previously they were in category "misc".

=item *

The deprecation warning from C<Sys::Hostname::hostname()> saying that
it doesn't accept arguments now states the Perl version in which the
warning will be upgraded to an error.
L<[perl #124349]|https://rt.perl.org/Ticket/Display.html?id=124349>

=item *

The L<perldiag> entry for the error regarding a set-id script has been
expanded to make clear that the error is reporting a specific security
vulnerability, and to advise how to fix it.

=item *

The C<< Unable to flush stdout >> error message was missing a trailing
newline. [debian #875361]

=back

=head1 Utility Changes

=head2 L<dtrace>

=over 4

=item *

Four new dtrace probes for hash and glob. See L<perldtrace> and
L<#240|https://github.com/perl11/cperl/issues/240>.

=back

=head2 L<cperlivp>

=over 4

=item *

Add support for C<-d DESTDIR>, e.g. after

    make -s -j4 install DESTDIR=$HOME/cperl-inst
    cd $HOME/cperl-inst/usr/local/bin &&
    ./cperl cperlivp -p -d $HOME/cperl-inst

See L<[cperl #305]|https://github.com/perl11/cperl/issues/305>

=back

=head1 Configuration and Compilation

=over 4

=item C89 requirement

Perl has been documented as requiring a C89 compiler to build since October
1998.  A variety of simplifications have now been made to Perl's internals to
rely on the features specified by the C89 standard. We believe that this
internal change hasn't altered the set of platforms that Perl builds on, but
please report a bug if Perl now has new problems building on your platform.

=item -Werror=pointer-arith

On GCC, C<-Werror=pointer-arith> is now enabled by default,
disallowing arithmetic on void and function pointers.

=item relative HTML links

Where an HTML version of the documentation is installed, the HTML
documents now use relative links to refer to each other.  Links from
the index page of L<perlipc> to the individual section documents are
now correct.
L<[perl #110056]|https://rt.perl.org/Ticket/Display.html?id=110056>

=item t/porting/regen.t improvements

F<lib/unicore/mktables> now correctly canonicalizes the names of the
dependencies stored in the files it generates.

F<regen/mk_invlists.pl>, unlike the other F<regen/*.pl> scripts, used
C<$0> to name itself in the dependencies stored in the files it
generates.  It now uses a literal so that the path stored in the
generated files doesn't depend on how F<regen/mk_invlists.pl> is
invoked.

This lack of canonical names could cause test failures in F<t/porting/regen.t>.
L<[perl #132925]|https://rt.perl.org/Ticket/Display.html?id=132925>

=item pgcc

Added support for the pgcc pgi compiler http://www.pgroup.com/.
pgcc is very slow though. pgcc -O2 is 40% slower than gcc-6 -O3,
pgcc -fast 30% slower.
L<#279|https://github.com/perl11/cperl/issues/279>.

=item smoker deployments

Travis and appveyor deploy now automatically master builds, besides tags.

=item inc_version_list

C<inc_version_list> skips now older development versions. It only
includes older non-devel versions with even numbers.
See L<[cperl #284]|https://github.com/perl11/cperl/issues/284>

=item -Dusedevel not mandatory

C<-Dusedevel> is needed to be added to all development versions anymore,
it is now the default on such. A big warning is still being displayed,
even in the usual silent auto mode C<-des>.
See L<[cperl #283]|https://github.com/perl11/cperl/issues/283>

=item d_builtin_arith_overflow

Fixed C<d_builtin_arith_overflow> detection and usage for 32bit
systems with C<use64bitint>. They do use the C<ll> suffix, same as with
WIN64.  Now we can use this optimization.
cperl-only.

=item New probes:

Note that cperl ignores the new C<HAS_BUILTIN_{ADD,MUL,SUB}_OVERFLOW>
config keys as we use the better C<HAS_BUILTIN_ARITH_OVERFLOW> for
years already.

=over 2

=item HAS_GETCWD

d_getcwd probe and key added. Sets HAS_GETCWD

=item HAS_GET_CURRENT_DIR_NAME

d_get_current_dir_name probe and key added. Sets HAS_GET_CURRENT_DIR_NAME

=item HAS_GETCWDNULL

getcwdnull probe and key added. Sets HAS_GETCWDNULL

=item HAS_REALPATH

d_realpath probe and key added. Sets HAS_REALPATH

=item HAS_BUILTIN_CLZ

d_builtin_clz probe and key added. Sets HAS_BUILTIN_CLZ. ("Count leading zeros").
Needed later for fast hopscotch hashing.

=item HAS_THREAD_SAFE_NL_LANGINFO_L

d_thread_safe_nl_langinfo_l

=item HAS_LOCALECONV_L

d_localeconv_l

=item HAS_MBRLEN

d_mbrlen

=item HAS_MBRTOWC

d_mbrtowc

=item HAS_MEMRCHR

d_memrchr

=item HAS_NANOSLEEP

d_nanosleep

=item HAS_STRNLEN

d_strnlen

=item HAS_STRTOLD_L

d_strtold_l

=item I_WCHAR

i_wchar

=back

=item Removed probes and keys

=over 2

=item ansi2knr

=item d_bcmp

=item d_bcopy

=item d_bzero

=item d_index

=item d_charvspr

=item d_dbl_dig

=item d_safebcpy

=item d_safemcpy

=item d_sanemcmp

=item d_sprintf_returns_strlen

=item d_strctcpy

=item d_strerrm

=item i_memory

=item i_values

=item i_varargs

=item i_varhdr

=item strings

=item d_memset

Beware: HAS_MEMSET is undefined since v5.28, but always considered to be
defined. Because of C89.
cperl kept the HAS_MEMSET preprocessor definition for backcompat with
extensions which do use it. It is used in all ppport.h files to use memzero().

=item d_memchr

Ditto: Keep HAS_MEMCHR

=item d_memcmp

Ditto: Keep HAS_MEMCMP

=item d_memcpy

Ditto: Keep HAS_MEMCPY

=item d_memmove

Ditto: Keep HAS_MEMMOVE

=item d_strchr

Ditto: Keep HAS_STRCHR

=item d_strerror

Ditto: Keep HAS_STRERROR

=item d_vprintf

Ditto: Keep HAS_VPRINTF

=item d_volatile

Ditto: Keep HASVOLATILE

=item i_assert

Ditto: Keep I_ASSERT in perl.h

=item i_float

Ditto: Keep I_FLOAT in perl.h

=item i_limits

Ditto: Keep I_LIMITS in perl.h

=item i_math

Ditto: Keep I_MATH in perl.h

=item i_stdarg

Ditto: Keep I_STDARG in perl.h

=item i_stdlib

Ditto: Keep I_STDLIB in perl.h

=item i_string

Ditto: Keep I_STRING in perl.h

=item prototype

Ditto: Keep CAN_PROTOTYPE in perl.h

=item vaproto

Ditto: Keep CAN_VAPROTO, _V

=back

=item git_version.sh

New generated shell config with the same content as F<git_version.h>,
for F<myconfig>.

=item myconfig

Added git_branch and git_describe.

=item make_patchnum: touch the targets

avoiding needless miniperl recompilation on
F<Config_git.pl>, F<git_version.{sh,h}>.

=back

=head1 Testing

=over 4

=item *

C<make minitest> can now be successfully be run directly after C<make miniperl>.
The unicode datafiles are now built before, and tests pass even if no module
was built or mktables failed.

Many fixes for C<make minitest> for cperl/XSConfig.

=item *

Added F<t/op/oelem.t> for classes with more than 256 fields, realloc
fields for bigger padsize 2, and computed field names.
cperl-only.

=item *

Changed one case in F<t/op/symbolcache.t> for
L<static method optimizations|/"Optimize static methods to subs">.
When you redefine a method, you need to clear the old method GV, to be able
to call the new redefined one, as the static method optimization binds to
the GV.

=item *

Fixed F<Porting/cmpVERSION.pl> resp. F<t/porting/cmp_version.t>.

=item *

Some flapping tests on slow windows smokers (appveyor) are now skipped.

=item *

Testing of the XS-APItest directory is now done in parallel, where
applicable.

=item *

The watchdog timer count in F<re/pat_psycho.t> can now be overridden.

This test can take a long time to run, so there is a timer to keep
this in check (currently, 5 minutes). This commit adds checking
the environment variable C<< PERL_TEST_TIME_OUT_FACTOR >>; if set,
the time out setting is multiplied by its value.

=item *

F<harness> no longer waits for 30 seconds when running F<t/io/openpid.t>.
L<[perl #121028]|https://rt.perl.org/Ticket/Display.html?id=121028>
L<[perl #132867]|https://rt.perl.org/Ticket/Display.html?id=132867>

=back

=head1 Packaging

For the past few years we have released perl using three different archive
formats: bzip (C<.bz2>), LZMA2 (C<.xz>) and gzip (C<.gz>). Since xz compresses
better and decompresses faster, and gzip is more compatible and uses less
memory, we have dropped the C<.bz2> archive format with this release.
(If this poses a problem, do let us know; see L</Reporting Bugs>, below.)

=head1 Platform Support

=head2 New Platforms

=over 4

=item pgcc

Preliminary support for the Portland pgcc compiler (Linux, Darwin, Win32 only)
has been added.

=back

=head2 Discontinued Platforms

=over 4

=item PowerUX / Power MAX OS

Compiler hints and other support for these apparently long-defunct platforms has been removed.

=back

=head2 Platform-Specific Notes

Support for long paths have been added to all platforms, for C<cwd>
longer than 4096.  Many kernels have limited support for it, but
filesystems do. See L<[cperl #270]|https://github.com/perl11/cperl/issues/270>.

=over 4

=item linux

Fixed hints for pgcc.

Use for C<getcwd(NULL)> or C<get_current_dir_name()>,
which can return paths longer than 4096.

Compilation on CentOS 5 is now fixed.

=item cygwin

L<threads> became unstable with some upstream merges.
default now to C<-Uuseithreads>.

Fixed Storable stacksize probing.

Fixed a lot of admin-specific file-permission tests.

=item darwin

Fixed hints for pgcc

Perl now correctly uses reentrant functions, like C<asctime_r>, on
versions of Darwin that have support for them.

locale specific error messages are now thread-safe.
cperl-only, L<[cperl #341]|https://github.com/perl11/cperl/issues/341>

=item mingw

cperl on mingw was previously unsupported and didn't compile nor work.
We switched the windows packages to use mingw 32bit and 64bit instead
of MSVC compiled packages, which do require a special MS runtime DLL.

=over

=item *

Removed the broken F<dlltool>, which corrupted 64bit DLL's for years.
In our case Cpanel::JSON::XS and Unicode::Normalize.
Just use C<gcc> to create dll's and import libs, as in cygwin.

=item *

Added version specific gcc config values.

The default mingw configs were extremely defensive and slow.  Even
gcc-2.95.3 settings were disabled. Now several modern builtins and
attributes are used.

Fixed the wrong C<d_u32align> default, which caused Digest::MD5 to
crash.

=item *

Fixed BUILTIN_*_OVERFLOW macros for mingw64, which uses long long for
normal IV/UV on win64.

=item *

Removed the version suffix from the importlib which is the entry for
C<$Config{libperl}>. C<-lcperl> works now for the compiler and embedders.
Just keep the version on MSVC, e.g. F<cperl527.lib>, as this had special
logic in perlcc already.

=item *

Improved F<t/run/switchDBG.t> for C<-D''> and C<-T> tests.

=item *

Fixed building of the extensions with the Extensions_normalize target.

=item *

Switched from F<C:\MinGW> to F<C:\Strawberry\c> as default B<CCHOME> prefix.
This is much more stable on 64bit, and easier to setup.

=item *

The compiler F<perlcc> only works with very simple programs under mingw yet.
With dynaloaded XS modules it usually fails.

=item *

Fixed invalid C<check_type_and_open macro> on mingw miniperl.

=back

=item VMS

Several fix-ups for F<configure.com>, marking function VMS has
(or doesn't have).

CRTL features can now be set by embedders before invoking Perl by using
the C<decc$feature_set> and C<decc$feature_set_value> functions.
Previously any attempt to set features after image initialization were
ignored.

=item Windows

File test operators for Unix permission bits that don't exist on a
particular platform, such as C<-k> (sticky bit) on Windows, now check that
the file being tested exists before returning the blanket false result,
and yield the appropriate errors if the argument doesn't refer to a file.

Visual C++ compiler version detection has been improved to work on non-English
language systems.

mingw, cygwin and the MSVC versions 10,12,14 smoke now ok with 32-bit
and 64-bit.

Fixed upstream mkstemp API changes.

getcwd is deprecated on Windows. use _getcwd() instead.

PathTools: Support overlong paths for getdcwd(), using the wide API
for overlong paths.

=item UMIPS

CAN_PROTOTYPE is now always defined, which might cause problems with
the system cc compiler.
C<ccom: Error: ./mg.h, line 12: redeclaration of formal parameter, sv>

=item ULTRIX 4

CAN_PROTOTYPE is now always defined, which might cause problems with
the gcc-4.2 compiler.

=back

=head1 Internal Changes

=over 4

=item *

Export C<re_op_compile> needed for re engines.

=item *

Added study API functions for possible internal costly optimizations
of hv, av, cv, and rx, such as hash shrinking, regex and cv jit
compilation, and av type promotion.  For now implemented is
C<hv_study()>, the rest are stubs.

=item *

C<Perl_croak_no_modify()> got 2 arguments, the macro is the same.  The
new C<croak_no_modify_sv(sv)> has better diagnostics with DEBUGGING
and is used throughout core.

=item *

Many gv_fetch methods use now GV_CLASS, i.e. they try EXISTS and FETCH
in the same stash lookup, not failing on restricted stashes.

=item *

The overload magic vtable (AMT) allows now readonly stashes. classes
are not cached, readonly packages are.

=item *

Added L<perlapi/hv_undef_flags> to the public API.

=item *

Refactored the L<fields> API from global data into methods.
Added a L<perlapi/HvFIELDS> field to HvAUX as linear buffer
of "name\0pad...\0" fields, no class C<%FIELDS> and C<@FIELDS> anymore.
See L<[cperl #322]|https://github.com/perl11/cperl/issues/322>

=item *

L<perlintern/validate_proto> got an additional cperl-only bool
argument C<maybe_sig>.

=item *

A new function, L<Perl_langinfo()|perlapi/Perl_langinfo> has been
added.  It is an (almost) drop-in replacement for the system
C<nl_langinfo(3)>, but works on platforms that lack that; as well as
being more thread-safe, and hiding some gotchas with locale handling
from the caller.  Code that uses this, needn't use L<localeconv(3)>
(and be affected by the gotchas) to find the decimal point, thousands
separator, or currency symbol.  See L<perlapi/Perl_langinfo>.

=item *

A new API function L<sv_rvunweaken()|perlapi/sv_rvunweaken> has
been added to complement L<sv_rvweaken()|perlapi/sv_rvweaken>.
The implementation was taken from L<Scalar::Util/unweaken>.

=item *

A new flag, C<SORTf_UNSTABLE>, has been added. This will allow a
future commit to make mergesort unstable when the user specifies ‘no
sort stable’, since it has been decided that mergesort should remain
stable by default.

=item *

A new optimisation phase has been added to the compiler,
C<optimize_optree()>, which does a top-down scan of a complete optree
just before the peephole optimiser is run. This phase is not currently
hookable.
This phase was previously in cperl named C<prefinalize_op> and
C<postprocess_optree>.

=item *

An C<OP_MULTICONCAT> op has been added. At C<optimize_optree()> time, a
chain of C<OP_CONCAT> and C<OP_CONST> ops, together optionally with an
C<OP_STRINGIFY> and/or C<OP_SASSIGN>, are combined into a single
C<OP_MULTICONCAT> op. The op is of type C<UNOP_AUX>, and the aux array
contains the argument count, plus a pointer to a constant string and a set
of segment lengths. For example with

    my $x = "foo=$foo, bar=$bar\n";

the constant string would be C<"foo=, bar=\n"> and the segment lengths
would be (4,6,1). If the string contains characters such as C<\x80>, whose
representation changes under utf8, two sets of strings plus lengths are
precomputed and stored.

=item *

Direct access to L<PL_keyword_plugin|perlapi/PL_keyword_plugin> is not
safe in the presence of multithreading. A new
L<wrap_keyword_plugin|perlapi/wrap_keyword_plugin> function has been
added to allow XS modules to safely define custom keywords even when
loaded from a thread, analogous to L<PL_check|perlapi/PL_check> /
L<wrap_op_checker|perlapi/wrap_op_checker>.

=item *

The C<PL_statbuf> interpreter variable has been removed.

=item *

The deprecated function C<to_utf8_case()>, accessible from XS code, has
been removed.

=item *

A new function
L<C<is_utf8_invariant_string_loc()>|perlapi/is_utf8_invariant_string_loc>
has been added that is like
L<C<is_utf8_invariant_string()>|perlapi/is_utf8_invariant_string>
but takes an extra pointer parameter into which is stored the location
of the first variant character, if any are found.

=item *

XS modules can now automatically get reentrant versions of system
functions on threaded perls.

By adding

    #define PERL_REENTRANT

near the beginning of an C<XS> file, it will be compiled so that
whatever reentrant functions perl knows about on that system will
automatically and invisibly be used instead of the plain, non-reentrant
versions.  For example, if you write C<getpwnam()> in your code, on a
system that has C<getpwnam_r()> all calls to the former will be translated
invisibly into the latter.  This does not happen except on threaded
perls, as they aren't needed otherwise.  Be aware that which functions
have reentrant versions varies from system to system.

=item *

The C<PERL_NO_OP_PARENT> build define is no longer supported, which means
that perl is now always built with C<PERL_OP_PARENT> enabled.

=item *

The format and content of the non-utf8 transliteration table attached to
the C<op_pv> field of C<OP_TRANS>/C<OP_TRANSR> ops has changed. It's now a
C<struct OPtrans_map>.

=item *

A new API function L<perlapi/dump_sub_cv> has been added
to avoid faking a slim CV to a full GV. cperl-only.

=item *

A new compiler C<#define>, C<dTHX_DEBUGGING>. has been added.  This is
useful for XS or C code that only need the thread context because their
debugging statements that get compiled only under C<-DDEBUGGING> need
one.

=item *

A new API function L<perlapi/Perl_setlocale> has been added.

=item *

L<perlapi/sync_locale> has been revised to return a boolean as to
whether the system was using the global locale or not.

=item *

A new kind of magic scalar, called a "nonelem" scalar, has been introduced.
It is stored in an array to denote a nonexistent element, whenever such an
element is accessed in a potential lvalue context.  It replaces the
existing "defelem" (deferred element) magic wherever this is possible,
being significantly more efficient.  This means that
C<some_sub($sparse_array[$nonelem])> no longer has to create a new magic
defelem scalar each time, as long as the element is within the array.

It partially fixes the rare bug of deferred elements getting out of sync
with their arrays when the array is shifted or unshifted.
L<[perl #132729]|https://rt.perl.org/Ticket/Display.html?id=132729>

=item *

With a threaded perl, GV's are relocated as READONLY PADs.
Add an abstraction L<perlintern/op_gv_set> to simplify that.

=item *

Removed the obsolete C<OA_PADOP> class. Invalid and unused since 5.6.0.
Kept C<OP_IS_PADOP> and made it legal for threaded perls.
The L<B> modules still print PADOP C<'#'> ops as such, which were dynamically
converted from SVOP's to PADOP's threaded.

=back

=head1 Selected Bug Fixes

=over 4

=item *

The three supported unicode BOM's UTF-8, UTF-16LE and UTF-16BE set the
utf8 and unicode compile-time hints to match the documentation and
expectation.
cperl-only

=item *

Fixed several minor coverity issues.

=item *

Fixed signature corruption with skip'ed arguments without default and
with 0, 1, undef or op defaults, such as in C<sub func ($, $=0, $=1,
$=2, $=do{$i++} $="foo", $a="bar", $b="zoot")>, with the first C<$>,
the 2nd C<$=0>, the 3rd C<$=1> and the 5th C<$=do{}> argument.
cperl-only.

=item *

Harmonized TOKENBUF_SIZE and stack buf sizes

The max identifier length depends on the max tokenbuf size, which went
from 256 in perl5 to 1024 in cperl, mostly to speed up parsing with a
larger parser buffer. A few places still had hardcoded 256 tmpbuf sizes, which
led to wrong error messages.
See L<[cperl #293]|https://github.com/perl11/cperl/issues/293>.
cperl-only

=item *

Fixed one place in ck_sort for utf8 lexical variable names, which
passed the unneeded UTF8 flag to C<pad_findmy_pvn()>. In cperl all pads
are normalized UTF8 for faster searches, the flag argument must be 0.
See L<[cperl #293]|https://github.com/perl11/cperl/issues/293>.
cperl-only

=item *

Fix regex stack recursion overflow with DEBUGGING

This is a regression since 5.26 (also in upstream perl5). Without
DEBUGGING it failed with the error message "Unmatched ( in regex", now
with more than 5000 open parens it will fail with the same error message.
This would be security relevant if one would use a DEBUGGING perl in
production as one can construct a pattern which writes arbitrary
values to the stack, similar to the Storable (L<[cperl
#257]|https://github.com/perl11/cperl/issues/257>, L<[cpan
#97526]|https://rt.cpan.org/Public/Bug/Display.html?id=97526>) stack
overflow and the old 5.10 regex stack overflow attack.  See L<[cperl
#293]|https://github.com/perl11/cperl/issues/293>.

=item *

Fixed wrong "Don’t stringify GV in numeric cx outside warnings scope"
optimization from 5.18, which fails with code like C<$* += (** = 0)>.
See L<[cperl #299]|https://github.com/perl11/cperl/issues/299>.

=item *

Added missing arity checks to C<readline> and C<readpipe>.
E.g. C<readline(1,2)> and C<readpipe(1,2)> errors now.  Those
excessive args were previously called for side-effects, in case of
constants or variables effectively ignored.

All internal ops are now properly arity checked.
See L<[cperl #301]|https://github.com/perl11/cperl/issues/301>.

=item *

More fixes for handling readonly packages, aka classes.
Allow AMT (overload) cache updates, C<@ISA> searches and general class dispatch,
falling back to AUTOLOAD in classes.

E.g. this works now: C<<< class XX{method m{"ok $self"}} XX->new->m >>>
The string concat looked in the class XX for an overload for the concat "." op,
and failed with "Modification of a read-only value attempted" on the class,
when trying to update the AMT cache.
On windows it also tried the C<"(qr"> overload.
See L<[cperl #308]|https://github.com/perl11/cperl/issues/308>.
cperl-only

=item *

List assignment (C<aassign>) could in some rare cases allocate an
entry on the mortals stack and leave the entry uninitialized, leading to
possible crashes.
L<[perl #131570]|https://rt.perl.org/Ticket/Display.html?id=131570>

=item *

Attempting to apply an attribute to an C<our> variable where a
function of that name already exists could result in a NULL pointer
being supplied where an SV was expected, crashing perl.
See L<[perl #131597]|https://rt.perl.org/Public/Bug/Display.html?id=131597>.

=item *

Fixed thread-safety with locale-specific error messages on darwin.
C<uselocal()> on darwin is not thread-safe, so we disable the local
restauration to C<uselocal(LC_GLOBAL_LOCALE)> in child threads.
cperl-only, L<[cperl #341]|https://github.com/perl11/cperl/issues/341>

=item *

C<split ' '> now correctly handles the argument being split when in the
scope of the L<< C<unicode_strings>|feature/"The 'unicode_strings' feature"
>> feature. Previously, when a string using the single-byte internal
representation contained characters that are whitespace by Unicode rules but
not by ASCII rules, it treated those characters as part of fields rather
than as field separators.
L<[perl #130907]|https://rt.perl.org/Ticket/Display.html?id=130907>

=item *

Several built-in functions previously had bugs that could cause them to
write to the internal stack without allocating room for the item being
written. In rare situations, this could have led to a crash. These bugs have
now been fixed, and if any similar bugs are introduced in future, they will
be detected automatically in debugging builds.

These internal stack usage checks introduced are also done
by the C<entersub> operator when calling XSUBs.  This means we can
report which XSUB failed to allocate enough stack space.
L<[perl #131975]|https://rt.perl.org/Public/Bug/Display.html?id=131975>

=item *

Using a symbolic ref with postderef syntax as the key in a hash lookup was
yielding an assertion failure on debugging builds.
L<[perl #131627]|https://rt.perl.org/Ticket/Display.html?id=131627>

=item *

Array and hash variables whose names begin with a caret now admit indexing
inside their curlies when interpolated into strings, as in C<<
"${^CAPTURE[0]}" >> to index C<@{^CAPTURE}>.
L<[perl #131664]|https://rt.perl.org/Ticket/Display.html?id=131664>

=item *

Fetching the name of a glob that was previously UTF-8 but wasn't any
longer would return that name flagged as UTF-8.
L<[perl #131263]|https://rt.perl.org/Ticket/Display.html?id=131263>

=item *

The perl C<sprintf()> function (via the underlying C function
C<Perl_sv_vcatpvfn_flags()>) has been heavily reworked to fix many minor
bugs, including the integer wrapping of large width and precision
specifiers and potential buffer overruns. It has also been made faster in
many cases.

=item *

Exiting from an C<eval>, whether normally or via an exception, now always
frees temporary values (possibly calling destructors) I<before> setting
C<$@>. For example:

    sub DESTROY { eval { die "died in DESTROY"; } }
    eval { bless []; };
    # $@ used to be equal to "died in DESTROY" here; it's now "".

=item *

Fixed a duplicate symbol failure with C<-flto -mieee-fp> builds.
F<pp.c> defined C<_LIB_VERSION> which C<-lieee> already defines.
L<[perl #131786]|https://rt.perl.org/Ticket/Display.html?id=131786>

=item *

The tokenizer no longer consumes the exponent part of a floating
point number if it's incomplete.
L<[perl #131725]|https://rt.perl.org/Ticket/Display.html?id=131725>

=item *

On non-threaded builds, for C<m/$null/> where C<$null> is an empty
string is no longer treated as if the C</o> flag was present when the
previous matching match operator included the C</o> flag.  The
rewriting used to implement this behavior could confuse the
interpreter.  This matches the behaviour of threaded builds.
L<[perl #124368]|https://rt.perl.org/Ticket/Display.html?id=124368>

=item *

Parsing a C<sub> definition could cause a use after free if the C<sub>
keyword was followed by whitespace including newlines (and comments.)
L<[perl #131836]|https://rt.perl.org/Public/Bug/Display.html?id=131836>

=item *

The tokenizer now correctly adjusts a parse pointer when skipping
whitespace in a C< ${identifier} > construct.
L<[perl #131949]|https://rt.perl.org/Public/Bug/Display.html?id=131949>

=item *

Accesses to C<${^LAST_FH}> no longer assert after using any of a
variety of I/O operations on a non-glob.
L<[perl #128263]|https://rt.perl.org/Public/Bug/Display.html?id=128263>

=item *

The C<Copy()>, C<Move()>, C<Zero()> macros and their variants now
assert if the pointers supplied are C<NULL>.  ISO C considers
supplying NULL pointers to the functions these macros are built upon
as undefined behaviour even when their count parameters are zero.
Based on these assertions and the original bug report three macro
calls were made conditional.
L<[perl #131746]|https://rt.perl.org/Public/Bug/Display.html?id=131746>
L<[perl #131892]|https://rt.perl.org/Public/Bug/Display.html?id=131892>

=item *

The in-place sort optimisation now correctly strengthens weak
references using the new L<sv_rvunweaken()|perlapi/sv_rvunweaken>
API function.

=item *

Package names are now always included in C<:prototype> warnings
L<[perl #131833]|https://rt.perl.org/Public/Bug/Display.html?id=131833>

=item *

Creating a thread with no parameters no longer tries to C<Copy()> a
null pointer. This fixes an assertion failure and allows threaded
builds to work again.

=item *

The C<je_old_stack_hwm> field, previously only found in the C<jmpenv>
structure on debugging builds, has been added to non-debug builds as
well. This fixes an issue with some CPAN modules caused by the size of
this structure varying between debugging and non-debugging builds.
L<[perl #131942]|https://rt.perl.org/Public/Bug/Display.html?id=131942>

=item *

The arguments to the C<ninstr()> macro are now correctly parenthesized.

=item *

A NULL pointer dereference in the C<S_regmatch()> function has been
fixed.
L<[perl #132017]|https://rt.perl.org/Public/Bug/Display.html?id=132017>

=item *

Calling L<exec PROGRAM LIST|perlfunc/exec PROGRAM LIST> with an empty C<LIST>
has been fixed.  This should call C<execvp()> with an empty C<argv> array
(containing only the terminating C<NULL> pointer), but was instead just
returning false (and not setting L<$!|perlvar/$!>).
L<[perl #131730]|https://rt.perl.org/Public/Bug/Display.html?id=131730>

=item *

The C<gv_fetchmeth_sv> C function stopped working properly in Perl 5.22 when
fetching a constant with a UTF-8 name if that constant subroutine was stored in
the stash as a simple scalar reference, rather than a full typeglob.  This has
been fixed.

=item *

Single-letter debugger commands followed by an argument which starts with
punctuation  (e.g. C<p$^V> and C<x@ARGV>) now work again.  They had been
wrongly requiring a space between the command and the argument.
L<[perl #120174]|https://rt.perl.org/Public/Bug/Display.html?id=120174>

=item *

L<splice|perlfunc/splice ARRAY,OFFSET,LENGTH,LIST> now throws an exception
("Modification of a read-only value attempted") when modifying a read-only
array.  Until now it had been silently modifying the array.  The new behaviour
is consistent with the behaviour of L<push|perlfunc/push ARRAY,LIST> and
L<unshift|perlfunc/unshift ARRAY,LIST>.
L<[perl #131000]|https://rt.perl.org/Public/Bug/Display.html?id=131000>

=item *

C<stat()>, C<lstat()>, and file test operators now fail if given a
filename containing a nul character, in the same way that C<open()>
already fails.

=item *

C<stat()>, C<lstat()>, and file test operators now reliably set C<$!> when
failing due to being applied to a closed or otherwise invalid file handle.

=item *

File test operators for Unix permission bits that don't exist on a
particular platform, such as C<-k> (sticky bit) on Windows, now check that
the file being tested exists before returning the blanket false result,
and yield the appropriate errors if the argument doesn't refer to a file.

=item *

The in-place reverse optimisation now correctly strengthens weak
references using the L<sv_rvunweaken()|perlapi/sv_rvunweaken>
API function.

=item *

Fixed a read before buffer when parsing a range starting with C<\N{}>
at the beginning of the character set for the transliteration
operator.
L<[perl #132245]|https://rt.perl.org/Public/Bug/Display.html?id=132245>

=item *

Fixed a leaked SV when parsing an empty C<\N{}> at compile-time.
L<[perl #132245]|https://rt.perl.org/Public/Bug/Display.html?id=132245>

=item *

Calling C<do $path> on a directory or block device now yields a meaningful
error code in C<$!>.
L<[perl #125774]|https://rt.perl.org/Public/Bug/Display.html?id=125774>

=item *

Regexp substitution using an overloaded replacement value that provides
a tainted stringification now correctly taints the resulting string.
L<[perl #115266]|https://rt.perl.org/Public/Bug/Display.html?id=115266>

=item *

Lexical sub declarations in C<do> blocks such as C<do { my sub lex; 123 }>
could corrupt the stack, erasing items already on the stack in the
enclosing statement.  This has been fixed.
L<[perl #132442]|https://rt.perl.org/Public/Bug/Display.html?id=132442>

=item *

C<pack> and C<unpack> can now handle repeat counts and lengths that
exceed two billion.
L<[perl #119367]|https://rt.perl.org/Ticket/Display.html?id=119367>

=item *

Digits past the radix point in octal and binary floating point literals
now have the correct weight on platforms where a floating point
significand doesn't fit into an integer type.

=item *

The canonical truth value no longer has a spurious special meaning as a
callable subroutine.  It used to be a magic placeholder for a missing
C<import> or C<unimport> method, but is now treated like any other string
C<1>.
L<[perl #126042]|https://rt.perl.org/Ticket/Display.html?id=126042>

=item *

C<system> now reduces its arguments to strings in the parent process, so
any effects of stringifying them (such as overload methods being called
or warnings being emitted) are visible in the way the program expects.
L<[perl #121105]|https://rt.perl.org/Ticket/Display.html?id=121105>

=item *

The C<readpipe()> built-in function now checks at compile time that
it has only one parameter expression, and puts it in scalar context,
thus ensuring that it doesn't corrupt the stack at runtime.
L<[perl #4574]|https://rt.perl.org/Ticket/Display.html?id=4574>

=item *

C<sort> now performs correct reference counting when aliasing C<$a> and
C<$b>, thus avoiding premature destruction and leakage of scalars if they
are re-aliased during execution of the sort comparator.
L<[perl #92264]|https://rt.perl.org/Ticket/Display.html?id=92264>

=item *

C<reverse> with no operand, reversing C<$_> by default, is no longer in
danger of corrupting the stack.
L<[perl #132544]|https://rt.perl.org/Ticket/Display.html?id=132544>

=item *

C<exec>, C<system>, et al are no longer liable to have their argument
lists corrupted by reentrant calls and by magic such as tied scalars.
L<[perl #129888]|https://rt.perl.org/Ticket/Display.html?id=129888>

=item *

Perl's own C<malloc> no longer gets confused by attempts to allocate
more than a gigabyte on a 64-bit platform.
L<[perl #119829]|https://rt.perl.org/Ticket/Display.html?id=119829>

=item *

Stacked file test operators in a sort comparator expression no longer
cause a crash.
L<[perl #129347]|https://rt.perl.org/Ticket/Display.html?id=129347>

=item *

An identity C<tr///> transformation on a reference is no longer mistaken
for that reference for the purposes of deciding whether it can be
assigned to.
L<[perl #130578]|https://rt.perl.org/Ticket/Display.html?id=130578>

=item *

Lengthy hexadecimal, octal, or binary floating point literals no
longer cause undefined behaviour when parsing digits that are of such
low significance that they can't affect the floating point value.
L<[perl #131894]|https://rt.perl.org/Ticket/Display.html?id=131894>

=item *

C<open $$scalarref...> and similar invocations no longer leak the file
handle.
L<[perl #115814]|https://rt.perl.org/Ticket/Display.html?id=115814>

=item *

Some convoluted kinds of regexp no longer cause an arithmetic overflow
when compiled.
L<[perl #131893]|https://rt.perl.org/Ticket/Display.html?id=131893>

=item *

The default typemap, by avoiding C<newGVgen>, now no longer leaks when
XSUBs return file handles (C<PerlIO *> or C<FILE *>).
L<[perl #115814]|https://rt.perl.org/Ticket/Display.html?id=115814>

=item *

Creating a C<BEGIN> block as an XS subroutine with a prototype no longer
crashes because of the early freeing of the subroutine.

=item *

The C<printf> format specifier C<%.0f> no longer rounds incorrectly
L<[perl #47602]|https://rt.perl.org/Ticket/Display.html?id=47602>,
and now shows the correct sign for a negative zero.

=item * 

Fixed an issue where the error C<< Scalar value @arrayname[0] better
written as $arrayname >> would give an error C<< Cannot printf Inf with 'c' >>
when arrayname starts with C<< Inf >>.
L<[perl #132645]|https://rt.perl.org/Ticket/Display.html?id=132645>

=item *

The Perl implementation of C<< getcwd() >> in C<< Cwd >> in the PathTools
distribution now behaves the same as XS implementation on errors: it
returns an error, and sets C<< $! >>.
L<[perl #132648]|https://rt.perl.org/Ticket/Display.html?id=132648>

=item *

Vivify array elements when putting them on the stack.
Fixes L<[perl #8910]|https://rt.perl.org/Ticket/Display.html?id=8910>
(reported in April 2002).

=item *

Fixed parsing of braced subscript after parens. Fixes
L<[perl #8045]|https://rt.perl.org/Ticket/Display.html?id=8045>
(reported in December 2001).

=item *

C<tr/non_utf8/long_non_utf8/c> could give the wrong results when the
length of the replacement character list was greater than 0x7fff.

=item *

C<tr/non_utf8/non_utf8/cd> failed to add the implied
C<\x{100}-\x{7fffffff}> to the search character list.

=item *

Compilation failures within "perl-within-perl" constructs, such as with
string interpolation and the right part of C<s///e>, now cause
compilation to abort earlier.

Previously compilation could continue in order to report other errors,
but the failed sub-parse could leave partly parsed constructs on the
parser shift-reduce stack, confusing the parser, leading to perl
crashes.
L<[perl #125351]|https://rt.perl.org/Ticket/Display.html?id=125351>

=item *

Errors while compiling a regex character class could sometime trigger an
assertion failure.
L<[perl #132163]|https://rt.perl.org/Ticket/Display.html?id=132163>

=item *

C<-Dx> has been fixed to accept slim CVs without fake GV.

=item *

On threaded perls where the decimal point (radix) character is not a
dot, it has been possible for a race to occur between threads when one
needs to use the real radix character.  This has now been fixed by use
of a mutex on systems without thread-safe locales, and the problem just
doesn't come up on those with thread-safe locales.

=item *

Fixed error message for illegal charnames, and avoid passing NUL into
the charnames lookup, which is a potential security threat.  E.g. on
"\N{TILDE\000}" report "Missing right brace on \\N\{\}" as before
with 5.27.2 and on "\N{TILDE\001}" report "Unknown charname 'TILDE\1'" and
not "Unknown charname 'TILDE'".  perl5.27.5 started reporting those
errors with "Unknown charname 'TILDE'" hiding all characters behind
the embedded NUL or any non-printable character.
L<[cperl #342]|https://github.com/perl11/cperl/issues/342>

=item *

Fixed endless loop in the parser with a syntax error on an aborted
class declaration, such as e.g. with C<class $>. The previous behavior
was repeating the warning message C<Bareword found where operator expected>
endlessly.
L<[cperl #346]|https://github.com/perl11/cperl/issues/346>
cperl-only

=item *

Fixed autovivifaction of hash slices and key/value hash slices in sub args.
They are now consistent with a list of hash elements.
hash slices still autovivify in for loops.

There's also a new syntax warning about this change,
L<perldiag/"No autovivification of hash slice anymore">
L<[cperl #347]|https://github.com/perl11/cperl/issues/347>.
cperl-only

=item *

Fixed wrong C<panic: distributed hash flood> when dealing with
large C<%^H> hints hashes, with >127 entries, such as C<_charnames.pm> in
C<Regexp::Common>. Fixed the logic dealing with such a hints hash.
L<[cperl #350]|https://github.com/perl11/cperl/issues/350>.
cperl-only

=item *

Fixed endless rpeep compiler loop with a constant loop and a nested loop,
which e.g. broke C<Net:HTTP>.
L<[cperl #349]|https://github.com/perl11/cperl/issues/349>.
cperl-only

=item *

Fixed missing compile-time AvSHAPED detection in nested scopes.
E.g.:

    my @a[1]; sub { $a[0]->[5] = 1 }->(); # mderef_u
    my @b[1]; sub { $b[0] = 1 }->();      # aelemfast_lex_u

See L<[cperl #354]|https://github.com/perl11/cperl/issues/354>.
cperl-only

=back

=head1 Known Problems

=over 4

=item *

Classes are still experimental, and have some limitations:

Cannot be created in an eval block or subroutine. The pad lookup is
still global and not per optional CvPADLIST.

Method composition with overlapping field indices does not work
yet. This requires the not yet finished inliner.
C<panic: cannot yet adjust field indices when composing role %s::%s into %s %s [cperl #311]>

Array and hash fields cannot be parsed yet.

=item *

Fixed return type of C<DynaLoader::dl_find_symbol_anywhere()>,
the address, not the name.
L<[cperl #352]|https://github.com/perl11/cperl/issues/352>.

=back

=head1 Acknowledgements

cperl 5.28.0c represents approximately 15 months of development since cperl
5.26.0c and contains approximately 860,000 lines of changes across 2,100
files from 73 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 680,000 lines of changes to 1,100 .pm, .t, .c and .h files.

The following people are known to have contributed the improvements that
became cperl 5.28.0:

Karl Williamson, Reini Urban, David Mitchell, Zefram, Tony Cook, Aaron
Crane, Father Chrysostomos, Dagfinn Ilmari Mannsåker, Yves Orton, James E
Keenan, Steve Hay, Lukas Mai, Craig A. Berry, Nicolas Rochelemagne, Sawyer
X, Daniel Dragan, H.Merijn Brand, Chris 'BinGOs' Williams, Todd Rinaldo,
Pali, Jarkko Hietaniemi, Karen Etheridge, Abigail, Dominic Hargreaves,
Sergey Aleynikov, Matthew Horsfall, Marco Fontani, Smylers, Nicholas Clark,
John Peacock, Tomasz Konojacki, Steffen Müller, Aristotle Pagaltzis, Ævar
Arnfjörð Bjarmason, Eric Herman, Tom Hukins, vendethiel, Slaven Rezic,
Renee Baecker, Marc-Philip Werner, Harald Jörg, George Hartzell, Graham
Knop, Ricardo Signes, Andrew Fresh, J. Nick Koston, Neil Bowers, Dmitry
Ulanov, sten22, Andy Lester, David H. Gutteridge, William N. Braswell, Jr,
John SJ Anderson, Scott Lanning, Andy Dougherty, Vitali Peil, Peter John
Acklam, Dan Collins, Niko Tyni, E. Choroba, Tom Wyant, John Lightsey,
Jacques Germishuys, Gene Sullivan, Leon Timmermans, Eugen Konkov, François
Perrad, John P. Linderman, Alexandr Savca, Ken Cotterill, Thomas Sibley,
Shoichi Kaji.

The list above is almost certainly incomplete as it is automatically
generated from version control history including the perl and cperl repos.
In particular, it does not include the names of the (very much appreciated)
contributors who reported issues to the Perl bug tracker and the cperl
github issues.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

Generated with:

    cperl Porting/acknowledgements.pl cperl-5.26.0..HEAD -c

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
