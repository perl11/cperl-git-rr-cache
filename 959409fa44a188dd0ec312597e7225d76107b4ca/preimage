/* ex: set ro ft=c: -*- mode: c; buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 118 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}
    break;

  case 3:
#line 123 "perly.y"
    {
			  newPROG(block_end((ps[(3) - (4)].val.ival),(ps[(4) - (4)].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			}
    break;

  case 4:
#line 129 "perly.y"
    {
			  parser->expect = XTERM;
                          (yyval.ival) = 0;
			}
    break;

  case 5:
#line 134 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 6:
#line 139 "perly.y"
    {
			  parser->expect = XBLOCK;
                          (yyval.ival) = 0;
			}
    break;

  case 7:
#line 144 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}
    break;

  case 8:
#line 152 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}
    break;

  case 9:
#line 157 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}
    break;

  case 10:
#line 165 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}
    break;

  case 11:
#line 170 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}
    break;

  case 12:
#line 178 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}
    break;

  case 13:
#line 183 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 14:
#line 191 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 15:
#line 199 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (7)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (7)].val.ival), (ps[(5) - (7)].val.opval));
			}
    break;

  case 16:
#line 206 "perly.y"
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; }
    break;

  case 17:
#line 211 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 18:
#line 218 "perly.y"
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; }
    break;

  case 19:
#line 224 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 20:
#line 226 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 21:
#line 235 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 22:
#line 237 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 23:
#line 246 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (1)].val.opval) ? newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval)) : NULL;
			}
    break;

  case 24:
#line 250 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 25:
#line 254 "perly.y"
    {
<<<<<<<
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
=======
                          SV *label = cSVOPx_sv((ps[(1) - (2)].val.opval));
			  (yyval.opval) = newSTATEOP(SvFLAGS(label) & SVf_UTF8,
                                            savepv(SvPVX_const(label)), (ps[(2) - (2)].val.opval));
                          op_free((ps[(1) - (2)].val.opval));
>>>>>>>
			}
    break;

  case 26:
<<<<<<<
#line 258 "perly.y"
=======
#line 261 "perly.y"
>>>>>>>
    {
<<<<<<<
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
=======
                          SV *label = cSVOPx_sv((ps[(1) - (2)].val.opval));
			  (yyval.opval) = newSTATEOP(SvFLAGS(label) & SVf_UTF8,
                                            savepv(SvPVX_const(label)), (ps[(2) - (2)].val.opval));
                          op_free((ps[(1) - (2)].val.opval));
>>>>>>>
			}
    break;

  case 27:
<<<<<<<
#line 265 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 271 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 28:
<<<<<<<
#line 267 "perly.y"
=======
#line 273 "perly.y"
>>>>>>>
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv)))
			      pad_add_weakref(fmtcv);
			  parser->parsed_sub = 1;
			  parser->in_sub = 0;
			}
    break;

  case 29:
<<<<<<<
#line 277 "perly.y"
=======
#line 283 "perly.y"
>>>>>>>
    {
                          init_named_cv(PL_compcv, (ps[(2) - (3)].val.opval));
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
                          CvFLAGS(PL_compcv) |= (ps[(1) - (3)].val.ival);
                        }
    break;

  case 30:
<<<<<<<
#line 284 "perly.y"
=======
#line 290 "perly.y"
>>>>>>>
    {
                          CV *cv; OP* attr = (ps[(6) - (7)].val.opval);
			  SvREFCNT_inc_simple_void(PL_compcv);
			  cv = ((ps[(2) - (7)].val.opval)->op_type == OP_CONST)
			      ? newATTRSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), attr, (ps[(7) - (7)].val.opval))
			      : newMYSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), attr, (ps[(7) - (7)].val.opval))
			  ;
                          (yyval.opval) = cv && attr ? attrs_runtime(cv, attr) : NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 31:
<<<<<<<
#line 296 "perly.y"
=======
#line 302 "perly.y"
>>>>>>>
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(cSVOPx((ps[(2) - (3)].val.opval))->op_sv);
			    if (SvCUR(cSVOPx((ps[(2) - (3)].val.opval))->op_sv) >= 3 &&
                                (   strEQc(name, "BEGIN") || strEQc(name, "END")
                                 || strEQc(name, "INIT")  || strEQc(name, "CHECK")
                                 || strEQc(name, "UNITCHECK")) )
                                CvSPECIAL_on(PL_compcv);
			  }
			  else
                              /* State subs inside anonymous subs need to be
                                 clonable themselves. */
                              if (CvANON(CvOUTSIDE(PL_compcv))
                               || CvCLONE(CvOUTSIDE(PL_compcv))
                               || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
                                      CvOUTSIDE(PL_compcv)))[(ps[(2) - (3)].val.opval)->op_targ]))
                                  CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
                          CvFLAGS(PL_compcv) |= (ps[(1) - (3)].val.ival);
			}
    break;

  case 32:
<<<<<<<
#line 319 "perly.y"
=======
#line 325 "perly.y"
>>>>>>>
    {
                          OP *sig = (ps[(6) - (10)].val.opval), *body = (ps[(9) - (10)].val.opval), *attr = (ps[(7) - (10)].val.opval); CV *cv;
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && (!sig || !OpHAS_SIBLING(sig)))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(8) - (10)].val.ival))
			      parser->copline = (line_t)(ps[(8) - (10)].val.ival);
			  body = block_end((ps[(5) - (10)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));

			  SvREFCNT_inc_simple_void(PL_compcv);
			  cv = ((ps[(2) - (10)].val.opval)->op_type == OP_CONST)
			      ? newATTRSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, attr, body)
			      : newMYSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, attr, body);
                          (yyval.opval) = attr ? attrs_runtime(cv, attr) : NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 33:
<<<<<<<
#line 340 "perly.y"
=======
#line 346 "perly.y"
>>>>>>>
    {
			  if ((ps[(2) - (3)].val.opval)->op_type != OP_CONST) {
                              /* XXX lexical: my extern sub name */
                              if (CvANON(CvOUTSIDE(PL_compcv))
                               || CvCLONE(CvOUTSIDE(PL_compcv))
                               || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
                                      CvOUTSIDE(PL_compcv)))[(ps[(2) - (3)].val.opval)->op_targ])) {
                                  CvCLONE_on(PL_compcv);
                              }
                          }
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
                          CvFLAGS(PL_compcv) |= (ps[(1) - (3)].val.ival);
			}
    break;

  case 34:
<<<<<<<
#line 355 "perly.y"
=======
#line 361 "perly.y"
>>>>>>>
    {
                          OP *sig = (ps[(5) - (7)].val.opval), *name = (ps[(2) - (7)].val.opval), *attr = (ps[(6) - (7)].val.opval); CV *cv;
			  SvREFCNT_inc_simple_void(PL_compcv);
			  cv = (name->op_type == OP_CONST)
			      ? newATTRSUB((ps[(3) - (7)].val.ival), name, NULL, attr, sig)
			      : newMYSUB((ps[(3) - (7)].val.ival), name, NULL, attr, sig);
                          (yyval.opval) = attr ? attrs_runtime(cv, attr) : NULL;
			  parser->parsed_sub = 1;
			}
    break;

  case 35:
<<<<<<<
#line 365 "perly.y"
=======
#line 371 "perly.y"
>>>>>>>
    {
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = NULL;
			}
    break;

  case 36:
<<<<<<<
#line 372 "perly.y"
=======
#line 378 "perly.y"
>>>>>>>
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */
			  parser->in_sub = 0; }
    break;

  case 37:
<<<<<<<
#line 375 "perly.y"
=======
#line 381 "perly.y"
>>>>>>>
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[(1) - (7)].val.ival), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = NULL;
			}
    break;

  case 38:
<<<<<<<
#line 382 "perly.y"
=======
#line 388 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 39:
<<<<<<<
#line 388 "perly.y"
=======
#line 394 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
                              newCONDOP(0, (ps[(4) - (7)].val.opval), (ps[(7) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval))));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 40:
<<<<<<<
#line 394 "perly.y"
=======
#line 400 "perly.y"
>>>>>>>
    {
			  const PADOFFSET offset = pad_findmy_pvs("$_", 0);
			  (yyval.opval) = block_end((ps[(3) - (6)].val.ival),
				  newGIVENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)),
				    offset == NOT_IN_PAD
				    || PAD_COMPNAME_FLAGS_isOUR(offset)
				      ? 0
				      : offset));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			}
    break;

  case 41:
<<<<<<<
#line 405 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); }
=======
#line 411 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); }
>>>>>>>
    break;

  case 42:
<<<<<<<
#line 407 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); }
=======
#line 413 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 43:
<<<<<<<
#line 409 "perly.y"
=======
#line 415 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 44:
<<<<<<<
#line 416 "perly.y"
=======
#line 422 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 45:
<<<<<<<
#line 423 "perly.y"
=======
#line 429 "perly.y"
>>>>>>>
    { parser->expect = XTERM; }
    break;

  case 46:
<<<<<<<
#line 425 "perly.y"
=======
#line 431 "perly.y"
>>>>>>>
    { parser->expect = XTERM; }
    break;

  case 47:
<<<<<<<
#line 428 "perly.y"
=======
#line 434 "perly.y"
>>>>>>>
    {
			  OP *initop = (ps[(4) - (13)].val.opval);
			  OP *forop = newWHILEOP(0, 1, NULL,
				      scalar((ps[(7) - (13)].val.opval)), (ps[(13) - (13)].val.opval), (ps[(11) - (13)].val.opval), (ps[(10) - (13)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[(3) - (13)].val.ival), forop);
			  parser->copline = (line_t)(ps[(1) - (13)].val.ival);
			}
    break;

  case 48:
<<<<<<<
#line 443 "perly.y"
=======
#line 449 "perly.y"
>>>>>>>
    { parser->expect = XBLOCK; }
    break;

  case 49:
<<<<<<<
#line 445 "perly.y"
=======
#line 451 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (10)].val.ival), newFOROP(0, (ps[(4) - (10)].val.opval), (ps[(6) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (10)].val.ival);
			}
    break;

  case 50:
<<<<<<<
#line 450 "perly.y"
=======
#line 456 "perly.y"
>>>>>>>
    { parser->expect = XBLOCK; }
    break;

  case 51:
<<<<<<<
#line 452 "perly.y"
=======
#line 458 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(4) - (9)].val.ival), newFOROP(0,
			         op_lvalue((ps[(2) - (9)].val.opval), OP_ENTERLOOP), (ps[(5) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 52:
<<<<<<<
#line 458 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(4) - (4)].val.opval)); }
=======
#line 464 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(4) - (4)].val.opval)); }
>>>>>>>
    break;

  case 53:
<<<<<<<
#line 460 "perly.y"
=======
#line 466 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (10)].val.ival), newFOROP(0,
			         op_lvalue(newUNOP(OP_REFGEN, 0, (ps[(5) - (10)].val.opval)),
                                           OP_ENTERLOOP),
					 (ps[(7) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (10)].val.ival);
			}
    break;

  case 54:
<<<<<<<
#line 468 "perly.y"
=======
#line 474 "perly.y"
>>>>>>>
    {
                          (yyval.opval) = block_end((ps[(5) - (9)].val.ival), newFOROP(0,
				 op_lvalue(newUNOP(OP_REFGEN, 0, (ps[(3) - (9)].val.opval)),
                                           OP_ENTERLOOP),
                                         (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 55:
<<<<<<<
#line 476 "perly.y"
=======
#line 482 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 56:
<<<<<<<
#line 482 "perly.y"
=======
#line 488 "perly.y"
>>>>>>>
    { parser->expect = XBLOCK; }
    break;

  case 57:
<<<<<<<
#line 484 "perly.y"
=======
#line 490 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(2) - (6)].val.ival),
				  newFOROP(0, (OP*)NULL, (ps[(3) - (6)].val.opval), (ps[(5) - (6)].val.opval), (ps[(6) - (6)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			}
    break;

  case 58:
<<<<<<<
#line 490 "perly.y"
=======
#line 496 "perly.y"
>>>>>>>
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			}
    break;

  case 59:
<<<<<<<
#line 496 "perly.y"
=======
#line 502 "perly.y"
>>>>>>>
    {
			  package((ps[(3) - (5)].val.opval));
			  if ((ps[(2) - (5)].val.opval)) {
			      package_version((ps[(2) - (5)].val.opval));
			  }
			}
    break;

  case 60:
<<<<<<<
#line 503 "perly.y"
=======
#line 509 "perly.y"
>>>>>>>
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), NULL, 0);
			  if (parser->copline > (line_t)(ps[(4) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(4) - (8)].val.ival);
			}
    break;

  case 61:
<<<<<<<
#line 511 "perly.y"
    { class_role((ps[(1) - (3)].val.opval)); }
=======
#line 517 "perly.y"
    { class_role((ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 62:
<<<<<<<
#line 513 "perly.y"
=======
#line 519 "perly.y"
>>>>>>>
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)NULL,
				  (OP*)NULL, block_end((ps[(3) - (6)].val.ival), (ps[(5) - (6)].val.opval)), (OP*)NULL, 0);
			  if (parser->copline > (line_t)(ps[(2) - (6)].val.ival))
			      parser->copline = (line_t)(ps[(2) - (6)].val.ival);
                          class_role_finalize((ps[(1) - (6)].val.opval));
			}
    break;

  case 63:
<<<<<<<
#line 522 "perly.y"
    { (yyval.opval) = macrodef((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
    break;

  case 64:
#line 524 "perly.y"
=======
#line 528 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			}
    break;

<<<<<<<
  case 64:
#line 532 "perly.y"
=======
  case 65:
#line 528 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = NULL;
			  parser->copline = NOLINE;
			}
    break;

<<<<<<<
  case 65:
#line 540 "perly.y"
=======
  case 66:
#line 536 "perly.y"
>>>>>>>
    { OP *list;
			  if ((ps[(2) - (2)].val.opval)) {
			      OP *term = (ps[(2) - (2)].val.opval);
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), term);
			  }
			  else {
			      list = (ps[(1) - (2)].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			}
<<<<<<<
=======
    break;

  case 66:
#line 557 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 67:
<<<<<<<
#line 553 "perly.y"
    { (yyval.opval) = NULL; }
=======
#line 559 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); }
>>>>>>>
    break;

  case 68:
<<<<<<<
#line 555 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); }
=======
#line 564 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 69:
<<<<<<<
#line 560 "perly.y"
    { (yyval.opval) = NULL; }
=======
#line 566 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 70:
<<<<<<<
#line 562 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 568 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 71:
<<<<<<<
#line 564 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
=======
#line 570 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 72:
<<<<<<<
#line 566 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
=======
#line 572 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 73:
<<<<<<<
#line 568 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); }
=======
#line 574 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 74:
<<<<<<<
#line 570 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
=======
#line 576 "perly.y"
    { (yyval.opval) = newFOROP(0, NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), NULL);
			  parser->copline = (line_t)(ps[(2) - (3)].val.ival); }
>>>>>>>
    break;

  case 75:
<<<<<<<
#line 572 "perly.y"
    { (yyval.opval) = newFOROP(0, NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), NULL);
			  parser->copline = (line_t)(ps[(2) - (3)].val.ival); }
=======
#line 579 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); }
>>>>>>>
    break;

  case 76:
<<<<<<<
#line 575 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); }
=======
#line 584 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 77:
<<<<<<<
#line 580 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 78:
#line 582 "perly.y"
=======
#line 586 "perly.y"
>>>>>>>
    {
			  ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			}
    break;

<<<<<<<
  case 78:
#line 591 "perly.y"
    {   parser->copline = (line_t)(ps[(1) - (6)].val.ival);
=======
  case 79:
#line 587 "perly.y"
    {   parser->copline = (line_t)(ps[(1) - (6)].val.ival);
>>>>>>>
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)),
				op_scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

<<<<<<<
  case 79:
#line 601 "perly.y"
=======
  case 80:
#line 597 "perly.y"
>>>>>>>
    { (yyval.opval) = NULL; }
    break;

<<<<<<<
  case 80:
#line 603 "perly.y"
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); }
=======
  case 81:
#line 599 "perly.y"
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 81:
#line 608 "perly.y"
=======
  case 82:
#line 604 "perly.y"
>>>>>>>
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); }
    break;

<<<<<<<
  case 82:
#line 614 "perly.y"
=======
  case 83:
#line 610 "perly.y"
>>>>>>>
    { (yyval.opval) = NULL; }
    break;

<<<<<<<
  case 84:
#line 620 "perly.y"
=======
  case 85:
#line 616 "perly.y"
>>>>>>>
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; }
<<<<<<<
=======
    break;

  case 86:
#line 628 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); }
>>>>>>>
    break;

  case 87:
<<<<<<<
#line 624 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); }
=======
#line 633 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
>>>>>>>
    break;

  case 88:
<<<<<<<
#line 629 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
=======
#line 637 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
>>>>>>>
    break;

  case 89:
<<<<<<<
#line 633 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
=======
#line 640 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 90:
<<<<<<<
#line 636 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 641 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 91:
<<<<<<<
#line 637 "perly.y"
    { (yyval.opval) = NULL; }
=======
#line 644 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
>>>>>>>
    break;

  case 92:
<<<<<<<
#line 640 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
=======
#line 645 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
>>>>>>>
    break;

  case 93:
<<<<<<<
#line 641 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
=======
#line 646 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
>>>>>>>
    break;

  case 94:
<<<<<<<
#line 642 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
    break;

  case 95:
#line 646 "perly.y"
=======
#line 650 "perly.y"
>>>>>>>
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

<<<<<<<
  case 95:
#line 655 "perly.y"
=======
  case 96:
#line 651 "perly.y"
>>>>>>>
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); }
    break;

<<<<<<<
  case 96:
#line 660 "perly.y"
=======
  case 97:
#line 656 "perly.y"
>>>>>>>
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

<<<<<<<
  case 100:
#line 667 "perly.y"
=======
  case 99:
#line 671 "perly.y"
>>>>>>>
    { (yyval.opval) = NULL; }
<<<<<<<
=======
    break;

  case 101:
#line 677 "perly.y"
    { parser->in_sub = 0; (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 102:
<<<<<<<
#line 673 "perly.y"
    { parser->in_sub = 0; (yyval.opval) = NULL; }
=======
#line 679 "perly.y"
    { parser->in_sub = 0; (yyval.opval) = (ps[(2) - (2)].val.opval); }
>>>>>>>
    break;

  case 103:
<<<<<<<
#line 675 "perly.y"
    { parser->in_sub = 0; (yyval.opval) = (ps[(2) - (2)].val.opval); }
=======
#line 681 "perly.y"
    { parser->in_sub = 0; (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 104:
<<<<<<<
#line 677 "perly.y"
    { parser->in_sub = 0; (yyval.opval) = NULL; }
=======
#line 686 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
>>>>>>>
    break;

  case 105:
<<<<<<<
#line 682 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
=======
#line 688 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 106:
<<<<<<<
#line 684 "perly.y"
    { (yyval.opval) = NULL; }
    break;

  case 107:
#line 690 "perly.y"
=======
#line 694 "perly.y"
>>>>>>>
    {
#ifndef USE_CPERL
			  /* We shouldn't get here otherwise */
			  assert(FEATURE_SIGNATURES_IS_ENABLED);
			  Perl_ck_warner_d(aTHX_
				packWARN(WARN_EXPERIMENTAL__SIGNATURES),
				"The signatures feature is experimental");
#endif
			  (yyval.opval) = parse_subsignature();
			}
    break;

<<<<<<<
  case 107:
#line 705 "perly.y"
=======
  case 108:
#line 701 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = (ps[(2) - (3)].val.opval);
                          if (parser->lex_attr_state == XATTRBLOCK ||
                              parser->lex_attr_state == XATTRTERM) {
			      parser->expect = parser->lex_attr_state;
                              parser->lex_attr_state = XOPERATOR;
                          }
			}
<<<<<<<
=======
    break;

  case 109:
#line 717 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 110:
<<<<<<<
#line 713 "perly.y"
    { (yyval.opval) = NULL; }
=======
#line 722 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 111:
<<<<<<<
#line 718 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 724 "perly.y"
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 112:
<<<<<<<
#line 720 "perly.y"
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 726 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 113:
#line 722 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
  case 114:
#line 732 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); }
>>>>>>>
    break;

  case 115:
<<<<<<<
#line 728 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); }
=======
#line 734 "perly.y"
    {
			  OP* term = (ps[(3) - (3)].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			}
>>>>>>>
    break;

<<<<<<<
  case 116:
#line 730 "perly.y"
    {
			  OP* term = (ps[(3) - (3)].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
=======
  case 117:
#line 743 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (3)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (3)].val.ival),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
>>>>>>>
			}
    break;

  case 118:
<<<<<<<
#line 739 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (3)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (3)].val.ival),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
=======
#line 747 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (5)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (5)].val.ival),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
>>>>>>>
			}
    break;

  case 119:
<<<<<<<
#line 743 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (5)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (5)].val.ival),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
=======
#line 751 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
>>>>>>>
			}
    break;

  case 120:
<<<<<<<
#line 747 "perly.y"
=======
#line 757 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
<<<<<<<
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
=======
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
>>>>>>>
			}
    break;

  case 121:
<<<<<<<
#line 753 "perly.y"
=======
#line 762 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
<<<<<<<
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
=======
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
>>>>>>>
			}
    break;

  case 122:
<<<<<<<
#line 758 "perly.y"
=======
#line 768 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
<<<<<<<
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
=======
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
>>>>>>>
			}
    break;

  case 123:
<<<<<<<
#line 764 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			}
=======
#line 774 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 124:
<<<<<<<
#line 770 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
=======
#line 776 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
>>>>>>>
    break;

  case 125:
<<<<<<<
#line 772 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
=======
#line 778 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, NULL, (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 126:
<<<<<<<
#line 774 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, NULL, (ps[(3) - (3)].val.opval)); }
    break;

  case 127:
#line 777 "perly.y"
=======
#line 781 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			}
<<<<<<<
=======
    break;

  case 129:
#line 796 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); }
>>>>>>>
    break;

  case 130:
<<<<<<<
#line 792 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); }
=======
#line 798 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			}
>>>>>>>
    break;

  case 131:
<<<<<<<
#line 794 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
=======
#line 801 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
>>>>>>>
			}
    break;

  case 132:
<<<<<<<
#line 797 "perly.y"
=======
#line 806 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
<<<<<<<
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
=======
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
>>>>>>>
			}
    break;

  case 133:
<<<<<<<
#line 802 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
=======
#line 811 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
>>>>>>>
			}
    break;

  case 134:
<<<<<<<
#line 807 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			}
=======
#line 814 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval))); }
>>>>>>>
    break;

  case 135:
<<<<<<<
#line 810 "perly.y"
=======
#line 818 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
<<<<<<<
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval))); }
=======
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval))); }
>>>>>>>
    break;

  case 136:
<<<<<<<
#line 814 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval))); }
=======
#line 822 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}
>>>>>>>
    break;

  case 137:
<<<<<<<
#line 818 "perly.y"
=======
#line 828 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
<<<<<<<
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval))));
=======
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval)))));
>>>>>>>
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}
    break;

  case 138:
<<<<<<<
#line 824 "perly.y"
=======
#line 836 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
<<<<<<<
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval)))));
=======
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval)))));
>>>>>>>
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}
    break;

  case 139:
<<<<<<<
#line 832 "perly.y"
=======
#line 843 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
<<<<<<<
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval))));
=======
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval)))));
>>>>>>>
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}
    break;

  case 140:
<<<<<<<
#line 839 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}
=======
#line 849 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); }
>>>>>>>
    break;

  case 141:
<<<<<<<
#line 845 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); }
=======
#line 851 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 142:
<<<<<<<
#line 847 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); }
=======
#line 853 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), NULL); }
>>>>>>>
    break;

  case 143:
<<<<<<<
#line 849 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), NULL); }
=======
#line 858 "perly.y"
    { (yyval.opval) = newASSIGNOP_maybe_const((ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 144:
<<<<<<<
#line 854 "perly.y"
    { (yyval.opval) = newASSIGNOP_maybe_const((ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); }
=======
#line 860 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 145:
<<<<<<<
#line 856 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 862 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			}
>>>>>>>
    break;

  case 146:
<<<<<<<
#line 858 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
=======
#line 867 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
>>>>>>>
			}
    break;

  case 147:
<<<<<<<
#line 863 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			}
=======
#line 872 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 148:
<<<<<<<
#line 868 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 874 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 149:
<<<<<<<
#line 870 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 876 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 150:
<<<<<<<
#line 872 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 878 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 151:
<<<<<<<
#line 874 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 880 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 152:
<<<<<<<
#line 876 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 882 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 153:
<<<<<<<
#line 878 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 884 "perly.y"
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 154:
<<<<<<<
#line 880 "perly.y"
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 886 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 155:
<<<<<<<
#line 882 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 888 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 156:
<<<<<<<
#line 884 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 890 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 157:
<<<<<<<
#line 886 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 892 "perly.y"
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 158:
<<<<<<<
#line 888 "perly.y"
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 897 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 159:
<<<<<<<
#line 893 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); }
=======
#line 899 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
>>>>>>>
    break;

  case 160:
<<<<<<<
#line 895 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
=======
#line 902 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 161:
<<<<<<<
#line 898 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
=======
#line 904 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 162:
<<<<<<<
#line 900 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); }
=======
#line 906 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC)); }
>>>>>>>
    break;

  case 163:
<<<<<<<
#line 902 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC)); }
=======
#line 909 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));}
>>>>>>>
    break;

  case 164:
<<<<<<<
#line 905 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));}
    break;

  case 165:
#line 908 "perly.y"
=======
#line 912 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[(1) - (2)].val.opval)
				       ));
			}
<<<<<<<
=======
    break;

  case 165:
#line 923 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (2)].val.opval)),
                                        newSVOP(OP_CONST, 0, newSViv(parser->yylval.ival))); }
>>>>>>>
    break;

  case 166:
<<<<<<<
#line 919 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (2)].val.opval)),
                                        newSVOP(OP_CONST, 0, newSViv(parser->yylval.ival))); }
=======
#line 926 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); }
>>>>>>>
    break;

  case 167:
<<<<<<<
#line 922 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); }
=======
#line 929 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); }
>>>>>>>
    break;

  case 168:
<<<<<<<
#line 925 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); }
=======
#line 936 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); }
>>>>>>>
    break;

  case 169:
<<<<<<<
#line 932 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); }
=======
#line 938 "perly.y"
    { (yyval.opval) = newANONLIST(NULL);}
>>>>>>>
    break;

  case 170:
<<<<<<<
#line 934 "perly.y"
    { (yyval.opval) = newANONLIST(NULL);}
=======
#line 940 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); }
>>>>>>>
    break;

  case 171:
<<<<<<<
#line 936 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); }
=======
#line 942 "perly.y"
    { (yyval.opval) = newANONHASH(NULL); }
>>>>>>>
    break;

  case 172:
<<<<<<<
#line 938 "perly.y"
    { (yyval.opval) = newANONHASH(NULL); }
=======
#line 944 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
>>>>>>>
    break;

  case 173:
<<<<<<<
#line 940 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

  case 174:
#line 943 "perly.y"
=======
#line 947 "perly.y"
>>>>>>>
    {
			  OP *sig = (ps[(4) - (8)].val.opval), *body = (ps[(7) - (8)].val.opval);
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && (!sig || !OpHAS_SIBLING(sig)))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(6) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(6) - (8)].val.ival);
			  body = block_end((ps[(3) - (8)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (8)].val.ival), NULL, (ps[(5) - (8)].val.opval), body);
			}
<<<<<<<
=======
    break;

  case 174:
#line 966 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));}
>>>>>>>
    break;

  case 175:
<<<<<<<
#line 962 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));}
=======
#line 968 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));}
>>>>>>>
    break;

<<<<<<<
  case 176:
#line 964 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));}
=======
  case 180:
#line 976 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
>>>>>>>
    break;

  case 181:
<<<<<<<
#line 972 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
=======
#line 978 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 182:
<<<<<<<
#line 974 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); }
=======
#line 980 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, localize((ps[(3) - (3)].val.opval),1)); }
>>>>>>>
    break;

  case 183:
<<<<<<<
#line 976 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, localize((ps[(3) - (3)].val.opval),1)); }
=======
#line 982 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 184:
<<<<<<<
#line 978 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 984 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),0); }
>>>>>>>
    break;

  case 185:
<<<<<<<
#line 980 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),0); }
=======
#line 986 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
>>>>>>>
    break;

  case 186:
<<<<<<<
#line 982 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
=======
#line 988 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 187:
<<<<<<<
#line 984 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 990 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
>>>>>>>
    break;

  case 188:
<<<<<<<
#line 986 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
=======
#line 992 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 189:
<<<<<<<
#line 988 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 994 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 190:
<<<<<<<
#line 990 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 996 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 191:
<<<<<<<
#line 992 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 998 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 192:
<<<<<<<
#line 1000 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
=======
#line 994 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 193:
<<<<<<<
#line 1002 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 996 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
>>>>>>>
    break;

  case 194:
<<<<<<<
#line 1004 "perly.y"
=======
#line 998 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 195:
#line 1000 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 195:
#line 1014 "perly.y"
=======
  case 196:
#line 1010 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref(oopsAV((ps[(1) - (4)].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 196:
#line 1024 "perly.y"
=======
  case 197:
#line 1020 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 197:
#line 1034 "perly.y"
=======
  case 198:
#line 1030 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
<<<<<<<
=======
    break;

  case 198:
#line 1044 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 199:
<<<<<<<
#line 1040 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1046 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); }
>>>>>>>
    break;

  case 200:
<<<<<<<
#line 1042 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); }
=======
#line 1048 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			}
>>>>>>>
    break;

  case 201:
<<<<<<<
#line 1044 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
=======
#line 1051 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
>>>>>>>
			}
    break;

  case 202:
<<<<<<<
#line 1047 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
=======
#line 1056 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
>>>>>>>
			}
    break;

  case 203:
<<<<<<<
#line 1052 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
			}
=======
#line 1060 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 204:
<<<<<<<
#line 1056 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); }
=======
#line 1062 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 205:
<<<<<<<
#line 1058 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
=======
#line 1064 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 206:
<<<<<<<
#line 1060 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); }
=======
#line 1066 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); }
>>>>>>>
    break;

  case 207:
<<<<<<<
#line 1062 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); }
=======
#line 1069 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 208:
<<<<<<<
#line 1065 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); }
=======
#line 1071 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			  PL_hints |= HINT_BLOCK_SCOPE; }
>>>>>>>
    break;

  case 209:
<<<<<<<
#line 1067 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			  PL_hints |= HINT_BLOCK_SCOPE; }
=======
#line 1074 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 210:
<<<<<<<
#line 1070 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
=======
#line 1076 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 211:
<<<<<<<
#line 1072 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
=======
#line 1078 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
>>>>>>>
    break;

  case 212:
<<<<<<<
#line 1074 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
=======
#line 1080 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 213:
<<<<<<<
#line 1076 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
=======
#line 1082 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 214:
<<<<<<<
#line 1078 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
=======
#line 1084 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); }
>>>>>>>
    break;

  case 215:
<<<<<<<
#line 1080 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); }
=======
#line 1086 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 216:
<<<<<<<
#line 1082 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); }
=======
#line 1088 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
>>>>>>>
    break;

  case 217:
<<<<<<<
#line 1084 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
=======
#line 1090 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); }
>>>>>>>
    break;

  case 218:
<<<<<<<
#line 1086 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); }
=======
#line 1093 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
>>>>>>>
    break;

  case 219:
<<<<<<<
#line 1089 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
=======
#line 1095 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);}
>>>>>>>
    break;

  case 220:
<<<<<<<
#line 1091 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);}
=======
#line 1097 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 221:
<<<<<<<
#line 1093 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1099 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval); }
>>>>>>>
    break;

  case 222:
<<<<<<<
#line 1095 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval); }
=======
#line 1101 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
>>>>>>>
    break;

  case 223:
<<<<<<<
#line 1097 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
=======
#line 1103 "perly.y"
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); }
>>>>>>>
    break;

  case 224:
<<<<<<<
#line 1099 "perly.y"
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); }
=======
#line 1107 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
>>>>>>>
    break;

  case 225:
<<<<<<<
#line 1103 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

  case 226:
#line 1105 "perly.y"
=======
#line 1109 "perly.y"
>>>>>>>
    {
			    if (   (ps[(1) - (1)].val.opval)->op_type != OP_TRANS
			        && (ps[(1) - (1)].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[(1) - (1)].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
				parser->in_sub = 0;
			    } else
				(yyval.ival) = 0;
			}
    break;

<<<<<<<
  case 226:
#line 1121 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); }
=======
  case 227:
#line 1117 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); }
>>>>>>>
    break;

<<<<<<<
  case 229:
#line 1125 "perly.y"
=======
  case 230:
#line 1121 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			}
<<<<<<<
=======
    break;

  case 231:
#line 1134 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 232:
<<<<<<<
#line 1130 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
=======
#line 1136 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),1); }
>>>>>>>
    break;

  case 233:
<<<<<<<
#line 1132 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),1); }
=======
#line 1138 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 234:
<<<<<<<
#line 1134 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
=======
#line 1140 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),2); }
>>>>>>>
    break;

  case 235:
<<<<<<<
#line 1136 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),2); }
=======
#line 1142 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, my_attrs((ps[(3) - (4)].val.opval),(ps[(4) - (4)].val.opval))); }
>>>>>>>
    break;

  case 236:
<<<<<<<
#line 1138 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, my_attrs((ps[(3) - (4)].val.opval),(ps[(4) - (4)].val.opval))); }
    break;

  case 237:
#line 1140 "perly.y"
=======
#line 1144 "perly.y"
>>>>>>>
    {   
                            PADOFFSET targ = (ps[(2) - (7)].val.opval)->op_targ;
                            OP* aop = my_attrs((ps[(2) - (7)].val.opval),(ps[(3) - (7)].val.opval));
                            SV *av = PAD_SV(targ);
                            av_init_shaped(MUTABLE_AV(av),
                                           num_constlistexpr((ps[(6) - (7)].val.opval), 0),
                                           PadnameTYPE(PAD_COMPNAME(targ)));
                            (yyval.opval) = newASSIGNOP_maybe_const(aop, (ps[(4) - (7)].val.ival), (ps[(6) - (7)].val.opval));
                        }
    break;

<<<<<<<
  case 237:
#line 1154 "perly.y"
=======
  case 238:
#line 1150 "perly.y"
>>>>>>>
    {
                            PADOFFSET targ = (ps[(2) - (6)].val.opval)->op_targ;
                            OP* aop = localize((ps[(2) - (6)].val.opval),1);
                            av_init_shaped(MUTABLE_AV(PAD_SV(targ)),
                                           num_constlistexpr((ps[(5) - (6)].val.opval), 0),
                                           PadnameTYPE(PAD_COMPNAME(targ)));
                            (yyval.opval) = newASSIGNOP(OPf_STACKED, aop, (ps[(3) - (6)].val.ival), (ps[(5) - (6)].val.opval));
                        }
<<<<<<<
=======
    break;

  case 238:
#line 1166 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
>>>>>>>
    break;

  case 239:
<<<<<<<
#line 1162 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
=======
#line 1168 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
>>>>>>>
    break;

  case 240:
<<<<<<<
#line 1164 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
=======
#line 1171 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 241:
<<<<<<<
#line 1167 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1173 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 242:
<<<<<<<
#line 1169 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1175 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 243:
<<<<<<<
#line 1171 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1177 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 244:
<<<<<<<
#line 1173 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1183 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 245:
<<<<<<<
#line 1179 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
=======
#line 1185 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 246:
<<<<<<<
#line 1181 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
=======
#line 1187 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 247:
<<<<<<<
#line 1183 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
=======
#line 1189 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 248:
<<<<<<<
#line 1185 "perly.y"
    { (yyval.opval) = hasterm((ps[(1) - (1)].val.opval)); }
=======
#line 1194 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 249:
<<<<<<<
#line 1190 "perly.y"
    { (yyval.opval) = NULL; }
=======
#line 1196 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 250:
<<<<<<<
#line 1192 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1200 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 251:
<<<<<<<
#line 1196 "perly.y"
    { (yyval.opval) = NULL; }
=======
#line 1202 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 252:
<<<<<<<
#line 1198 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1206 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 253:
<<<<<<<
#line 1202 "perly.y"
    { (yyval.opval) = NULL; }
=======
#line 1208 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
>>>>>>>
    break;

  case 254:
<<<<<<<
#line 1204 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
=======
#line 1212 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
>>>>>>>
    break;

  case 255:
<<<<<<<
#line 1208 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
=======
#line 1214 "perly.y"
    { munge_qwlist_to_paren_list((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 256:
<<<<<<<
#line 1210 "perly.y"
    { munge_qwlist_to_paren_list((ps[(1) - (1)].val.opval)); }
=======
#line 1216 "perly.y"
    { (yyval.ival) = (ps[(3) - (3)].val.ival); }
>>>>>>>
    break;

  case 257:
<<<<<<<
#line 1212 "perly.y"
    { (yyval.ival) = (ps[(3) - (3)].val.ival); }
=======
#line 1222 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 258:
#line 1218 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); }
=======
  case 265:
#line 1239 "perly.y"
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 266:
<<<<<<<
#line 1235 "perly.y"
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
=======
#line 1243 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 267:
<<<<<<<
#line 1239 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); }
=======
#line 1247 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
>>>>>>>
    break;

  case 268:
<<<<<<<
#line 1243 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

  case 269:
#line 1249 "perly.y"
=======
#line 1253 "perly.y"
>>>>>>>
    {
                          SV *constsv = cSVOPx_sv((ps[(4) - (5)].val.opval));
                          assert((ps[(2) - (5)].val.opval)->op_targ);
                          if (SvTYPE(constsv) != SVt_IV)
                            Perl_croak(aTHX_ "Invalid array size %s[%s]",
                                  PAD_COMPNAME_PV((ps[(2) - (5)].val.opval)->op_targ),
                                  SvPOK(constsv) ? SvPVX(constsv) : "");
                          /* - is not a THING, syntax error near "[-"
                          if (size <= 0)
                            Perl_croak(aTHX_ "Invalid array size %s[%d]",
                                  PAD_COMPNAME_PV($2->op_targ), size);
                          */
			  if (!FEATURE_SHAPED_ARRAYS_IS_ENABLED)
                              Perl_croak(aTHX_ "Experimental "
                                    "shaped_arrays not enabled");
#ifndef USE_CPERL
                          /* Policies... Either provide a stable feature or not.
                             No need to be defensive about every single new feature */
			  ck_warner_d(
				packWARN(WARN_EXPERIMENTAL__SHAPED_ARRAYS),
				"The shaped_arrays feature is experimental");
#endif
                          av_init_shaped(MUTABLE_AV(PAD_SV((ps[(2) - (5)].val.opval)->op_targ)), SvIVX(constsv),
                                        PadnameTYPE(PAD_COMPNAME((ps[(2) - (5)].val.opval)->op_targ)));
			  (yyval.opval) = newAVREF((ps[(2) - (5)].val.opval));
			}
    break;

<<<<<<<
  case 269:
#line 1281 "perly.y"
=======
  case 270:
#line 1277 "perly.y"
>>>>>>>
    {
<<<<<<<
                          assert((ps[(2) - (4)].val.opval)->op_targ);
=======
                          dVAR;
                          assert((ps[(2) - (4)].val.opval)->op_targ);
>>>>>>>
			  if (!FEATURE_SHAPED_ARRAYS_IS_ENABLED)
                              Perl_croak(aTHX_ "Experimental "
                                    "shaped_arrays not enabled");
#ifndef USE_CPERL
			  ck_warner_d(packWARN(WARN_EXPERIMENTAL__SHAPED_ARRAYS),
                                      "The shaped_arrays feature is experimental");
#endif
                	  OpTYPE_set((ps[(2) - (4)].val.opval), OP_PADAV);
			  (yyval.opval) = (ps[(2) - (4)].val.opval);
			}
<<<<<<<
=======
    break;

  case 270:
#line 1296 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
>>>>>>>
    break;

  case 271:
<<<<<<<
#line 1291 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
=======
#line 1302 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 272:
<<<<<<<
#line 1297 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); }
=======
#line 1304 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 273:
<<<<<<<
#line 1299 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
=======
#line 1308 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 274:
#line 1303 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); }
=======
  case 275:
#line 1313 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 276:
#line 1308 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); }
=======
  case 277:
#line 1318 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 278:
#line 1313 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); }
=======
  case 279:
#line 1323 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 280:
<<<<<<<
#line 1318 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); }
=======
#line 1328 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 281:
<<<<<<<
#line 1323 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
=======
#line 1330 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 282:
<<<<<<<
#line 1325 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
=======
#line 1332 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 283:
<<<<<<<
#line 1327 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); }
=======
#line 1335 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

<<<<<<<
=======
  case 284:
#line 1330 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

>>>>>>>
      default: break;
    

/* Generated from:
<<<<<<<
 * ac6379666f27453bb10d8e2cd64af1c1db41da0cc1279a982c10d01c6f302e3c perly.y
 * 5132b115dedc64fcaea289ebf11528abd6f23d9b88e5247a236e1116603edcdb regen_perly.pl
=======
 * af1be8cff80ed997085dda0a1a919f6cb52da7792b9a3e97b637432ce15d7e56 perly.y
 * 25c852d9fc4ee1fa7741d85b998cb1c114ca562f098ad0e98d8b0a15aadf00f9 regen_perly.pl
>>>>>>>
 * ex: set ro: */
