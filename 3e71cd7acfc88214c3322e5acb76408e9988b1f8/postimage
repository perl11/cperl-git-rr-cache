=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.27.2

=head1 DESCRIPTION

This document describes the differences between the cperl 5.27.1
and the cperl 5.27.2 releases.

If you are upgrading from an earlier release such as v5.24.2c, first
read the L<perl526*cdelta> documentation, which describes differences
between v5.26.0c and v5.26.2c

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

=head2 Optimize static methods to subs

When a method call can be proven at compile-time to use a specific
subroutine, optimize away the run-time method dispatch on a non-threaded perl.
When it is for a XS subroutine, such as with e.g. C<use strict;> which does
C<< BEGIN {require strict;} strict->import; >> the C<< strict->import >>
part is optimized from the slow C<entersub> op to the C<enterxssub> op,
as if via C<strict::import("strict",...)>.
The slow GV lookup in entersub cannot be converted to a faster CVref lookup,
as this would break dynamic method redefinitions.
See L<http://blogs.perl.org/users/rurban/2011/06/how-perl-calls-subs-and-methods.html>.
This is ~4% faster for each such method call.
cperl-only.

=head2 Dump more COP fields

Dump the values of a COP C<$^H>, C<%^H> and the lexical warnings via
C<op_dump()> and it's XS module L<Devel::Peek>.
Improve the display of cop SEQ values and ranges, and padnames.
Added a DEBUGGING C<cop_dump()> helper, esp. useful for deleted C<PL_curcop>'s.
cperl-only.

=head2 More unicode ops

Added the strong unicode fraction op C</> U+2044, which binds stronger
than all other arithmetic ops, and the two unicode multiplication ops
C<⋅> U+022C5 (dot operator) and C<∙> U+2219 (multiplication dot),
which binds the same as C<*>.
cperl-only.

=head2 L<C<delete>|perlfunc/delete EXPR> on key/value slices

L<C<delete>|perlfunc/delete EXPR> can now be used on key/value slices,
returning the keys along with the deleted values.
L<[perl #131328]|https://rt.perl.org/Ticket/Display.html?id=131328>

=head2 Unicode 10.0 is supported

A list of changes is at
L<http://www.unicode.org/versions/Unicode10.0.0>.

=head2 Re-enable warnings illegalproto

Parse prototypes for errors again. Either with C<:prototype()> or as signature.
Illegal prototypes are not stored.

=head2 In-place editing is now safer

Previously in-place editing would delete or rename the input file
as soon as you started working on a new file.

Without backups this would result in loss of data if there was an
error, such as a full disk, when writing to the output file.

This has changed so that the input file isn't replaced until the
output file has been completely written and successfully closed.

This works by creating a work file in the same directory, which is
renamed over the input file once the output file is complete.

Incompatibilities:

=over

=item *

Since this renaming needs to only happen once, if you create a thread
or child process, that renaming will only happen in the original
thread or process.

=item *

If you change directories while processing a file, and your operating
system doesn't provide the C<unlinkat()>, C<renameat()> and C<fchmodat()>
functions, the final rename step may fail.

=back

L<[perl #127663]|https://rt.perl.org/Public/Bug/Display.html?id=127663>

=head1 Security

=head2 [CVE-2017-12837] Heap buffer overflow in regular expression compiler

Compiling certain regular expression patterns with the case-insensitive
modifier could cause a heap buffer overflow and crash perl.  This has now been
fixed.
L<[perl #131582]|https://rt.perl.org/Public/Bug/Display.html?id=131582>

=head2 [CVE-2017-12883] Buffer over-read in regular expression parser

For certain types of syntax error in a regular expression pattern, the error
message could either contain the contents of a random, possibly large, chunk of
memory, or could crash perl.  This has now been fixed.
L<[perl #131598]|https://rt.perl.org/Public/Bug/Display.html?id=131598>

=head2 [CVE-2017-12814] C<$ENV{$key}> stack buffer overflow on Windows

A possible stack buffer overflow in the C<%ENV> code on Windows has been fixed
by removing the buffer completely since it was superfluous anyway.
L<[perl #131665]|https://rt.perl.org/Public/Bug/Display.html?id=131665>

=head1 Incompatible Changes

=head2 Comma-less variable lists in formats are no longer allowed

Omitting the commas between variables passed to formats is no longer
allowed.  This has been deprecated since perl 5.000.

=head2 The C<:locked> and C<:unique> attributes have been removed

These have been no-ops and deprecated since perl 5.12 and 5.10,
respectively.

=head2 C<\N{}> with nothing between the braces is now illegal.

This has been deprecated since Perl 5.24.

=head2 Opening the same symbol as both a file and directory handle is no longer allowed

Using open() and opendir() to associate both a filehandle and a dirhandle
to the same symbol (glob or scalar) has been deprecated since Perl 5.10.

=head2 Use of bare C<< << >> to mean C<< <<"" >> is no longer allowed

Use of a bare terminator has been deprecated since Perl 5.000.

=head2 Setting $/ to a reference to a non-positive integer no longer allowed

This used to work like setting it to C<undef>, but has been deprecated
since Perl 5.20.

=head2 Unicode code points with values exceeding C<IV_MAX> are now fatal.

This was deprecated since Perl 5.24.

=head2 C<B::OP::terse> no longer exists.

Use C<B::Concise::b_terse> instead.

=head2 Use of inherited AUTOLOAD for non-methods is no longer allowed.

This was deprecated in Perl 5.004.

=head2 Use of strings with code points over 0xFF is not allowed for
bitwise string operators

Code points over 0xFF do not make sense for bitwise operators.

=head2 Backslash no longer escapes colon in PATH for the -S switch

Previously the C<-S> switch incorrectly treated backslash ("\") as an
escape for colon when traversing the C<PATH> environment variable.
L<[perl #129183]|https://rt.perl.org/Ticket/Display.html?id=129183>

=head1 Deprecations

=head2 Use of L<C<vec>|perlfunc/vec EXPR,OFFSET,BITS> on strings with code
points above 0xFF is deprecated.

Use of these is nonsensical, as C<vec> is a bit-oriented operation,
which operates on the underlying UTF-8 representation these strings must
be in, and will likely give unexpected results.

=head2 Some uses of unescaped C<"{"> are no longer fatal

Perl 5.26.0 fatalized some uses of an unescaped left brace, but an
exception was made at the last minute, specifically crafted to be a
minimal change to allow GNU Autoconf to work.  This code is heavily
depended upon, and continues to use the deprecated usage.  Its use of an
unescaped left brace is one where we have no intention of repurposing
C<"{"> to be something other than itself.

That exception is now generalized to include various other such cases
where the C<"{"> will not be repurposed.  This is to get real experience
with this more complicated change now, in case we need to issue a dot
release if we find other things like Autoconf that are important to work
around.

Note that these uses continue to raise a deprecation message.

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

=over 4

=item *

The L<fields> API refactor using a local L<perlapi/HvFIELDS> buffer
and not globals C<%FIELDS> and C<@FIELDS> SVs anymore gained 25% speed
and similar memory improvements.
cperl-only.

=item *

Optimize field method calls to faster oelemfast OPs, accessing the
field directly.
cperl-only.

=item *

Removed C<PL_sv_count> variable and updates on every C<new_SV> and
C<del_SV> on non-DEBUGGING builds.  For refcount leak checks scan the
arenas.
cperl-only.

=item *

C<SvTRUE()> is now more efficient.

=item *

C<keys()> in void and scalar contexts is now more efficient.

=item *

Various integer-returning ops are now more efficient in scalar/boolean context.

=item *

C<< if (index(...) != -1) { ... } >> is now more efficient.

=item *

Slightly improved performance when parsing stash names.
L<[perl #129990]|https://rt.perl.org/Public/Bug/Display.html?id=129990>

=item *

Calls to C<require> for an already loaded module are now slightly faster.
L<[perl #132171]|https://rt.perl.org/Public/Bug/Display.html?id=132171>

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item L<arybase> 0.14

Remove #ifdef USE_ITHREADS around MUTEX_* calls

=item L<attributes> 1.14c

Remove deprecated no-op attributes :unique, :locked.
Added another param to validate_proto.

=item L<Attribute::Handlers> 1.00

Remove deprecated no-op attributes :unique, :locked

=item L<base> 2.27c

Limit dotless-INC effect on base.pm with guard

=item L<B> 1.69_08

Support PL_sv_zero

=item L<B::C> 1.55_05

Support POK/PVLV REGEXP for v5.27.3/v5.27.2c
VOL => volatile for  v5.27.6/v5.27.2c

=item L<B::Concise> 1.002c

Support PL_sv_zero

=item L<B::Deparse> 1.43_04c

Support boolean optims.
Better constant-dumping heuristics.

=item L<B::Terse> 1.09_01

Remove internal links to B::Debug

=item L<B::Xref> 1.07_01

Support sub refs

=item C<Carp> 1.43c

Fix problems introduced by the partial EBCDIC support from version
1.35

=item C<charnames> 1.45

Remove obsolete pod about NBSP

=item C<coretypes> 0.03c

Each coretype is now a class.

=item L<Cpanel::JSON::XS> 3.0239

Fixed locale-insensitive numeric conversion on older perls.
Fixed compilation under windows.

=item L<Data::Dumper> 2.167_02

Attempt to work around XS deparse issues on old perls.

=item L<Devel::Peek> 1.27_03

Dump the values of a COP $^H, %^H and lexical warnings.
Improved the test a bit.

use cv_set_call_checker_flags

=item L<Devel::PPPort> 3.36_03

Silence PERL_CORE make

=item L<DirHandle> 1.05

Document as obsolete

=item L<Encode> 2.93

lib/Encode/MIME/Name.pm t/mime-name.t
Pulled: Add "euc-cn" => "EUC-CN" alias to Encode::MIME::Name
https://github.com/dankogai/p5-encode/pull/124

lib/Encode/CN/HZ.pm lib/Encode/JP/JIS7.pm lib/Encode/MIME/Header.pm
t/decode.t
Pulled: Uninitialized value fixes #122
https://github.com/dankogai/p5-encode/pull/122

Makefile.PL
Pulled: Fix -Werror=declaration-after-statement for gcc 4.1.2
https://github.com/dankogai/p5-encode/pull/121

=item L<ExtUtils::Constant> 0.24_01

Minor updates from p5p

=item L<feature> 1.49_01

=item L<fields> 2.26c

Implemented L<Mu/fields> returning fields objects, as in perl6
(there called I<Attributes>).

Revert the conversion of a fields package to class. Only close
the ISA as with base.

cperl-only.

=item L<File::Fetch> 0.54

Switch test URL from www.cpan.org to httpbin.org

=item L<File::Glob> 1.30

Skip a test when File::Glob not used.
Avoid undefined behaviour in Copy() [perl #131746]

=item L<GDBM_File> 1.16

Add a pod link

=item L<I18N::Langinfo> 0.14

Use new fcn Perl_langinfo()

=item L<if> 0.0607

Doc how to import when you want to 'use MODULE ()'

=item L<Module::CoreList> 20170815c

=item L<Module::Load::Conditional> 0.68_01

Improve CPANPLUS: Fix [cperl #331], checking for cperl builtins.
With a slightly adjusted patch from @voegelas.

=item L<mro> 1.21

prevent mro.pm from loading DynaLoader

=item L<Mu> 0.02c

Implemented L<Mu/fields> returning fields objects.
cperl-only.

=item L<NEXT> 0.67_01

Fix for GLOB stubs [cpan #123002].

=item L<O> 1.02

Improve error message for bogus -MO=… arguments

=item L<perl5db> 1.52_01c

Support debugger cmds not requiring spaces

=item L<PerlIO::scalar> 0.29

check invariant at compile time.

return EACCES on writing to a read-only scalar

=item L<Pod::Perldoc> 3.2801

customize to fix formatters and pager misbehaviour

=item L<POSIX> 1.78_03

internal cleanup of setlocale (unusable for cpan).
get/setpriority constants

=item L<re> 0.35_01

Faster. add DEBUGGING_RE_ONLY define

=item L<SelfLoader> 1.24

=item L<sort> 2.03

no sort stable; SORTf_UNSTABLE flag

=item L<Storable> 3.05_16

Try to fix readonly stacksize.h with perlbrew. [cperl #335]

Fix t/blessed.t for 5.10/5.12 threaded.

Restore max stacksizes for non-windows systems with proper
system(SHELLSTRING) passing signals.
Unify stack reserve to 32 across all platforms.

=item L<Symbol> 1.08_01

Improved Symbol::delete_package for readonly and protected symbols
and classes.

=item L<Term::ReadLine> 1.17

fix for empty &STDERR files RT #132008

=item L<threads> 2.18_01

Support PL_sv_zero.
Don't Copy() null pointer

=item L<Time::Piece> 1.3202

    - Fix AIX compile
    - Fix compile errors on MS
    - Use macro for buf sizes
    - Remove some compile warnings
    - SP off by 1 in _crt_localtime

=item L<utf8> 2.02c

Improved function documentation

=item L<version> 0.9918_02c

Add updates from 0.9918: Add LAX_DECIMAL_VERSION, LAX_DOTTED_DECIMAL_VERSION,
STRICT_DECIMAL_VERSION, STRICT_DOTTED_DECIMAL_VERSION regexes.

Add F<t/11_taint.t>

=item L<VMS::Stdio> 2.42_01

Drop VMS::stdio compatibility shim

=item L<XS::APITest> 0.92_02

=back

=head2 Removed Modules and Pragmata

=over 4

=item B::Debug 1.25

Moved to CPAN.
cperl only. perl5 will remove it with 5.30.

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

=head3 L<perlapi>

=over 4

=item *

Added API docs for most hash macros.

=back

=head3 L<perlop>

=over 4

=item *

Added the missing operator precedences and documentation for the cperl
unicode operators.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

L<Too many fields|perldiag/"Too many fields">

cperl 5.27.2 added a new limitation of max. 65536 fields per class.

=item *

C<panic: cannot yet adjust field indices when composing role %s::%s into %s %s [cperl #311]">

When copying a method from a role to a class, and the field index from
the role method would be different to a field index in the resulting
class, the method is not yet fixed up to the new indices. A
temp. solution would be to change the ordering of the roles, or to use
the C<< $self->field >> method syntax in the role method.  This should
be fixed before 5.28. Currently we can only alias composed role
methods and we don't change the ordering of the fields.
See L<[cperl #311]|https://github.com/perl11/cperl/issues/311>

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

A false-positive warning that was issued when using a
numerically-quantified sub-pattern in a recursive regex has been
silenced. L<[perl #131868]|https://rt.perl.org/Public/Bug/Display.html?id=131868>

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<cperlbug> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

=over 4

=item -Werror=pointer-arith

With GCC, C<-Werror=pointer-arith> is now enabled by default,
disallowing arithmetic on void and function pointers.

=item d_builtin_arith_overflow

Fixed C<d_builtin_arith_overflow> detection and usage for 32bit
systems with C<use64bitint>. They do use the 'll' suffix, same as with
WIN64.  Now we can use this optimization.
cperl-only.

=item New probes

Note that cperl ignores the new C<HAS_BUILTIN_{ADD,MUL,SUB}_OVERFLOW>
config keys as we use the better C<HAS_BUILTIN_ARITH_OVERFLOW> for
years already.

=over 2

=item HAS_THREAD_SAFE_NL_LANGINFO_L

d_thread_safe_nl_langinfo_l

=item HAS_LOCALECONV_L

d_localeconv_l

=item HAS_MBRLEN

d_mbrlen

=item HAS_MBRTOWC

d_mbrtowc

=item HAS_MEMRCHR

d_memrchr

=item HAS_NANOSLEEP

d_nanosleep

=item HAS_STRNLEN

d_strnlen

=item HAS_STRTOLD_L

d_strtold_l

=item I_WCHAR

i_wchar

=back

=item Removed probes and keys

=over 2

=item d_bcmp

=item d_bcopy

=item d_bzero

=item d_safebcpy

=item d_safemcpy

=item d_sanemcmp

=item d_strctcpy

=item d_charvspr

=item d_memset

Beware: HAS_MEMSET is undefined since v5.28, but always considered to be
defined. Because of C89.
cperl kept the HAS_MEMSET preprocessor definition for backcompat with
extensions which do use it. It is used in all ppport.h files to use memzero().

=item d_memchr

Ditto: Keep HAS_MEMCHR

=item d_memcmp

Ditto: Keep HAS_MEMCMP

=item d_memcpy

Ditto: Keep HAS_MEMCPY

=item d_memmove

Ditto: Keep HAS_MEMMOVE

=item d_vprintf

Ditto: Keep HAS_VPRINTF

=item d_volatile

Ditto: Keep HASVOLATILE

=back

=back

=head1 Testing

=over 4

=item *

Added F<t/op/oelem.t> for classes with more than 256 fields, realloc
fields for bigger padsize 2, and computed field names.
cperl-only.

=item *

Changed one case in F<t/op/symbolcache.t> for
L<static method optimizations|/"Optimize static methods to subs">.
When you redefine a method, you need to clear the old method GV, to be able
to call the new redefined one, as the static method optimization binds to
the GV.

=item *

Many fixes for C<make minitest>, for cperl/XSConfig.

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item Darwin

Perl now correctly uses reentrant functions, like C<asctime_r>, on
versions of Darwin that have support for them.

=item CentOS

Compilation on CentOS 5 is now fixed.

=back

=head1 Internal Changes

=over 4

=item *

Added L<perlapi/hv_undef_flags> to the public API.

=item *

Refactored the L<fields> API from global data into methods.
Added a L<perlapi/HvFIELDS> field to HvAUX as linear buffer
of "name\0pad...\0" fields, no class C<%FIELDS> and C<@FIELDS> anymore.
See L<[cperl #322]|https://github.com/perl11/cperl/issues/322>

=item *

L<perlintern/validate_proto> got an additional cperl-only bool argument C<maybe_sig>.

=item *

A new function, L<C<Perl_langinfo()>|perlapi/Perl_langinfo> has been
added.  It is an (almost) drop-in replacement for the system
C<nl_langinfo(3)>, but works on platforms that lack that; as well as
being more thread-safe, and hiding some gotchas with locale handling
from the caller.  Code that uses this, needn't use L<C<localeconv(3)>>
(and be affected by the gotchas) to find the decimal point, thousands
separator, or currency symbol.  See L<perlapi/Perl_langinfo>.

=item *

A new API function L<C<sv_rvunweaken()>|perlapi/sv_rvunweaken> has
been added to complement L<C<sv_rvweaken()>|perlapi/sv_rvweaken>.
The implementation was taken from L<Scalar::Util/unweaken>.

=item *

A new flag, C<SORTf_UNSTABLE>, has been added. This will allow a
future commit to make mergesort unstable when the user specifies ‘no
sort stable’, since it has been decided that mergesort should remain
stable by default.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Fetching the name of a glob that was previously UTF-8 but wasn't any
longer would return that name flagged as UTF-8.
L<[perl #131263]|https://rt.perl.org/Ticket/Display.html?id=131263>

=item *

Fixed a duplicate symbol failure with C<-flto -mieee-fp> builds.
F<pp.c> defined C<_LIB_VERSION> which C<-lieee> already defines.
L<[perl #131786]|https://rt.perl.org/Ticket/Display.html?id=131786>

=item *

The tokenizer no longer consumes the exponent part of a floating
point number if it's incomplete.
L<[perl #131725]|https://rt.perl.org/Ticket/Display.html?id=131725>

=item *

On non-threaded builds, for C<m/$null/> where C<$null> is an empty
string is no longer treated as if the C</o> flag was present when the
previous matching match operator included the C</o> flag.  The
rewriting used to implement this behavior could confuse the
interpreter.  This matches the behaviour of threaded builds.
L<[perl #124368]|https://rt.perl.org/Ticket/Display.html?id=124368>

=item *

The tokenizer now correctly adjusts a parse pointer when skipping
whitespace in a C< ${identifier} > construct.
L<[perl #131949]|https://rt.perl.org/Public/Bug/Display.html?id=131949>

=item *

Accesses to C<${^LAST_FH}> no longer assert after using any of a
variety of I/O operations on a non-glob.
L<[perl #128263]|https://rt.perl.org/Public/Bug/Display.html?id=128263>

=item *

The C<Copy()>, C<Move()>, C<Zero()> macros and their variants now
assert if the pointers supplied are C<NULL>.  ISO C considers
supplying NULL pointers to the functions these macros are built upon
as undefined behaviour even when their count parameters are zero.
Based on these assertions and the original bug report three macro
calls were made conditional.
L<[perl #131746]|https://rt.perl.org/Public/Bug/Display.html?id=131746>
L<[perl #131892]|https://rt.perl.org/Public/Bug/Display.html?id=131892>

=item *

The in-place sort optimisation now correctly strengthens weak
references using the new L<sv_rvunweaken()|perlapi/sv_rvunweaken>
API function.

=item *

Package names are now always included in C<:prototype> warnings
L<[perl #131833]|https://rt.perl.org/Public/Bug/Display.html?id=131833>

=item *

Creating a thread with no parameters no longer tries to C<Copy()> a
null pointer. This fixes an assertion failure and allows threaded
builds to work again.

=item *

The C<je_old_stack_hwm> field, previously only found in the C<jmpenv>
structure on debugging builds, has been added to non-debug builds as
well. This fixes an issue with some CPAN modules caused by the size of
this structure varying between debugging and non-debugging builds.
L<[perl #131942]|https://rt.perl.org/Public/Bug/Display.html?id=131942>

=item *

The arguments to the C<ninstr()> macro are now correctly parenthesized.

=item *

A NULL pointer dereference in the C<S_regmatch()> function has been
fixed.
L<[perl #132017]|https://rt.perl.org/Public/Bug/Display.html?id=132017>

=item *

Calling L<exec PROGRAM LIST|perlfunc/exec PROGRAM LIST> with an empty C<LIST>
has been fixed.  This should call C<execvp()> with an empty C<argv> array
(containing only the terminating C<NULL> pointer), but was instead just
returning false (and not setting L<C<$!>|perlvar/$!>).
L<[perl #131730]|https://rt.perl.org/Public/Bug/Display.html?id=131730>

=item *

The C<gv_fetchmeth_sv> C function stopped working properly in Perl 5.22 when
fetching a constant with a UTF-8 name if that constant subroutine was stored in
the stash as a simple scalar reference, rather than a full typeglob.  This has
been fixed.

=item *

Single-letter debugger commands followed by an argument which starts with
punctuation  (e.g. C<p$^V> and C<x@ARGV>) now work again.  They had been
wrongly requiring a space between the command and the argument.
L<[perl #120174]|https://rt.perl.org/Public/Bug/Display.html?id=120174>

=item *

L<splice|perlfunc/splice ARRAY,OFFSET,LENGTH,LIST> now throws an exception
("Modification of a read-only value attempted") when modifying a read-only
array.  Until now it had been silently modifying the array.  The new behaviour
is consistent with the behaviour of L<push|perlfunc/push ARRAY,LIST> and
L<unshift|perlfunc/unshift ARRAY,LIST>.
L<[perl #131000]|https://rt.perl.org/Public/Bug/Display.html?id=131000>

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

cperl 5.27.2 represents approximately 3 months of development since cperl
5.27.1c and contains approximately 62,000 lines of changes across 500 files
from 37 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 39,000 lines of changes to 290 .pm, .t, .c and .h files.

The following people are known to have contributed the improvements that became
cperl 5.27.2:

David Mitchell, Karl Williamson, Reini Urban, Dagfinn Ilmari Mannsåker, Tony
Cook, Yves Orton, Steve Hay, Lukas Mai, Zefram, James E Keenan, Father
Chrysostomos, Abigail, Aaron Crane, Craig A. Berry, Sawyer X, Chris 'BinGOs'
Williams, Aristotle Pagaltzis, H.Merijn Brand, Steffen Müller, Matthew
Horsfall, Eric Herman, Ricardo Signes, Andy Lester, Nicholas Clark, Jacques
Germishuys, Daniel Dragan, Dan Collins, Andy Dougherty, John Peacock, Vitali
Peil, Thomas Sibley, Eugen Konkov, Graham Knop, E. Choroba, David H.
Gutteridge, Jarkko Hietaniemi, Ken Cotterill.

The list above is almost certainly incomplete as it is automatically generated
from version control history including the perl and cperl repos. In particular,
it does not include the names of the (very much appreciated) contributors who
reported issues to the Perl bug tracker and the cperl github issues.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

Generated with:

    cperl Porting/acknowledgements.pl cperl-5.27.1..HEAD -c

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
