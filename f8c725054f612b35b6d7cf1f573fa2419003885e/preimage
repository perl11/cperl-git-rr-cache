/* ex: set ro ft=c: -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

#define PERL_BISON_VERSION  30000

#ifdef PERL_CORE
/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison interface for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    GRAMPROG = 258,
    GRAMEXPR = 259,
    GRAMBLOCK = 260,
    GRAMBARESTMT = 261,
    GRAMFULLSTMT = 262,
    GRAMSTMTSEQ = 263,
    BAREWORD = 264,
    METHOD = 265,
    FUNCMETH = 266,
    THING = 267,
    PMFUNC = 268,
    PRIVATEREF = 269,
    QWLIST = 270,
    FUNC0OP = 271,
    FUNC0SUB = 272,
    UNIOPSUB = 273,
    LSTOPSUB = 274,
    PLUGEXPR = 275,
    PLUGSTMT = 276,
<<<<<<<
    CLASSDECL = 277,
    LABEL = 278,
    FORMAT = 279,
    SUB = 280,
    METHDECL = 281,
    MULTIDECL = 282,
    ANONSUB = 283,
    EXTERN = 284,
    PACKAGE = 285,
    USE = 286,
    WHILE = 287,
    UNTIL = 288,
    IF = 289,
    UNLESS = 290,
    ELSE = 291,
    ELSIF = 292,
    CONTINUE = 293,
    FOR = 294,
    GIVEN = 295,
    WHEN = 296,
    DEFAULT = 297,
    LOOPEX = 298,
    DOTDOT = 299,
    YADAYADA = 300,
    FUNC0 = 301,
    FUNC1 = 302,
    FUNC = 303,
    UNIOP = 304,
    LSTOP = 305,
    RELOP = 306,
    EQOP = 307,
    MULOP = 308,
    ADDOP = 309,
    DOLSHARP = 310,
    DO = 311,
    HASHBRACK = 312,
    NOAMP = 313,
    LOCAL = 314,
    MY = 315,
    HAS = 316,
    REQUIRE = 317,
    COLONATTR = 318,
    FORMLBRACK = 319,
    FORMRBRACK = 320,
    PREC_LOW = 321,
    OROP = 322,
    DOROP = 323,
    ANDOP = 324,
    NOTOP = 325,
    ASSIGNOP = 326,
    OROR = 327,
    DORDOR = 328,
    ANDAND = 329,
    BITOROP = 330,
    BITANDOP = 331,
    SHIFTOP = 332,
    MATCHOP = 333,
    UMINUS = 334,
    REFGEN = 335,
    POWOP = 336,
    POWCOP = 337,
    PREINC = 338,
    PREDEC = 339,
    POSTINC = 340,
    POSTDEC = 341,
    POSTJOIN = 342,
    ARROW = 343
=======
    LABEL = 277,
    FORMAT = 278,
    SUB = 279,
    ANONSUB = 280,
    EXTERNSUB = 281,
    PACKAGE = 282,
    USE = 283,
    WHILE = 284,
    UNTIL = 285,
    IF = 286,
    UNLESS = 287,
    ELSE = 288,
    ELSIF = 289,
    CONTINUE = 290,
    FOR = 291,
    GIVEN = 292,
    WHEN = 293,
    DEFAULT = 294,
    LOOPEX = 295,
    DOTDOT = 296,
    YADAYADA = 297,
    FUNC0 = 298,
    FUNC1 = 299,
    FUNC = 300,
    UNIOP = 301,
    LSTOP = 302,
    RELOP = 303,
    EQOP = 304,
    MULOP = 305,
    ADDOP = 306,
    DOLSHARP = 307,
    DO = 308,
    HASHBRACK = 309,
    NOAMP = 310,
    LOCAL = 311,
    MY = 312,
    REQUIRE = 313,
    COLONATTR = 314,
    FORMLBRACK = 315,
    FORMRBRACK = 316,
    PREC_LOW = 317,
    OROP = 318,
    DOROP = 319,
    ANDOP = 320,
    NOTOP = 321,
    ASSIGNOP = 322,
    OROR = 323,
    DORDOR = 324,
    ANDAND = 325,
    BITOROP = 326,
    BITANDOP = 327,
    SHIFTOP = 328,
    MATCHOP = 329,
    UMINUS = 330,
    REFGEN = 331,
    POWOP = 332,
    POWCOP = 333,
    PREINC = 334,
    PREDEC = 335,
    POSTINC = 336,
    POSTDEC = 337,
    POSTJOIN = 338,
    ARROW = 339
>>>>>>>
  };
#endif

/* Tokens.  */
#define GRAMPROG 258
#define GRAMEXPR 259
#define GRAMBLOCK 260
#define GRAMBARESTMT 261
#define GRAMFULLSTMT 262
#define GRAMSTMTSEQ 263
#define BAREWORD 264
#define METHOD 265
#define FUNCMETH 266
#define THING 267
#define PMFUNC 268
#define PRIVATEREF 269
#define QWLIST 270
#define FUNC0OP 271
#define FUNC0SUB 272
#define UNIOPSUB 273
#define LSTOPSUB 274
#define PLUGEXPR 275
#define PLUGSTMT 276
<<<<<<<
#define CLASSDECL 277
#define LABEL 278
#define FORMAT 279
#define SUB 280
#define METHDECL 281
#define MULTIDECL 282
#define ANONSUB 283
#define EXTERN 284
#define PACKAGE 285
#define USE 286
#define WHILE 287
#define UNTIL 288
#define IF 289
#define UNLESS 290
#define ELSE 291
#define ELSIF 292
#define CONTINUE 293
#define FOR 294
#define GIVEN 295
#define WHEN 296
#define DEFAULT 297
#define LOOPEX 298
#define DOTDOT 299
#define YADAYADA 300
#define FUNC0 301
#define FUNC1 302
#define FUNC 303
#define UNIOP 304
#define LSTOP 305
#define RELOP 306
#define EQOP 307
#define MULOP 308
#define ADDOP 309
#define DOLSHARP 310
#define DO 311
#define HASHBRACK 312
#define NOAMP 313
#define LOCAL 314
#define MY 315
#define HAS 316
#define REQUIRE 317
#define COLONATTR 318
#define FORMLBRACK 319
#define FORMRBRACK 320
#define PREC_LOW 321
#define OROP 322
#define DOROP 323
#define ANDOP 324
#define NOTOP 325
#define ASSIGNOP 326
#define OROR 327
#define DORDOR 328
#define ANDAND 329
#define BITOROP 330
#define BITANDOP 331
#define SHIFTOP 332
#define MATCHOP 333
#define UMINUS 334
#define REFGEN 335
#define POWOP 336
#define POWCOP 337
#define PREINC 338
#define PREDEC 339
#define POSTINC 340
#define POSTDEC 341
#define POSTJOIN 342
#define ARROW 343
=======
#define LABEL 277
#define FORMAT 278
#define SUB 279
#define ANONSUB 280
#define EXTERNSUB 281
#define PACKAGE 282
#define USE 283
#define WHILE 284
#define UNTIL 285
#define IF 286
#define UNLESS 287
#define ELSE 288
#define ELSIF 289
#define CONTINUE 290
#define FOR 291
#define GIVEN 292
#define WHEN 293
#define DEFAULT 294
#define LOOPEX 295
#define DOTDOT 296
#define YADAYADA 297
#define FUNC0 298
#define FUNC1 299
#define FUNC 300
#define UNIOP 301
#define LSTOP 302
#define RELOP 303
#define EQOP 304
#define MULOP 305
#define ADDOP 306
#define DOLSHARP 307
#define DO 308
#define HASHBRACK 309
#define NOAMP 310
#define LOCAL 311
#define MY 312
#define REQUIRE 313
#define COLONATTR 314
#define FORMLBRACK 315
#define FORMRBRACK 316
#define PREC_LOW 317
#define OROP 318
#define DOROP 319
#define ANDOP 320
#define NOTOP 321
#define ASSIGNOP 322
#define OROR 323
#define DORDOR 324
#define ANDAND 325
#define BITOROP 326
#define BITANDOP 327
#define SHIFTOP 328
#define MATCHOP 329
#define UMINUS 330
#define REFGEN 331
#define POWOP 332
#define POWCOP 333
#define PREINC 334
#define PREDEC 335
#define POSTINC 336
#define POSTDEC 337
#define POSTJOIN 338
#define ARROW 339
>>>>>>>

/* Value type.  */
#ifdef PERL_IN_TOKE_C
static bool
S_is_opval_token(int type) {
    switch (type) {
    case BAREWORD:
    case CLASSDECL:
    case FUNC0OP:
    case FUNC0SUB:
    case FUNCMETH:
    case LSTOPSUB:
    case METHOD:
    case PLUGEXPR:
    case PLUGSTMT:
    case PMFUNC:
    case PRIVATEREF:
    case QWLIST:
    case THING:
    case UNIOPSUB:
	return 1;
    }
    return 0;
}
#endif /* PERL_IN_TOKE_C */
#endif /* PERL_CORE */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{

    I32	ival; /* __DEFAULT__ (marker for regen_perly.pl;
				must always be 1st union member) */
    char *pval;
    OP *opval;
    GV *gvval;

};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int yyparse (void);


#if YYDEBUG
#define YYPRINT
#endif

/* Generated from:
<<<<<<<
 * 0388bcbf25ec4afff7d91974c546683b2951e8280f46374d6d426c92eb537cf7 perly.y
=======
 * 7604b017f698343421306c9f35ddd6d861a3f5535c78199db0acf4815c71499f perly.y
>>>>>>>
 * 34c0653ef7c691f2b4ac71336f4ea94e2bd925344002392f88ceeb0b435555fa regen_perly.pl
 * ex: set ro: */
