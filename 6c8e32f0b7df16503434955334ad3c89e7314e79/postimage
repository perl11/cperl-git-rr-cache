=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.22.2

=head1 DESCRIPTION

This document describes perl-only differences between the cperl 5.22.1
release and the cperl 5.22.2 release.

For B<cperl> also see F<Changes> and L<perlcperl>.
cperl tickets id's refer to L<https://github.com/perl11/cperl/issues>.

=head1 Core Enhancements

=over 4

=item *

Safer INC path. It does not include "." anymore, unless you set the env
C<PERL_USE_UNSAFE_INC=1>. (#118)
CVSSv2 Severity: 8.5 (AV:N/AC:M/Au:S/C:C/I:C/A:C)

=item *

Hash security: Disable PERL_HASH_SEED_DEBUG with -t or -T (#114)

=item *

Better hash table collision resolution strategy: PERL_PERTURB_KEYS_TOP
Still a linked list, but move the found element to the top. This disables
PERL_HASH_RANDOMIZE_KEYS.

=item *

Better support for -DC and -DCv debugging, with new REFCNT statistics.
Added CowREFCNT_inc,dec and overflow assertions.

=item *

Hash keys don't store the calculated hash anymore. Thus this macro is
now undefined: C<HEK_HASH(hek)>, and thos macros return now C<0>:
C<HeHASH(he)>, C<SvSHARED_HASH(sv)>. See [cperl #34].
C<HEK_HASH_calc(hek)> can be used to calculate the hash value from a HEK.

=item *

Re-added the C<PL_sv_objcount> interpreter-global variable used to track the total
number of Perl objects in the interpreter, which was removed in Perl 5.20.
It is beneficial for all scripts which do not create objects in global scope,
so we dont have to check all remaining SV's to call a potential DESTROY method.

This broke binary back-compatibility on MULTIPLICITY and ITHREAD builds with
cperl-5.22.1.

=item *

Minor improvements in the lexer code (F<toke.c>). Added helper
functions, LEX_TYPE_*BRACKETS_ON|OFF macros, better DEBUGGING support.
regen_perly keeps now useful temp. files.

=item *

Added support for static HEK and AV with B::C, with 6-10% memory
improvements for compiled code.

Add HEK_STATIC, AvSTATIC, and av_uncow.
Allows COW (copy on write) and COG (copy on grow) for strings and arrays
with embedders and the compiler.

=item *

Support static lexical warnings. Honor op_static with COPs. This helps
producing better compiled perlcc code. (#70)

=item *

Support new ccflags -DPERL_SV_DEBUG_FIELDS for easier flags bitfields
debugging, even without -DDEBUGGING.

=item *

Better support for -DC and -DCv debugging, with new REFCNT statistics.
Added CowREFCNT_inc,dec and overflow assertions.

=item *

Enhanced the warnings message for warnings 'redefine' to print the caller
location also. (# 113)
Note that this did not violate the documented diagnostics in perldiag.pod,
but the tests for Sub::Install and Test::Trap still need to be patched.

=item *

Add support for additional F<pod/perlcdelta.pod> in F<Porting/pod_rules.pl>.

=back

=head1 Core Enhancements from Perl5

=over 4

=item *

Creating *{"_<$filename"} Perl debugger data structures (see
L<perldebguts/"Debugger Internals">) for XSUBs and const subs has been
removed.  This removed one glob/scalar combo for each unique C<.c>
file that XSUBs and const subs came from.  On startup (C<perl -e0>)
about half a dozen glob/scalar debugger combos were created.  Loading
XS modules created more glob/scalar combos.  These things were created
regardless if the perl debugger was being used or not, unlike for pure
perl subs, and ignores that the perl debugger can not debug C code.

=item *

Make Configure -O behaviour the default

=item *

Support reproducible builds via PERL_BUILD_DATE

=item *

Fixed umask for mkstemp(3) calls for older glibc versions

With v5.21.0-67-g60f7fc1, perl started setting umask to 0600
before calling mkstemp(3), and then restoring it afterwards. This is
wrong as it tells open(2) to strip the owner read and write bits from
the given mode before applying it, rather than the intended negation of
leaving only those bits in place.

On modern systems which call open(2) with mode 0600 in mkstemp(3),
this clears all the created temporary file permissions. However,
any systems that use mode 0666 in mkstemp(3) (like ancient versions
of glibc) now create a file with permissions 0066, leaving world
read and write permission regardless of current umask.

=back

=head1 Modules and Pragmata

=head2 New Modules in Core

=over 4

=item B-C 1.54_01

With many cperl-specific improvements, global destruction fixes
and PERL_CORE specific test changes.

=item Cpanel-JSON-XS 3.0213

A fast and standard JSON en-/decoder. You should not use PP.

=item Devel-NYTProf 6.02

A fast and standard profiler.
With PERL_CORE specific test and build changes.

=item Internals-DumpArenas 0.12_03

The only way to test sv_dump properly.

=item YAML-LibYAML 0.70c

A fast and standard YAML en-/decoder. You should not use PP.
With most compiler warnings fixed, PERL_CORE specific test changes
and new options C<IndentlessMap> for C<YAML.pm> compatibility and C<NonStrict>
mode to pass the validator tests and make it usable for C<CPAN.pm>.

=back

=head2 Updated Modules and Pragmata

=over 4

=item Storable 2.53_03

Add new optional flags argument to retrieve()/thaw() for flags, or set new
global $Storable::flags: 2 for BLESS_OK | 4 TIE_OK. default 6.
With 0 disable blessing and tieing of objects for proper security.

Compute CAN_FLOCK at compile-time, to avoid Config in perlcc compiled binaries.

Broke support for restoring restricted hashes [perl #73972] with the new
default PERL_PERTURB_KEYS_TOP strategy.

=item CPAN::Meta

Favour the new builtin XS YAML and JSON variants over PP.
Improve the validator tests.

=item Parse::CPAN::Meta

Favour the new builtin XS YAML and JSON variants over PP.

=item ExtUtils::Constant 0.23_03

Fixed fatal typos, moved from cpan to dist.

=item Module::CoreList 5.20160225c

Fixed all 'c' suffix version checks.

=item CPAN::Meta::Requirements

Handle 'c' suffix version checks.

cperl accepts versions with and without c, and should not warn about not
existing, builtin modules (XSLoader, DynaLoader, strict, attributes) or
unparsable versions. [cperl #104]

* Accept the c suffix
* perl5 should fail with a c version.
* A requirement of a c version can only be fulfilled by cperl (currently).

=item CPAN

Fix prerequisite and version checks,
Allow cperl c suffices, Honor cperl builtin modules

=item ExtUtils::MakeMaker

Fixed prereq check for cperl builtins

=item Config 6.19

Config is now a XS module, synced with CPAN as XSConfig.
The Config tables are now readonly, and many more memory improvements.

=item B::Concise 0.998c

Support gv(cvname). Do not print gv(IV \"$$"), the prototype as ref,
rather the name of the cvref. [cperl #96]

Avoid uninit hr->name warning.

=item Pod::Simple

Stabilize broken t/search50.t search test

=item threads 2.02_01

Protect C<ithread_free> from deleted C<PL_modglobal> during global destruction.

=item ExtUtils::Embed 1.34c

Optimize C<boot_DynaLoader>, fix a couple of stack errors.

=item Test::Harness

Fix 2 tests broken with readonly Config.

=item Time::HiRes 1.9727_02

To improve parallel builds on Windows.

=item XSLoader 1.01c

Support utf8-encoded XS modulenames.
Fixed load_file 2nd arg.
Improve load_file errmsg, print the missing sofile.
Protect from underflow: use a signed i counter, which can underflow
Fixed memory corruption caused by a negative SvCUR. GH #66
Use labs instead of abs on an 64bit IV value.

Beware: untested and platform incompatible.

=item DynaLoader 2.01c

Fixed typo @shared_objects. It is named @dl_shared_objects.
This broke C<perlcc --staticxs> (#71)

Set the IOK bit for dl_expand, caught by the compiler.

=item B 1.58_02

Fix B::UNOP_AUX::aux_list design with threads.
No 2nd cv arg, return the PADOFFSET not the SV. (#76)

Export SVt_ types. (#80)

=item Safe 2.39_02c

Fixed Safe version 'c' problem. Do not check the XS_VERSION of
Opcode, because it has a cperl 'c' suffix, which is not yet fully
supported in the version check code.

=item version

Add a scmp method for string comparison, needed to destinguish between
0.2 and 0.2c but only enforced if the version object is stringified.
Using eq is not enough.

fix c suffix comparisons: stringify v0.2c to v0.2c, 0.2c to 0.2c
numify 0.2c to 0.002 [0 200], same as 0.2

=item constant

Lower memory usage

=item IPC::SysV

Fixed shmat with negative id.
The negative argument will be interpreted as a very large unsigned value.
Coverity CWE-687

=item Scalar-List-Utils

Avoid div by zero [coverity]
Note: fixed differently upstream, with much more branches than here.

=item IO-Compress, Compress-Raw-{Zlib,Bzip2} 2.069

static const some local tables.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Win32

=over

=item *

A new build option C<USE_NO_REGISTRY> has been added to the makefiles.  This
option is off by default, meaning the default is to do Windows registry lookups.
This option stops Perl from looking inside the registry for anything.  For what
values are looked up in the registry see L<perlwin32>.  Internally, in C, the
name of this option is C<WIN32_NO_REGISTRY>.

=item *

The behavior of Perl using C<HKEY_CURRENT_USER\Software\Perl> and
C<HKEY_LOCAL_MACHINE\Software\Perl> to lookup certain values, including
C<%ENV> vars starting with C<PERL> has changed.  Previously, the 2 keys were
checked for entries at all times through Perl processes life time even if they
did not exist.  For performance reasons, now, if the root key (i.e.
C<HKEY_CURRENT_USER\Software\Perl> or C<HKEY_LOCAL_MACHINE\Software\Perl>) does
not exist at process start time, it will not be checked again for C<%ENV>
override entries for the remainder of the Perl processes life.  This more
closely matches Unix behaviour in that the enviroment is copied or inherited on
startup and changing the variable in the parent process or another process or
editing <.bashrc> will not change the enviromental variable in other existing,
running, processes.

=item *

Windows support was added. There is also new support for parallel builds.
The windows smokes are done via appveyor, on MSVC 10 and MSVC 12, on 32bit and 64bit,
in optimized Release mode only. No mingw/gcc builds yet.

=item *

One glob fetch was removed for each C<-X> or C<stat> call whether done from
Perl code or internally from Perl's C code. The glob being looked up was
C<${^WIN32_SLOPPY_STAT}> which is a special variable. This makes C<-X> and
C<stat> slightly faster.

=item *

During Miniperl's process startup, during the build process, 4 to 8 IO calls
related to the process starting C<.pl> and the C<buildcustomize.pl> file were
removed from the code opening and executing the first 1 or 2 C<.pl> files.

=item *

Avoid access to uninitialized memory in win32 crypt().

Previously the Win32 crypt implementation() would access the first
and second characters of the salt, even if the salt was zero length

=back

=item Darwin

=over

=item *

Fixed global destruction with threads on darwin.

=item *

Darwin 11.0 (Lion, July 2011) and newer is no multiarch.
There's no PPC support anymore. Use no
C<env MACOSX_DEPLOYMENT_TARGET=10.6> (Snow Leopard) for ld.

This fixes the darwin byteorder to be probed at compile-time, and
the d_u32align probe on newer x86_64 darwins.

=back

=item Other

=over

=item *

Enforce SIGBUS when accessing unaligned words with d_u32align /
U32_ALIGNMENT_REQUIRED even on Intel CPUs by setting the AC (alignment
check) EFLAGS.

Fixed the broken d_u32align probe in Configure and Digest::MD5, broken for
darwin and Intel 64bit.

=item *

Added a Porting/release_cperl.pod release guide for various platforms,
debian, rpm, bsd, osx, windows packaging.

=item *

Improved support for threaded builds.

=item *

Better DynaLoader support for os2, symbian, Netware.

=back

=back

=head1 Selected Bug Fixes

=over 4

=item * Fix CVE-2016-2381 sanitize duplicate environ entries

Make sure we use the same value in %ENV that getenv() returns.
Remove duplicate entries from environ.

Previously if there was a duplicate definition for a name in environ[]
setting that name in %ENV could result in an unsafe value being passed
to a child process.

=item * Fix CVE-2012-3878 [RT#776270] module loading security weakness

Treat invalid names to require, such as ::foo as error.
New errors:

Bareword in require contains "%s", with "\0", "./" or "../" as invalid substrings.

Bareword in require maps to empty filename

Bareword in require maps to disallowed filename "%s", with absolute
filenames, filenames starting with "." or not ending with ".pm".

=item * uncow on utf8::encode [cperl #50]

=item * Fixed compilation with -DDEBUGGING and usethreads

In the new loop bounds check elimination code.

=item * Fixed ByteLoader [cperl #75]

Fixed breakage from perl5.22.0 in op.c:newPROG()

=item * Fixed ck_pad: PADSV -> CONST corrupts OpSLOT

Wrong optimization of a readonly lexical to a const did corrupt
memory. [cperl #108]

=item * dump fix SEGV on DESTROY SvSTASH [cperl #59]

We can only access a SvSTASH if it is a SvOBJECT.
This failed e.g. for %version:: stashes.

Unsure of we should follow p5p recent change to move the DESTROY
cache back to mro.

=item * dump fix assert on SvTAIL and !SvSCREAM

It failed with DEBUGGING and ITHREADS on an SCREAM,FAKE,OUR padname,
i.e. our @Data_Stack from Test::More.
Unfortunately we cannot reproduce this error with core methods, only with
Internals::DumpArenas, which dumps the PADNAME as full SV.
[cperl #59] [cpan #81635]

=item * podcheck.t: no memory exhaustion

Skip slurping overlarge logfiles > 1MB,
e.g. valgrind logfiles, esp. on 32bit.
podcheck does not look at the filename extension
if it's a potential podfile.

=item * Fixed out-of-bounds access in dirp_dup()

From perl-5.23.7

=item * S_incline avoid overrunning end of parse buffer

[perl #127334] If the rest of the allocation up to the end addressable
memory was non-spaces, this loop could cause a segmentation fault.

From perl-5.23.7

=item * [perl #126481] panic for !! with syntax error in /(?[...])/

=item * [perl #126325] don't read past the end of the source for pack [Hh]

With a utf8 target but a non-utf8 source, pack Hh would read past the
end of the source when given a length, due to an incorrect condition.

=item * Enforce strict 'subs' in multideref optimisation

The code that checks constant keys and turns them into HEKs swallowed
the OP_CONST before the strictness checker could get to it, thus
allowing barewords when they should not be

=item * Configure: fix startperl and perlpath

Config entries for cperl.

=back

=head1 Acknowledgements

Daniel Dragan took over XSConfig development on CPAN.

Dave Mitchell started to work on some tasks proposed in cperl.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the C<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug please file an issue at
L<https://github.com/perl11/cperl/issues>

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
