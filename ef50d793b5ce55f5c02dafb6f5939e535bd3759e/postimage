=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.27.3

=head1 DESCRIPTION

This document describes differences between the cperl 5.27.2 and the cperl
5.27.3 release.

If you are upgrading from an earlier release such as v5.27.1c, first read
L<perl5272cdelta>, which describes differences between v5.27.1c and v5.27.2c.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here.  Summarize user-visible core language
enhancements.  Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head2 Computed shaped array sizes

This is now a valid shaped array delaration, with the lhs array size
computed from the number of constant elements in the rhs list
expressions. The array must only consist of compile-time scalars.

    my @a[] = (0,1,2);

C<my @a[];> without assignment is still a syntax error.

See L<[cperl #210]|https://github.com/perl11/cperl/issues/210>

=head2 New read-only predefined variable C<${^SAFE_LOCALES}>

This variable is 1 if the Perl interpreter is operating in an
environment where it is safe to use and change locales (see
L<perllocale>.)  This variable is true when the perl is
unthreaded, or compiled in a platform that supports thread-safe locale
operation (see next item).

=head2 Locales are now thread-safe on systems that support them

These systems include Windows starting with Visual Studio 2005 and
POSIX 2008 systems.

The implication is that you are now free to use locales and changes them
in a threaded environment.  Your changes affect only your thread.
See L<perllocale/Multi-threaded operation>

=head1 Security

=head2 Disallow illegal glob with embedded NUL

E.g. C<< <$fh\000> >> throws now the safe syscalls warning, and errors
with C<Glob not terminated>, and does not pass the illegal glob path
to the internal or external glob.

This problem was added with v5.27.5 by replacing strchr with memchr,
allowing such illegal strings.
See L<[cperl #342]|https://github.com/perl11/cperl/issues/342>

=head2 Follow chroot with chdir("/")

Fixed two security issues with the chroot op:

* fail on embedded NUL in the chroot argument.
Set C<errno> to EINVAL.

* If a call to chroot is not followed by a call to chdir("/") the
chroot jail confinement can be violated.  In Perl_pp_chroot: A call to
chroot followed by an operation that may escape from the chroot jail.
Coverity CID #165302 Insecure chroot.

=head2 Set umask(0600) before calling mkstemp

POSIX 2008 demands such an umask, but it is still problematic on
Solaris, HP-UX and AIX and older libcs, e.g. glibc <= 2.06.
Temporarily set the umask such that the temp. file has 0600 permissions.

=head1 Incompatible Changes

=head2 Illegal NUL, syntax error

Embedded NUL bytes read from files, not used in filters, are not
whitespace anymore, they are syntax errors.

See L<[cperl #345]|https://github.com/perl11/cperl/issues/345> vs
L<[perl #105920]|https://rt.perl.org/Public/Bug/Display.html?id=105920>.

Parsing NUL bytes is now consistent from files with eval string.
C<\0> delimited C<q> quote is still valid though.

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.

=head2 No autovivification of hash slice anymore

This is a new syntax warning, which is deprecated, and will disappear
with v5.30c.  Hash slices and key/value hash slices autovivified in
subroutine arguments. This was a bug, but to check all your code for
correctness and portability we keep this warning for 2 releases.  See
L<[cperl #347]|https://github.com/perl11/cperl/issues/347> and
L<perldiag/"No autovivification of hash slice anymore">.

=head2 Module removals

XXX Remove this section if inapplicable.

The following modules will be removed from the core distribution in a
future release, and will at that time need to be installed from CPAN.
Distributions on CPAN which require these modules will need to list them as
prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact.  To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use.  Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item XXX

XXX Note that deprecated modules should be listed here even if they are listed
as an updated module in the L</Modules and Pragmata> section.

=back

[ List each other deprecation as a =head2 entry ]

=head1 Performance Enhancements

=over 4

=item *

All static method calls are now optimized to function calls at compile-time.

Before:

    $ cperl5.27.0d-nt -Dt -e'use strict'
    (-e:1)	nextstate
    (-e:1)	const(PV("strict.pm"))
    (-e:1)	require
    (-e:1)	nextstate
    (-e:1)	pushmark
    (-e:1)	const(PV("strict"))
    (-e:1)	method_named(->import)
    (-e:1)	entersub(strict::import)
    (-e:1)	enterxssub(strict::import)
    (-e:1)	leavesub

v5.27.1c:

    $ cperl5.27.1d-nt -Dt -e'use strict'
    (-e:1)	nextstate
    (-e:1)	const(PV("strict.pm"))
    (-e:1)	require
    (-e:1)	nextstate
    (-e:1)	pushmark
    (-e:1)	const(PV("strict"))
    (-e:1)	method_named(->import)
    (-e:1)	enterxssub(strict::import)
    (-e:1)	leavesub

v5.27.2c:

    $ cperl5.27.2d-nt -Dt -e'use strict'
    (-e:1)	nextstate
    (-e:1)	const(PV("strict.pm"))
    (-e:1)	require
    (-e:1)	nextstate
    (-e:1)	pushmark
    (-e:1)	const(PV("strict"))
    (-e:1)	gv(strict::import)
    (-e:1)	enterxssub(strict::import)
    (-e:1)	leavesub

See L<http://blogs.perl.org/users/rurban/2011/06/how-perl-calls-subs-and-methods.html>

We don't yet optimize typed scalars to a static call. We don't walk
the subtypes yet to find the method.

=item *

The three loop iterator ops are now a LOGOPs (in perl5 there is only
one, named C<iter>), they are combined with the previously subsequent
AND op to continue or end the loop. Thus inner loops are now smaller
and faster. 15%-50%.

e.g. before:

     f  <{> enteriter(next->q last->t redo->g) KS/DEF
     r  <0> iter_ary s
     s  <|> and(other->g) K/1
     g      <;> nextstate(main 559 (eval 15):1) v:{
     h      <$> gvsv(*_) s

Now:

     f  <{> enteriter(next->q last->s redo->g) KS/DEF
     r  <|> iter_ary(other->g) sK
     g      <;> nextstate(main 559 (eval 15):1) v:{
     h      <$> gvsv(*_) s

cperl-only, L<[cperl #138]|https://github.com/perl11/cperl/issues/138>.
Upstream 5.27 improved also a bit by skipping the AND op at run-time.
cperl removed it from the optree at compile-time.

=item *

Various optimizations have been applied to matching regular expression
patterns, so under the right circumstances, significant performance
gains may be noticed.  But in an application with many varied patterns,
little overall improvement likely will be seen.

=item *

Other optimizations have been applied to UTF-8 handling, but these are
not typically a major factor in most applications.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

The list of new and updated modules is modified automatically as part of
preparing a Perl release, so the only reason to manually add entries here is if
you're summarising the important changes in the module update. (Also, if the
manually-added details don't match the automatically-generated ones, the
release manager will have to investigate the situation carefully.)

[ Within each section, list entries as an =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item L<Attribute::Handlers> 1.00_01

fix autovivification bug with hash slice args to a function.

=item L<B::C> 1.55_08

One global dJMPENV target, not multiple. Esp. for B::CC.
ByteLoader 0.12 fix bytecode types, xgv_flags, xcv_flag were too small.
type bs_sv to also include PADNAME, PADLIST, PADNAMELIST as union.
Add t/testc.sh
Fix compile-time REGEXP

=item L<Carp> back to 1.45_01c

The perl5.28 Carp 1.49 update broke the B::C compiler by compile-time references
to too many packages for no apparent reason: warnings, overloading, overload,
UNIVERSAL::isa. Even the simpliest scripts could not be compiled anymore.

We rather suggest fixing the broken code by checking the warnings, as in the
changed tests. The infinite recursion bug in t/Carp_overloadless.t is handled
by use warnings FATAL => 'recursion' in the test, and your code should also.

The t/rt52610_crash.t with refcounted stack corruption is handled by
eval wrapping in the test as your code should also.

The next Carp written in XS will not have these limitations, but a PP
Carp should not overdo it. backtraces in critical error cases should
be stable and perform no additional unstable dynamic loading.

=item L<Compress::Raw::Zlib>

fix upstream deflate.
See L<https://github.com/madler/zlib/pull/327>

=item L<Cpanel::JSON::XS> 4.01

Simplify C<allow_singlequote> check, coverity cid #165321.
Remove logical dead code.

Added Cpanel::JSON::XS::Type as 2nd optional encode argument.
Removed calling get magic hooks twice in encode.
Fix setlocale thread race for older perls.

=item L<Data::Dumper>  2.167_03

XS improvements

=item L<Devel::PPPort> 3.37_04

mkppport called PPPort_pm.PL without
passing through MAKEFLAGS. Add --quiet support there
Fix WIDEST_UTYPE

=item L<DynaLoader> 2.09c

Fix wrong usage of SvREFCNT_inc_simple_NN with a function, fixes a memory leak.

=item L<ExtUtils::Miniperl> 1.08

Support B<afl-fuzz> with L<afl-clang-fast|perlhacktips/"afl-fuzz">

=item L<ExtUtils::ParseXS> 3.36_03

skip C<PUTBACK;return;> on XSRETURN in PPCODE

remove perl5 incompatible C<__attribute__global__> needed for -flto.
C<XS_EXTERNAL> has it already.

=item L<I18N::LangTags>  0.42_01

Linkify docs.

=item L<IO>  1.38_01

run-time load Carp

=item L<IO::Socket::IP> 0.39_02

Fix new Autovivified hash slice warning

=item L<JSON::PP> 2.97001_04

Merged 2.97001 from cpan with ours.

=item L<Hash::Util>  0.22_01

XS formatting

=item L<HTTP::Tiny>  0.070_01

Fix new Autovivified hash slice warning

=item L<List::Util> 1.49_10

Fixup the new pairmap spill code.

=item L<Module::CoreList> 5.20180101c

=item L<Module::Load::Conditional> 0.68_02

Suppress new Autovivified hash slice warning

=item L<mro> 1.21_01

formatting, cperl enhancements

=item L<Net::Ping> 2.66

use NIx_NOSERV flag for windows.
better icmpv6 support.

=item L<Opcode> 1.39_03c

Added the new setstate and keepstate ops, variants of nextstate.

=item L<OS2::Process>  1.12_01

=item L<PerlIO::scalar> 0.29_01

=item L<PerlIO::via> 0.17_01

Protect from NULL arg.

=item L<Pod::Checker> 1.73_01

no strict hashpairs

=item L<Term::ReadKey> 2.37_03

Protect from fileno returning -1, invalid file arg.
Reformatted.

=item L<Tie::Hash::NamedCapture> 0.10_01

use croak_no_modify_sv()

=item L<Unicode::Collate> 1.25_01

Skip redefinition warnings on cperl since 5.27.2

=item L<Unicode::UCD>  0.68_01

=item L<Win32>  0.52_01

=item L<XSLoader> 1.04c

Fix wrong usage of SvREFCNT_inc_simple_NN with a function, fixes a memory leak.

=back

=head2 Removed Modules and Pragmata

=over 4

=item L<Locale::Codes> 3.55

Deprecated with v5.27.2c

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.

F<autodoc.pl> now parses F<pod/perlapio.pod> for cross-checking
against F<pod/perlapi.pod>

Additionally, the following selected changes have been made:

=head3 L<perlapio>

=over 4

=item *

Completed the documentation of the PerlIO API.
Removed wrong missing links from documented PerlIO functions from L<perlapi>.
Add all missing functions, and inter-linked them.

=back

=head3 L<perlembed>

=over 4

=item *

An example in L<perlembed> used the string value of C<ERRSV> as a
format string when calling croak().  If that string contains format
codes such as C<%s> this could crash the program.

This has been changed to a call to croak_sv().

An alternative could have been to supply a trivial format string:

  croak("%s", SvPV_nolen(ERRSV));

or as a special case for C<ERRSV> simply:

  croak(NULL);

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here.  Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

=head2 New Diagnostics

XXX Newly added diagnostic messages go under here, separated into New Errors
and New Warnings

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

Warnings that a variable or subroutine "masks earlier declaration in same
...", or that an C<our> variable has been redeclared, have been moved to a
new warnings category "shadow".  Previously they were in category "misc".

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go here.
Most of these are built within the directory F<utils>.

[ List utility changes as a =head2 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head2 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as an =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarizing, although the bugs
that they represent may be covered elsewhere.

XXX If there were no significant test changes, say this:

Tests were added and changed to reflect the other additions and changes
in this release.

XXX If instead there were significant changes, say this:

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

[ List each test improvement as an =item entry ]

=over 4

=item *

C<make minitest> can now be successfully be run directly after C<make miniperl>.
The unicode datafiles are now built before, and tests pass even if no module
was built or mktables failed.

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as an =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not.  These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms.  This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item Windows

File test operators for Unix permission bits that don't exist on a
particular platform, such as C<-k> (sticky bit) on Windows, now check that
the file being tested exists before returning the blanket false result,
and yield the appropriate errors if the argument doesn't refer to a file.

=item cygwin

threads became unstable with some upstream merges.
default now to C<-Uuseithreads>.

=back

=head1 Internal Changes

=over 4

=item *

A new API function L<perlapi/dump_sub_cv> has been added
to avoid faking a slim CV to a full GV. cperl-only.

=item *

A new compiler C<#define>, C<dTHX_DEBUGGING>. has been added.  This is
useful for XS or C code that only need the thread context because their
debugging statements that get compiled only under C<-DDEBUGGING> need
one.

=item *

A new API function L<perlapi/Perl_setlocale> has been added.

=item *

L<perlapi/sync_locale> has been revised to return a boolean as to
whether the system was using the global locale or not.

=item *

A new kind of magic scalar, called a "nonelem" scalar, has been introduced.
It is stored in an array to denote a nonexistent element, whenever such an
element is accessed in a potential lvalue context.  It replaces the
existing "defelem" (deferred element) magic wherever this is possible,
being significantly more efficient.  This means that
C<some_sub($sparse_array[$nonelem])> no longer has to create a new magic
defelem scalar each time, as long as the element is within the array.

It partially fixes the rare bug of deferred elements getting out of sync
with their arrays when the array is shifted or unshifted.  [perl #132729]

=item *

With a threaded perl, GV's are relocated as READONLY PADs.
Add an abstraction L<perlintern/op_gv_set> to simplify that.

=item *

Removed the obsolete C<OA_PADOP> class. Invalid and unused since 5.6.0.
Kept C<OP_IS_PADOP> and made it legal for threaded perls.
The L<B> modules still print PADOP C<'#'> ops as such, which were dynamically
converted from SVOP's to PADOP's threaded.

=back

=head1 Selected Bug Fixes

=over 4

=item *

C<-Dx> has been fixed to accept slim CVs without fake GV.

=item *

On threaded perls where the decimal point (radix) character is not a
dot, it has been possible for a race to occur between threads when one
needs to use the real radix character.  This has now been fixed by use
of a mutex on systems without thread-safe locales, and the problem just
doesn't come up on those with thread-safe locales.

=item *

Fixed error message for illegal charnames, and avoid passing NUL into
the charnames lookup, which is a potential security threat.  E.g. on
"\N{TILDE\000}" report "Missing right brace on \\N\{\}" as before
with 5.27.2 and on "\N{TILDE\001}" report "Unknown charname 'TILDE\1'" and
not "Unknown charname 'TILDE'".  perl5.27.5 started reporting those
errors with "Unknown charname 'TILDE'" hiding all characters behind
the embedded NUL or any non-printable character.
L<[cperl #342]|https://github.com/perl11/cperl/issues/342>

=item *

Fixed endless loop in the parser with a syntax error on an aborted
class declaration, such as e.g. with C<class $>. The previous behavior
was repeating the warning message C<Bareword found where operator expected>
endlessly.
L<[cperl #346]|https://github.com/perl11/cperl/issues/346>

=item *

Fixed autovivifaction of hash slices and key/value hash slices in sub args.
They are now consistent with a list of hash elements.
hash slices still autovivify in for loops.

There's also a new syntax warning about this change,
L<perldiag/"No autovivification of hash slice anymore">
L<[cperl #347]|https://github.com/perl11/cperl/issues/347>.

=item *

Fixed wrong C<panic: distributed hash flood> when dealing with
large C<%^H> hints hashes, with >127 entries, such as C<_charnames.pm> in
C<Regexp::Common>. Fixed the logic dealing with such a hints hash.
L<[cperl #350]|https://github.com/perl11/cperl/issues/350>.

=item *

Fixed endless rpeep compiler loop with a constant loop and a nested loop,
which e.g. broke C<Net:HTTP>.
L<[cperl #349]|https://github.com/perl11/cperl/issues/349>.

=item *

Fixed missing compile-time AvSHAPED detection in nested scopes.
E.g.:

    my @a[1]; sub { $a[0]->[5] = 1 }->(); # mderef_u
    my @b[1]; sub { $b[0] = 1 }->();      # aelemfast_lex_u

See L<[cperl #354]|https://github.com/perl11/cperl/issues/354>.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here.  Any
tests that had to be C<TODO>ed for the release would be noted here.  Unfixed
platform specific bugs also go here.

[ List each fix as an =item entry ]

=over 4

=item *

XXX

=item *

Fixed return type of C<DynaLoader::dl_find_symbol_anywhere()>,
the address, not the name.
L<[cperl #352]|https://github.com/perl11/cperl/issues/352>.

=back

=head1 Errata From Previous Releases

=over 4

=item *

XXX Add anything here that we forgot to add, or were mistaken about, in
the perldelta of a previous release.

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX Generate this with:

    cperl Porting/acknowledgements.pl cperl-5.27.2..HEAD -c

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
